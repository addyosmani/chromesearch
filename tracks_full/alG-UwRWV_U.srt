1
00:00:00,000 --> 00:00:02,000

2
00:00:02,000 --> 00:00:04,059
PETE LEPAGE: All right,
welcome, everybody.

3
00:00:04,059 --> 00:00:05,140
My name's Pete LePage.

4
00:00:05,140 --> 00:00:07,860
I'm a developer advocate on
the Chrome team at Google.

5
00:00:07,860 --> 00:00:09,160
JOHN MELLOR: And I'm
John Mellor.

6
00:00:09,160 --> 00:00:12,070
I work on Chrome for Android
web browser in London.

7
00:00:12,070 --> 00:00:12,820
PETE LEPAGE: Awesome.

8
00:00:12,820 --> 00:00:15,850
Today we're going to be talking
about High DPI and how

9
00:00:15,850 --> 00:00:18,400
we make the web beautiful.

10
00:00:18,400 --> 00:00:20,950
Everybody here got a
Pixel yesterday,

11
00:00:20,950 --> 00:00:22,980
and it's pretty awesome.

12
00:00:22,980 --> 00:00:25,330
You've all probably been surfing
around a little bit on

13
00:00:25,330 --> 00:00:28,230
it, and you've seen that some
websites look pretty

14
00:00:28,230 --> 00:00:33,320
fantastic, and other sites, uh,
they don't look so good.

15
00:00:33,320 --> 00:00:36,560
So we're going to talk about how
to make all websites look

16
00:00:36,560 --> 00:00:37,810
pretty fantastic.

17
00:00:37,810 --> 00:00:42,140
Now, how many people have
an HDTV at home?

18
00:00:42,140 --> 00:00:45,480
Yeah, pretty much everybody,
right?

19
00:00:45,480 --> 00:00:46,630
It looks beautiful up here.

20
00:00:46,630 --> 00:00:48,510
If you're a sports fan,
everything looks sharp.

21
00:00:48,510 --> 00:00:48,980
It's clear.

22
00:00:48,980 --> 00:00:51,290
You can see all the little
balls, you can see the pucks,

23
00:00:51,290 --> 00:00:53,250
whatever it happens to be.

24
00:00:53,250 --> 00:00:56,840
But every once in a while, you
come across a TV show that's

25
00:00:56,840 --> 00:00:58,420
broadcast in standard def.

26
00:00:58,420 --> 00:01:02,070
And you kind of go, wow,
this looks like--

27
00:01:02,070 --> 00:01:03,320
well, it just looks
bad, right?

28
00:01:03,320 --> 00:01:05,420
It just doesn't look
very good.

29
00:01:05,420 --> 00:01:11,800
We're at the same point with
high DPI displays as we are

30
00:01:11,800 --> 00:01:15,160
with HDTVs five years ago.

31
00:01:15,160 --> 00:01:20,710
For the most part, it's up to
the broadcasters to send out

32
00:01:20,710 --> 00:01:21,730
high def channels.

33
00:01:21,730 --> 00:01:27,540
Well, now it's up to us, as web
developers, to send out

34
00:01:27,540 --> 00:01:30,760
the high def content
to our users.

35
00:01:30,760 --> 00:01:34,340
So we're going to talk about
how we get there.

36
00:01:34,340 --> 00:01:38,110
So let's just sort of think a
little bit about how an HDTV

37
00:01:38,110 --> 00:01:43,420
works and how the high
DPI displays work.

38
00:01:43,420 --> 00:01:47,700
So with a high def TV,
it's got about 1080

39
00:01:47,700 --> 00:01:49,090
pixels high, right?

40
00:01:49,090 --> 00:01:54,780
Well, a standard def image is
only about 480 pixels high.

41
00:01:54,780 --> 00:01:57,070
So you've got two options.

42
00:01:57,070 --> 00:02:02,120
One, you can display the image
at a one-to-one pixel ratio.

43
00:02:02,120 --> 00:02:03,580
So it's not expanded out.

44
00:02:03,580 --> 00:02:04,480
Everything looks sharp.

45
00:02:04,480 --> 00:02:05,750
It looks good.

46
00:02:05,750 --> 00:02:08,330
But you've got all those black
borders around everything, and

47
00:02:08,330 --> 00:02:11,240
it just looks, meh,
not so good.

48
00:02:11,240 --> 00:02:15,050
Or you can blow it up so it fits
the full resolution of

49
00:02:15,050 --> 00:02:16,340
your screen.

50
00:02:16,340 --> 00:02:18,650
And then it starts to
get a little blurry.

51
00:02:18,650 --> 00:02:22,530
And that's what's happening
on high DPI displays.

52
00:02:22,530 --> 00:02:24,150
That's what happens
on your phone.

53
00:02:24,150 --> 00:02:25,620
That's what happens
on the Pixel.

54
00:02:25,620 --> 00:02:29,676
The browser blows those images
up to fit on screen.

55
00:02:29,676 --> 00:02:32,420

56
00:02:32,420 --> 00:02:35,580
So John, there's so many
pixel types that

57
00:02:35,580 --> 00:02:36,270
we got to deal with.

58
00:02:36,270 --> 00:02:38,890
Why don't we talk about
those for a sec.

59
00:02:38,890 --> 00:02:40,740
JOHN MELLOR: So there are
essentially three kinds of

60
00:02:40,740 --> 00:02:43,920
pixels that web developers
need to worry about.

61
00:02:43,920 --> 00:02:46,790
The first kind, it's
a device pixel.

62
00:02:46,790 --> 00:02:50,240
This is one physical hardware
pixel, a single RGP unit in

63
00:02:50,240 --> 00:02:51,330
the display.

64
00:02:51,330 --> 00:02:53,970
And it's the smallest unit,

65
00:02:53,970 --> 00:02:55,620
So then there's a
second kind--

66
00:02:55,620 --> 00:02:58,260
device independent pixel, or
DIP, as we're going to call it

67
00:02:58,260 --> 00:02:59,520
from now on.

68
00:02:59,520 --> 00:03:01,000
It's an abstract unit.

69
00:03:01,000 --> 00:03:03,580
It's a fixed multiple
of device pixels.

70
00:03:03,580 --> 00:03:07,170
So once they're a 2x device,
each device independent pixel,

71
00:03:07,170 --> 00:03:11,520
DIP, is a two-by-two vector
angle of device pixels.

72
00:03:11,520 --> 00:03:12,270
OK,

73
00:03:12,270 --> 00:03:15,570
And the third kind
is CSS pixels.

74
00:03:15,570 --> 00:03:17,540
These are the ones we're all
familiar with from CSS--

75
00:03:17,540 --> 00:03:20,710
the px unit.

76
00:03:20,710 --> 00:03:23,522
And so if you want to follow
best practices, and you've got

77
00:03:23,522 --> 00:03:27,050
a width=devi viewport-- we'll go
into what it means later--

78
00:03:27,050 --> 00:03:31,530
a CSS pixel and a DIP are
initially the same thing,

79
00:03:31,530 --> 00:03:33,520
until you zoom in.

80
00:03:33,520 --> 00:03:36,910
When you zoom in, the CSS
pixels gets scaled up.

81
00:03:36,910 --> 00:03:40,000
But the DIP is a physical
thing, and so that

82
00:03:40,000 --> 00:03:42,910
stays the same size.

83
00:03:42,910 --> 00:03:45,535
OK, so this leads to some
confusion, because they do

84
00:03:45,535 --> 00:03:47,650
seem quite similar,
ultimately.

85
00:03:47,650 --> 00:03:51,130
And in fact, if you read the
specs like CSS and HTML,

86
00:03:51,130 --> 00:03:53,850
you'll notice the specs never
actually refer to these DIPs.

87
00:03:53,850 --> 00:03:55,590
They always talk about
CSS pixels.

88
00:03:55,590 --> 00:03:59,120
And they use that term, CSS
pixels, to refer to both DIPs

89
00:03:59,120 --> 00:04:00,980
and CSS pixels.

90
00:04:00,980 --> 00:04:03,820
So you have to be a little
bit careful.

91
00:04:03,820 --> 00:04:06,280
As web developers, we're most
concerned about CSS pixels,

92
00:04:06,280 --> 00:04:09,230
because that's what we actually
use in our layouts,

93
00:04:09,230 --> 00:04:12,460
and this mysterious device
pixel ratio.

94
00:04:12,460 --> 00:04:16,399
So let's go into a practical
example.

95
00:04:16,399 --> 00:04:18,130
So this is a Nexus Four.

96
00:04:18,130 --> 00:04:22,210
It's a 2x device, and we'll put
on [? developer ?] hats in

97
00:04:22,210 --> 00:04:24,250
a minute to look at what that
actually means and how we

98
00:04:24,250 --> 00:04:25,560
calculate it.

99
00:04:25,560 --> 00:04:27,860
But all you need to know for now
is it's a fixed value for

100
00:04:27,860 --> 00:04:29,306
the device.

101
00:04:29,306 --> 00:04:32,250
The Nexus Four is
also 768 device

102
00:04:32,250 --> 00:04:34,790
pixels wide in portrait.

103
00:04:34,790 --> 00:04:38,940
And to get the mobile device
independent pixels of width,

104
00:04:38,940 --> 00:04:44,890
you divide this by the device
pixel ratio, and you get 384.

105
00:04:44,890 --> 00:04:47,960
The width for this device in CSS
pixels, well, that varies.

106
00:04:47,960 --> 00:04:49,700
So it varies based on the
viewport, which we'll go into

107
00:04:49,700 --> 00:04:52,910
later, and it varies
on the zoom level.

108
00:04:52,910 --> 00:04:55,140
On the mobile site, it'll
often start off

109
00:04:55,140 --> 00:04:56,690
as being 384 pixels.

110
00:04:56,690 --> 00:04:58,200
It'll match them with DIPs.

111
00:04:58,200 --> 00:05:01,220
But on a desktop site, it'll
often start out being 980

112
00:05:01,220 --> 00:05:02,540
pixels wide.

113
00:05:02,540 --> 00:05:06,590
And as you zoom in, the
page is scaled up.

114
00:05:06,590 --> 00:05:09,410
It stays the same width, but
because you can see less of

115
00:05:09,410 --> 00:05:12,720
the page on screen at one time,
the number of CSS pixels

116
00:05:12,720 --> 00:05:18,400
across the width of the screen
decreases when you zoom in.

117
00:05:18,400 --> 00:05:21,160
So Pete, how does the DPI
vary across devices?

118
00:05:21,160 --> 00:05:23,780
PETE LEPAGE: So it's really
one of those fun things.

119
00:05:23,780 --> 00:05:27,040
The device pixel ratio can go
anywhere from one for a simple

120
00:05:27,040 --> 00:05:32,410
1x device, all the way up to
3 with the new Galaxy S IV.

121
00:05:32,410 --> 00:05:35,910
And it's everything
in between.

122
00:05:35,910 --> 00:05:38,560
The Nexus S is a 1.5x device.

123
00:05:38,560 --> 00:05:41,210
The Nexus is a 1.3.

124
00:05:41,210 --> 00:05:44,310
Before this session, John and
I did a little bit of math,

125
00:05:44,310 --> 00:05:47,210
and we figured out, we think
for people sitting in the

126
00:05:47,210 --> 00:05:52,330
front row, that projector
is about a 0.5x display.

127
00:05:52,330 --> 00:05:55,510
But for the people in the
back, it's a 2x display.

128
00:05:55,510 --> 00:05:58,400
And we'll talk about
that in a sec.

129
00:05:58,400 --> 00:06:03,720
So notice that the different
DPIs between the Nexus S and

130
00:06:03,720 --> 00:06:08,230
the Chromebook Pixel is only
four DPI different, right?

131
00:06:08,230 --> 00:06:12,430
Four DPI should not matter
on how much it goes

132
00:06:12,430 --> 00:06:14,500
from a 1.5 to a 2.

133
00:06:14,500 --> 00:06:18,350
It shouldn't matter going back
and forth between the front

134
00:06:18,350 --> 00:06:19,190
row and the back row.

135
00:06:19,190 --> 00:06:22,710
It has to do with the distance
that you're sitting away from

136
00:06:22,710 --> 00:06:24,560
the device.

137
00:06:24,560 --> 00:06:27,400
So I want everybody to do a
little experiment for me.

138
00:06:27,400 --> 00:06:28,220
Take your hand.

139
00:06:28,220 --> 00:06:30,110
Hold it out in front of your
face, just like this.

140
00:06:30,110 --> 00:06:32,830
All right, now look at the
size of your hand.

141
00:06:32,830 --> 00:06:34,980
All right, now bring your hand
right up to your nose, like

142
00:06:34,980 --> 00:06:36,360
right up to your nose.

143
00:06:36,360 --> 00:06:37,880
Notice how your hand
got bigger?

144
00:06:37,880 --> 00:06:39,100
You can take your
hand down now.

145
00:06:39,100 --> 00:06:41,030
Right, your hand got
a lot bigger.

146
00:06:41,030 --> 00:06:44,660
But your hand didn't change
size at all, right?

147
00:06:44,660 --> 00:06:47,390
It comes down to the visual
angle that you're

148
00:06:47,390 --> 00:06:49,600
looking at your hand.

149
00:06:49,600 --> 00:06:51,540
So the device pixel
ratio is really

150
00:06:51,540 --> 00:06:53,850
about that visual angle.

151
00:06:53,850 --> 00:07:03,440
The CSS spec defines a pixel as
the visual angle of a pixel

152
00:07:03,440 --> 00:07:08,640
at 28 inches for a
96 DPI display.

153
00:07:08,640 --> 00:07:12,720
So they've said, all right, a
1x display should have about

154
00:07:12,720 --> 00:07:16,150
96 pixels at 28 inches.

155
00:07:16,150 --> 00:07:21,840
So for a phone, which we hold
much closer, we need it to

156
00:07:21,840 --> 00:07:23,880
have a higher pixel density.

157
00:07:23,880 --> 00:07:28,520
So instead of having a 96 DPI
display, it needs at least

158
00:07:28,520 --> 00:07:31,060
about 160 DPI.

159
00:07:31,060 --> 00:07:35,340
So actually, when we did the
math, this projector is about

160
00:07:35,340 --> 00:07:39,410
a 0.16 DPI, if you ever
want to do this.

161
00:07:39,410 --> 00:07:42,770
Now, if you want to calculate
these out, the formula's here.

162
00:07:42,770 --> 00:07:43,780
You can do this on your own.

163
00:07:43,780 --> 00:07:46,780
It's not really that hard, and
it's kind of fun just to

164
00:07:46,780 --> 00:07:47,830
figure this out.

165
00:07:47,830 --> 00:07:51,410
In fact, your TV at home, if
you've got an HDTV and you're

166
00:07:51,410 --> 00:07:54,050
sitting about six feet away from
it, you've got a high DPI

167
00:07:54,050 --> 00:07:55,320
display at home.

168
00:07:55,320 --> 00:07:58,530
I bet you didn't realize you
probably have multiple high

169
00:07:58,530 --> 00:08:01,570
DPI displays at home.

170
00:08:01,570 --> 00:08:04,890
So we've talked about a lot
of the theoretical stuff.

171
00:08:04,890 --> 00:08:07,540
Let's jump in and talk about the
practical stuff, like how

172
00:08:07,540 --> 00:08:09,930
we actually do this.

173
00:08:09,930 --> 00:08:10,860
JOHN MELLOR: So let's say
you want to build a

174
00:08:10,860 --> 00:08:12,670
high DPI phone site.

175
00:08:12,670 --> 00:08:15,030
OK, so you're looking on Nexus
7 or whatever, and you see

176
00:08:15,030 --> 00:08:19,830
that's 768 device pixels wide.

177
00:08:19,830 --> 00:08:21,240
That's what the spec
sheet says.

178
00:08:21,240 --> 00:08:23,710
You go online, you look at
google.com at Nexus 4 tech

179
00:08:23,710 --> 00:08:25,920
specs, and that's
what you see.

180
00:08:25,920 --> 00:08:28,476
So you want to build a
pixel perfect design.

181
00:08:28,476 --> 00:08:31,650
The natural thing to do is to
want a one-to-one ratio

182
00:08:31,650 --> 00:08:34,740
between device pixels
and CSS pixels.

183
00:08:34,740 --> 00:08:36,495
So how about this viewport?

184
00:08:36,495 --> 00:08:39,090
You said your width is 768,
and that's how wide

185
00:08:39,090 --> 00:08:40,380
your page will be.

186
00:08:40,380 --> 00:08:43,700
Well, this is actually
a really bad idea.

187
00:08:43,700 --> 00:08:46,120
If you look at what actually
happens, on the left hand

188
00:08:46,120 --> 00:08:50,250
screen shot, that's what you
want to happen, and on the

189
00:08:50,250 --> 00:08:51,960
right hand screen shot, that's
what actually happens.

190
00:08:51,960 --> 00:08:53,360
It looks tiny.

191
00:08:53,360 --> 00:08:56,510
Because the page is so wide, the
browser has zoomed out the

192
00:08:56,510 --> 00:08:59,410
page so that it fits
fully on screen.

193
00:08:59,410 --> 00:09:01,860
And as a result, everything's
gone really small.

194
00:09:01,860 --> 00:09:04,130
You can compensate for this,
but you have to go through

195
00:09:04,130 --> 00:09:08,000
every single width, height, font
size, margin, in every

196
00:09:08,000 --> 00:09:10,440
single CSS file of
your entire site.

197
00:09:10,440 --> 00:09:11,410
It's a maintenance nightmare.

198
00:09:11,410 --> 00:09:13,240
It's not worth it.

199
00:09:13,240 --> 00:09:15,440
It's also not even possible.

200
00:09:15,440 --> 00:09:18,955
In current browsers, when you
use that kind of viewport,

201
00:09:18,955 --> 00:09:22,070
they'll mess up your font sizes,
zooming will go weird,

202
00:09:22,070 --> 00:09:24,670
and it's because they'll think
you're a desktop site, even

203
00:09:24,670 --> 00:09:28,320
though you actually meant
it to be a mobile site.

204
00:09:28,320 --> 00:09:30,360
There was also a way of doing
this in the past with target

205
00:09:30,360 --> 00:09:32,910
density DPI in your viewport.

206
00:09:32,910 --> 00:09:33,810
That's been deprecated.

207
00:09:33,810 --> 00:09:36,230
It doesn't work in Chrome,
Safari, Firefox, et cetera,

208
00:09:36,230 --> 00:09:40,130
and never will, so ignore it.

209
00:09:40,130 --> 00:09:43,010
So instead of a really wide
viewport, how about a

210
00:09:43,010 --> 00:09:46,215
fixed-width viewport of a width
that's more similar to

211
00:09:46,215 --> 00:09:47,860
the width of a phone?

212
00:09:47,860 --> 00:09:50,960
I've heard that 320 is common.

213
00:09:50,960 --> 00:09:56,410
So this is OK for legacy
fixed-width, phone-only sites.

214
00:09:56,410 --> 00:09:58,160
But never use this
for new sites or

215
00:09:58,160 --> 00:10:00,770
sites aimed at tablets.

216
00:10:00,770 --> 00:10:01,450
Why?

217
00:10:01,450 --> 00:10:05,400
Well, again, look at this
site on Nexus 4.

218
00:10:05,400 --> 00:10:08,890
Nexus 4 was 384 DIPs
wide, and so it's

219
00:10:08,890 --> 00:10:11,330
scaled from 320 to 384.

220
00:10:11,330 --> 00:10:12,250
That's OK.

221
00:10:12,250 --> 00:10:14,270
It looks decent.

222
00:10:14,270 --> 00:10:15,430
But a real killer is
when you rotate

223
00:10:15,430 --> 00:10:17,470
your phone to landscape.

224
00:10:17,470 --> 00:10:18,640
And look at this.

225
00:10:18,640 --> 00:10:21,090
The toolbar is blown
out of proportion.

226
00:10:21,090 --> 00:10:22,620
It's enormous.

227
00:10:22,620 --> 00:10:24,600
You can't even see the search
box on screen because it's

228
00:10:24,600 --> 00:10:29,005
been pushed so far down as
the page is scaled up.

229
00:10:29,005 --> 00:10:31,470
And if you try this on a tablet,
can you imagine what's

230
00:10:31,470 --> 00:10:32,840
going to happen now?

231
00:10:32,840 --> 00:10:36,170
We're going to scale this up
from 320 to 1280, and it's

232
00:10:36,170 --> 00:10:38,840
enormous now.

233
00:10:38,840 --> 00:10:43,750
So yeah, the only valid way to
make a mobile website is to

234
00:10:43,750 --> 00:10:47,620
design your site with flexible
width layout, even if you're

235
00:10:47,620 --> 00:10:51,260
making a dedicated mobile
site, and use a

236
00:10:51,260 --> 00:10:53,270
width=device-width viewport.

237
00:10:53,270 --> 00:10:55,860
That one, in fact.

238
00:10:55,860 --> 00:10:59,180
So you'll see initial
scale here.

239
00:10:59,180 --> 00:11:03,710
That's there to fix a feature
in iOS where, in landscape,

240
00:11:03,710 --> 00:11:05,650
while often making your viewport
wider, it'll zoom in

241
00:11:05,650 --> 00:11:09,020
on your page, which
looks a bit weird.

242
00:11:09,020 --> 00:11:11,430
But the important thing is, this
viewport allows you just

243
00:11:11,430 --> 00:11:13,690
to zoom in and out, which
is recommended for

244
00:11:13,690 --> 00:11:16,010
accessibility reasons.

245
00:11:16,010 --> 00:11:19,490
If you must disallow pinch
zoom, which happens on a

246
00:11:19,490 --> 00:11:21,570
couple of sites-- say you're
doing a multi-finger touch

247
00:11:21,570 --> 00:11:23,880
painting app or you're building
Google Maps, or

248
00:11:23,880 --> 00:11:25,560
something like that--

249
00:11:25,560 --> 00:11:27,590
then you can use a
second viewport.

250
00:11:27,590 --> 00:11:30,280
But try to avoid it, because
letting users zoom in is a

251
00:11:30,280 --> 00:11:32,950
nice thing to do.

252
00:11:32,950 --> 00:11:36,920
And so these two viewports give
you the ideal page width

253
00:11:36,920 --> 00:11:39,660
on all devices.

254
00:11:39,660 --> 00:11:44,860
Use one of those for all mobile
or responsive sites.

255
00:11:44,860 --> 00:11:47,630
Now, the device width, which
he mentioned here, it's

256
00:11:47,630 --> 00:11:49,050
actually in DIPs.

257
00:11:49,050 --> 00:11:52,310
So this means you get the same
width of your page in CSS

258
00:11:52,310 --> 00:11:57,050
pixels whether you're on a low
DPI or a high DPI device.

259
00:11:57,050 --> 00:11:58,290
This is good.

260
00:11:58,290 --> 00:12:00,990
This means the CSS and
JavaScript you wrote for your

261
00:12:00,990 --> 00:12:05,600
low DPI device will just work
for your high DPI device.

262
00:12:05,600 --> 00:12:08,960
It's like what Pete was
saying about HDTV.

263
00:12:08,960 --> 00:12:11,100
Basically, [? it allows you ?]
to scale your site up, and

264
00:12:11,100 --> 00:12:15,410
it'll all look in proportion,
like an HDTV playing SD video.

265
00:12:15,410 --> 00:12:16,610
Except that [? bell's ?]
is a bit smarter.

266
00:12:16,610 --> 00:12:20,130
Like for text and CSS features
like border-radius, it'll

267
00:12:20,130 --> 00:12:23,770
render it all crisply, taking
full advantage of the

268
00:12:23,770 --> 00:12:26,020
available pixels.

269
00:12:26,020 --> 00:12:28,200
So the same widths, font sizes,
borders, and so on

270
00:12:28,200 --> 00:12:31,560
work, but a few things you
might want to tweak.

271
00:12:31,560 --> 00:12:32,810
So Pete--

272
00:12:32,810 --> 00:12:35,135

273
00:12:35,135 --> 00:12:38,700
PETE LEPAGE: All right, so if
we want to display high DPI

274
00:12:38,700 --> 00:12:41,540
assets in our markup or in our
CSS, there's a couple of

275
00:12:41,540 --> 00:12:42,910
things that we can do.

276
00:12:42,910 --> 00:12:46,530
For CSS, we need
to use a rather

277
00:12:46,530 --> 00:12:49,570
large media query today.

278
00:12:49,570 --> 00:12:54,280
This is going to get a lot
easier, and most browsers are

279
00:12:54,280 --> 00:12:56,620
standardizing on
this line here.

280
00:12:56,620 --> 00:13:03,240
So you can see that we say,
min resolution 1.5 DPPX.

281
00:13:03,240 --> 00:13:05,980
Whoever chose those set of
letters right next to each

282
00:13:05,980 --> 00:13:07,750
other, I'd like to
just hit, because

283
00:13:07,750 --> 00:13:08,820
they're not fun to say.

284
00:13:08,820 --> 00:13:14,240
But in any event, 1.5
DPPX will do that.

285
00:13:14,240 --> 00:13:16,810
But for today, you need
to include all

286
00:13:16,810 --> 00:13:17,690
four of those lines.

287
00:13:17,690 --> 00:13:20,950
So you need the one for
WebKit, for Opera.

288
00:13:20,950 --> 00:13:23,920
But I want to point out the
third line there, the min

289
00:13:23,920 --> 00:13:26,960
resolution 144 DPI, because
that's also going to work in

290
00:13:26,960 --> 00:13:27,750
the future.

291
00:13:27,750 --> 00:13:33,430
Now, you'd think that this
device, which is 326, or 236,

292
00:13:33,430 --> 00:13:36,780
or something like that, this
should classify as that.

293
00:13:36,780 --> 00:13:43,290
What that number is is that's
the number of pixels at the

294
00:13:43,290 --> 00:13:44,910
standard level.

295
00:13:44,910 --> 00:13:47,550
So the CSS specs says
it should be

296
00:13:47,550 --> 00:13:50,820
at 96 for a 1x device.

297
00:13:50,820 --> 00:13:53,940
So we want this to work on a
1.5x device, so we take that

298
00:13:53,940 --> 00:13:56,270
96, multiply it by 1.5.

299
00:13:56,270 --> 00:13:58,930
That's where the 144
is coming from.

300
00:13:58,930 --> 00:14:02,210
So if we wanted it to be a 2x
device, we'd need to do just

301
00:14:02,210 --> 00:14:05,510
96 times 2.

302
00:14:05,510 --> 00:14:09,740
So that's going to work great
for displaying background

303
00:14:09,740 --> 00:14:11,650
images and stuff
in our markup.

304
00:14:11,650 --> 00:14:15,700
If we want to query this in
JavaScript, we've got the

305
00:14:15,700 --> 00:14:19,050
ability to be able to say
window.devicePixelRatio and

306
00:14:19,050 --> 00:14:22,120
we'll get our device pixel ratio
back from the browser.

307
00:14:22,120 --> 00:14:24,830
Now, this works pretty much
across all browsers.

308
00:14:24,830 --> 00:14:28,730
The only place where it doesn't
work today is IE.

309
00:14:28,730 --> 00:14:31,040
They're aware of it, so
hopefully we'll see that in

310
00:14:31,040 --> 00:14:32,300
the near future.

311
00:14:32,300 --> 00:14:35,950
But the nice thing about both of
these is if you specify the

312
00:14:35,950 --> 00:14:43,970
markup in your CSS or you have
this and it fails, it's going

313
00:14:43,970 --> 00:14:46,840
to work, because you've
already got

314
00:14:46,840 --> 00:14:49,950
fallbacks in there.

315
00:14:49,950 --> 00:14:53,520
Now, most browsers today are
pretty awesome at sub-pixel

316
00:14:53,520 --> 00:14:54,250
layout, right?

317
00:14:54,250 --> 00:14:56,410
You can say, hey, I want
something to be half a pixel

318
00:14:56,410 --> 00:14:58,540
wide, and it'll go
do that thing.

319
00:14:58,540 --> 00:15:02,100
So that should mean I should be
able to, on a high def or a

320
00:15:02,100 --> 00:15:05,200
high DPI display, I can go do
something like this, where I

321
00:15:05,200 --> 00:15:10,740
say, on a 1x display, I want
a border of one CSS pixel.

322
00:15:10,740 --> 00:15:14,870
And on a 1x display, one CSS
pixel is going to be one

323
00:15:14,870 --> 00:15:16,380
hardware pixel.

324
00:15:16,380 --> 00:15:22,210
But on a 2x display, I want a
half a CSS pixel, which is a

325
00:15:22,210 --> 00:15:25,770
one device pixel line.

326
00:15:25,770 --> 00:15:27,740
You think this works?

327
00:15:27,740 --> 00:15:28,793
Yeah, no.

328
00:15:28,793 --> 00:15:32,170
Of course not.

329
00:15:32,170 --> 00:15:43,970
On Firefox and IE, they round
up, and they're always going

330
00:15:43,970 --> 00:15:46,960
to give you a one
pixel border.

331
00:15:46,960 --> 00:15:52,080
But on WebKit browsers,
they round down.

332
00:15:52,080 --> 00:15:53,760
So you get no border.

333
00:15:53,760 --> 00:15:58,090
So you want to really test
exhaustively if you want to

334
00:15:58,090 --> 00:15:59,270
use something like this.

335
00:15:59,270 --> 00:16:02,340
But realistically, if you want
to have something that thin,

336
00:16:02,340 --> 00:16:04,130
I'd avoid it right now.

337
00:16:04,130 --> 00:16:06,850
It's going to be a little bit
more of a pain in the butt

338
00:16:06,850 --> 00:16:08,100
than you want to deal with.

339
00:16:08,100 --> 00:16:11,090

340
00:16:11,090 --> 00:16:13,040
JOHN MELLOR: So now
some better news.

341
00:16:13,040 --> 00:16:16,870
If we're doing text,
text is great.

342
00:16:16,870 --> 00:16:20,010
You've got a mobile optimized
site with width=device-width,

343
00:16:20,010 --> 00:16:21,960
your text is going to
be the same size

344
00:16:21,960 --> 00:16:24,850
in DIPs on all devices.

345
00:16:24,850 --> 00:16:26,260
You don't have to do anything.

346
00:16:26,260 --> 00:16:28,640
So if you get out your ruler
now and you measured the

347
00:16:28,640 --> 00:16:31,690
actual physical size, it will
differ slightly going from,

348
00:16:31,690 --> 00:16:34,130
say, a phone to a desktop
or something.

349
00:16:34,130 --> 00:16:36,660
But that's because of what Pete
was saying earlier about

350
00:16:36,660 --> 00:16:38,100
the viewing distance.

351
00:16:38,100 --> 00:16:41,280
And you'll find that the visual
angle of the characters

352
00:16:41,280 --> 00:16:46,440
of your text will be the same,
even on the phone and desktop.

353
00:16:46,440 --> 00:16:49,010
So your text will be
similarly legible.

354
00:16:49,010 --> 00:16:51,190
It'll just be rendered slightly
more crisply on high

355
00:16:51,190 --> 00:16:53,375
DPI devices, [INAUDIBLE] taking
full advantage on the

356
00:16:53,375 --> 00:16:54,970
extra pixels.

357
00:16:54,970 --> 00:16:55,820
You're done here.

358
00:16:55,820 --> 00:16:58,100
Don't change a thing.

359
00:16:58,100 --> 00:17:01,650
Now, if you got the misfortune
of serving a desktop site to

360
00:17:01,650 --> 00:17:05,690
mobile browsers, now you're
in for a world of pain.

361
00:17:05,690 --> 00:17:08,089
So yeah, it's tricky.

362
00:17:08,089 --> 00:17:11,690
Desktop sites are 1,000 pixels
wide, give or take a bit.

363
00:17:11,690 --> 00:17:13,990
The browser's going to zoom them
out to fit the full page

364
00:17:13,990 --> 00:17:16,300
width on the screen.

365
00:17:16,300 --> 00:17:20,430
So on a portrait phone, which is
about 300 to 400 DIPs wide,

366
00:17:20,430 --> 00:17:23,465
this means your site's going to
be scaled down by a factor

367
00:17:23,465 --> 00:17:24,675
of three or so.

368
00:17:24,675 --> 00:17:26,300
And it's going to be tiny.

369
00:17:26,300 --> 00:17:27,390
But that's OK.

370
00:17:27,390 --> 00:17:30,930
You can zoom in, and by zooming
in, text will become

371
00:17:30,930 --> 00:17:33,220
legible again, right?

372
00:17:33,220 --> 00:17:37,810
Well, there's a slight problem
with this, as always.

373
00:17:37,810 --> 00:17:41,950
So when you got wide columns of
text, suddenly everything

374
00:17:41,950 --> 00:17:42,990
breaks down.

375
00:17:42,990 --> 00:17:46,500
Once you've zoomed in such that
the text is legible, the

376
00:17:46,500 --> 00:17:49,540
text is now wider than the
screen, which means you have

377
00:17:49,540 --> 00:17:52,140
to pan from side to side
for every line

378
00:17:52,140 --> 00:17:53,200
of text you're reading.

379
00:17:53,200 --> 00:17:54,090
PETE LEPAGE: Oh, come on.

380
00:17:54,090 --> 00:17:55,850
Who doesn't love that?

381
00:17:55,850 --> 00:17:56,220
JOHN MELLOR: Woo!

382
00:17:56,220 --> 00:17:57,155
Look I'm [? scrolling! ?]

383
00:17:57,155 --> 00:17:58,310
PETE LEPAGE: Yeah, no.

384
00:17:58,310 --> 00:17:59,980
JOHN MELLOR: It's just
not practical.

385
00:17:59,980 --> 00:18:03,220
So to combat this, when viewing
desktop sites with

386
00:18:03,220 --> 00:18:07,040
wide columns, many mobile
browsers reformat the text

387
00:18:07,040 --> 00:18:08,600
using a text auto-sizing
algorithm.

388
00:18:08,600 --> 00:18:13,070

389
00:18:13,070 --> 00:18:15,670
So on the left, you see this
page as it was originally

390
00:18:15,670 --> 00:18:18,490
designed, and on the right, you
see how it gets rendered

391
00:18:18,490 --> 00:18:21,790
in Chrome for Android
on a phone.

392
00:18:21,790 --> 00:18:24,600
You'll notice that the wide
left hand column has

393
00:18:24,600 --> 00:18:26,270
changed text size.

394
00:18:26,270 --> 00:18:32,350
The header has gone from 24 to
32 pixels, and the main body

395
00:18:32,350 --> 00:18:35,650
text has gone from 15
pixels to 26 pixels.

396
00:18:35,650 --> 00:18:39,856
But, in the meantime, the narrow
right hand column has

397
00:18:39,856 --> 00:18:44,990
stayed a constant 13 pixels
in font size.

398
00:18:44,990 --> 00:18:48,230
So why are narrow columns
different from wide columns?

399
00:18:48,230 --> 00:18:51,230
Well, this is what text
auto-sizing does.

400
00:18:51,230 --> 00:18:54,900
It permanently scales the CSS
font size of any wide columns

401
00:18:54,900 --> 00:18:58,960
of text, such that when you
double tap to zoom in on that

402
00:18:58,960 --> 00:19:03,230
block of text, which fits the
block to the screen width, the

403
00:19:03,230 --> 00:19:05,600
text will then be legible.

404
00:19:05,600 --> 00:19:08,590
This is used on mobile by
Chrome, Safari, Firefox,

405
00:19:08,590 --> 00:19:12,080
Internet Explorer, notable
exceptions being Opera and

406
00:19:12,080 --> 00:19:13,330
[INAUDIBLE].

407
00:19:13,330 --> 00:19:14,770

408
00:19:14,770 --> 00:19:16,420
You'll notice that not even the
font size nor the layout

409
00:19:16,420 --> 00:19:18,470
change when you zoom
in and out.

410
00:19:18,470 --> 00:19:21,840
This all happens when the
page is first laid out.

411
00:19:21,840 --> 00:19:25,800
So it's used by four browsers,
and you'll find that all of

412
00:19:25,800 --> 00:19:27,985
them have different
exciting quirks.

413
00:19:27,985 --> 00:19:30,290
PETE LEPAGE: Yay!

414
00:19:30,290 --> 00:19:32,380
JOHN MELLOR: So by now you're
probably wondering, how do I

415
00:19:32,380 --> 00:19:34,340
avoid text auto-sizing?

416
00:19:34,340 --> 00:19:35,220
It's kind of a fallback.

417
00:19:35,220 --> 00:19:37,380
The browser does it because
it has [? two  bits. ?]

418
00:19:37,380 --> 00:19:39,950
You never want it to happen.

419
00:19:39,950 --> 00:19:44,050
So because it triggers on wide
columns, by far the best thing

420
00:19:44,050 --> 00:19:49,020
to do is just make your
page narrower, OK?

421
00:19:49,020 --> 00:19:52,290
So ideally, you use responsive
web design techniques to

422
00:19:52,290 --> 00:19:56,390
reformat your page for mobile
device sizes, or, if you must,

423
00:19:56,390 --> 00:19:57,860
use a dedicated mobile site.

424
00:19:57,860 --> 00:20:01,620
But whatever you do, just make
sure it's a width=device-width

425
00:20:01,620 --> 00:20:04,640
narrow page.

426
00:20:04,640 --> 00:20:07,000
If you're stuck serving a
desktop page to mobile

427
00:20:07,000 --> 00:20:10,555
browsers, well, there's still
a bit you can do.

428
00:20:10,555 --> 00:20:13,770
You can split up your wide
columns of text into multiple

429
00:20:13,770 --> 00:20:17,400
narrower columns side by side.

430
00:20:17,400 --> 00:20:18,460
And that way, because
they're narrow,

431
00:20:18,460 --> 00:20:21,700
they won't get modified.

432
00:20:21,700 --> 00:20:25,270
So it sort of works, but
it's not great either.

433
00:20:25,270 --> 00:20:28,430
And then finally, there are some
ways you can disable text

434
00:20:28,430 --> 00:20:33,690
auto-sizing, but use this
only as a last resort.

435
00:20:33,690 --> 00:20:36,890
It'll disable it for the subtree
under that selector,

436
00:20:36,890 --> 00:20:40,590
but only use it for quirks like
a menu being auto-sized

437
00:20:40,590 --> 00:20:42,760
or other strange things
going on.

438
00:20:42,760 --> 00:20:46,010
Don't use it for wide columns of
text, or else, when you pan

439
00:20:46,010 --> 00:20:48,570
from side to side, users are
going to have the problem that

440
00:20:48,570 --> 00:20:51,160
we had earlier before and
are just going to

441
00:20:51,160 --> 00:20:52,410
give up on your site.

442
00:20:52,410 --> 00:20:56,000

443
00:20:56,000 --> 00:20:58,040
PETE LEPAGE: So we've talked
about text, we've talked about

444
00:20:58,040 --> 00:20:58,490
other stuff.

445
00:20:58,490 --> 00:21:02,840
But images really are one of the
most important things on

446
00:21:02,840 --> 00:21:04,160
our websites today.

447
00:21:04,160 --> 00:21:06,720
Talked yesterday during the
keynote that images are up to

448
00:21:06,720 --> 00:21:10,720
60%, or average about 60%
of the weight of a page.

449
00:21:10,720 --> 00:21:15,330
So let's talk about the web
images and the stuff that

450
00:21:15,330 --> 00:21:17,500
we're doing there.

451
00:21:17,500 --> 00:21:19,870
JOHN MELLOR: So it depends on
type of graphic what happens.

452
00:21:19,870 --> 00:21:23,420
For vector images, they'll
seamlessly get crisper on high

453
00:21:23,420 --> 00:21:25,310
DPI displays.

454
00:21:25,310 --> 00:21:27,380
The same thing happens for
text-- the browser just does

455
00:21:27,380 --> 00:21:29,050
everything for you.

456
00:21:29,050 --> 00:21:32,690
But with raster images, they'll
get stretched, usually

457
00:21:32,690 --> 00:21:36,325
using bilinear interpolation,
and you'll find they'll start

458
00:21:36,325 --> 00:21:38,760
looking really crap.

459
00:21:38,760 --> 00:21:42,900
So an obvious and future-proof
solution is to replace as many

460
00:21:42,900 --> 00:21:46,250
raster images as possible
with vector images.

461
00:21:46,250 --> 00:21:48,014
So how can you do that?

462
00:21:48,014 --> 00:21:50,450
PETE LEPAGE: Well, it would be
nice if we could use vector

463
00:21:50,450 --> 00:21:54,340
images for everything, but
obviously we can't.

464
00:21:54,340 --> 00:21:58,200
For graphics that have text on
it and if you want a specific

465
00:21:58,200 --> 00:22:02,380
font, using something like
Google Fonts or other web font

466
00:22:02,380 --> 00:22:05,360
services, or Unicode
characters, is

467
00:22:05,360 --> 00:22:06,250
a really good way.

468
00:22:06,250 --> 00:22:09,580
You can use Unicode characters
very easily for bullets as

469
00:22:09,580 --> 00:22:10,990
you're going through.

470
00:22:10,990 --> 00:22:13,090
If you're looking for a couple
of symbols, it works well for

471
00:22:13,090 --> 00:22:14,140
that as well.

472
00:22:14,140 --> 00:22:18,130
There's a bunch of really great
icon fonts that you can

473
00:22:18,130 --> 00:22:20,790
use that give you really
easy access to lots

474
00:22:20,790 --> 00:22:22,420
of different icons.

475
00:22:22,420 --> 00:22:25,420
But one of the problems with
icon fonts is that they're

476
00:22:25,420 --> 00:22:26,500
single color, right?

477
00:22:26,500 --> 00:22:30,550
You can't change the color of
one part of an icon and have

478
00:22:30,550 --> 00:22:32,690
another part some
different color.

479
00:22:32,690 --> 00:22:34,740
So that's where SVG works
really well--

480
00:22:34,740 --> 00:22:36,150
Scalable Vector Graphics.

481
00:22:36,150 --> 00:22:38,650
Because you can have it whatever
color you want, and

482
00:22:38,650 --> 00:22:42,560
because it's a vector graphic,
it can get bigger and smaller

483
00:22:42,560 --> 00:22:45,440
as easily as you want it to.

484
00:22:45,440 --> 00:22:48,870
And then finally, using CSS3,
if you've got gradients,

485
00:22:48,870 --> 00:22:52,290
backgrounds, rounded corners,
anything like that, it works

486
00:22:52,290 --> 00:22:55,920
really well for that
kind of stuff

487
00:22:55,920 --> 00:22:58,860
Now, we've talked a little bit
about background images

488
00:22:58,860 --> 00:23:01,720
already, so we won't spend too
much time on this, but just

489
00:23:01,720 --> 00:23:05,500
want to call out again, you need
to have these four lines.

490
00:23:05,500 --> 00:23:07,870
Now, this is great
for the 1.5x.

491
00:23:07,870 --> 00:23:09,830
If you want to have a
2x, you'd need to

492
00:23:09,830 --> 00:23:11,750
have another one.

493
00:23:11,750 --> 00:23:15,060
Now, the 2x will work on this,
and it'll get all the 1.5x.

494
00:23:15,060 --> 00:23:17,270
But you may want to
go and do a 2x.

495
00:23:17,270 --> 00:23:20,350
You may decide that 1.5x, it's
not worth my trouble.

496
00:23:20,350 --> 00:23:22,160
I'm just going to do the 2x.

497
00:23:22,160 --> 00:23:25,280
You may decide that you want
to do one for everybody.

498
00:23:25,280 --> 00:23:26,960
And then one other thing--
always having

499
00:23:26,960 --> 00:23:28,410
that fallback there.

500
00:23:28,410 --> 00:23:33,040
If you decide to use the
background shorthand, don't

501
00:23:33,040 --> 00:23:35,240
forget to reset the
size on an image.

502
00:23:35,240 --> 00:23:38,040
Because the background
shorthand will reset

503
00:23:38,040 --> 00:23:41,000
this size on that.

504
00:23:41,000 --> 00:23:43,950
Another technique you can
use is using highly

505
00:23:43,950 --> 00:23:46,370
compressed 2x images.

506
00:23:46,370 --> 00:23:49,320
And this actually works
fantastically well.

507
00:23:49,320 --> 00:23:52,730
You can see those two
images there.

508
00:23:52,730 --> 00:23:55,820
They both came from the
same original image.

509
00:23:55,820 --> 00:23:57,720
On the left is a 1x JPEG.

510
00:23:57,720 --> 00:24:01,840
So it's JPEG at 300 pixels
by 300 pixels.

511
00:24:01,840 --> 00:24:05,320
I saved it as a quality
90 in Photoshop.

512
00:24:05,320 --> 00:24:07,830
And then on the right hand side,
I did the same thing.

513
00:24:07,830 --> 00:24:10,360
I took the original image,
but I rescaled it.

514
00:24:10,360 --> 00:24:14,570
Instead of going to 300 by 300
pixels, I set it to 600 pixels

515
00:24:14,570 --> 00:24:19,550
by 600 pixels, and I set
the JPEG quality to 30.

516
00:24:19,550 --> 00:24:22,090
So I went from 90 all
the way down to 30--

517
00:24:22,090 --> 00:24:23,480
cranked it way down.

518
00:24:23,480 --> 00:24:26,485
The file size difference
is huge, right?

519
00:24:26,485 --> 00:24:31,390
I went from a 62K file
down to a 36K file.

520
00:24:31,390 --> 00:24:34,870
Saved like 30 some odd percent
on that file size.

521
00:24:34,870 --> 00:24:37,970
So great from a file
size perspective.

522
00:24:37,970 --> 00:24:41,280
And when we actually zoom in
and look at the image, it

523
00:24:41,280 --> 00:24:43,240
looks really good.

524
00:24:43,240 --> 00:24:48,680
In fact, even on a 1x display,
I think it looks better than

525
00:24:48,680 --> 00:24:50,850
the original image.

526
00:24:50,850 --> 00:24:53,280
Even look at the bow of the
ship, look at the little bulb,

527
00:24:53,280 --> 00:24:54,380
look at the cranes--

528
00:24:54,380 --> 00:24:56,800
everything is just
much sharper.

529
00:24:56,800 --> 00:25:01,570
Now, this is great for most
images, but there are a few

530
00:25:01,570 --> 00:25:04,340
places where this doesn't work,
where you need to test

531
00:25:04,340 --> 00:25:05,240
this a little bit.

532
00:25:05,240 --> 00:25:08,310
If you have a lot of color
gradients, you may see some

533
00:25:08,310 --> 00:25:11,960
banding in your colors.

534
00:25:11,960 --> 00:25:14,520
If that's really important and
you want to make sure that you

535
00:25:14,520 --> 00:25:18,610
don't hit that, you can use WebP
as another technique to

536
00:25:18,610 --> 00:25:21,060
make sure that your
images look great.

537
00:25:21,060 --> 00:25:25,170
On the left is a 2x JPEG
saved at quality 80.

538
00:25:25,170 --> 00:25:27,380
So I cranked the quality
up, and I made them

539
00:25:27,380 --> 00:25:28,940
both the same size.

540
00:25:28,940 --> 00:25:33,670
And on the right is
a 2x WebP image.

541
00:25:33,670 --> 00:25:35,310
So the quality level
is the same.

542
00:25:35,310 --> 00:25:37,350
They're both the same
physical size.

543
00:25:37,350 --> 00:25:43,050
And it went from a 145K all the
way down to a 38K file.

544
00:25:43,050 --> 00:25:45,530
So huge file savings.

545
00:25:45,530 --> 00:25:49,270
Now, the one disadvantage that
we have with WebP is that it's

546
00:25:49,270 --> 00:25:51,790
not supported across
all browsers.

547
00:25:51,790 --> 00:25:53,600
So that means you're going to
need to do some type of

548
00:25:53,600 --> 00:25:57,540
feature detection, either
JavaScript, which there are

549
00:25:57,540 --> 00:26:00,180
some pretty significant
disadvantages to that, or

550
00:26:00,180 --> 00:26:01,490
server side.

551
00:26:01,490 --> 00:26:04,200
Or you can use some services
like PageSpeed, which is

552
00:26:04,200 --> 00:26:05,920
available as a Google service.

553
00:26:05,920 --> 00:26:11,260
You can download an Apache
or a plug-in for nginx.

554
00:26:11,260 --> 00:26:16,960
Yesterday, Ilija Gregoric did
a session on PageSpeed, and

555
00:26:16,960 --> 00:26:19,470
tomorrow he's doing
one on WebP.

556
00:26:19,470 --> 00:26:21,960
So if this is an interesting
thing to you, which it should

557
00:26:21,960 --> 00:26:25,130
be to every developer in here,
I really would recommend

558
00:26:25,130 --> 00:26:26,360
checking that out.

559
00:26:26,360 --> 00:26:30,740
WebP can save you upwards of
30% in your file sizes, and

560
00:26:30,740 --> 00:26:31,990
that's huge.

561
00:26:31,990 --> 00:26:34,420

562
00:26:34,420 --> 00:26:36,670
JOHN MELLOR: OK, so
Peter [INAUDIBLE]

563
00:26:36,670 --> 00:26:39,530
resolution switching, swapping
out images for high resolution

564
00:26:39,530 --> 00:26:41,370
images today.

565
00:26:41,370 --> 00:26:43,960
In CSS, use media queries
to swap them out.

566
00:26:43,960 --> 00:26:46,740
And in HTML, well, there's
actually no easy way, and so

567
00:26:46,740 --> 00:26:49,390
you'll just provide a highly
compressed 2x image, and it

568
00:26:49,390 --> 00:26:50,660
seems to work well.

569
00:26:50,660 --> 00:26:52,912
In the near future, there are
some new features which make

570
00:26:52,912 --> 00:26:55,270
this slightly easier.

571
00:26:55,270 --> 00:26:56,990
In the CSS, there's the
image-set function.

572
00:26:56,990 --> 00:26:58,640
This is part of CSS 4.

573
00:26:58,640 --> 00:27:02,040
It's currently implemented in
Chrome and Safari and provide

574
00:27:02,040 --> 00:27:02,860
a [INAUDIBLE]

575
00:27:02,860 --> 00:27:06,570
list of several image URLs
wherever you [INAUDIBLE]

576
00:27:06,570 --> 00:27:07,910
a single one.

577
00:27:07,910 --> 00:27:11,310
And you annotate each one with a
device pixel ratio for which

578
00:27:11,310 --> 00:27:14,050
it is designed.

579
00:27:14,050 --> 00:27:14,560
This is cool.

580
00:27:14,560 --> 00:27:16,930
The browser will automatically
choose the most appropriate

581
00:27:16,930 --> 00:27:20,200
image based on the device's
device pixel ratio.

582
00:27:20,200 --> 00:27:23,220
And in future, browsers might
be even slightly cleverer.

583
00:27:23,220 --> 00:27:26,440
So a browser on a 2x device
might still choose to download

584
00:27:26,440 --> 00:27:29,890
the 1x image if it's on a very
poor bandwidth constrained

585
00:27:29,890 --> 00:27:31,740
connection.

586
00:27:31,740 --> 00:27:34,150
Another nice thing is the
browser will scale down the

587
00:27:34,150 --> 00:27:36,840
image to fit within the
same original size.

588
00:27:36,840 --> 00:27:40,253
So you don't need a separate
background size property as in

589
00:27:40,253 --> 00:27:41,503
the media queries approach.

590
00:27:41,503 --> 00:27:46,430

591
00:27:46,430 --> 00:27:49,080
But other browsers will
ignore image-sets.

592
00:27:49,080 --> 00:27:50,390
They don't know about
it at the moment.

593
00:27:50,390 --> 00:27:52,465
So make sure to always provide
a fallback image

594
00:27:52,465 --> 00:27:54,780
like that top one.

595
00:27:54,780 --> 00:27:58,500
So there's an analogous thing
for HTML, the srcset attribute

596
00:27:58,500 --> 00:28:00,456
for the image element.

597
00:28:00,456 --> 00:28:01,900
This is still under
discussion.

598
00:28:01,900 --> 00:28:03,510
It's not really implemented
yet.

599
00:28:03,510 --> 00:28:05,120
But you can do the same thing.

600
00:28:05,120 --> 00:28:06,290
You provide a [INAUDIBLE]

601
00:28:06,290 --> 00:28:09,840
list of different files with
their device pixel ratio.

602
00:28:09,840 --> 00:28:11,390
There's an additional
feature--

603
00:28:11,390 --> 00:28:13,855
you can also provide width-based
break points, a

604
00:28:13,855 --> 00:28:16,250
bit like you get in
media queries.

605
00:28:16,250 --> 00:28:18,240
So you can serve different
images to mobile devices as to

606
00:28:18,240 --> 00:28:21,004
desktops and so on.

607
00:28:21,004 --> 00:28:24,680
So OK, we still have to do
resolution switching for

608
00:28:24,680 --> 00:28:29,090
fixed-width images, both
now and in the future.

609
00:28:29,090 --> 00:28:31,960
What about for flexible-width
images?

610
00:28:31,960 --> 00:28:33,520
So by a fixed-width image,
we mean something like

611
00:28:33,520 --> 00:28:34,840
a logo or an icon.

612
00:28:34,840 --> 00:28:37,860
It stays the same size in CSS
pixels on all devices.

613
00:28:37,860 --> 00:28:39,725
But a flexible-width image is
something which you say went

614
00:28:39,725 --> 00:28:43,990
to 100% and will actually scale
with the page size.

615
00:28:43,990 --> 00:28:46,270
Unfortunately, these are much
harder, and there are no good

616
00:28:46,270 --> 00:28:47,580
solutions today.

617
00:28:47,580 --> 00:28:50,890
But let's go through
them quickly.

618
00:28:50,890 --> 00:28:53,790
JavaScript image replacement
is quite popular.

619
00:28:53,790 --> 00:28:56,890
Typically, there'll be some
script that runs and replaces

620
00:28:56,890 --> 00:28:58,780
images at runtime based on the
screen [INAUDIBLE] width

621
00:28:58,780 --> 00:29:01,770
properties of the device.

622
00:29:01,770 --> 00:29:04,880
You have to be careful of this
because many of them don't

623
00:29:04,880 --> 00:29:07,570
load any images at all
until the [INAUDIBLE]

624
00:29:07,570 --> 00:29:09,620
loaded event of your page
or when you reach the

625
00:29:09,620 --> 00:29:12,140
bottom of your HTML.

626
00:29:12,140 --> 00:29:14,840
But by that point, about a third
of the content of your

627
00:29:14,840 --> 00:29:16,730
page is already downloaded.

628
00:29:16,730 --> 00:29:18,370
And so what this means is that
the images are going to start

629
00:29:18,370 --> 00:29:20,640
showing up really late.

630
00:29:20,640 --> 00:29:24,180
You can adjust image replacement
more efficiently

631
00:29:24,180 --> 00:29:28,730
if you embed the image [? SSE ?]
in your HTML

632
00:29:28,730 --> 00:29:30,890
pointing to a very low
resolution version of the

633
00:29:30,890 --> 00:29:34,710
image, which is always loaded,
and then users will get an

634
00:29:34,710 --> 00:29:35,690
instant feedback.

635
00:29:35,690 --> 00:29:37,170
They'll see an image.

636
00:29:37,170 --> 00:29:39,990
And later on, you replace it
with a high resolution image.

637
00:29:39,990 --> 00:29:41,670
So users don't have to wait,
but they still get the full

638
00:29:41,670 --> 00:29:43,080
quality eventually.

639
00:29:43,080 --> 00:29:45,710
And you do a double download,
but the first download is very

640
00:29:45,710 --> 00:29:48,470
small, because it's a low
resolution image.

641
00:29:48,470 --> 00:29:51,730
So it's not so bad.

642
00:29:51,730 --> 00:29:53,950
You can also switch between
images using lots of media

643
00:29:53,950 --> 00:29:56,040
queries if you combine
the width and

644
00:29:56,040 --> 00:29:57,870
resolution media queries.

645
00:29:57,870 --> 00:30:01,330
But this gets really complicated
really quickly.

646
00:30:01,330 --> 00:30:03,590
If you do this by hand, you're
going to get it wrong.

647
00:30:03,590 --> 00:30:05,780
You need like 10 different
lines duplicating

648
00:30:05,780 --> 00:30:07,360
images and so on.

649
00:30:07,360 --> 00:30:09,390
It's tricky.

650
00:30:09,390 --> 00:30:11,270
There are some server-side
solutions.

651
00:30:11,270 --> 00:30:14,530
You can sniff to use an agent
of the device, and based on

652
00:30:14,530 --> 00:30:16,710
that, serve an appropriate
image.

653
00:30:16,710 --> 00:30:20,150
The problem is Apple decided
that iOS devices should have

654
00:30:20,150 --> 00:30:25,460
the same user agent both for
retina and non-retina devices.

655
00:30:25,460 --> 00:30:27,560
So you can't actually
tell how many pixels

656
00:30:27,560 --> 00:30:30,830
need to serve them.

657
00:30:30,830 --> 00:30:34,290
Another server-side solution is
set cookies on the client,

658
00:30:34,290 --> 00:30:37,010
as the first thing in your
head or something.

659
00:30:37,010 --> 00:30:40,070
And then when the browser
requests images, it'll

660
00:30:40,070 --> 00:30:42,480
probably send those cookies,
and the server can use the

661
00:30:42,480 --> 00:30:45,475
cookie, while you're within the
screen width and height

662
00:30:45,475 --> 00:30:49,860
and so on, to serve an
appropriate image.

663
00:30:49,860 --> 00:30:52,620
This sort of works, but the
first few images might be

664
00:30:52,620 --> 00:30:55,500
requested without the cookie,
because browsers use a

665
00:30:55,500 --> 00:30:56,180
pre-load scanner.

666
00:30:56,180 --> 00:30:58,680
And so they'll start downloading
images before you

667
00:30:58,680 --> 00:31:01,460
actually run the JavaScript
to set the cookie.

668
00:31:01,460 --> 00:31:05,320
You can also set the base href
of your page such that any

669
00:31:05,320 --> 00:31:08,270
images with relative paths
will be downloaded from a

670
00:31:08,270 --> 00:31:09,800
particular directory.

671
00:31:09,800 --> 00:31:13,840
If that directory includes
a screen width and DPR,

672
00:31:13,840 --> 00:31:17,115
[INAUDIBLE] ratio, then the
server can similarly use URL

673
00:31:17,115 --> 00:31:18,970
rewriting to serve an
appropriate image for each

674
00:31:18,970 --> 00:31:21,430
type of device.

675
00:31:21,430 --> 00:31:24,280
So that's actually a reasonable
approach, but it's

676
00:31:24,280 --> 00:31:25,550
quite invasive.

677
00:31:25,550 --> 00:31:28,740
You have to modify your servers
so they understand

678
00:31:28,740 --> 00:31:30,840
things being open to different
directories.

679
00:31:30,840 --> 00:31:33,080
So it's not perfect,

680
00:31:33,080 --> 00:31:35,890
So what's coming up
in the future?

681
00:31:35,890 --> 00:31:38,190
I mentioned [INAUDIBLE] image
srcset attributes.

682
00:31:38,190 --> 00:31:40,350
There's also a picture element
that's being proposed as

683
00:31:40,350 --> 00:31:44,620
another way of specifying
different images to HTML.

684
00:31:44,620 --> 00:31:47,420
But with both of those, you get
the same problems you had

685
00:31:47,420 --> 00:31:49,820
with the media queries above
in that you get this

686
00:31:49,820 --> 00:31:52,470
complicated tangled mess of
width-based break points and

687
00:31:52,470 --> 00:31:54,480
resolution-based break points.

688
00:31:54,480 --> 00:31:56,115
And it's really hard to actually
serve the right

689
00:31:56,115 --> 00:31:59,066
images to the right devices.

690
00:31:59,066 --> 00:32:01,250
The Client Hint header
is interesting.

691
00:32:01,250 --> 00:32:04,390
It's a proposal that browsers
might in the future send the

692
00:32:04,390 --> 00:32:07,570
device pixel ratio and the
device width along with every

693
00:32:07,570 --> 00:32:09,700
HTTP request.

694
00:32:09,700 --> 00:32:11,250
This would allow servers
to serve the

695
00:32:11,250 --> 00:32:13,250
perfect image reliably--

696
00:32:13,250 --> 00:32:15,450
none of this user agent sniffing
or cookies or base

697
00:32:15,450 --> 00:32:17,550
href stuff.

698
00:32:17,550 --> 00:32:20,420
And my personal favorite choice
is using progressive

699
00:32:20,420 --> 00:32:25,250
image formats coupled with
smarter browsers.

700
00:32:25,250 --> 00:32:28,090
The idea is that when browsers
see a wide image, they would

701
00:32:28,090 --> 00:32:31,495
download enough bytes to
make that high quality.

702
00:32:31,495 --> 00:32:34,880
But If they see a narrow image
or they're on a narrow device,

703
00:32:34,880 --> 00:32:36,180
they would stop downloading
the rest of the

704
00:32:36,180 --> 00:32:38,350
image part way through.

705
00:32:38,350 --> 00:32:40,630
And so they would get enough
quality for the size it's

706
00:32:40,630 --> 00:32:43,160
actually being displayed at,
because they're never going to

707
00:32:43,160 --> 00:32:45,680
show it bigger.

708
00:32:45,680 --> 00:32:47,820
So that's under discussion, and
we'll see how that goes.

709
00:32:47,820 --> 00:32:50,970

710
00:32:50,970 --> 00:32:52,050
PETE LEPAGE: Cool.

711
00:32:52,050 --> 00:32:55,450
Canvas images are another
interesting one.

712
00:32:55,450 --> 00:32:57,950
Drawing on a canvas effectively
is just a raster

713
00:32:57,950 --> 00:32:58,520
image, right?

714
00:32:58,520 --> 00:33:00,330
You're not doing anything
different.

715
00:33:00,330 --> 00:33:02,300
It's not a vector image
or anything like that.

716
00:33:02,300 --> 00:33:05,270
So if we want to draw on a
canvas image, we need to make

717
00:33:05,270 --> 00:33:09,360
sure that it's scaled
appropriately, that we've got

718
00:33:09,360 --> 00:33:11,390
the right number of pixels.

719
00:33:11,390 --> 00:33:15,510
So when we actually say, hey,
browser, give me a canvas, it

720
00:33:15,510 --> 00:33:18,180
creates this thing called
the backing store.

721
00:33:18,180 --> 00:33:21,890
And the backing store is what
actually stores the pixels and

722
00:33:21,890 --> 00:33:23,850
says, OK, this should be this.

723
00:33:23,850 --> 00:33:25,840
And this is where we want to
make sure that we've got the

724
00:33:25,840 --> 00:33:27,520
right size.

725
00:33:27,520 --> 00:33:30,990
So we want to make sure that
on a 2x display or 1.5x

726
00:33:30,990 --> 00:33:34,910
display, that we scale that
backing store to be the

727
00:33:34,910 --> 00:33:39,240
appropriate size so that our
images appear sharp.

728
00:33:39,240 --> 00:33:41,780
Now, there's a couple of times
when we might not want to

729
00:33:41,780 --> 00:33:44,410
scale our canvas
backing store.

730
00:33:44,410 --> 00:33:46,510
Think resource-constrained
devices--

731
00:33:46,510 --> 00:33:48,060
some phones, some tablets.

732
00:33:48,060 --> 00:33:51,600
We don't necessarily want to
go and scale those canvases

733
00:33:51,600 --> 00:33:55,710
bigger, because every single
canvas we could be using four

734
00:33:55,710 --> 00:33:58,020
times the memory that
we'd be normally

735
00:33:58,020 --> 00:34:00,200
using for a 1x canvas.

736
00:34:00,200 --> 00:34:03,000
So we want to be a little
bit careful with that.

737
00:34:03,000 --> 00:34:05,990
So in order to scale our canvas,
you'd think we could

738
00:34:05,990 --> 00:34:07,490
use something like
this, right?

739
00:34:07,490 --> 00:34:10,340
We could say, hey, here's our
canvas, and we're going to

740
00:34:10,340 --> 00:34:12,350
check our device pixel ratio.

741
00:34:12,350 --> 00:34:15,130
And if we want to scale it,
we're going to say, OK, if

742
00:34:15,130 --> 00:34:18,870
it's bigger than one, let's go
ahead and we'll change the CSS

743
00:34:18,870 --> 00:34:23,130
size and we'll set the CSS size
to its original size.

744
00:34:23,130 --> 00:34:27,520
And we'll set the canvas size to
be whenever that ratio is,

745
00:34:27,520 --> 00:34:29,530
and then we'll do a little
scale, right?

746
00:34:29,530 --> 00:34:31,760
That's going to work,
isn't it?

747
00:34:31,760 --> 00:34:34,710
Yeah, no.

748
00:34:34,710 --> 00:34:37,909
WebKit browsers introduced
this thing called the

749
00:34:37,909 --> 00:34:39,159
webkitBackingStorePixelRatio.

750
00:34:39,159 --> 00:34:41,400

751
00:34:41,400 --> 00:34:43,610
Say that 10 times fast.

752
00:34:43,610 --> 00:34:47,360
And the
WebkitBackingStorePixelRatio

753
00:34:47,360 --> 00:34:53,100
always will return one, except
in Safari on the desktop on a

754
00:34:53,100 --> 00:34:56,284
Mac Pro Retina.

755
00:34:56,284 --> 00:34:59,990
So it's literally one case that
we need to deal with this

756
00:34:59,990 --> 00:35:04,590
on, where it returns two,
because it's a 2x display.

757
00:35:04,590 --> 00:35:06,690
They say, oh, hey, this
is a big device.

758
00:35:06,690 --> 00:35:08,450
We should be able
to automatically

759
00:35:08,450 --> 00:35:09,780
scale it for you.

760
00:35:09,780 --> 00:35:11,430
So they scale it for us.

761
00:35:11,430 --> 00:35:13,990
So we just want to double check
what that value is so

762
00:35:13,990 --> 00:35:16,890
that we don't have to
go scale it again.

763
00:35:16,890 --> 00:35:19,240
Because we don't want to
necessarily scale it to four

764
00:35:19,240 --> 00:35:22,630
times as big and use four
times as much memory.

765
00:35:22,630 --> 00:35:26,520
Now, the good thing here is that
Apple just checked in a

766
00:35:26,520 --> 00:35:28,300
change a couple of weeks ago--

767
00:35:28,300 --> 00:35:30,750
in fact, just at the
end of April--

768
00:35:30,750 --> 00:35:32,490
that changes this behavior.

769
00:35:32,490 --> 00:35:37,530
So we won't have to deal with
this in the near future.

770
00:35:37,530 --> 00:35:42,060
But for now, this is something
that we need to check.

771
00:35:42,060 --> 00:35:44,550
So there's one last thing I want
to cover before we start

772
00:35:44,550 --> 00:35:46,260
to wrap up a little bit.

773
00:35:46,260 --> 00:35:49,070
And that's just making sure that
you serve high res icon

774
00:35:49,070 --> 00:35:53,060
files on all of your websites.

775
00:35:53,060 --> 00:35:55,350
All of you have been probably
playing on your Pixels, and

776
00:35:55,350 --> 00:35:58,465
you've noticed some of those
icon files look like--

777
00:35:58,465 --> 00:36:00,970
yeah, it's not pretty, right?

778
00:36:00,970 --> 00:36:04,230
So making sure that in your ICO
file, the multi-resolution

779
00:36:04,230 --> 00:36:09,400
file, you've got a 32 pixel by
32 pixel and a 16 by 16 pixel.

780
00:36:09,400 --> 00:36:11,900
And if you're serving up PNG,
you want to make sure that

781
00:36:11,900 --> 00:36:15,500
you're serving a 32
pixel as well.

782
00:36:15,500 --> 00:36:22,200
So John and I went through and
spent a lot of time as we were

783
00:36:22,200 --> 00:36:22,910
preparing for this.

784
00:36:22,910 --> 00:36:26,330
We realized that there were
really seven things.

785
00:36:26,330 --> 00:36:30,515
You can boil this whole talk
down to seven main points.

786
00:36:30,515 --> 00:36:31,670
JOHN MELLOR: Mmhmm.

787
00:36:31,670 --> 00:36:34,200
So yes, if you set
width=device-width on your

788
00:36:34,200 --> 00:36:37,470
viewports, your CSS pixels will
initially be the same

789
00:36:37,470 --> 00:36:40,670
size as your DIPs, your Device
Independent Pixels.

790
00:36:40,670 --> 00:36:43,620
And so you won't have to worry
about the two kinds of pixels

791
00:36:43,620 --> 00:36:44,230
until you zoom in.

792
00:36:44,230 --> 00:36:46,660
But even then, you don't need
to care about that too much.

793
00:36:46,660 --> 00:36:48,420
So life will be easier.

794
00:36:48,420 --> 00:36:52,350
If instead you set no viewports
at all, or you try

795
00:36:52,350 --> 00:36:54,766
to set a fixed-width viewport or
something, you're going to

796
00:36:54,766 --> 00:36:56,060
be in a world of hurt.

797
00:36:56,060 --> 00:36:57,930
Your fonts are going to
get scaled weirdly.

798
00:36:57,930 --> 00:36:58,900
Your site may get
scaled weirdly.

799
00:36:58,900 --> 00:37:00,716
Your zoom's going to
be a bit weird.

800
00:37:00,716 --> 00:37:02,490
Yeah, try and stick to
width=device-width

801
00:37:02,490 --> 00:37:03,740
whenever you can.

802
00:37:03,740 --> 00:37:07,330

803
00:37:07,330 --> 00:37:10,140
PETE LEPAGE: I'm going
to show you two.

804
00:37:10,140 --> 00:37:15,550
That device pixel ratio varies
anywhere from 1.3 up to 3.

805
00:37:15,550 --> 00:37:18,100
Somebody's probably before
4 at some point.

806
00:37:18,100 --> 00:37:20,050
John laughs at me when I say
somebody's probably going to

807
00:37:20,050 --> 00:37:22,720
do 5 or 7 or 10, because
somebody's just got to

808
00:37:22,720 --> 00:37:24,310
outclass somebody else,
but it's true.

809
00:37:24,310 --> 00:37:27,590

810
00:37:27,590 --> 00:37:28,890
JOHN MELLOR: So whenever
possible, use

811
00:37:28,890 --> 00:37:30,360
vector image formats.

812
00:37:30,360 --> 00:37:33,495
They'll automatically scale and
rendered more crisply on

813
00:37:33,495 --> 00:37:35,755
the high DPI devices using
the appropriate pixels.

814
00:37:35,755 --> 00:37:38,640

815
00:37:38,640 --> 00:37:40,830
PETE LEPAGE: Use the media
queries whenever you can.

816
00:37:40,830 --> 00:37:44,200
It's a real easy way to specify

817
00:37:44,200 --> 00:37:46,886
the appropriate images.

818
00:37:46,886 --> 00:37:49,590
JOHN MELLOR: For images in your
HTML, it's a reasonable

819
00:37:49,590 --> 00:37:53,520
option to serve highly
compressed 2x images and not

820
00:37:53,520 --> 00:37:57,730
worry about serving different
images to different devices.

821
00:37:57,730 --> 00:37:59,860
PETE LEPAGE: And finally for
canvas, just beware of that

822
00:37:59,860 --> 00:38:02,390
webkitBackingStorePixelRatio.

823
00:38:02,390 --> 00:38:04,880
You don't want to end up scaling
stuff multiple times

824
00:38:04,880 --> 00:38:07,010
and going from there.

825
00:38:07,010 --> 00:38:10,870
Now, the other thing that we
wanted to mention was that the

826
00:38:10,870 --> 00:38:14,050
I/O organizers were like, you
must have a call to action at

827
00:38:14,050 --> 00:38:14,910
the end of every session.

828
00:38:14,910 --> 00:38:16,470
They were sort of adamant
about it.

829
00:38:16,470 --> 00:38:18,860
Well, ours is really simple.

830
00:38:18,860 --> 00:38:20,460
Go build beautiful.

831
00:38:20,460 --> 00:38:23,280
Go make the web look
pretty, please.

832
00:38:23,280 --> 00:38:24,660
You guys all have Pixels.

833
00:38:24,660 --> 00:38:27,010
You all have friends with
high DPI displays.

834
00:38:27,010 --> 00:38:30,480
Just go make the
web look nice.

835
00:38:30,480 --> 00:38:35,120
So with that, I want to say
thank you guys very much.

836
00:38:35,120 --> 00:38:36,020
JOHN MELLOR: Thank you all.

837
00:38:36,020 --> 00:38:37,990
PETE LEPAGE: Our slides
are linked up there.

838
00:38:37,990 --> 00:38:41,290
John and I are going to head up
to the Four Questions Bar,

839
00:38:41,290 --> 00:38:43,230
and like good bartenders,
we're going

840
00:38:43,230 --> 00:38:44,840
to answer your questions.

841
00:38:44,840 --> 00:38:47,430
Sadly, we're not going to be
that good bartenders and won't

842
00:38:47,430 --> 00:38:48,220
be serving you booze.

843
00:38:48,220 --> 00:38:49,430
That was last night.

844
00:38:49,430 --> 00:38:52,230
But we'll do our best to answer
all your questions and

845
00:38:52,230 --> 00:38:54,200
provide anything else
that we can for you.

846
00:38:54,200 --> 00:38:55,340
So thanks everybody.

847
00:38:55,340 --> 00:38:58,342
[APPLAUSE]

