1
00:00:00,000 --> 00:00:00,640

2
00:00:00,640 --> 00:00:02,290
ERIK KAY: Hi, everyone.

3
00:00:02,290 --> 00:00:05,840
Welcome to the session, Chrome
Apps State of The Nation.

4
00:00:05,840 --> 00:00:06,990
My name is Erik Kay.

5
00:00:06,990 --> 00:00:11,290
I'm an engineering director at
Google, and just a quick

6
00:00:11,290 --> 00:00:14,730
reminder upfront, before
we dive in.

7
00:00:14,730 --> 00:00:17,890
We're really interested in
getting your feedback on how

8
00:00:17,890 --> 00:00:19,320
each of these talks are going.

9
00:00:19,320 --> 00:00:24,330
You can use either the I/O app
to rate the session and give

10
00:00:24,330 --> 00:00:26,430
us feedback, or use
the QR code in the

11
00:00:26,430 --> 00:00:30,920
back to do a rating.

12
00:00:30,920 --> 00:00:34,250
So first off, what is
this talk all about?

13
00:00:34,250 --> 00:00:35,970
It's about Chrome
packaged apps.

14
00:00:35,970 --> 00:00:40,570
This is the way to build native
quality applications

15
00:00:40,570 --> 00:00:45,310
using the Chrome runtime.

16
00:00:45,310 --> 00:00:46,680
Let's see.

17
00:00:46,680 --> 00:00:51,060
So, how many of you were here
at last year's talk, when we

18
00:00:51,060 --> 00:00:53,982
first gave a preview for
what Chrome packaged

19
00:00:53,982 --> 00:00:55,230
apps were all about?

20
00:00:55,230 --> 00:00:55,870
All right, good.

21
00:00:55,870 --> 00:00:57,370
Thanks for coming back.

22
00:00:57,370 --> 00:01:00,680
For the rest of you, let me give
you a little bit of an

23
00:01:00,680 --> 00:01:03,960
overview of what Chrome
packaged apps are.

24
00:01:03,960 --> 00:01:07,320
So the idea here is that people
want to be able to

25
00:01:07,320 --> 00:01:14,120
build native quality desktop
applications using web

26
00:01:14,120 --> 00:01:14,920
technology.

27
00:01:14,920 --> 00:01:16,080
Using web technology.

28
00:01:16,080 --> 00:01:17,700
HTML, JavaScript, CSS.

29
00:01:17,700 --> 00:01:20,950
They would like, though, at the
same time, to not give up

30
00:01:20,950 --> 00:01:23,040
all the capabilities
they're used to.

31
00:01:23,040 --> 00:01:26,020
Access to the hardware, access
to the operating system.

32
00:01:26,020 --> 00:01:31,500
They'd like to look and act,
behave as peers for the

33
00:01:31,500 --> 00:01:31,900
desktop counterparts.

34
00:01:31,900 --> 00:01:34,690
And so that's what we've built
with Chrome packaged apps.

35
00:01:34,690 --> 00:01:37,320
And I'm going to talk in a lot
more detail about what each of

36
00:01:37,320 --> 00:01:39,000
these aspects are, but
that's sort of

37
00:01:39,000 --> 00:01:40,920
the idea in a nutshell.

38
00:01:40,920 --> 00:01:44,540
Now last year, as I said, we
gave a sneak peek of where we

39
00:01:44,540 --> 00:01:47,290
were at with packaged apps.

40
00:01:47,290 --> 00:01:50,540
Showed you how these apps were
immersive, how they ran

41
00:01:50,540 --> 00:01:54,930
outside of the browser, and
allowed for customizable UI.

42
00:01:54,930 --> 00:01:56,150
Full control over
all the windows.

43
00:01:56,150 --> 00:01:59,220
How they interacted with the
hardware and operating system

44
00:01:59,220 --> 00:02:01,800
capabilities, and how they were

45
00:02:01,800 --> 00:02:03,770
offline enabled by default.

46
00:02:03,770 --> 00:02:09,182
So after that, we put it
available behind a flag over

47
00:02:09,182 --> 00:02:10,280
the summer.

48
00:02:10,280 --> 00:02:13,650
We started shipping a few
default packaged apps in

49
00:02:13,650 --> 00:02:14,975
Chrome OS this fall.

50
00:02:14,975 --> 00:02:16,580
We had a few hackathons,
I hope a few of

51
00:02:16,580 --> 00:02:17,860
you made it to that.

52
00:02:17,860 --> 00:02:20,040
If not, there's more
hackathons coming.

53
00:02:20,040 --> 00:02:24,470
Keep an eye out for those
in your local area.

54
00:02:24,470 --> 00:02:28,440
We had a developer preview
turned on in February, so you

55
00:02:28,440 --> 00:02:30,910
could start uploading your
packaged apps to the store.

56
00:02:30,910 --> 00:02:34,380
And just the other week, we
enabled our consumer preview,

57
00:02:34,380 --> 00:02:36,670
which means anyone at the dev
channel can now go to the web

58
00:02:36,670 --> 00:02:38,942
store and see all the packaged
apps that have

59
00:02:38,942 --> 00:02:40,070
been uploaded there.

60
00:02:40,070 --> 00:02:44,340
And in our next release, Chrome
29, we're looking to

61
00:02:44,340 --> 00:02:46,260
have a full consumer launch.

62
00:02:46,260 --> 00:02:50,680
So let me dive in a bit about
each of the properties that we

63
00:02:50,680 --> 00:02:52,490
have for Chrome packaged apps.

64
00:02:52,490 --> 00:02:55,320
So first off, I said
they're inverses.

65
00:02:55,320 --> 00:02:56,650
So what does that
mean, exactly?

66
00:02:56,650 --> 00:02:59,050
Well, it could mean a couple
of different things.

67
00:02:59,050 --> 00:03:00,780
For example, it could
mean something like

68
00:03:00,780 --> 00:03:02,365
this YouTube app.

69
00:03:02,365 --> 00:03:06,500
Now, this is the full experience
that you see maybe

70
00:03:06,500 --> 00:03:08,680
on your TV, or on
the PlayStation.

71
00:03:08,680 --> 00:03:15,200
But all custom UI full
screen immersive, so

72
00:03:15,200 --> 00:03:15,850
nothing in the way.

73
00:03:15,850 --> 00:03:17,930
But immersive just have
to mean that.

74
00:03:17,930 --> 00:03:19,430
Doesn't have to mean
full screen.

75
00:03:19,430 --> 00:03:21,690
It might mean that it's just
part of the operating system.

76
00:03:21,690 --> 00:03:23,650
It's taking advantage of
different features of the

77
00:03:23,650 --> 00:03:24,830
operating system.

78
00:03:24,830 --> 00:03:27,150
So for example, this
presentation that I've got

79
00:03:27,150 --> 00:03:29,610
going up here is actually
is actually an app.

80
00:03:29,610 --> 00:03:33,330
It's a packaged app, and I've
got it, no title bar, I've got

81
00:03:33,330 --> 00:03:35,150
it glued to the side
of the screen.

82
00:03:35,150 --> 00:03:41,385
I've got it, no UI widgets, just
full edge to edge control

83
00:03:41,385 --> 00:03:42,630
under my [? power. ?]

84
00:03:42,630 --> 00:03:45,140
And further, I even have it
integrating with the OS in an

85
00:03:45,140 --> 00:03:46,030
interesting way.

86
00:03:46,030 --> 00:03:49,420
I put up a rich notification
here showing how I'm doing

87
00:03:49,420 --> 00:03:50,860
this presentation on a Pixel.

88
00:03:50,860 --> 00:03:54,890
I hope you all enjoy that, and
can play with some of these

89
00:03:54,890 --> 00:03:56,990
things like I am here.

90
00:03:56,990 --> 00:03:59,890
The rich notifications that you
can deliver there are a

91
00:03:59,890 --> 00:04:03,400
relatively recent API that we
rolled out, that mirror the

92
00:04:03,400 --> 00:04:05,690
kind of things, notifications
that you're used

93
00:04:05,690 --> 00:04:07,910
to doing with Android.

94
00:04:07,910 --> 00:04:12,190
In fact, we're trying to make
them parallel in most ways.

95
00:04:12,190 --> 00:04:16,500
So these apps are
very capable.

96
00:04:16,500 --> 00:04:21,029
And what I mean by capable is
that they can have access to

97
00:04:21,029 --> 00:04:23,240
the underlying operating
system primitives.

98
00:04:23,240 --> 00:04:26,690
They can do things like
access TCP/IP sockets.

99
00:04:26,690 --> 00:04:29,300
They can access your hardware.

100
00:04:29,300 --> 00:04:32,775
So for example, let me just
pull up a couple here.

101
00:04:32,775 --> 00:04:35,870

102
00:04:35,870 --> 00:04:39,210
Here's one that's built into
Chrome OS, and it's like a

103
00:04:39,210 --> 00:04:41,840
simple camera app that's
talking to your webcam.

104
00:04:41,840 --> 00:04:44,500
Notice it just looks and acts
like a native application,

105
00:04:44,500 --> 00:04:46,650
does everything you'd expect.

106
00:04:46,650 --> 00:04:50,340
Here's one that maybe the techie
crowd would appreciate

107
00:04:50,340 --> 00:04:55,440
here, is as developers, this
is an IRC app, a chatroom

108
00:04:55,440 --> 00:04:57,400
application where developers
hang out.

109
00:04:57,400 --> 00:05:00,830
This is the Blink chat room
where the Blink developers all

110
00:05:00,830 --> 00:05:02,185
hang out and talk about
the things that

111
00:05:02,185 --> 00:05:03,170
are going on there.

112
00:05:03,170 --> 00:05:05,470
In order to implement this, you
have to use raw socket,

113
00:05:05,470 --> 00:05:07,950
TCP/IP to talk to it again.

114
00:05:07,950 --> 00:05:11,120
This just looks like a
standalone native desktop app.

115
00:05:11,120 --> 00:05:14,416
That's because the runtime
enables that.

116
00:05:14,416 --> 00:05:18,040
I've got another application
here that I can't give you the

117
00:05:18,040 --> 00:05:22,750
full demo of, because I left
a memory card away.

118
00:05:22,750 --> 00:05:29,960
But this is the G+ photos
application that basically

119
00:05:29,960 --> 00:05:33,690
allows you to automatically
upload photos that when you

120
00:05:33,690 --> 00:05:35,990
plug in a memory card or attach
your camera, if you

121
00:05:35,990 --> 00:05:38,250
just attach it, you
can curate it.

122
00:05:38,250 --> 00:05:42,510
This is part of the overall
G+ photos experience.

123
00:05:42,510 --> 00:05:44,960
So, offline.

124
00:05:44,960 --> 00:05:47,960
So Chrome packaged apps are
offline enabled by default.

125
00:05:47,960 --> 00:05:49,130
So what do I mean by offline?

126
00:05:49,130 --> 00:05:51,250
First let's define terms.

127
00:05:51,250 --> 00:05:54,830
On one end, offline can mean
I have no network of all.

128
00:05:54,830 --> 00:05:56,760
I'm not connected
to the internet.

129
00:05:56,760 --> 00:05:59,290
I'm on an airplane, I'm in
the desert, whatever.

130
00:05:59,290 --> 00:06:01,520
But really, the more common
case is I've got

131
00:06:01,520 --> 00:06:03,900
a really bad network.

132
00:06:03,900 --> 00:06:07,450
It's unreliable, it's
slow, it's flaky.

133
00:06:07,450 --> 00:06:10,830
I think a few of you are
experiencing that right now.

134
00:06:10,830 --> 00:06:12,940
Maybe even the servers
are down.

135
00:06:12,940 --> 00:06:15,490
Maybe the internet, your net
connection is fine, but the

136
00:06:15,490 --> 00:06:17,930
particular server you're talking
to is timing out, or

137
00:06:17,930 --> 00:06:19,900
having some trouble.

138
00:06:19,900 --> 00:06:23,530
Native apps don't really have
a huge problem with this,

139
00:06:23,530 --> 00:06:26,510
because all their code is
already down on the client and

140
00:06:26,510 --> 00:06:27,540
already running.

141
00:06:27,540 --> 00:06:29,660
So if they can't talk to their
server, all it means is they

142
00:06:29,660 --> 00:06:31,060
couldn't get some
of their data.

143
00:06:31,060 --> 00:06:31,740
They can recover.

144
00:06:31,740 --> 00:06:32,920
They can detect that.

145
00:06:32,920 --> 00:06:35,440
The web has had some weaknesses
on this front,

146
00:06:35,440 --> 00:06:39,250
where because we mix code and
data together in HTML, it

147
00:06:39,250 --> 00:06:41,970
means that if you have a network
outage as code is

148
00:06:41,970 --> 00:06:44,970
coming down, well, you have half
your page there, and your

149
00:06:44,970 --> 00:06:46,260
page isn't functional.

150
00:06:46,260 --> 00:06:49,170
And that's why we have reload
buttons in browsers because,

151
00:06:49,170 --> 00:06:52,310
how many times do you
hit Reload a day?

152
00:06:52,310 --> 00:06:53,540
Invariably there are errors.

153
00:06:53,540 --> 00:06:56,050
You have to hit refresh, or
hit back to fix that.

154
00:06:56,050 --> 00:06:58,310
But your desktop app doesn't
have a Reload button, so we

155
00:06:58,310 --> 00:07:00,620
need to make these apps work
offline by default.

156
00:07:00,620 --> 00:07:03,980
And the way we do that is by
having the code down on the

157
00:07:03,980 --> 00:07:07,330
device ahead of time, so that
it's always there, always

158
00:07:07,330 --> 00:07:09,180
ready to go, and enforcing
the separation

159
00:07:09,180 --> 00:07:11,170
between code and data.

160
00:07:11,170 --> 00:07:14,770
Let me give you a quick
example of this.

161
00:07:14,770 --> 00:07:18,740
So here's an app called "Google
Keep." Maybe a few of

162
00:07:18,740 --> 00:07:20,310
you have already
tried this out.

163
00:07:20,310 --> 00:07:24,540
Really nicely done packaged app,
and what you can see here

164
00:07:24,540 --> 00:07:28,620
is that it's basically
just a panel.

165
00:07:28,620 --> 00:07:29,750
So again, it's immersive.

166
00:07:29,750 --> 00:07:31,570
It's sort of a nice size.

167
00:07:31,570 --> 00:07:34,160
You can put it off
to the side here.

168
00:07:34,160 --> 00:07:35,690
It's just in this case,
I've just got a

169
00:07:35,690 --> 00:07:37,040
simple to do item here.

170
00:07:37,040 --> 00:07:39,260
You can have other
notes and photos.

171
00:07:39,260 --> 00:07:41,510
But what I'm going to do is I'm
going to play with fire

172
00:07:41,510 --> 00:07:43,880
here, and I'm going to tempt the
demo gods, and I'm going

173
00:07:43,880 --> 00:07:46,140
to unplug the network.

174
00:07:46,140 --> 00:07:47,570
OK, what happens?

175
00:07:47,570 --> 00:07:52,470
So what you'll see here is
that it'll say that--

176
00:07:52,470 --> 00:07:55,000
well, actually I need to turn
off the wi-fi, too, which is

177
00:07:55,000 --> 00:07:57,850
actually working, which
shouldn't be.

178
00:07:57,850 --> 00:07:59,010
Let's turn off the wi-fi.

179
00:07:59,010 --> 00:07:59,860
OK.

180
00:07:59,860 --> 00:08:01,490
So now you see that the
display changed.

181
00:08:01,490 --> 00:08:02,610
It immediately detected that.

182
00:08:02,610 --> 00:08:05,460
It says all notes are now saved
offline, and so what I

183
00:08:05,460 --> 00:08:09,450
can do here is I can still, even
though it's offline, I

184
00:08:09,450 --> 00:08:12,460
can mark something done,
I can delete an item.

185
00:08:12,460 --> 00:08:17,830
I can add another item,
and it's offline.

186
00:08:17,830 --> 00:08:22,010
And in fact, if I just then
reconnect this up, it'll

187
00:08:22,010 --> 00:08:27,190
detect that, wake up again in a
second, and it says saving,

188
00:08:27,190 --> 00:08:28,980
and it's all back in the
cloud automatically.

189
00:08:28,980 --> 00:08:32,980
There's no errors, and all of
this really comes for free as

190
00:08:32,980 --> 00:08:34,490
part of the package.

191
00:08:34,490 --> 00:08:37,110
When you write a Chrome
packaged app,

192
00:08:37,110 --> 00:08:39,330
it's offline by default.

193
00:08:39,330 --> 00:08:42,440
It's also cloud enabled
by default.

194
00:08:42,440 --> 00:08:47,570
So it's all fine and good to be
offline, but then you start

195
00:08:47,570 --> 00:08:49,553
to lose some of the advantages
that you have on the web.

196
00:08:49,553 --> 00:08:53,060
The web is cloud enabled by
default, but not offline

197
00:08:53,060 --> 00:08:54,590
enabled by default.

198
00:08:54,590 --> 00:08:57,630
Native apps tend to be offline
enabled by default, but not

199
00:08:57,630 --> 00:08:58,890
cloud enabled by default.

200
00:08:58,890 --> 00:09:02,650
We're trying to have a bit of
both, and the way we do that

201
00:09:02,650 --> 00:09:06,890
is by providing a number of
useful APIs out of the box.

202
00:09:06,890 --> 00:09:08,920
One of them is one that we
introduced last year, called

203
00:09:08,920 --> 00:09:12,520
"Chrome Storage Sync." And what
that does is provide a

204
00:09:12,520 --> 00:09:15,770
way to have simple key value
pairs stored reliably,

205
00:09:15,770 --> 00:09:17,060
synchronized to your account.

206
00:09:17,060 --> 00:09:20,040
No matter what machine you're
on, it they follow you around,

207
00:09:20,040 --> 00:09:21,440
come with you.

208
00:09:21,440 --> 00:09:24,230
And that's really useful for
things like settings,

209
00:09:24,230 --> 00:09:26,020
configuration, state.

210
00:09:26,020 --> 00:09:28,900
So imagine you set up your app
on one machine, you go to

211
00:09:28,900 --> 00:09:32,380
another machine, now it's
all set up, ready to go.

212
00:09:32,380 --> 00:09:34,690
Or that you're playing a game
and you're on level three, and

213
00:09:34,690 --> 00:09:36,840
then you go to another machine,
and that one is on

214
00:09:36,840 --> 00:09:39,180
level three now, too.

215
00:09:39,180 --> 00:09:42,170
It's really useful for that
sort of simple state data.

216
00:09:42,170 --> 00:09:44,520
But what if you need to
deal with larger data?

217
00:09:44,520 --> 00:09:48,500
Well, recently we just announced
another API called

218
00:09:48,500 --> 00:09:51,890
Chrome Sync file system, and the
sync file system API uses

219
00:09:51,890 --> 00:09:56,160
your Drive account to store
documents, to store photos and

220
00:09:56,160 --> 00:09:58,000
media files, and that
sort of thing.

221
00:09:58,000 --> 00:10:03,330
It's really good at these large
chunk document types.

222
00:10:03,330 --> 00:10:05,190
And again, automatically
works.

223
00:10:05,190 --> 00:10:09,180
All you do is use the HTML5 file
system API, create your

224
00:10:09,180 --> 00:10:14,790
files, save them into there,
and you as a developer, for

225
00:10:14,790 --> 00:10:18,470
both of these API, you didn't
have to set up any cloud

226
00:10:18,470 --> 00:10:19,410
infrastructure on your own.

227
00:10:19,410 --> 00:10:21,670
You didn't have to set
up your own servers.

228
00:10:21,670 --> 00:10:24,770
You didn't have to deal with
scalability concerns if your

229
00:10:24,770 --> 00:10:26,270
app was a runaway success.

230
00:10:26,270 --> 00:10:28,500
Because all the data is stored
in the user's account, not

231
00:10:28,500 --> 00:10:30,320
your account, not
on your server.

232
00:10:30,320 --> 00:10:33,260
So you don't have to worry
about all of that.

233
00:10:33,260 --> 00:10:36,190
Now, there's a third type of
data that the observant among

234
00:10:36,190 --> 00:10:38,410
you will notice I didn't talk
about, which is database or

235
00:10:38,410 --> 00:10:39,670
transactional data.

236
00:10:39,670 --> 00:10:41,610
And that's where you're getting
the more advanced use

237
00:10:41,610 --> 00:10:45,000
cases, where it's really hard
to have a generic API that

238
00:10:45,000 --> 00:10:47,060
addresses everybody's
concerns.

239
00:10:47,060 --> 00:10:49,700
So you tend to have to write
most of that logic yourself.

240
00:10:49,700 --> 00:10:52,900
However, we help you out
a bit there, too.

241
00:10:52,900 --> 00:10:57,350
Just last week we announced
Google Cloud, we announced a--

242
00:10:57,350 --> 00:11:01,310
sorry, a push messaging API,
which is sort of the mirror to

243
00:11:01,310 --> 00:11:04,840
Google Cloud Messaging from
Android, again, in Chrome.

244
00:11:04,840 --> 00:11:08,840
And allows you to push data
down to your device

245
00:11:08,840 --> 00:11:09,480
automatically.

246
00:11:09,480 --> 00:11:12,310
And the nice thing about this
is the reason why this helps

247
00:11:12,310 --> 00:11:14,820
in that synchronization, that
database transactional

248
00:11:14,820 --> 00:11:19,380
synchronization model is it
means that, again, your app

249
00:11:19,380 --> 00:11:22,460
doesn't need to--

250
00:11:22,460 --> 00:11:25,160
your app can always stay up
to sync in the background.

251
00:11:25,160 --> 00:11:27,410
Because what could happen is
your server can say, OK,

252
00:11:27,410 --> 00:11:29,020
something new happened.

253
00:11:29,020 --> 00:11:33,860
A message gets sent into the
push messaging, and the Chrome

254
00:11:33,860 --> 00:11:35,710
runtime will receive that
message, wake up your app, let

255
00:11:35,710 --> 00:11:37,800
it run code, let it download
what it needs to do, and

256
00:11:37,800 --> 00:11:39,240
again, you can handle the

257
00:11:39,240 --> 00:11:41,700
synchronization logic yourself.

258
00:11:41,700 --> 00:11:45,820
Now, I mentioned earlier
that we're using this

259
00:11:45,820 --> 00:11:49,230
heavily for Chrome OS.

260
00:11:49,230 --> 00:11:52,430
It's more than just as a
platform for third parties.

261
00:11:52,430 --> 00:11:55,420
We use it ourselves for all
of the built in apps.

262
00:11:55,420 --> 00:11:59,110
The camera app I showed you
earlier, that's a packaged app

263
00:11:59,110 --> 00:12:00,730
that's built into Chrome OS.

264
00:12:00,730 --> 00:12:05,140
Even the file manager that we
use to look at images and

265
00:12:05,140 --> 00:12:09,890
videos, yep, that's a lovely
picture, and movies, inline,

266
00:12:09,890 --> 00:12:13,380
all of that is done
as a packaged app.

267
00:12:13,380 --> 00:12:16,410
Calculator, that's
all there, too.

268
00:12:16,410 --> 00:12:19,650
All the little utilities and
things that make an OS an OS

269
00:12:19,650 --> 00:12:22,430
are part of that.

270
00:12:22,430 --> 00:12:25,100
Chrome packaged apps are also
cross platform by default.

271
00:12:25,100 --> 00:12:28,130
Since you're building it with
HTML, JavaScript, CSS, and

272
00:12:28,130 --> 00:12:31,070
it's built on top of the Chrome
runtime, your apps run

273
00:12:31,070 --> 00:12:34,150
everywhere that the Chrome
runtime runs.

274
00:12:34,150 --> 00:12:38,900
So for example, let's say that
you're 500 pixels, and you

275
00:12:38,900 --> 00:12:42,650
wanted to write a desktop app
version of your website.

276
00:12:42,650 --> 00:12:45,890
So you build the packaged app,
photos all sync offline.

277
00:12:45,890 --> 00:12:46,890
You can browse them,
view them.

278
00:12:46,890 --> 00:12:48,510
I'm using touch here to control

279
00:12:48,510 --> 00:12:51,230
this and scroll around.

280
00:12:51,230 --> 00:12:55,180
But this app that runs and
works exactly the same on

281
00:12:55,180 --> 00:12:59,360
Windows, on Mac, on Chrome
OS, on Linux.

282
00:12:59,360 --> 00:13:04,210
And when I say cross platform,
I also mean mobile.

283
00:13:04,210 --> 00:13:07,320
And this is something we've
been working on since last

284
00:13:07,320 --> 00:13:11,450
year, but probably many of
you haven't seen it yet.

285
00:13:11,450 --> 00:13:13,500
Let me give you a sneak preview
of what it means to

286
00:13:13,500 --> 00:13:19,480
run a Chrome packaged app
on my Android device.

287
00:13:19,480 --> 00:13:25,580
Here's that same 500 pixels app
doing exactly what you'd

288
00:13:25,580 --> 00:13:27,230
expect it to do.

289
00:13:27,230 --> 00:13:30,040
Basically the same code, very
little needed to be modified

290
00:13:30,040 --> 00:13:31,560
in order to bring that over.

291
00:13:31,560 --> 00:13:34,240
So, how does that work?

292
00:13:34,240 --> 00:13:38,750
Well, what we did is we started
contributing a year

293
00:13:38,750 --> 00:13:40,770
ago to the Cordova project.

294
00:13:40,770 --> 00:13:43,260
You may know it by
its commercial

295
00:13:43,260 --> 00:13:44,800
name, which is PhoneGap.

296
00:13:44,800 --> 00:13:48,410
Cordova, what it does is it
wraps up the native web view

297
00:13:48,410 --> 00:13:53,490
on a platform around an
executable, and then runs the

298
00:13:53,490 --> 00:13:57,290
HTML, JavaScript, CSS in
that local context.

299
00:13:57,290 --> 00:13:59,990
It also allows you to have
native API bindings to it, and

300
00:13:59,990 --> 00:14:02,330
what we've been contributing in
addition to contributing to

301
00:14:02,330 --> 00:14:05,070
the overall quality of Cordova,
performance and

302
00:14:05,070 --> 00:14:07,540
features, and modularity, and
that sort of thing, we've

303
00:14:07,540 --> 00:14:10,650
contributed some modules that
provide a compatibility layer

304
00:14:10,650 --> 00:14:12,150
for Chrome packaged apps.

305
00:14:12,150 --> 00:14:15,900
So basically, you can build your
Chrome packaged app and

306
00:14:15,900 --> 00:14:19,340
now target Cordova, and run your
same app with the same

307
00:14:19,340 --> 00:14:22,745
APIs on iOS, on Android, and
other Cordova projects.

308
00:14:22,745 --> 00:14:26,384

309
00:14:26,384 --> 00:14:29,216
Thank you.

310
00:14:29,216 --> 00:14:33,190
Thought a few of you
might like that.

311
00:14:33,190 --> 00:14:35,070
So, speaking of development,
let's just talk about

312
00:14:35,070 --> 00:14:38,410
development and what
that means.

313
00:14:38,410 --> 00:14:43,930
Because it's HTML, JavaScript,
CSS, you get access to all the

314
00:14:43,930 --> 00:14:46,190
same great developer tools
that you've been seeing

315
00:14:46,190 --> 00:14:48,520
everybody use in all the
talks around here.

316
00:14:48,520 --> 00:14:53,750
And again, you've probably heard
this before, but if you

317
00:14:53,750 --> 00:14:56,230
haven't checked out the Chrome
Developer Tools in a while,

318
00:14:56,230 --> 00:14:56,740
you should.

319
00:14:56,740 --> 00:14:58,280
They're changing at
such a rapid rate.

320
00:14:58,280 --> 00:15:03,120
They're improving, and they're
pretty amazing and powerful.

321
00:15:03,120 --> 00:15:07,180
So for example, here I can look
at the full details of my

322
00:15:07,180 --> 00:15:09,900
app, this presentation app,
inspect all the elements.

323
00:15:09,900 --> 00:15:13,610
I can turn off, toggle
things, edit things.

324
00:15:13,610 --> 00:15:15,690
In fact, I noticed something
embarrassing here.

325
00:15:15,690 --> 00:15:19,910
Somebody pointed this out to
me, that maybe three gears

326
00:15:19,910 --> 00:15:22,970
intermeshed together isn't
actually the best example of

327
00:15:22,970 --> 00:15:24,850
productivity.

328
00:15:24,850 --> 00:15:29,195
So let me just fix that here,
and I'll just move that off to

329
00:15:29,195 --> 00:15:30,430
the side there.

330
00:15:30,430 --> 00:15:33,570
So I think that's a better
looking thing.

331
00:15:33,570 --> 00:15:38,425
Now, not only that, but again,
because it's web stuff, let me

332
00:15:38,425 --> 00:15:40,850
just run another packed app
here, which is a simple code

333
00:15:40,850 --> 00:15:43,470
editor that we've got up in
our GitHub repository.

334
00:15:43,470 --> 00:15:46,940
A text editor that has full
syntax highlighting, and

335
00:15:46,940 --> 00:15:48,340
everything you'd expect there.

336
00:15:48,340 --> 00:15:51,470
And I'm going to find this slide
here that I'm looking at

337
00:15:51,470 --> 00:15:53,890
right now, and you could see
that it's very simple.

338
00:15:53,890 --> 00:15:55,260
It just has this
one text here.

339
00:15:55,260 --> 00:15:59,190
But I'm going to make just
another little change.

340
00:15:59,190 --> 00:16:00,910
Standard stuff.

341
00:16:00,910 --> 00:16:06,910
And because this is
an app, just edit,

342
00:16:06,910 --> 00:16:10,230
reload, and away we go.

343
00:16:10,230 --> 00:16:12,300
So that's great.

344
00:16:12,300 --> 00:16:15,760
You can build it, it works just
like you'd expect with

345
00:16:15,760 --> 00:16:16,930
web technology.

346
00:16:16,930 --> 00:16:18,750
Now you want to get that
app out there.

347
00:16:18,750 --> 00:16:21,530
For those of you who have been
playing around with apps or

348
00:16:21,530 --> 00:16:23,810
extensions, you know that the
way to do that is through the

349
00:16:23,810 --> 00:16:24,980
Chrome Web Store.

350
00:16:24,980 --> 00:16:27,470
Chrome Web Store is really
easy to get going.

351
00:16:27,470 --> 00:16:31,110
What you do is you just package
all your files up, all

352
00:16:31,110 --> 00:16:32,630
your source code up
in a zip file.

353
00:16:32,630 --> 00:16:36,730
You upload it, you add a few
assets so it could show up in

354
00:16:36,730 --> 00:16:37,395
the store properly.

355
00:16:37,395 --> 00:16:38,610
You hit publish.

356
00:16:38,610 --> 00:16:42,980
An hour later it's live, and
your users can start using it,

357
00:16:42,980 --> 00:16:45,480
installing it, and whatever.

358
00:16:45,480 --> 00:16:48,070
We've also been working on
a number of improvements.

359
00:16:48,070 --> 00:16:50,520
Since last year, a number of you
may have noticed that we

360
00:16:50,520 --> 00:16:52,670
made some pretty significant
changes to the

361
00:16:52,670 --> 00:16:53,650
layout of the web store.

362
00:16:53,650 --> 00:16:56,940
And these have been mostly
aimed at end users.

363
00:16:56,940 --> 00:17:00,680
At things like discoverability,
and things

364
00:17:00,680 --> 00:17:03,490
that keep users coming back,
to come looking for more.

365
00:17:03,490 --> 00:17:07,150
And it's succeeded on that front
pretty significantly.

366
00:17:07,150 --> 00:17:11,109
So we now have much higher
install rates and return rates

367
00:17:11,109 --> 00:17:13,609
for users coming back,
and we think that's

368
00:17:13,609 --> 00:17:14,359
a big win for you.

369
00:17:14,359 --> 00:17:17,010
But we're not done there.

370
00:17:17,010 --> 00:17:19,180
What you're seeing here on this
slide is just a sneak

371
00:17:19,180 --> 00:17:22,300
preview of a more structured
layout, where we're going to,

372
00:17:22,300 --> 00:17:24,339
rather than just having this
long, continuous wall, we're

373
00:17:24,339 --> 00:17:26,920
going to have things grouped up
into some sections, so that

374
00:17:26,920 --> 00:17:29,910
people can sort of see the
source where these things are

375
00:17:29,910 --> 00:17:30,640
coming from.

376
00:17:30,640 --> 00:17:33,570
And again, hopefully give them
more ways to explore

377
00:17:33,570 --> 00:17:36,530
and find new items.

378
00:17:36,530 --> 00:17:39,180
We're also spending a lot of
time working on your developer

379
00:17:39,180 --> 00:17:39,830
pain points.

380
00:17:39,830 --> 00:17:43,790
The things that you've told us
are making your life harder to

381
00:17:43,790 --> 00:17:45,230
do within the web store.

382
00:17:45,230 --> 00:17:48,160
So for example, one of the main
things we've heard is

383
00:17:48,160 --> 00:17:50,580
that it's kind of a pain to
administer these things when

384
00:17:50,580 --> 00:17:52,170
you're within your company.

385
00:17:52,170 --> 00:17:55,860
And so we're adding group
administrative features.

386
00:17:55,860 --> 00:17:58,970
So that means that you can
have a Google group, have

387
00:17:58,970 --> 00:18:01,510
different members of that group,
and then they all can

388
00:18:01,510 --> 00:18:04,840
access different aspects of the
management to the apps.

389
00:18:04,840 --> 00:18:08,120
You can have your marketing
person access it, edit the

390
00:18:08,120 --> 00:18:10,230
copy, your developer
uploads the code.

391
00:18:10,230 --> 00:18:12,920
Your business person looks at
the numbers, and you don't

392
00:18:12,920 --> 00:18:15,350
have to worry about who comes
and goes from your company and

393
00:18:15,350 --> 00:18:16,330
how to manage that.

394
00:18:16,330 --> 00:18:18,070
It's very simple.

395
00:18:18,070 --> 00:18:21,330
We're also working on things
like incremental rollout, so

396
00:18:21,330 --> 00:18:22,790
that you can do experiments.

397
00:18:22,790 --> 00:18:25,610
If you've got a large number of
users, maybe you don't want

398
00:18:25,610 --> 00:18:30,250
to have a new update go out
to all of your users

399
00:18:30,250 --> 00:18:31,300
all at the same time.

400
00:18:31,300 --> 00:18:33,790
So you can do a percent rollout,
see what the feedback

401
00:18:33,790 --> 00:18:37,020
looks like from your early
users, and then scale it back

402
00:18:37,020 --> 00:18:39,250
if there's a problem
that you discover.

403
00:18:39,250 --> 00:18:41,050
And finally, for the native
client developers in the

404
00:18:41,050 --> 00:18:44,580
crowd, we're also working on
making it so that the download

405
00:18:44,580 --> 00:18:48,360
size for end users is smaller,
so they only download the

406
00:18:48,360 --> 00:18:52,050
chunk of the CRX that they need
in order to run their

407
00:18:52,050 --> 00:18:53,600
native client application.

408
00:18:53,600 --> 00:18:56,650
So that should be a dramatic
improvement in download speed

409
00:18:56,650 --> 00:18:58,600
and how long it takes them
to get up and running.

410
00:18:58,600 --> 00:19:01,730

411
00:19:01,730 --> 00:19:02,230
So, OK.

412
00:19:02,230 --> 00:19:03,850
You can get it published.

413
00:19:03,850 --> 00:19:05,500
Now you'd like to actually
make money.

414
00:19:05,500 --> 00:19:08,340
I'm pretty sure that most of you
are here because you would

415
00:19:08,340 --> 00:19:10,670
like your apps to be able
to make money, right?

416
00:19:10,670 --> 00:19:13,630
And maybe there's some
hobbyists, but really, we want

417
00:19:13,630 --> 00:19:15,140
to figure out how to
make this work.

418
00:19:15,140 --> 00:19:17,260
And aside from upfront purchase,
which we've had in

419
00:19:17,260 --> 00:19:20,230
the web store from the
beginning, we're also adding

420
00:19:20,230 --> 00:19:22,040
in app purchase now.

421
00:19:22,040 --> 00:19:23,590
And I'll give you just
a preview of

422
00:19:23,590 --> 00:19:24,240
what this looks like.

423
00:19:24,240 --> 00:19:26,930
Here I've got kind of a
contrived, I want to make it

424
00:19:26,930 --> 00:19:29,840
buy a gold star here, so
I hover over this.

425
00:19:29,840 --> 00:19:35,200
When I click on it, it just pops
up some Google Wallet UI.

426
00:19:35,200 --> 00:19:37,730
If I wasn't signed in, it would
walk me through the sign

427
00:19:37,730 --> 00:19:38,480
in process.

428
00:19:38,480 --> 00:19:40,590
Again, you as a developer don't
need to write any of

429
00:19:40,590 --> 00:19:44,550
this code, but if somebody is
already signed up, they just

430
00:19:44,550 --> 00:19:48,630
click the Buy button, and it
takes a second or two.

431
00:19:48,630 --> 00:19:51,020
And I'm going against
the debug server, so

432
00:19:51,020 --> 00:19:52,070
it's a little slower.

433
00:19:52,070 --> 00:19:55,160
But now it's done, and boom,
I've got a gold star.

434
00:19:55,160 --> 00:19:58,290
And if it hadn't done it, it
would have given me a failure

435
00:19:58,290 --> 00:19:59,330
message there.

436
00:19:59,330 --> 00:20:00,570
Really simple to use.

437
00:20:00,570 --> 00:20:04,020
Just drop in a little line of
JavaScript, and away you go.

438
00:20:04,020 --> 00:20:08,190
We're really interested in
talking to you about some

439
00:20:08,190 --> 00:20:10,270
other things on the monetization
front.

440
00:20:10,270 --> 00:20:12,250
We've got a number of other
projects underway that we're

441
00:20:12,250 --> 00:20:16,440
not ready to talk about quite
yet, but this is an area that

442
00:20:16,440 --> 00:20:17,600
we're really going
to be focusing on

443
00:20:17,600 --> 00:20:19,830
over the next 12 months.

444
00:20:19,830 --> 00:20:23,410
So basically, Chrome packaged
apps are immersive, they've

445
00:20:23,410 --> 00:20:27,150
got rich OS capabilities, they
are offline by default, and

446
00:20:27,150 --> 00:20:28,790
cloud enabled by default
together.

447
00:20:28,790 --> 00:20:30,300
And that's an important
combination.

448
00:20:30,300 --> 00:20:31,810
They are cross platform.

449
00:20:31,810 --> 00:20:33,850
You write your app
basically once.

450
00:20:33,850 --> 00:20:36,410
It'll run across these
different platforms.

451
00:20:36,410 --> 00:20:38,290
You'll be able to share a large
amount of the code as

452
00:20:38,290 --> 00:20:40,040
you go, even to mobile.

453
00:20:40,040 --> 00:20:42,210
And you get all the
great development

454
00:20:42,210 --> 00:20:44,110
tools you're used to.

455
00:20:44,110 --> 00:20:47,800
And my slide is a little
crunched here, but

456
00:20:47,800 --> 00:20:53,080
distribution and monetization
come into play there as well.

457
00:20:53,080 --> 00:20:55,650
So I'd like to walk you
through, now, a few

458
00:20:55,650 --> 00:20:57,890
concrete use cases.

459
00:20:57,890 --> 00:21:00,760
So we've just talked about what
Chrome packaged apps are,

460
00:21:00,760 --> 00:21:02,680
but now who should use them?

461
00:21:02,680 --> 00:21:06,240
Why would you use this over
some other native desktop

462
00:21:06,240 --> 00:21:07,550
technology?

463
00:21:07,550 --> 00:21:09,350
Well, one example
is Chrome OS.

464
00:21:09,350 --> 00:21:11,780
And as you heard in the keynote,
Chrome OS continues

465
00:21:11,780 --> 00:21:12,860
to grow rapidly.

466
00:21:12,860 --> 00:21:16,270
We're still early days, but the
fact that we've been one

467
00:21:16,270 --> 00:21:20,160
of the top sellers, top laptop
items in Amazon, we're doing

468
00:21:20,160 --> 00:21:23,830
extremely well and expanding our
reach in retail and Best

469
00:21:23,830 --> 00:21:26,780
Buy, and in international
circles, as you've seen

470
00:21:26,780 --> 00:21:28,530
announcements that we're
expanding the number of

471
00:21:28,530 --> 00:21:29,670
countries we cover.

472
00:21:29,670 --> 00:21:32,280
Now is a great time that
you can step in and

473
00:21:32,280 --> 00:21:33,700
sort of be the app.

474
00:21:33,700 --> 00:21:36,910
If you go out into the Chrome
sandbox, for example, you can

475
00:21:36,910 --> 00:21:39,320
see a video editing
application.

476
00:21:39,320 --> 00:21:41,470
This is something people sort
of said, well, you can't

477
00:21:41,470 --> 00:21:43,020
really do that on Chrome OS.

478
00:21:43,020 --> 00:21:44,010
Well, yes you can.

479
00:21:44,010 --> 00:21:47,250
With Chrome packaged apps, you
can do an offline capable,

480
00:21:47,250 --> 00:21:49,910
full video editor.

481
00:21:49,910 --> 00:21:56,380
Or maybe you've got an idea for
some diagramming software.

482
00:21:56,380 --> 00:22:00,250
Well, you can be the first one
out there who builds that

483
00:22:00,250 --> 00:22:03,430
diagramming software, and like
[? Gliffy ?] is, and again

484
00:22:03,430 --> 00:22:07,110
they're out in the sandbox,
and now own that space.

485
00:22:07,110 --> 00:22:11,780
You become the diagramming
software for Chrome OS by

486
00:22:11,780 --> 00:22:13,030
doing that.

487
00:22:13,030 --> 00:22:16,920

488
00:22:16,920 --> 00:22:19,260
Now, I mentioned cross
platform before.

489
00:22:19,260 --> 00:22:22,570
This is an important use case as
well, but I want to expound

490
00:22:22,570 --> 00:22:28,780
on it a little bit, because the
main thing that is changed

491
00:22:28,780 --> 00:22:32,450
over the last 10, 15 years in
this is it used to be that you

492
00:22:32,450 --> 00:22:35,500
really only had to writ e
for one platform before.

493
00:22:35,500 --> 00:22:37,415
You just had to write
for Windows.

494
00:22:37,415 --> 00:22:41,700
But nowadays you have to write
for Windows, for Mac, for the

495
00:22:41,700 --> 00:22:46,660
web, for two, three, four
mobile platforms, maybe.

496
00:22:46,660 --> 00:22:48,550
And maybe even another
version of Windows.

497
00:22:48,550 --> 00:22:50,010
Windows 8, you might need
a different version

498
00:22:50,010 --> 00:22:50,930
of your app, right?

499
00:22:50,930 --> 00:22:54,050
And each of these different
platforms that you're

500
00:22:54,050 --> 00:22:56,380
targeting has a cost to it.

501
00:22:56,380 --> 00:22:57,570
They're different
technologies.

502
00:22:57,570 --> 00:22:59,540
You often have to have different
developer teams,

503
00:22:59,540 --> 00:23:01,010
different areas of expertise.

504
00:23:01,010 --> 00:23:02,450
Maybe you can't share
the code.

505
00:23:02,450 --> 00:23:04,500
Maybe you can't keep
the apps in sync.

506
00:23:04,500 --> 00:23:07,070
All of that is a cost, and
there's also hidden costs that

507
00:23:07,070 --> 00:23:09,450
developers often forget
about upfront.

508
00:23:09,450 --> 00:23:12,300
There's things like installers,
and auto updaters.

509
00:23:12,300 --> 00:23:15,170
All the sort of guts that sort
of keep your app working and

510
00:23:15,170 --> 00:23:18,000
get it out to your users, and
help make it all work.

511
00:23:18,000 --> 00:23:21,150
Those are things that
we take care of.

512
00:23:21,150 --> 00:23:23,020
You don't have to write an
installer ever again.

513
00:23:23,020 --> 00:23:27,290
You don't have to write an
auto-updater ever again.

514
00:23:27,290 --> 00:23:30,290
So another interesting use
case is device apps.

515
00:23:30,290 --> 00:23:36,310
Now, what I mean by this is
these days, there's a lot of

516
00:23:36,310 --> 00:23:38,430
interesting gadgets out there.

517
00:23:38,430 --> 00:23:42,650
There's fitness equipment,
there's GPS connected watches,

518
00:23:42,650 --> 00:23:46,640
there's things that are used
to sync music to my car.

519
00:23:46,640 --> 00:23:49,200
Basically, there's this
rebirth, resurgence in

520
00:23:49,200 --> 00:23:51,700
consumer electronics because
these devices are all now

521
00:23:51,700 --> 00:23:53,070
getting internet connected.

522
00:23:53,070 --> 00:23:55,050
Syncing data with my computer.

523
00:23:55,050 --> 00:23:57,670
And what that means is that each
of these devices needs to

524
00:23:57,670 --> 00:24:00,340
be able to actually talk to
my computer in some way.

525
00:24:00,340 --> 00:24:02,740
They need to have some bit of
software that runs on the app.

526
00:24:02,740 --> 00:24:04,590
And if you're one of the
developers that's writing one

527
00:24:04,590 --> 00:24:06,600
of these things, you
now have a problem.

528
00:24:06,600 --> 00:24:09,990
And again, it's this cross
platform problem, because you

529
00:24:09,990 --> 00:24:11,350
have to go where
your users are.

530
00:24:11,350 --> 00:24:13,950
So you have to write an app,
write maybe even a device

531
00:24:13,950 --> 00:24:16,800
driver for each of these
different platforms.

532
00:24:16,800 --> 00:24:20,780
What we provide is some APIs out
of the box that will allow

533
00:24:20,780 --> 00:24:24,740
you to do USB, Bluetooth
in a cross platform way

534
00:24:24,740 --> 00:24:26,080
from user land code.

535
00:24:26,080 --> 00:24:31,280
And let me just show you a
really simple example of this.

536
00:24:31,280 --> 00:24:35,760
This is a little thermal label
printer that you probably saw

537
00:24:35,760 --> 00:24:39,100
a few of the people
downstairs using.

538
00:24:39,100 --> 00:24:43,740
But this is something where I'm
connecting this up to a

539
00:24:43,740 --> 00:24:44,970
Chrome OS device.

540
00:24:44,970 --> 00:24:50,360
Now, this OS doesn't have a
device driver for this guy.

541
00:24:50,360 --> 00:24:52,950
I didn't know about it at all
in advance, but we have a

542
00:24:52,950 --> 00:24:56,390
little sample app that we wrote
here that is written

543
00:24:56,390 --> 00:24:59,290
specifically for this.

544
00:24:59,290 --> 00:25:04,740
And I'll just do this, and let
me also just, again, integrate

545
00:25:04,740 --> 00:25:09,420
with the webcam, take a picture,
and I say print, and

546
00:25:09,420 --> 00:25:11,430
the printer starts going
and talking.

547
00:25:11,430 --> 00:25:14,430
And this was something that one
of our developers banged

548
00:25:14,430 --> 00:25:19,070
out in an afternoon in one
of our hackathons.

549
00:25:19,070 --> 00:25:20,920
So, anyway you can't really
see it very well there.

550
00:25:20,920 --> 00:25:26,230
But again, all of that was done
without the OS having to

551
00:25:26,230 --> 00:25:28,880
know about things in advance
installed from user [? land ?]

552
00:25:28,880 --> 00:25:30,030
code.

553
00:25:30,030 --> 00:25:32,310
Really easy.

554
00:25:32,310 --> 00:25:36,110
Another interesting use case, if
you're a developer, you've

555
00:25:36,110 --> 00:25:37,640
had to write a kiosk.

556
00:25:37,640 --> 00:25:41,730
An application that needs be
full screen, locked down,

557
00:25:41,730 --> 00:25:43,520
single purpose.

558
00:25:43,520 --> 00:25:48,620
Think ATMs or airport ticket
buying things,

559
00:25:48,620 --> 00:25:50,900
or reservation shores.

560
00:25:50,900 --> 00:25:53,470
Or even at the front desk
here when you were

561
00:25:53,470 --> 00:25:55,590
registering this morning.

562
00:25:55,590 --> 00:25:59,190
This is a kiosk application,
and traditionally, kiosk

563
00:25:59,190 --> 00:26:03,810
applications have been written
on old versions of Windows XP.

564
00:26:03,810 --> 00:26:06,610
There's like, an industry there,
and you've probably all

565
00:26:06,610 --> 00:26:10,400
laughed and seen the blue
screens of death on various

566
00:26:10,400 --> 00:26:11,860
terminals around as
you've walked.

567
00:26:11,860 --> 00:26:13,880
And I assure you, for the
developers who write that,

568
00:26:13,880 --> 00:26:16,640
that's not funny.

569
00:26:16,640 --> 00:26:19,270
It turns out that not only is
stability of the platform a

570
00:26:19,270 --> 00:26:21,640
problem, but also
administration, pushing

571
00:26:21,640 --> 00:26:24,510
updates is a big problem
for these things.

572
00:26:24,510 --> 00:26:29,880
And I'm happy to announce that
today, we're rolling out kiosk

573
00:26:29,880 --> 00:26:32,120
app functionality
in Chrome OS.

574
00:26:32,120 --> 00:26:35,520
This means that you can use our
enterprise policies, our

575
00:26:35,520 --> 00:26:39,770
dashboard to automatically push
out and deploy a kiosk

576
00:26:39,770 --> 00:26:44,010
application to a Chrome OS
device and have it boot up and

577
00:26:44,010 --> 00:26:45,990
be in that mode.

578
00:26:45,990 --> 00:26:49,180
And because it's Chrome OS,
it will auto update

579
00:26:49,180 --> 00:26:49,800
automatically.

580
00:26:49,800 --> 00:26:51,510
Your app will auto update
automatically.

581
00:26:51,510 --> 00:26:53,220
It's all written in HTML
and JavaScript.

582
00:26:53,220 --> 00:26:56,280
It's much easier to build
the debug test.

583
00:26:56,280 --> 00:26:58,790
And in fact, as I've mentioned,
the kiosk app that

584
00:26:58,790 --> 00:27:01,240
we're using downstairs is
using this technology.

585
00:27:01,240 --> 00:27:02,890
It's worked pretty well.

586
00:27:02,890 --> 00:27:05,450
I'll show you another one that
one of our partners out in the

587
00:27:05,450 --> 00:27:07,890
sandbox is using.

588
00:27:07,890 --> 00:27:09,510
This is from Pearson.

589
00:27:09,510 --> 00:27:12,590

590
00:27:12,590 --> 00:27:14,850
They do test taking.

591
00:27:14,850 --> 00:27:18,810
So this is a student test, so
aiming at like, high school

592
00:27:18,810 --> 00:27:20,000
students or something.

593
00:27:20,000 --> 00:27:22,855
But they basically want to take
students in, put them in

594
00:27:22,855 --> 00:27:25,000
front of a computer, have it be
locked down, just take the

595
00:27:25,000 --> 00:27:28,950
test, get the result, and have
things go, and it starts

596
00:27:28,950 --> 00:27:30,610
asking questions and all that.

597
00:27:30,610 --> 00:27:33,180
So right now because I'm running
this sort of already

598
00:27:33,180 --> 00:27:35,800
logged in, it's not really
fully in kiosk mode, but

599
00:27:35,800 --> 00:27:37,860
you'll have to take my word for
it about what that would

600
00:27:37,860 --> 00:27:39,630
look like, and that the user
wouldn't be able to

601
00:27:39,630 --> 00:27:42,280
pop out like this.

602
00:27:42,280 --> 00:27:43,580
OK.

603
00:27:43,580 --> 00:27:45,100
Games.

604
00:27:45,100 --> 00:27:46,730
Now, games is another
important use case.

605
00:27:46,730 --> 00:27:48,720
We've spent a fair amount
of time looking at--

606
00:27:48,720 --> 00:27:51,990
this one takes a little while
to start up, so I'll talk a

607
00:27:51,990 --> 00:27:53,150
little bit over it.

608
00:27:53,150 --> 00:27:55,320
So this is built using native
client technology.

609
00:27:55,320 --> 00:28:00,930
With native client allows you
to do is use native code and

610
00:28:00,930 --> 00:28:04,260
bring it to the web platform
basically with the same level

611
00:28:04,260 --> 00:28:07,950
of security as JavaScript, but
the similar performance to

612
00:28:07,950 --> 00:28:08,870
native code.

613
00:28:08,870 --> 00:28:11,380
And this one's built using
the Unity engine.

614
00:28:11,380 --> 00:28:16,950
It's a cute little game that's
in the web store now.

615
00:28:16,950 --> 00:28:18,480
This is a little demo
here, which I

616
00:28:18,480 --> 00:28:21,290
apparently have reset recently.

617
00:28:21,290 --> 00:28:24,410
So anyway, you hop around
and you've got

618
00:28:24,410 --> 00:28:25,440
multiple clones of yourself.

619
00:28:25,440 --> 00:28:26,060
It's very cute.

620
00:28:26,060 --> 00:28:28,300
I recommend trying it out, here
I can't really demo it

621
00:28:28,300 --> 00:28:29,970
all the way, but you
could see it had a

622
00:28:29,970 --> 00:28:32,320
few interesting features.

623
00:28:32,320 --> 00:28:37,040
It could be full screen, you can
add things like mouse lock

624
00:28:37,040 --> 00:28:39,390
for first person shooters,
or that sort of thing.

625
00:28:39,390 --> 00:28:40,980
Integrate with the gamepad.

626
00:28:40,980 --> 00:28:46,320
Again, do what you need to do
this as a game developer.

627
00:28:46,320 --> 00:28:48,730
Another interesting use case,
again, something you can go

628
00:28:48,730 --> 00:28:52,090
out and see first hand in the
Chrome sandbox on the third

629
00:28:52,090 --> 00:28:58,240
floor is this idea of saying,
I've got a website, and I want

630
00:28:58,240 --> 00:29:00,580
to make that website
even better.

631
00:29:00,580 --> 00:29:07,720
And it looks like I need
to log in here.

632
00:29:07,720 --> 00:29:08,970
Uh-oh.

633
00:29:08,970 --> 00:29:11,230

634
00:29:11,230 --> 00:29:12,750
Best laid plans here.

635
00:29:12,750 --> 00:29:16,690
Well, you'll have to go check
it out, the sandbox.

636
00:29:16,690 --> 00:29:22,790
The idea here is that basically,
take a website and

637
00:29:22,790 --> 00:29:23,880
give it extra powers.

638
00:29:23,880 --> 00:29:25,890
In this case, they made it
something that was offline,

639
00:29:25,890 --> 00:29:29,330
that could sync in the
background, issues down, and

640
00:29:29,330 --> 00:29:31,380
so that no matter where you
are, whether you have a

641
00:29:31,380 --> 00:29:33,495
network or not, you always have
the latest content, and

642
00:29:33,495 --> 00:29:34,950
it's always on your device
ready to go.

643
00:29:34,950 --> 00:29:36,780
And it's a full screen,
immersive experience that you

644
00:29:36,780 --> 00:29:39,920
can bookmark and share, and that
it remembers where you

645
00:29:39,920 --> 00:29:42,720
were, and picks up where you
left off when you go from

646
00:29:42,720 --> 00:29:44,600
machine to machine.

647
00:29:44,600 --> 00:29:46,670
So, a bunch of interesting
use cases.

648
00:29:46,670 --> 00:29:48,960
These are where we've been
getting a lot of the most

649
00:29:48,960 --> 00:29:51,540
interest, but we think there's
more out there.

650
00:29:51,540 --> 00:29:54,870
These are just a few of
the key examples.

651
00:29:54,870 --> 00:29:59,430
So let me talk a little bit
about where we're going.

652
00:29:59,430 --> 00:30:03,250
So I mentioned we're in consumer
preview now for

653
00:30:03,250 --> 00:30:04,650
Windows and Chrome OS.

654
00:30:04,650 --> 00:30:06,660
That's in Chrome 28.

655
00:30:06,660 --> 00:30:09,690
If you're on the dev channel,
you can go to the web store,

656
00:30:09,690 --> 00:30:11,760
download, play with some of the
apps that these developers

657
00:30:11,760 --> 00:30:13,250
have been making.

658
00:30:13,250 --> 00:30:16,176
We're going to do our full
consumer launch to Windows and

659
00:30:16,176 --> 00:30:17,920
Chrome OS users in Chrome 29.

660
00:30:17,920 --> 00:30:20,350
That's later this summer.

661
00:30:20,350 --> 00:30:22,620
Mac and Linux support
will be coming soon.

662
00:30:22,620 --> 00:30:25,030
Right now you can run it and
test it, but we don't have the

663
00:30:25,030 --> 00:30:28,240
full OS integration for Mac
and Linux done quite yet.

664
00:30:28,240 --> 00:30:31,420
That'll probably be in the
29 timeframe as well.

665
00:30:31,420 --> 00:30:33,010
We're continuing to
work really hard

666
00:30:33,010 --> 00:30:35,210
on Android and iOS.

667
00:30:35,210 --> 00:30:37,610
It's pretty early on, even
though the demo I showed you

668
00:30:37,610 --> 00:30:42,240
looked pretty good, we're not
quite at the stage where we

669
00:30:42,240 --> 00:30:45,080
think every developer should go
rushing and give it a try.

670
00:30:45,080 --> 00:30:48,310
But we're going to start
reaching out to early testers

671
00:30:48,310 --> 00:30:51,300
soon, and we'll be talking at
the Cordova conference in

672
00:30:51,300 --> 00:30:54,630
July, and we think we'll be
ready for wider use around

673
00:30:54,630 --> 00:30:57,210
that timeframe.

674
00:30:57,210 --> 00:30:59,290
So, another interesting use
case I didn't talk about,

675
00:30:59,290 --> 00:31:02,080
because it's something we're
still working on and looking

676
00:31:02,080 --> 00:31:05,320
to do is we want to make it
possible for people to build

677
00:31:05,320 --> 00:31:07,920
developer tools on
this platform.

678
00:31:07,920 --> 00:31:09,490
And you saw a few examples.

679
00:31:09,490 --> 00:31:11,730
Yes, I want it, too.

680
00:31:11,730 --> 00:31:15,560
So one of the big things we've
heard from Chrome OS users is

681
00:31:15,560 --> 00:31:19,630
that they love the machines, but
they would love to be able

682
00:31:19,630 --> 00:31:21,970
to do self hosted development
just on this machine.

683
00:31:21,970 --> 00:31:25,120
As developers, we want to be
able to use the computers for

684
00:31:25,120 --> 00:31:27,120
everything, right?

685
00:31:27,120 --> 00:31:29,580
And because of the model we've
got where apps tend to be

686
00:31:29,580 --> 00:31:33,180
sandboxed themselves, that means
that we have to figure

687
00:31:33,180 --> 00:31:35,350
out how to make the apps be able
to share and communicate

688
00:31:35,350 --> 00:31:37,850
with each other, as developer
tools often need to do.

689
00:31:37,850 --> 00:31:40,200
So we're working on some
experimental new APIs.

690
00:31:40,200 --> 00:31:42,990
You can look in our GitHub
repository for a sample app

691
00:31:42,990 --> 00:31:48,110
that we're building that's sort
of an IDE for Chrome OS.

692
00:31:48,110 --> 00:31:50,980
Monetization, I mentioned this
before, we've got a lot of

693
00:31:50,980 --> 00:31:54,100
ideas on new things we're
going to do on the

694
00:31:54,100 --> 00:31:55,470
monetization front.

695
00:31:55,470 --> 00:31:57,210
New APIs.

696
00:31:57,210 --> 00:31:59,390
These are both areas where you
could get involved with the

697
00:31:59,390 --> 00:32:03,090
community and give us your
feedback about what you think

698
00:32:03,090 --> 00:32:05,200
are our highest priorities
for you, the things

699
00:32:05,200 --> 00:32:05,990
that you most need.

700
00:32:05,990 --> 00:32:08,710
And of course, we're going to
continue to work on those core

701
00:32:08,710 --> 00:32:11,140
concepts that Linus mentioned
in the keynote.

702
00:32:11,140 --> 00:32:12,650
Speed, simplicity, security.

703
00:32:12,650 --> 00:32:15,320
Polishing the platform, making
it faster, making it more

704
00:32:15,320 --> 00:32:17,900
reliable and more secure.

705
00:32:17,900 --> 00:32:20,020
So, thanks everybody
for coming.

706
00:32:20,020 --> 00:32:22,590
I just want to give you a few
more pointers to information

707
00:32:22,590 --> 00:32:24,030
where you can learn more.

708
00:32:24,030 --> 00:32:27,530
We have a number of talks going
on about packaged apps.

709
00:32:27,530 --> 00:32:31,630
Joe Marini is doing a talk on
Thursday, I believe, about how

710
00:32:31,630 --> 00:32:33,870
to convert your app,
your website into a

711
00:32:33,870 --> 00:32:35,880
Chrome packaged app.

712
00:32:35,880 --> 00:32:39,550
We're doing a code lab
that [? Renato ?]

713
00:32:39,550 --> 00:32:43,750
over here is going to actually
allow you to create a packaged

714
00:32:43,750 --> 00:32:45,460
app from start to finish.

715
00:32:45,460 --> 00:32:48,400
The guys behind the G+ photos
app that just gave you a brief

716
00:32:48,400 --> 00:32:53,560
demo of are going to give you a
walk through of what it took

717
00:32:53,560 --> 00:32:57,210
them to build a large, full
scale, grown packaged app with

718
00:32:57,210 --> 00:33:00,230
real database synchronization
the cloud.

719
00:33:00,230 --> 00:33:04,420
And you can always find
us up in the sandbox.

720
00:33:04,420 --> 00:33:06,500
There's a bunch of app
developers up there that have

721
00:33:06,500 --> 00:33:09,200
built cool things with this
technology already, and you

722
00:33:09,200 --> 00:33:11,670
can learn from them about what
they like, and what they don't

723
00:33:11,670 --> 00:33:12,950
like so far.

724
00:33:12,950 --> 00:33:16,010
Of course, our documentation,
you can find us on G+.

725
00:33:16,010 --> 00:33:20,360
We've got a great community
there, and Stack Overflow,

726
00:33:20,360 --> 00:33:21,640
we're there answering
questions.

727
00:33:21,640 --> 00:33:24,760
We've got a mailing list, and
even the developers are

728
00:33:24,760 --> 00:33:28,420
hanging out on our IRC channel,
if you want to come

729
00:33:28,420 --> 00:33:30,410
talk to devs directly.

730
00:33:30,410 --> 00:33:32,968
So, thanks much, and I'll
take questions now.

731
00:33:32,968 --> 00:33:42,050

732
00:33:42,050 --> 00:33:43,010
Thanks.

733
00:33:43,010 --> 00:33:43,260
MALE SPEAKER: Hello.

734
00:33:43,260 --> 00:33:45,660
This sounds really cool for
developers, but I was

735
00:33:45,660 --> 00:33:47,380
wondering if you could talk a
little bit about the user

736
00:33:47,380 --> 00:33:47,970
experience.

737
00:33:47,970 --> 00:33:50,625
You mentioned Google Wallet and
Google Drive account, and

738
00:33:50,625 --> 00:33:51,480
a Google account.

739
00:33:51,480 --> 00:33:54,330
And all those things, and I
know that, for example in

740
00:33:54,330 --> 00:33:56,320
Germany, there's a lot of people
who are reluctant to

741
00:33:56,320 --> 00:33:58,540
giving all of their
data to Google.

742
00:33:58,540 --> 00:34:00,440
And I was just wondering, how
many things do I need to

743
00:34:00,440 --> 00:34:01,490
install as a user?

744
00:34:01,490 --> 00:34:03,920
How many things do I need to
sign up for, and how many

745
00:34:03,920 --> 00:34:06,780
accounts do I need to merge into
one, and how much data am

746
00:34:06,780 --> 00:34:11,060
I giving to Google and sharing
everywhere to be able to use

747
00:34:11,060 --> 00:34:12,870
these apps?

748
00:34:12,870 --> 00:34:14,080
ERIK KAY: So I mean, it
depends on the apps.

749
00:34:14,080 --> 00:34:17,469
The apps don't have to be tied
to Google in particular, but

750
00:34:17,469 --> 00:34:19,040
some will be, just like
some apps are

751
00:34:19,040 --> 00:34:21,360
tied to other platforms.

752
00:34:21,360 --> 00:34:23,850
So it's up to the developer
about what they want to do.

753
00:34:23,850 --> 00:34:27,610
We do require that you have a
Google account to sign in, so

754
00:34:27,610 --> 00:34:31,070
that we can take advantage of
some of the functionality with

755
00:34:31,070 --> 00:34:34,460
sync and sync file system,
and that sort of thing.

756
00:34:34,460 --> 00:34:37,520
So that we don't force you to
go through that sort of

757
00:34:37,520 --> 00:34:41,020
process within each app,
we try to handle

758
00:34:41,020 --> 00:34:42,270
it a central way.

759
00:34:42,270 --> 00:34:45,090
But really, it's up to the app
about how much they want to do

760
00:34:45,090 --> 00:34:46,570
on that front.

761
00:34:46,570 --> 00:34:47,400
MALE SPEAKER: How about
the installation

762
00:34:47,400 --> 00:34:49,449
process for the software?

763
00:34:49,449 --> 00:34:51,520
ERIK KAY: Right, so
the installation--

764
00:34:51,520 --> 00:34:53,980
so at that point, the only
thing you need to do is--

765
00:34:53,980 --> 00:34:55,159
we handle that for you.

766
00:34:55,159 --> 00:34:58,510
If you've got Chrome, it'll just
install automatically.

767
00:34:58,510 --> 00:35:01,030
We're also working on ways to
have it, so even from other

768
00:35:01,030 --> 00:35:02,990
browsers, you will just
install these

769
00:35:02,990 --> 00:35:04,840
apps with one step.

770
00:35:04,840 --> 00:35:07,090
MALE SPEAKER: OK, thanks.

771
00:35:07,090 --> 00:35:08,490
MALE SPEAKER: We're currently
using packaged apps with

772
00:35:08,490 --> 00:35:10,070
WebRTC on like, Mac OS.

773
00:35:10,070 --> 00:35:12,650
And it works great, so when you
port it over to Android or

774
00:35:12,650 --> 00:35:15,730
to iOS, is WebRTC going
to follow with you?

775
00:35:15,730 --> 00:35:18,100
And then also, if you just
talked about the messaging

776
00:35:18,100 --> 00:35:20,610
components as well, so when you
take it into Android, does

777
00:35:20,610 --> 00:35:23,980
it change the Chrome messaging
into Android Cloud Messaging,

778
00:35:23,980 --> 00:35:25,640
and how does that all work?

779
00:35:25,640 --> 00:35:26,360
ERIK KAY: Sure.

780
00:35:26,360 --> 00:35:27,940
So those are all great
questions.

781
00:35:27,940 --> 00:35:29,440
As I mentioned, we're
pretty early on

782
00:35:29,440 --> 00:35:30,840
with the Cordova stuff.

783
00:35:30,840 --> 00:35:32,940
But it's important for people
to know there are a few

784
00:35:32,940 --> 00:35:34,930
limitations of Cordova stuff.

785
00:35:34,930 --> 00:35:38,860
One is that we're dependent on
the web view on the platform

786
00:35:38,860 --> 00:35:40,330
that we're on with this.

787
00:35:40,330 --> 00:35:43,960
So if the platform doesn't,
like iOS currently doesn't

788
00:35:43,960 --> 00:35:47,010
have WebRTC, it'll mean
that we won't

789
00:35:47,010 --> 00:35:48,640
have it WebRTCed there.

790
00:35:48,640 --> 00:35:50,850
Now, we're going to try to have
polyfills when possible

791
00:35:50,850 --> 00:35:53,370
on some of the features,
but some of them are

792
00:35:53,370 --> 00:35:54,880
so in depth to the--

793
00:35:54,880 --> 00:35:56,560
MALE SPEAKER: Because Android
has WebRTC now.

794
00:35:56,560 --> 00:35:57,400
ERIK KAY: What's that?

795
00:35:57,400 --> 00:35:58,570
MALE SPEAKER: Android
has WebRTC now.

796
00:35:58,570 --> 00:36:01,300
ERIK KAY: Yeah, so Android has
WebRTC now, so you would have

797
00:36:01,300 --> 00:36:04,915
access to it there, but iOS
doesn't, for example.

798
00:36:04,915 --> 00:36:10,100
But for the Chrome APIs in
specific, those are all things

799
00:36:10,100 --> 00:36:12,770
that we provide bindings for,
and we'll provide bindings and

800
00:36:12,770 --> 00:36:13,460
try to map them--

801
00:36:13,460 --> 00:36:15,460
MALE SPEAKER: So basically
if it's in Chrome on the

802
00:36:15,460 --> 00:36:16,905
operating system, you'll
support it in

803
00:36:16,905 --> 00:36:19,480
the packaged app.

804
00:36:19,480 --> 00:36:24,600
ERIK KAY: So if it's in the web
view, if it's in Chrome,

805
00:36:24,600 --> 00:36:28,220
the Chrome dot star APIs, we'll
try to support it as

806
00:36:28,220 --> 00:36:30,710
best we can and map it to
the native equivalent.

807
00:36:30,710 --> 00:36:33,930
So if it's rich notifications,
we'll map the notifications to

808
00:36:33,930 --> 00:36:36,270
whatever the system
can do there.

809
00:36:36,270 --> 00:36:37,560
That sort of thing.

810
00:36:37,560 --> 00:36:39,890
And when it's part of the web
platform, we're limited to

811
00:36:39,890 --> 00:36:42,710
what the web view can
do on that platform.

812
00:36:42,710 --> 00:36:44,630
MALE SPEAKER: So now as far as
the messaging components go,

813
00:36:44,630 --> 00:36:47,560
if I use Chrome messaging and
you're in Android, will it

814
00:36:47,560 --> 00:36:49,030
move the message to Android?

815
00:36:49,030 --> 00:36:50,920
ERIK KAY: That's the idea,
although we don't have that

816
00:36:50,920 --> 00:36:51,880
one together yet.

817
00:36:51,880 --> 00:36:52,320
MALE SPEAKER: Got it.

818
00:36:52,320 --> 00:36:53,250
OK, thank you very much.

819
00:36:53,250 --> 00:36:54,350
ERIK KAY: No problem.

820
00:36:54,350 --> 00:36:55,170
MALE SPEAKER: Hi.

821
00:36:55,170 --> 00:36:58,140
I'm actually an Android
developer and student who got

822
00:36:58,140 --> 00:37:00,640
interested in packaged apps when
his MacBook broke down in

823
00:37:00,640 --> 00:37:02,290
the middle of the summer and
spent the semester using a

824
00:37:02,290 --> 00:37:03,860
Chromebook.

825
00:37:03,860 --> 00:37:06,980
I know you mentioned an IDE
for Chrome extensions in

826
00:37:06,980 --> 00:37:09,270
Chrome OS, but have you guys
thought or talked at all to

827
00:37:09,270 --> 00:37:12,130
the Android or other development
teams about making

828
00:37:12,130 --> 00:37:15,650
tools for other platforms
for Chrome OS?

829
00:37:15,650 --> 00:37:16,180
ERIK KAY: Oh, I see.

830
00:37:16,180 --> 00:37:17,640
So you want to target Android?

831
00:37:17,640 --> 00:37:18,070
Yes.

832
00:37:18,070 --> 00:37:21,310
So in fact, one of our internal
guys has a prototype

833
00:37:21,310 --> 00:37:24,690
version of ADB working on a
Chromebook that's building

834
00:37:24,690 --> 00:37:28,270
using our socket and USB APIs.

835
00:37:28,270 --> 00:37:30,260
So yeah, it's definitely
possible, and something we're

836
00:37:30,260 --> 00:37:31,450
interested in.

837
00:37:31,450 --> 00:37:33,810
Some of it's going to be
harder than others.

838
00:37:33,810 --> 00:37:39,140
For example, bringing Java over
to Chrome OS is a little

839
00:37:39,140 --> 00:37:40,430
more work, obviously.

840
00:37:40,430 --> 00:37:43,390
But we think the with the
combination of native client

841
00:37:43,390 --> 00:37:45,390
and web technologies, that
we can get pretty far.

842
00:37:45,390 --> 00:37:48,090
MALE SPEAKER: OK, and one other
question is I know that

843
00:37:48,090 --> 00:37:52,160
it can compile to JavaScript,
but how does Dart play into

844
00:37:52,160 --> 00:37:53,350
the Chrome packaged apps?

845
00:37:53,350 --> 00:37:55,490
I know it's made more for
application development.

846
00:37:55,490 --> 00:37:57,470
ERIK KAY: It'll be the same as
the Chrome runtime anywhere.

847
00:37:57,470 --> 00:38:00,890
So you could either today,
compile it down to JavaScript,

848
00:38:00,890 --> 00:38:02,890
and we've got that working.

849
00:38:02,890 --> 00:38:06,090
We've got a few examples even
up in our GitHub repo.

850
00:38:06,090 --> 00:38:08,530
And I didn't have a link to
that there, but definitely

851
00:38:08,530 --> 00:38:11,780
check out the GitHub
Chrome examples.

852
00:38:11,780 --> 00:38:15,760
But when a VM, a Dart VM becomes
integrated in the

853
00:38:15,760 --> 00:38:19,430
Chrome runtime, assuming that
happens, then we'll just get

854
00:38:19,430 --> 00:38:21,550
that for free, and we'll have
Dart findings for all of our

855
00:38:21,550 --> 00:38:22,270
APIs as well.

856
00:38:22,270 --> 00:38:23,430
MALE SPEAKER: Cool. thank
you very much.

857
00:38:23,430 --> 00:38:24,342
ERIK KAY: Yep.

858
00:38:24,342 --> 00:38:28,310
MALE SPEAKER: Yeah, I want to
ask you about the uploading

859
00:38:28,310 --> 00:38:31,720
process for the web store, for
the Chrome packaged apps.

860
00:38:31,720 --> 00:38:35,480
And actually, I am very
interested in socket API.

861
00:38:35,480 --> 00:38:39,540
And I have that in the Firefox
OS [? cases ?]

862
00:38:39,540 --> 00:38:42,070
are using TCP socket
or UDP socket.

863
00:38:42,070 --> 00:38:46,180
They also checked the
packaged apps in a

864
00:38:46,180 --> 00:38:49,730
detailed way by the human.

865
00:38:49,730 --> 00:38:54,450
But I want to ask you that such
a human check process

866
00:38:54,450 --> 00:38:57,480
will be applied.

867
00:38:57,480 --> 00:39:02,320
For example, socket API is using
in the packaged apps.

868
00:39:02,320 --> 00:39:05,580
ERIK KAY: So I think we should
follow up afterwards, because

869
00:39:05,580 --> 00:39:07,760
I didn't catch all of it, but,
all of your questions.

870
00:39:07,760 --> 00:39:09,900
But it sounded like you were
asking when humans get, the

871
00:39:09,900 --> 00:39:11,740
human review process
kicks in versus

872
00:39:11,740 --> 00:39:13,340
automated review process.

873
00:39:13,340 --> 00:39:17,230
And for the apps APIs
in general,

874
00:39:17,230 --> 00:39:19,150
no, it's all automated.

875
00:39:19,150 --> 00:39:22,650
It's really, we only have
human manual review for

876
00:39:22,650 --> 00:39:24,280
extensions that use [? NP API ?]
today.

877
00:39:24,280 --> 00:39:26,800

878
00:39:26,800 --> 00:39:28,070
MALE SPEAKER: Hi.

879
00:39:28,070 --> 00:39:29,660
I come from China.

880
00:39:29,660 --> 00:39:35,850
[INAUDIBLE], organizers, so I
noticed the Chromebooks for

881
00:39:35,850 --> 00:39:38,070
Chian is only one IME.

882
00:39:38,070 --> 00:39:46,930
So I personally, the IME can
make a packaged A-P-P. So I

883
00:39:46,930 --> 00:39:51,640
can customize my special IME.

884
00:39:51,640 --> 00:39:54,170
ERIK KAY: With the extension
API, you're saying?

885
00:39:54,170 --> 00:39:55,420
MALE SPEAKER: IME.

886
00:39:55,420 --> 00:39:55,770
Yes.

887
00:39:55,770 --> 00:39:56,100
ERIK KAY: Yes, yes.

888
00:39:56,100 --> 00:39:59,660
So, I mean, we have an extension
API for making your

889
00:39:59,660 --> 00:40:04,420
own IMEs, and so that's
documented in the extensions

890
00:40:04,420 --> 00:40:06,160
system right now.

891
00:40:06,160 --> 00:40:09,340
I'm not an expert in that
particular one, but there's

892
00:40:09,340 --> 00:40:12,570
probably some folks up and,
if you go up to the Chrome

893
00:40:12,570 --> 00:40:14,300
sandbox area, we could probably
find somebody who

894
00:40:14,300 --> 00:40:15,470
could help you out.

895
00:40:15,470 --> 00:40:16,720
MALE SPEAKER: OK.

896
00:40:16,720 --> 00:40:18,700

897
00:40:18,700 --> 00:40:21,220
MALE SPEAKER: So packaged app
has apps that seem to have

898
00:40:21,220 --> 00:40:23,930
tons of additional
useful APIs.

899
00:40:23,930 --> 00:40:27,805
Is the goal for these APIs
to become web standards?

900
00:40:27,805 --> 00:40:29,460
ERIK KAY: So, It's
a great question.

901
00:40:29,460 --> 00:40:32,260
It's something that we've been
talking to other browser

902
00:40:32,260 --> 00:40:34,010
vendors about, and other
people who are

903
00:40:34,010 --> 00:40:35,020
working in this space.

904
00:40:35,020 --> 00:40:39,100
And we're actually really
excited about the possibility

905
00:40:39,100 --> 00:40:40,610
of standardizing these.

906
00:40:40,610 --> 00:40:42,670
Right now we think i
little bit early.

907
00:40:42,670 --> 00:40:45,650
We've been interacting a little
bit with the other

908
00:40:45,650 --> 00:40:48,550
folks, and sort of toying with
some of the ideas of like,

909
00:40:48,550 --> 00:40:49,280
what could happen.

910
00:40:49,280 --> 00:40:51,740
And we actually were part of
forming the sys apps working

911
00:40:51,740 --> 00:40:54,540
group to see if that
made sense.

912
00:40:54,540 --> 00:40:56,790
Like I said, it's still kind of
early on right now, because

913
00:40:56,790 --> 00:40:59,510
each vendor is working towards
their own shipping product

914
00:40:59,510 --> 00:41:01,940
yet, and we don't have any
forcing function that would

915
00:41:01,940 --> 00:41:04,330
really require interoperability
to happen.

916
00:41:04,330 --> 00:41:06,810
And I think that's where
standards come from.

917
00:41:06,810 --> 00:41:09,320
Not by things we design in
committees up front and try to

918
00:41:09,320 --> 00:41:11,840
get everybody to follow, but
really when you have multiple

919
00:41:11,840 --> 00:41:14,370
implementations that want to
find a way to interoperate.

920
00:41:14,370 --> 00:41:18,190
And so first we have to have
everybody ship what they're

921
00:41:18,190 --> 00:41:20,490
working on, and then we'll
figure out how to start

922
00:41:20,490 --> 00:41:21,750
pushing on the interoperability
thing.

923
00:41:21,750 --> 00:41:24,650
But we're very interested in
that, and continuing to talk

924
00:41:24,650 --> 00:41:26,730
to the other vendors about
it on a regular basis.

925
00:41:26,730 --> 00:41:28,800
MALE SPEAKER: When you say
what we're waiting for

926
00:41:28,800 --> 00:41:32,601
everybody to ship their own
version of packaged apps, are

927
00:41:32,601 --> 00:41:36,176
you including the Windows 8
programming platform, which

928
00:41:36,176 --> 00:41:36,230
takes also--

929
00:41:36,230 --> 00:41:36,800
ERIK KAY: Yeah, exactly.

930
00:41:36,800 --> 00:41:39,402
Windows 8 has essentially
already shipped, and Boot to

931
00:41:39,402 --> 00:41:42,360
Gecko is close to shipping, and
[? Taizen ?] is close to

932
00:41:42,360 --> 00:41:43,290
shipping their stuff.

933
00:41:43,290 --> 00:41:45,430
And there's a number of others
that are out there.

934
00:41:45,430 --> 00:41:47,740
And so we're just sort of
waiting for the forcing

935
00:41:47,740 --> 00:41:49,310
functions to come that
will drive us towards

936
00:41:49,310 --> 00:41:50,295
standardization.

937
00:41:50,295 --> 00:41:54,290
So it looks like we're over
time, so I'll stick around

938
00:41:54,290 --> 00:41:56,710
afterwards to answer a few more
questions, and then I'll

939
00:41:56,710 --> 00:42:00,470
go up to the Chrome sandbox
area, and I'm happy to take

940
00:42:00,470 --> 00:42:01,860
more questions from
folks there.

941
00:42:01,860 --> 00:42:03,210
So, thanks much, everybody.

942
00:42:03,210 --> 00:42:08,327

