1
00:00:00,000 --> 00:00:01,550

2
00:00:01,550 --> 00:00:02,410
ADDY OSMANI: Hi there.

3
00:00:02,410 --> 00:00:03,960
My name is Addy Osmani.

4
00:00:03,960 --> 00:00:05,930
I'm an engineer on
the Yeoman team.

5
00:00:05,930 --> 00:00:07,920
And today we're going to walk
through creating a new web

6
00:00:07,920 --> 00:00:11,340
application using Yeoman, a
workflow comprised of tools

7
00:00:11,340 --> 00:00:13,430
for improving your productivity
and speed during

8
00:00:13,430 --> 00:00:14,940
development.

9
00:00:14,940 --> 00:00:17,820
Yeoman is comprised of
three main tools--

10
00:00:17,820 --> 00:00:22,450
Yo for application, Bower for
front-end package management,

11
00:00:22,450 --> 00:00:25,090
and Grunt for building
your projects.

12
00:00:25,090 --> 00:00:26,900
Let's dive right in to
creating a new to do

13
00:00:26,900 --> 00:00:29,900
application from scratch.

14
00:00:29,900 --> 00:00:31,630
To get Yeoman installed,
you'll need to

15
00:00:31,630 --> 00:00:33,430
use Node and NPM.

16
00:00:33,430 --> 00:00:35,950
Make sure you have recent
versions of both available so

17
00:00:35,950 --> 00:00:37,680
that everything works
correctly.

18
00:00:37,680 --> 00:00:41,230
So we're just going to run NPM
install g, yo, and allow it to

19
00:00:41,230 --> 00:00:42,480
go install its dependencies.

20
00:00:42,480 --> 00:00:47,850

21
00:00:47,850 --> 00:00:51,620
And we're now going to install
an AngularJS Yeoman generator

22
00:00:51,620 --> 00:00:53,710
for scaffolding out
a new Angular app.

23
00:00:53,710 --> 00:00:56,890
Now, you only need to do this
once, so NPM install g

24
00:00:56,890 --> 00:00:58,140
generator angular.

25
00:00:58,140 --> 00:01:02,000

26
00:01:02,000 --> 00:01:03,360
Fantastic.

27
00:01:03,360 --> 00:01:07,040
Now, we can go run yo angular
to begin scaffolding a new

28
00:01:07,040 --> 00:01:08,400
application.

29
00:01:08,400 --> 00:01:10,890
This will ask us a number of
questions, such as do you want

30
00:01:10,890 --> 00:01:12,210
to include Twitter Bootstrap?

31
00:01:12,210 --> 00:01:14,080
I'm going to say yes.

32
00:01:14,080 --> 00:01:16,420
It gives us options about
whether we want to use Compass

33
00:01:16,420 --> 00:01:18,640
and a few other angular
resources.

34
00:01:18,640 --> 00:01:21,190
What this process is now doing
is fetching any dependencies

35
00:01:21,190 --> 00:01:24,200
needed for our AngularJS
workflow and scaffolding out

36
00:01:24,200 --> 00:01:25,520
any files required
for application.

37
00:01:25,520 --> 00:01:28,600

38
00:01:28,600 --> 00:01:31,030
Next, I'm going to preview
what this looks like.

39
00:01:31,030 --> 00:01:32,280
So I'm going to use
Grunt server.

40
00:01:32,280 --> 00:01:36,390

41
00:01:36,390 --> 00:01:39,280
And this is now firing up a
local server for me to preview

42
00:01:39,280 --> 00:01:40,430
me application.

43
00:01:40,430 --> 00:01:41,540
And there we go.

44
00:01:41,540 --> 00:01:44,230
Because this project is using
Live Reload, I can actually

45
00:01:44,230 --> 00:01:47,040
make changes to my sources, and
without me having to do

46
00:01:47,040 --> 00:01:49,760
anything else, it'll refresh
my browser for me, so I get

47
00:01:49,760 --> 00:01:52,570
this real time view of what's
going on inside my app.

48
00:01:52,570 --> 00:01:54,780
Now, I'm going to go to my
angular controller that was

49
00:01:54,780 --> 00:01:56,050
scaffolded out.

50
00:01:56,050 --> 00:01:58,360
And what I'm doing right
now is I'm creating a

51
00:01:58,360 --> 00:01:59,910
new array of todos--

52
00:01:59,910 --> 00:02:02,090
so item one, item two,
and item three.

53
00:02:02,090 --> 00:02:04,840
And these are some simple
todo items that'll be

54
00:02:04,840 --> 00:02:06,840
reflected in my app.

55
00:02:06,840 --> 00:02:09,789
I'm now going to go
back to main.html.

56
00:02:09,789 --> 00:02:13,370
And we're going to define a
template for these todos.

57
00:02:13,370 --> 00:02:15,990
My todos is going to be the
title of this page.

58
00:02:15,990 --> 00:02:17,050
And I'm going to start
defining my

59
00:02:17,050 --> 00:02:19,200
template, so new paragraph.

60
00:02:19,200 --> 00:02:22,810
And I'm going to use NG repeat,
which is an angular

61
00:02:22,810 --> 00:02:26,670
directive for allowing me to
basically repeat something for

62
00:02:26,670 --> 00:02:28,100
different items in
a collection.

63
00:02:28,100 --> 00:02:31,450
So I've got repeat, todo, and
todo, so for each todo in my

64
00:02:31,450 --> 00:02:32,560
todos array.

65
00:02:32,560 --> 00:02:37,490
And I'm now going to just
declare a new input field.

66
00:02:37,490 --> 00:02:41,700
And I'm using NG model which
represents a new angular model

67
00:02:41,700 --> 00:02:43,820
with two way binding.

68
00:02:43,820 --> 00:02:46,583
As you can see, it's now
reflecting the todos array

69
00:02:46,583 --> 00:02:49,060
that we defined earlier
inside my page.

70
00:02:49,060 --> 00:02:51,790
Let's now add the ability to
create some new todo items.

71
00:02:51,790 --> 00:02:54,010
And I'm going to define
a new form for this.

72
00:02:54,010 --> 00:02:55,900
So let's go down.

73
00:02:55,900 --> 00:02:58,000
Let's create a brand new form.

74
00:02:58,000 --> 00:03:00,060
And I don't need the
action on it.

75
00:03:00,060 --> 00:03:02,370
But what I am going to do is
that NG submit, which is

76
00:03:02,370 --> 00:03:03,790
another angular interactive.

77
00:03:03,790 --> 00:03:05,800
And I'm going to say, call
add todo whenever

78
00:03:05,800 --> 00:03:07,065
this form is submitted.

79
00:03:07,065 --> 00:03:09,710
What we're now going to do
is just add some divs for

80
00:03:09,710 --> 00:03:11,670
styling, some div wrappers
for styling, add

81
00:03:11,670 --> 00:03:14,790
some classes on that.

82
00:03:14,790 --> 00:03:17,720
And next, I'm going to add an
input field referencing our

83
00:03:17,720 --> 00:03:19,120
todo model.

84
00:03:19,120 --> 00:03:20,990
So there we go.

85
00:03:20,990 --> 00:03:25,030
And NG model equals todo.

86
00:03:25,030 --> 00:03:28,150
Let's give it some constraints
for the number of characters.

87
00:03:28,150 --> 00:03:30,980
And we should also probably add
a button just to say add

88
00:03:30,980 --> 00:03:32,550
or something like that, so that
when you've typed in some

89
00:03:32,550 --> 00:03:35,600
text into your input field, we
can just click on Add to add a

90
00:03:35,600 --> 00:03:36,980
new todo item.

91
00:03:36,980 --> 00:03:38,270
And there we go.

92
00:03:38,270 --> 00:03:41,410

93
00:03:41,410 --> 00:03:42,440
Awesome.

94
00:03:42,440 --> 00:03:44,385
Let's now head back
to main.js.

95
00:03:44,385 --> 00:03:47,320
As you can see, there's a
preview of our application

96
00:03:47,320 --> 00:03:49,545
displaying the new field
and the new button.

97
00:03:49,545 --> 00:03:51,810
We're going to head
back to main.js.

98
00:03:51,810 --> 00:03:53,520
And here we're going
to add in that todo

99
00:03:53,520 --> 00:03:54,930
function to our scope.

100
00:03:54,930 --> 00:03:58,070
So there we go-- add
todo function.

101
00:03:58,070 --> 00:04:00,440
And this is basically going to
push new todo items to the

102
00:04:00,440 --> 00:04:02,750
todo array every single time
that you create a new todo

103
00:04:02,750 --> 00:04:04,690
item from the UI.

104
00:04:04,690 --> 00:04:09,540

105
00:04:09,540 --> 00:04:11,220
There we go--

106
00:04:11,220 --> 00:04:12,440
perfect.

107
00:04:12,440 --> 00:04:14,750
So let's quickly
test this out.

108
00:04:14,750 --> 00:04:20,200
So let's say buy some
more milk and add--

109
00:04:20,200 --> 00:04:20,660
there we go.

110
00:04:20,660 --> 00:04:22,420
It's working.

111
00:04:22,420 --> 00:04:26,870
Learn AngularJS suite--

112
00:04:26,870 --> 00:04:28,240
awesome.

113
00:04:28,240 --> 00:04:30,080
So that all works great.

114
00:04:30,080 --> 00:04:35,280
Next, let's look at the ability
to remove todo items.

115
00:04:35,280 --> 00:04:39,460
So I'm going to go and head
back to my main.html file.

116
00:04:39,460 --> 00:04:42,120
And we're going to add a button
to our template, which

117
00:04:42,120 --> 00:04:43,570
is basically an x.

118
00:04:43,570 --> 00:04:46,130
And that's going to appear
next to each to do item,

119
00:04:46,130 --> 00:04:47,760
allowing you to remove it.

120
00:04:47,760 --> 00:04:50,760
So here we've added another
directive, NG click.

121
00:04:50,760 --> 00:04:53,130
And it's basically referencing
remove todo,

122
00:04:53,130 --> 00:04:54,750
passing through a reference.

123
00:04:54,750 --> 00:04:59,030
And, as you can see, the x now
appears next to each item.

124
00:04:59,030 --> 00:05:02,375
And we're going to head back
to main.js and define our

125
00:05:02,375 --> 00:05:04,240
remove todo function
within our scope.

126
00:05:04,240 --> 00:05:07,550
So scope.removetodo
equals function.

127
00:05:07,550 --> 00:05:10,210
And we're going to use the
splice function which lets us

128
00:05:10,210 --> 00:05:13,930
remove old elements from an
array using an index.

129
00:05:13,930 --> 00:05:14,920
And there we.

130
00:05:14,920 --> 00:05:16,280
Index one--

131
00:05:16,280 --> 00:05:18,180
perfect.

132
00:05:18,180 --> 00:05:19,430
So let's try this out.

133
00:05:19,430 --> 00:05:22,690

134
00:05:22,690 --> 00:05:26,250
Buy some more milk.

135
00:05:26,250 --> 00:05:29,690
We've added it and removed it.

136
00:05:29,690 --> 00:05:31,340
And as you can see, this
all works great.

137
00:05:31,340 --> 00:05:33,980

138
00:05:33,980 --> 00:05:37,420
So how about next we make
our todo items sortable?

139
00:05:37,420 --> 00:05:39,160
So let's refresh the page.

140
00:05:39,160 --> 00:05:41,510
We're going to use the Bower
package manager for this.

141
00:05:41,510 --> 00:05:44,090
So what we want to do is use
AngularUI, which is a

142
00:05:44,090 --> 00:05:47,280
companion to the AngularJS
project for UI components.

143
00:05:47,280 --> 00:05:49,750
So first I'm going to list what
packages I have locally

144
00:05:49,750 --> 00:05:51,110
installed using Bower Lists.

145
00:05:51,110 --> 00:05:52,550
And as you can see, we
have a few of them

146
00:05:52,550 --> 00:05:54,200
pre-installed for us.

147
00:05:54,200 --> 00:05:56,620
And now want to check to see
if AngularUI is actually

148
00:05:56,620 --> 00:05:57,890
available via Bower.

149
00:05:57,890 --> 00:06:00,990
So I'm just going to type in,
Bower search AngularUI.

150
00:06:00,990 --> 00:06:03,110
And as we can see, it's
already up there.

151
00:06:03,110 --> 00:06:07,360
So I can now just run Bower
install, save, AngularUI.

152
00:06:07,360 --> 00:06:12,260

153
00:06:12,260 --> 00:06:14,410
And there it's gone
and installed it.

154
00:06:14,410 --> 00:06:17,030
So all we need to do now is just
add some references to

155
00:06:17,030 --> 00:06:21,380
the AngularUI stylesheet and
script within our index file.

156
00:06:21,380 --> 00:06:26,490
So components AngularUI
build, AngularUI.css.

157
00:06:26,490 --> 00:06:28,505
And let's add a reference
to our script as well.

158
00:06:28,505 --> 00:06:37,100

159
00:06:37,100 --> 00:06:47,790
So script src equals components,
Angular UI build,

160
00:06:47,790 --> 00:06:50,220
angularUI.js--

161
00:06:50,220 --> 00:06:52,810
fantastic.

162
00:06:52,810 --> 00:06:56,500
And the last two dependencies we
need are jQuery and jQuery

163
00:06:56,500 --> 00:07:00,330
UI, which I'm going to just wire
up using some references

164
00:07:00,330 --> 00:07:02,070
to copies that are
hosted on a CDN.

165
00:07:02,070 --> 00:07:03,060
So there we go.

166
00:07:03,060 --> 00:07:07,100
We've got jQuery 1.9.1,
jQuery UI 1.10.2.

167
00:07:07,100 --> 00:07:09,770
And I've now saved them
in my index file.

168
00:07:09,770 --> 00:07:12,420
So now that we have AngularUI
installed, we can add a

169
00:07:12,420 --> 00:07:17,130
reference to it in
our app.js file.

170
00:07:17,130 --> 00:07:19,350
So let's head on
over to app.js.

171
00:07:19,350 --> 00:07:22,470
And inside our angular module,
we've just defined a new array

172
00:07:22,470 --> 00:07:24,190
referencing UI.

173
00:07:24,190 --> 00:07:26,340
So we're going back to
our todos template.

174
00:07:26,340 --> 00:07:29,800
And I'm adding a div wrapper
around our todos with the UI

175
00:07:29,800 --> 00:07:31,600
sortable property on there.

176
00:07:31,600 --> 00:07:34,340
And refreshing--

177
00:07:34,340 --> 00:07:36,240
and let's try this out.

178
00:07:36,240 --> 00:07:36,660
Awesome.

179
00:07:36,660 --> 00:07:38,480
So as you can see now,
I'm able to sort my

180
00:07:38,480 --> 00:07:40,090
different todo items.

181
00:07:40,090 --> 00:07:42,400
And that's working
on all new items.

182
00:07:42,400 --> 00:07:44,040
Let's add in a new item
and see if it works

183
00:07:44,040 --> 00:07:44,810
on that one as well.

184
00:07:44,810 --> 00:07:47,130
So buy some unicorns--

185
00:07:47,130 --> 00:07:47,770
perfect.

186
00:07:47,770 --> 00:07:50,780
As you can see, that's
working great.

187
00:07:50,780 --> 00:07:53,540
Now we can sort our todos,
and that works fantastic.

188
00:07:53,540 --> 00:07:55,870
So one thing you might notice
is that when we refresh the

189
00:07:55,870 --> 00:07:58,620
page, any todo items that we've
created automatically

190
00:07:58,620 --> 00:08:01,270
get reset, because they aren't
being persisted.

191
00:08:01,270 --> 00:08:02,750
Let's change that, so
they get saved to

192
00:08:02,750 --> 00:08:04,440
local storage instead.

193
00:08:04,440 --> 00:08:06,790
This time we're going to install
the angular local

194
00:08:06,790 --> 00:08:08,260
storage package--

195
00:08:08,260 --> 00:08:09,510
so Bower install.

196
00:08:09,510 --> 00:08:16,280

197
00:08:16,280 --> 00:08:17,530
There we go.

198
00:08:17,530 --> 00:08:18,920
And now we're just going
to wire it up

199
00:08:18,920 --> 00:08:21,380
inside our index file.

200
00:08:21,380 --> 00:08:28,940
So src equals components,
angular local storage, angular

201
00:08:28,940 --> 00:08:31,000
local storage.js.

202
00:08:31,000 --> 00:08:32,840
There we go.

203
00:08:32,840 --> 00:08:37,020
Now, going back to app.js, I
need to add a reference to

204
00:08:37,020 --> 00:08:38,419
local storage modules.

205
00:08:38,419 --> 00:08:41,789
So inside the same array as
earlier, local storage module.

206
00:08:41,789 --> 00:08:44,150
And there we go.

207
00:08:44,150 --> 00:08:47,870
And inside our main.js file we
need to add a local reference

208
00:08:47,870 --> 00:08:49,950
to local storage module.

209
00:08:49,950 --> 00:08:51,820
So we're going to call it local
store service, just so

210
00:08:51,820 --> 00:08:53,840
we can access it inside
our controller.

211
00:08:53,840 --> 00:08:56,500
I'm going to comment out the
todos that I had earlier, the

212
00:08:56,500 --> 00:08:58,230
ones that I hard coded in.

213
00:08:58,230 --> 00:09:00,180
And we're going to add some
code that's, first of all,

214
00:09:00,180 --> 00:09:03,870
going to read any existing todo
items from local storage.

215
00:09:03,870 --> 00:09:08,080
Under the todo name space, we're
going to then split them

216
00:09:08,080 --> 00:09:10,980
up based on a new line character
so that we can get

217
00:09:10,980 --> 00:09:13,860
back anything want
into our array.

218
00:09:13,860 --> 00:09:17,080
So todosInStore.split
based on new line.

219
00:09:17,080 --> 00:09:20,360

220
00:09:20,360 --> 00:09:23,220
And then we're just going to
register a watch expression,

221
00:09:23,220 --> 00:09:26,395
so that we can keep our todo
items name space updated with

222
00:09:26,395 --> 00:09:27,640
a joined version of our todos.

223
00:09:27,640 --> 00:09:41,770
So watch, function, and
localStorageService.add todos,

224
00:09:41,770 --> 00:09:44,430
scope.todos.join.

225
00:09:44,430 --> 00:09:46,650
New line.

226
00:09:46,650 --> 00:09:48,250
Save and test that out.

227
00:09:48,250 --> 00:09:50,250
So now I'm going to create
some new todo items.

228
00:09:50,250 --> 00:10:01,850
So learn, AngularJS, add buy
some unicorns, add learn to

229
00:10:01,850 --> 00:10:03,900
skateboard.

230
00:10:03,900 --> 00:10:06,870
And now let's refresh
the page.

231
00:10:06,870 --> 00:10:07,540
They're still there.

232
00:10:07,540 --> 00:10:09,790
Let's open up the Chrome dev
tools just to check if these

233
00:10:09,790 --> 00:10:10,520
are being stored.

234
00:10:10,520 --> 00:10:13,170
So as you can see, they're
actually being persisted to

235
00:10:13,170 --> 00:10:16,210
local storage, which
is fantastic.

236
00:10:16,210 --> 00:10:18,140
So now we have an application
that works.

237
00:10:18,140 --> 00:10:19,700
The next thing we want
to do is write some

238
00:10:19,700 --> 00:10:21,080
unit tests for it.

239
00:10:21,080 --> 00:10:24,750
So let's comment out the code
that we just added and reset

240
00:10:24,750 --> 00:10:27,100
back to the static ones that we
had earlier just to make it

241
00:10:27,100 --> 00:10:28,640
easier to test for a moment.

242
00:10:28,640 --> 00:10:31,010
So I've got my original
todos array.

243
00:10:31,010 --> 00:10:33,620
And now I'm going to head on
over to my Karma unit tests

244
00:10:33,620 --> 00:10:36,810
that were scaffolded out for
me when I ran yo angular.

245
00:10:36,810 --> 00:10:40,130
So I'm heading to main.js, and
here's some boilerplate code

246
00:10:40,130 --> 00:10:41,410
for my unit tests.

247
00:10:41,410 --> 00:10:43,320
And we already have an assertion
here that says it

248
00:10:43,320 --> 00:10:46,580
should expect a list of awesome
things in the scope.

249
00:10:46,580 --> 00:10:49,020
Now, awesome things, if you
remember, is that array we

250
00:10:49,020 --> 00:10:51,580
initially had, which just
defined a few items to display

251
00:10:51,580 --> 00:10:53,250
on the [? lo lo ?]

252
00:10:53,250 --> 00:10:54,530
boilerplate page.

253
00:10:54,530 --> 00:10:58,380
Let's replace it with todos, as
we've now got a todos array

254
00:10:58,380 --> 00:10:59,910
inside our scope.

255
00:10:59,910 --> 00:11:03,850
And as you can see, all I can
here is change this to check

256
00:11:03,850 --> 00:11:06,660
on the todo items that I
find inside my scope.

257
00:11:06,660 --> 00:11:08,990
And I want to check that the
length is equal to three.

258
00:11:08,990 --> 00:11:10,320
Let's save that.

259
00:11:10,320 --> 00:11:11,990
Let's run Grunt test.

260
00:11:11,990 --> 00:11:14,840
What this is now going to do
is go and fire off Karma,

261
00:11:14,840 --> 00:11:16,130
which is going to run
our unit test.

262
00:11:16,130 --> 00:11:17,470
We've got a spec runner
running in the

263
00:11:17,470 --> 00:11:18,930
background for us now.

264
00:11:18,930 --> 00:11:19,725
And that's really it.

265
00:11:19,725 --> 00:11:21,470
You can check to make sure
that your unit tests are

266
00:11:21,470 --> 00:11:23,160
running correctly.

267
00:11:23,160 --> 00:11:25,230
Now, the next thing you'll
probably want to do is build a

268
00:11:25,230 --> 00:11:27,700
production ready version of your
application linking to

269
00:11:27,700 --> 00:11:30,240
your code, minifying and
concatentating your assets,

270
00:11:30,240 --> 00:11:32,690
and handling any abstractions
you might be using, like

271
00:11:32,690 --> 00:11:35,540
CoffeeScript, and creating an
optimized build that you can

272
00:11:35,540 --> 00:11:36,970
push to production.

273
00:11:36,970 --> 00:11:39,800
So we can do this just by
running the Grunt command.

274
00:11:39,800 --> 00:11:41,660
And there we go.

275
00:11:41,660 --> 00:11:43,250
It's ready.

276
00:11:43,250 --> 00:11:45,560
Now, the final thing you might
want to be able to do is

277
00:11:45,560 --> 00:11:47,010
deploy your application.

278
00:11:47,010 --> 00:11:49,480
You can customize your Grunt
project to deploy to pretty

279
00:11:49,480 --> 00:11:51,710
much anywhere, whether it
be Google App Engine

280
00:11:51,710 --> 00:11:52,580
or something else.

281
00:11:52,580 --> 00:11:55,740
But in this case, we're going
to deploy to Heroku.

282
00:11:55,740 --> 00:11:58,390
Now, I'm going to use another
Yeoman generator to save me

283
00:11:58,390 --> 00:11:59,440
some time here.

284
00:11:59,440 --> 00:12:01,290
So I'm going to go back to the
command line, and I'm going to

285
00:12:01,290 --> 00:12:05,070
run NPM install generator
Heroku.

286
00:12:05,070 --> 00:12:07,020
You normally have to go through
a number of steps to

287
00:12:07,020 --> 00:12:09,230
push to Heroku, including
using get

288
00:12:09,230 --> 00:12:10,570
to handle this process.

289
00:12:10,570 --> 00:12:13,060
But using this generator
save us a lot of time.

290
00:12:13,060 --> 00:12:15,170
As you can see, it's going and
it's installing any of the

291
00:12:15,170 --> 00:12:16,550
dependencies that it needs.

292
00:12:16,550 --> 00:12:19,100
It should be done
in just a sec.

293
00:12:19,100 --> 00:12:22,980
I can now just clear my screen
and run yo heroku.

294
00:12:22,980 --> 00:12:25,200
Now, this is just going to
generate me some configuration

295
00:12:25,200 --> 00:12:28,900
that I can copy to my Grunt file
for my Heroku deployment.

296
00:12:28,900 --> 00:12:32,680
So it's going to ask
me a question.

297
00:12:32,680 --> 00:12:34,720
Do I want a separate Git
repository in dist?

298
00:12:34,720 --> 00:12:37,600
I'm going to say yes.

299
00:12:37,600 --> 00:12:38,030
There we go.

300
00:12:38,030 --> 00:12:39,450
There's our configuration.

301
00:12:39,450 --> 00:12:42,580
Now, I just need to go and copy
paste this into my Grunt

302
00:12:42,580 --> 00:12:44,660
file under the copy task.

303
00:12:44,660 --> 00:12:46,200
So there we go--

304
00:12:46,200 --> 00:12:49,720
copying that over, back
into my text editor.

305
00:12:49,720 --> 00:12:52,730

306
00:12:52,730 --> 00:12:53,820
Perfect.

307
00:12:53,820 --> 00:12:56,810
And now I just push my dist
directory, which contains the

308
00:12:56,810 --> 00:12:59,790
production version of my
application to Heroku.

309
00:12:59,790 --> 00:13:04,020
And so let's CD into dist.

310
00:13:04,020 --> 00:13:07,135
And I can run Heroku
Apps Create.

311
00:13:07,135 --> 00:13:11,510

312
00:13:11,510 --> 00:13:14,370
And now I just need to push it
to Heroku-- so get subtree

313
00:13:14,370 --> 00:13:19,970
prefix dist, Heroku master.

314
00:13:19,970 --> 00:13:22,460
Perfect, and now it's done.

315
00:13:22,460 --> 00:13:24,630
Now here's a version of my
application that I pushed to

316
00:13:24,630 --> 00:13:25,810
Heroku earlier.

317
00:13:25,810 --> 00:13:27,000
And that's it.

318
00:13:27,000 --> 00:13:28,730
I created a new application.

319
00:13:28,730 --> 00:13:31,850
I was able to use Yeoman to
basically scaffold it out,

320
00:13:31,850 --> 00:13:34,660
build it, test it, and I pushed
it to Heroku, so I can

321
00:13:34,660 --> 00:13:36,500
easily share it with
other people.

322
00:13:36,500 --> 00:13:38,710
Now, if you like what you saw
with Grunt there are actually

323
00:13:38,710 --> 00:13:41,100
hundreds of Grunt tasks
available to help you achieve

324
00:13:41,100 --> 00:13:44,140
lots of common development tasks
at build time, including

325
00:13:44,140 --> 00:13:46,650
compiling your CoffeeScript,
or using something like

326
00:13:46,650 --> 00:13:49,780
grunt-contrib-connect to hook
up your application to some

327
00:13:49,780 --> 00:13:52,810
middleware, like
Express or PHP.

328
00:13:52,810 --> 00:13:55,030
If you like what you saw with
Bower, there's actually a

329
00:13:55,030 --> 00:13:57,240
growing number of easily
installable packages on the

330
00:13:57,240 --> 00:13:58,310
Bower registry.

331
00:13:58,310 --> 00:14:00,470
And the number of open source
projects supporting it and

332
00:14:00,470 --> 00:14:02,330
using it are growing weekly.

333
00:14:02,330 --> 00:14:05,380
Bower is great for handling
dependency management for you.

334
00:14:05,380 --> 00:14:07,760
So if you want to easily update
your dependencies, you

335
00:14:07,760 --> 00:14:10,510
just run Bower Update, and
it does it for you.

336
00:14:10,510 --> 00:14:12,500
And Yeoman has a growing
number of generators

337
00:14:12,500 --> 00:14:13,930
available on NPM.

338
00:14:13,930 --> 00:14:16,620
We actually have over 50
available at the moment.

339
00:14:16,620 --> 00:14:18,630
And they're not just useful for
kickstarting off brand new

340
00:14:18,630 --> 00:14:19,850
applications.

341
00:14:19,850 --> 00:14:22,520
Yeoman can be used to scaffold
out little bits of

342
00:14:22,520 --> 00:14:23,730
applications, as well.

343
00:14:23,730 --> 00:14:26,890
So if you wanted to create a new
Angular view or directive,

344
00:14:26,890 --> 00:14:29,750
you could actually just use the
same Angular scaffold that

345
00:14:29,750 --> 00:14:32,720
I showed you earlier to create
that at the command line.

346
00:14:32,720 --> 00:14:36,550
We've got generators available
for Backbone, Angular, Ember,

347
00:14:36,550 --> 00:14:39,140
and a growing number of
different frameworks.

348
00:14:39,140 --> 00:14:42,110
So feel free to check out NPM if
you'd like to get some more

349
00:14:42,110 --> 00:14:44,840
of those generators installed.

350
00:14:44,840 --> 00:14:46,040
And that's it.

351
00:14:46,040 --> 00:14:48,150
If you'd like to learn more
about Yeoman, please feel free

352
00:14:48,150 --> 00:14:50,590
to check us out at yeoman.io.

353
00:14:50,590 --> 00:14:53,130
Until next time, thanks,
and goodbye.

354
00:14:53,130 --> 00:14:54,380

