1
00:00:02,310 --> 00:00:07,040
>>Tom Wiltzius: Hello, everyone. I think we're
ready to get started.

2
00:00:07,040 --> 00:00:12,100
Welcome to Jank Busters. I'm Tom Wiltzius.
I'm a PM on the Chrome graphics team.

3
00:00:12,100 --> 00:00:15,449
>>Nat Duca: I'm Nat Duca. I'm a graphics hacker
on the Chrome team.

4
00:00:15,449 --> 00:00:19,210
>>Tom Wiltzius: And we're here today to talk
about Jank on the web, what it is and how

5
00:00:19,210 --> 00:00:22,550
to avoid it.
>>Nat Duca: Yeah. So Jank. Everybody has a

6
00:00:22,550 --> 00:00:26,359
screen in front of them, probably. Jank really
begins with the monitor, right? You've got

7
00:00:26,359 --> 00:00:30,179
this monitor in front of you and it's designed
to sort of trick your eye into this illusion

8
00:00:30,179 --> 00:00:35,440
of motion, and the way it does that is by
updating a frame every couple milliseconds,

9
00:00:35,440 --> 00:00:38,340
right?
And the trick is, your eye wants to go at

10
00:00:38,340 --> 00:00:42,340
something like 40 hertz, and if you do that,
then you'll perceive motion.

11
00:00:42,340 --> 00:00:48,550
And so monitors out there go anywhere from
30 to 50 to 60 to 70 hertz, right? And if

12
00:00:48,550 --> 00:00:53,640
you manage to get all of your JavaScript and
all your different pieces going at that rate

13
00:00:53,640 --> 00:00:58,360
of the monitor, then you can present this
illusion of smoothness and then people are

14
00:00:58,360 --> 00:01:00,710
happy.
>>Tom Wiltzius: But if you don't manage that,

15
00:01:00,710 --> 00:01:03,320
then you end up with Jank. And this is what
we're talking about when we're talking about

16
00:01:03,320 --> 00:01:05,790
Jank.
It's anytime that you don't get a new image

17
00:01:05,790 --> 00:01:11,030
on the screen every time the monitor refreshes.
This comes in all sorts of formats. A hitch

18
00:01:11,030 --> 00:01:14,479
is when we miss a bunch of frames in a row.
A low frame rate is when you're taking out

19
00:01:14,479 --> 00:01:18,960
a frame every maybe fifth of a second instead
of every 50th. A variable frame rate is maybe

20
00:01:18,960 --> 00:01:23,450
some combination of these things. And this
is particularly painful when you're trying

21
00:01:23,450 --> 00:01:27,530
to interact with something.
So here's a div with a bunch of Chrome logos

22
00:01:27,530 --> 00:01:33,759
moving around and it scrolls sluggishly. It's
what we call a Janky scroll. And the problem

23
00:01:33,759 --> 00:01:40,759
here is that as I move my finger on the trackpad,
I'm scrolling around in this little iframe

24
00:01:42,149 --> 00:01:48,709
but the frame rate isn't matched up to the
monitor's refresh rate, and as I move my finger,

25
00:01:48,709 --> 00:01:52,759
I don't get the smooth motion on the screen
that I sort of expect.

26
00:01:52,759 --> 00:01:56,600
And so the physical metaphor is broken and
it doesn't -- it doesn't feel good. It doesn't

27
00:01:56,600 --> 00:02:00,219
feel fluid.
>>Nat Duca: Yeah. So, you know, basically

28
00:02:00,219 --> 00:02:03,539
what's going on behind the scenes when you
get dropped out of your experience and you

29
00:02:03,539 --> 00:02:09,810
get something like Jank is one part of the
rendering pipeline is getting behind, right?

30
00:02:09,810 --> 00:02:13,730
Now, if you go on line and you look at our
talk from last year's I/O and also a lot of

31
00:02:13,730 --> 00:02:18,400
great resources out there on Jank busting,
you'll find that there's this great feature

32
00:02:18,400 --> 00:02:24,250
in DevTools called the frames mode. It's in
the Timeline. And you can use that to record,

33
00:02:24,250 --> 00:02:29,420
basically, an interaction with your page and
see, for example, "Oh, hey, this frame ran

34
00:02:29,420 --> 00:02:33,530
long because of JavaScript." And there are
just thousands of things that can go wrong.

35
00:02:33,530 --> 00:02:38,709
CSS can run long. You can have an XHR that
comes back and does some big json parse. You

36
00:02:38,709 --> 00:02:43,569
can have an image decode that fires. You can
-- you know, I can go on for hours on this,

37
00:02:43,569 --> 00:02:45,450
you know.
>>Tom Wiltzius: What Nat is trying to say

38
00:02:45,450 --> 00:02:50,180
is there's a lot that gets in the way of the
16 milliseconds you have to make a new image

39
00:02:50,180 --> 00:02:55,180
before the monitor refreshes. And there are,
as Nat says, lots and lots of ways that this

40
00:02:55,180 --> 00:03:00,189
can go poorly but today we're going to talk
about one kind of specific category and that's

41
00:03:00,189 --> 00:03:04,950
what are essentially the green bars in the
vertical Timeline in DevTools.

42
00:03:04,950 --> 00:03:09,730
This is what we call sort of rendering, but
that breaks down into painting and compositing

43
00:03:09,730 --> 00:03:12,230
and we're going to talk about both of those
in today's talk.

44
00:03:12,230 --> 00:03:16,989
>>Nat Duca: And it's good that Tom saved you
from me yammering on because you'd just fall

45
00:03:16,989 --> 00:03:19,010
asleep and be wasting your time.
[ Laughter ]

46
00:03:19,010 --> 00:03:23,480
>>Tom Wiltzius: So rendering, what are we
going to talk about today? We're going to

47
00:03:23,480 --> 00:03:28,519
talk about painting speed, what -- what kind
of goes into it and how you can try to paint

48
00:03:28,519 --> 00:03:31,909
as quickly as possible. But then even better
than that, we're going to try to talk about

49
00:03:31,909 --> 00:03:36,260
how you can avoid painting in the first place,
either because you were doing so accidentally

50
00:03:36,260 --> 00:03:38,900
and you didn't realize it -- and we're going
to show you how to notice that kind of thing

51
00:03:38,900 --> 00:03:43,689
-- and then better yet, we're going to talk
about how to deliberately avoid paints from

52
00:03:43,689 --> 00:03:47,469
the get-go when you're designing your application.
>>Nat Duca: And there will not be a rocket

53
00:03:47,469 --> 00:03:51,140
ship that we can give you at the end as a
takeaway, so sorry.

54
00:03:51,140 --> 00:03:56,430
The beginning building block of rendering
in a web browser is preparing pixels to be

55
00:03:56,430 --> 00:03:59,769
put up on the screen.
So if you go to Google -- right? -- we've

56
00:03:59,769 --> 00:04:04,579
all been there, you're presented with this,
which is the nice little happy hello Google

57
00:04:04,579 --> 00:04:10,709
thing, and you get a blinking cursor, right?
Where the only difference between the page

58
00:04:10,709 --> 00:04:15,370
over time is the cursor coming on and off.
Now, what Chrome's doing behind the scenes

59
00:04:15,370 --> 00:04:19,930
is it's actually filling in those black dots
for the cursor itself, and what it's doing

60
00:04:19,930 --> 00:04:24,490
is it's got some, you know, logic in it that
says, "Ooh, this part of the page has changed.

61
00:04:24,490 --> 00:04:28,830
I need to refill those pixels with black or
I need to remove them."

62
00:04:28,830 --> 00:04:33,889
And so you get this little update req, this
painted area on the screen that we repaint

63
00:04:33,889 --> 00:04:38,090
and then you see this illusion of a blinking
cursor.

64
00:04:38,090 --> 00:04:42,259
Now, if you think about that, that takes some
time but it's probably relatively little and

65
00:04:42,259 --> 00:04:45,940
if I compared the time taken to blink the
cursor versus, say, if I just had the whole

66
00:04:45,940 --> 00:04:50,780
Google logo blinking -- now, of course people
would be upset if I did that to our home page,

67
00:04:50,780 --> 00:04:54,490
but also, it would take more time to do it,
okay? Because there's just -- you can sort

68
00:04:54,490 --> 00:04:58,310
of think about this. This is intuitive. We
have to touch more pixels, right? So that's

69
00:04:58,310 --> 00:05:02,100
one dimension of rendering performance and
in particular painting speed, is how many

70
00:05:02,100 --> 00:05:06,080
pixels you've touched.
But that's not the only dimension, of course.

71
00:05:06,080 --> 00:05:10,889
The other part that matters is what you touch
and what type of content is in the area that

72
00:05:10,889 --> 00:05:14,770
you're updating.
So if you take this white block on the upper

73
00:05:14,770 --> 00:05:18,900
left, that's just white. And if you think
about what Chrome has to do to make those

74
00:05:18,900 --> 00:05:24,120
pixels white, it just has to sort of put RGBA
for white into a bunch of parts of memory.

75
00:05:24,120 --> 00:05:29,250
So that's a mem set and it's pretty darn fast.
In contrast, the "I'm Feeling Lucky" button

76
00:05:29,250 --> 00:05:33,240
has all sorts of nasty little details on it,
and it's actually kind of fun to zoom on this

77
00:05:33,240 --> 00:05:37,169
on a computer with a magnifying glass and
see all the things going on there. If any

78
00:05:37,169 --> 00:05:41,300
of you have actually taken like an undergrad
graphics class and had to write like a line

79
00:05:41,300 --> 00:05:46,150
drawing algorithm, imagine having to do that
in Chrome but where you also have antialiasing

80
00:05:46,150 --> 00:05:51,889
and rounded corners and blurs and text and
anti-alias text. It gets really hairy and

81
00:05:51,889 --> 00:05:56,030
it's sort of the thing that makes you want
to jump off a, you know, cliff, but it's also

82
00:05:56,030 --> 00:06:01,669
the thing that makes the CPU chug along.
So painting is a slow thing and it's something

83
00:06:01,669 --> 00:06:06,020
to be avoided pretty much at all costs.
>>Tom Wiltzius: And you want to wonder probably

84
00:06:06,020 --> 00:06:10,569
like what -- what is expensive and what isn't,
right? Like Nat is just asserting that like,

85
00:06:10,569 --> 00:06:16,419
oh, drawing his NTOS lines is expensive, but
in an ideal world you would be able to measure

86
00:06:16,419 --> 00:06:20,569
this kind of thing. And this is something
that DevTools does allow you to do to a certain

87
00:06:20,569 --> 00:06:25,410
extent. A good question to ask is like, "Well,
which elements on the page are expensive?"

88
00:06:25,410 --> 00:06:30,949
And a good way to measure that is with continuous
painting mode in DevTools, which is a DevTools

89
00:06:30,949 --> 00:06:34,539
setting that we're not going to talk about
in great detail today but there are some really

90
00:06:34,539 --> 00:06:39,539
good resources on the web about how to use
it. This link -- and our slides will be linked

91
00:06:39,539 --> 00:06:44,979
on the web later -- will take you to an article
that explains in detail how to use continuous

92
00:06:44,979 --> 00:06:49,410
painting mode to repaint the entire frame
as fast as possible and tell you how long

93
00:06:49,410 --> 00:06:54,379
that takes and then you can hide certain elements
and see how does that affect the painting

94
00:06:54,379 --> 00:06:56,940
time. Because often as not, it's a single
complicated element that's taking all the

95
00:06:56,940 --> 00:06:58,680
time.
>>Nat Duca: When you look at your page, look

96
00:06:58,680 --> 00:07:02,789
at all the pieces and keep in the back of
your head that not all of them are the same

97
00:07:02,789 --> 00:07:07,039
cost and you're paying for some of those effects
more than others. And if you start getting

98
00:07:07,039 --> 00:07:10,710
in a situation where you see painting, start
figuring out which ones you're paying for

99
00:07:10,710 --> 00:07:13,129
and whether you really want to be paying for
that bill for that one.

100
00:07:13,129 --> 00:07:17,349
>>Tom Wiltzius: That's right. Painting also,
I should say, isn't -- it's not just about

101
00:07:17,349 --> 00:07:21,199
the blinking cursor, right? In the blinking
cursor case, it makes sense that we need to

102
00:07:21,199 --> 00:07:25,729
repaint like the part of the screen that's
changed because the pixel output is different.

103
00:07:25,729 --> 00:07:30,819
But there are plenty of cases on the web where
even if you change something that doesn't

104
00:07:30,819 --> 00:07:37,069
have any sort of material impact on the final
presentation of what goes up on the screen,

105
00:07:37,069 --> 00:07:41,639
you can still incur a costly repaint, and
we're going to show a small demo of that right

106
00:07:41,639 --> 00:07:46,330
now.
If I hit this button, I get elements that

107
00:07:46,330 --> 00:07:51,069
are added to this screen. It's -- this is
really simple. These are just gray divs. Basically

108
00:07:51,069 --> 00:07:53,039
styles, right?
>>Nat Duca: Winner of Web Site of the Year

109
00:07:53,039 --> 00:07:54,949
for 2013.
>>Tom Wiltzius: Thanks, Nat.

110
00:07:54,949 --> 00:08:00,009
>>Nat Duca: Because you're good.
>>Tom Wiltzius: And what we want to do here

111
00:08:00,009 --> 00:08:04,039
is get some insight into what is being painted
when by the browser.

112
00:08:04,039 --> 00:08:09,300
So if we open up DevTools and we turn on show
paint rectangles under the rendering heading

113
00:08:09,300 --> 00:08:15,870
of settings, then we have -- we have the ability
to really see what gets painted as the page

114
00:08:15,870 --> 00:08:17,870
changes.
So again, I'm going to hit this button a few

115
00:08:17,870 --> 00:08:24,189
times and you can see that as I add additional
elements, there's a red -- red rectangle that

116
00:08:24,189 --> 00:08:29,180
flashes over the element and that red rectangle
means, "This part of the screen just got repainted

117
00:08:29,180 --> 00:08:32,159
by Chrome." Or really by Blink in this case.
>>Nat Duca: So that's that rectangle that

118
00:08:32,159 --> 00:08:35,370
I was showing you in slides but in runtime
for your production site.

119
00:08:35,370 --> 00:08:38,940
>>Tom Wiltzius: That's right. And I can keep
adding elements, and now I'm adding elements

120
00:08:38,940 --> 00:08:44,480
like way below the fold of the page and you
can see that as I add more, the only thing

121
00:08:44,480 --> 00:08:48,370
that gets repainted here is the button, because
it ends up in this depressed state and then

122
00:08:48,370 --> 00:08:53,110
comes out of it, and the scrollbar, because
the scrollbar size is changing.

123
00:08:53,110 --> 00:08:58,920
So this is great, right? And it makes sense
in some sort of basic logic that as you're

124
00:08:58,920 --> 00:09:02,579
adding elements below the fold of the page,
you're not having to repaint anything that

125
00:09:02,579 --> 00:09:09,579
is on the page. But it's not always that simple.
If I try to do something like inspect this

126
00:09:09,700 --> 00:09:15,339
container block -- and the DevTools inspection
is going to drive the paint rectangles nuts

127
00:09:15,339 --> 00:09:20,279
a little bit, but if I look at this block
that contains all of these elements and then

128
00:09:20,279 --> 00:09:25,060
I toggle, say, how much padding there is on
the right side of that container block, I'm

129
00:09:25,060 --> 00:09:29,649
not going to end up with any, again, visible
change to what gets rendered.

130
00:09:29,649 --> 00:09:34,160
These divs are sized such that even if there's
an extra 10 pixels of padding on the right

131
00:09:34,160 --> 00:09:37,350
side of that container, the layout is not
going to change, nothing is going to look

132
00:09:37,350 --> 00:09:42,680
any different. But watch what happens when
I add some of that padding. You can see in

133
00:09:42,680 --> 00:09:49,170
-- it's probably small text, but padding has
showed up in the element style in inspector

134
00:09:49,170 --> 00:09:54,209
and I got this big red rectangle that flashed
over the entire container. And the reason

135
00:09:54,209 --> 00:09:59,420
is that Blink, I mean, it's not that smart,
right? And so when some of this padding got

136
00:09:59,420 --> 00:10:04,850
added, there was a series of steps that it
went through that said, "Okay, now I need

137
00:10:04,850 --> 00:10:10,670
to think about do I need to recalculate the
position of any of the elements inside of

138
00:10:10,670 --> 00:10:13,800
this container block?"
The answer ends up being "no" but in the process,

139
00:10:13,800 --> 00:10:18,399
it invalidates the -- the sort of visible
state of all of these elements on the screen

140
00:10:18,399 --> 00:10:21,170
and then they all get repainted.
>>Nat Duca: Yeah. Blink has a well-meaning

141
00:10:21,170 --> 00:10:25,760
but sometimes confused brain and so, you know,
in this case it's getting confused. It thinks

142
00:10:25,760 --> 00:10:29,490
that maybe something bad is about to happen
and it causes a repaint. And this is the sort

143
00:10:29,490 --> 00:10:32,500
of thing that actually happens more often
than we'd like.

144
00:10:32,500 --> 00:10:36,660
When you use and write really nice modular
code that's beautiful and has all sorts of

145
00:10:36,660 --> 00:10:41,110
awesome design patterns in it, sometimes this
sort of thing will creep in because somewhere

146
00:10:41,110 --> 00:10:45,070
deep in there somebody added a class and then
removed a class somewhere else and that confused

147
00:10:45,070 --> 00:10:50,200
the system. So this is something to keep your
eye out for when you're doing sort of day-to-day

148
00:10:50,200 --> 00:10:54,540
production. Keep an eye out for these erroneous
blinks where you would expect there to be

149
00:10:54,540 --> 00:10:59,060
no red flash and there is. Because once they
start creeping in, they're really devilishly

150
00:10:59,060 --> 00:11:03,399
hard to stamp out again.
>>Tom Wiltzius: Very true. So switching gears

151
00:11:03,399 --> 00:11:08,829
a little bit, we've talked about painting
now, but the -- the next best thing from trying

152
00:11:08,829 --> 00:11:14,170
to avoid unnecessary paints is to not paint
at all. And Nat's going to talk a little bit

153
00:11:14,170 --> 00:11:16,250
about how we do that for common cases like
scrolling.

154
00:11:16,250 --> 00:11:21,029
>>Nat Duca: So like in ye old days -- right,
like 1990 something, the way that we would

155
00:11:21,029 --> 00:11:25,370
scroll a page in a browser was we would repaint
parts of it. So we would move bits of the

156
00:11:25,370 --> 00:11:29,820
pixels up using some low-level things, and
then we'd do a big repaint rectangle on the

157
00:11:29,820 --> 00:11:34,519
area that you'd exposed from the scroll.
Now we just talked for, you know, a while

158
00:11:34,519 --> 00:11:40,110
about how devilishly slow painting is and
how it should be avoided. So developers in

159
00:11:40,110 --> 00:11:44,300
both, you know, Webkit and Blink and Chrome
and pretty much everywhere have adopted this

160
00:11:44,300 --> 00:11:48,389
new notion of a layer.
If you look at this picture we've got up of

161
00:11:48,389 --> 00:11:53,209
Gmail, the analogy is this: If I look at Gmail,
I know that there's a part of the page that's

162
00:11:53,209 --> 00:11:57,720
just going to move up and down. It's not going
to change visually. It's just there are going

163
00:11:57,720 --> 00:12:01,000
to be new pieces shown that weren't previously
visible. Right?

164
00:12:01,000 --> 00:12:05,079
But the stuff on top of it, the -- the top
nav and the left thing, they'll always be

165
00:12:05,079 --> 00:12:09,449
there. And so there's this sort of idea of
"Hey, we will detect that using semantic cues

166
00:12:09,449 --> 00:12:14,839
in your thing like it being an overflow div
and we will turn those into layers and each

167
00:12:14,839 --> 00:12:20,040
layer becomes a picture that we upload to
the GPU on your computer, store there, and

168
00:12:20,040 --> 00:12:24,889
then if the thing that you're doing to your
page is just moving the layers around, we

169
00:12:24,889 --> 00:12:28,889
can ask the GPU to scroll it for you." Or,
in fact, reposition it and then ask the GPU

170
00:12:28,889 --> 00:12:32,949
to recompose them. And so it looks like you're
scrolling because you're only looking down

171
00:12:32,949 --> 00:12:35,660
at the layers. You just see it -- you know,
it looks like you're seeing the whole Web

172
00:12:35,660 --> 00:12:40,449
page. But what's happening underneath is the
browser is just re-compositing, skipping that

173
00:12:40,449 --> 00:12:47,320
expensive paint step, and going nice and jankfree.
But this all depends -- this jankfreeness

174
00:12:47,320 --> 00:12:51,420
is all predicated on you getting good layers
in the first place, and if you don't get those

175
00:12:51,420 --> 00:12:53,560
layers created, things can go a little bit
haywire.

176
00:12:53,560 --> 00:12:57,589
>>Tom Wiltzius: That's right. It's also predicated
on not like the good layers. It's predicated

177
00:12:57,589 --> 00:13:02,190
on the layers being set up in such a way that
we don't need to paint them, right? Like if

178
00:13:02,190 --> 00:13:07,470
the layer content is changing, then all bets
are off on this being a good system. So I'll

179
00:13:07,470 --> 00:13:14,470
open up another demo, and this one -- maybe
it will load...

180
00:13:16,260 --> 00:13:17,870
You want to turn off --
>>Nat Duca: I will turn off WiFi.

181
00:13:17,870 --> 00:13:24,870
>>Tom Wiltzius: -- WiFi and try again?
In a case where we scroll -- in this case,

182
00:13:25,720 --> 00:13:31,329
a whole long list of images, we can -- we
can do that pretty well, right?

183
00:13:31,329 --> 00:13:34,720
Nothing on the page is changing here. This
is really a simple sort of like static media

184
00:13:34,720 --> 00:13:39,380
site scenario. And indeed, we can scroll this
-- this quite well.

185
00:13:39,380 --> 00:13:45,829
This whole sort of body of the page is in
a layer. It's being re-composited every frame.

186
00:13:45,829 --> 00:13:51,970
>>Nat Duca: We shall bless this jankfree.
>>Tom Wiltzius: Right. But if I open up DevTools

187
00:13:51,970 --> 00:13:58,970
again and I turn on show paint rectangles,
as I had, then you can see that part of the

188
00:14:00,060 --> 00:14:03,329
kind of jankfreeness here is that nothing
is being repainted. The only thing that's

189
00:14:03,329 --> 00:14:06,009
being repainted is, again, the scrollbar so
we can kind of afford.

190
00:14:06,009 --> 00:14:08,990
>>Nat Duca: So we're keeping that contract
with the browser: I won't repaint and you'll

191
00:14:08,990 --> 00:14:11,600
be jankfree.
>>Tom Wiltzius: That's right. But if I hover

192
00:14:11,600 --> 00:14:16,420
over this image, I've got actually kind of
like a nice animation that happens. I add

193
00:14:16,420 --> 00:14:20,130
a shadow, I change the opacity, I brighten
the image a little bit. This is the kind of

194
00:14:20,130 --> 00:14:25,120
thing that's become increasingly common. And
as I do that, you can see that because it's

195
00:14:25,120 --> 00:14:29,389
sort of a complicated animation that Chrome
doesn't accelerate very well, I get a lot

196
00:14:29,389 --> 00:14:33,570
of repaints throughout the course of the animation
and that's those red rectangles flashing over

197
00:14:33,570 --> 00:14:39,570
the animation again. But that animation is
going to play really, really poorly with the

198
00:14:39,570 --> 00:14:43,820
scroll, and you can probably guess why by
now, based on everything we've just said.

199
00:14:43,820 --> 00:14:49,209
The -- the browser is going to start repainting
to run the animation right at the time when

200
00:14:49,209 --> 00:14:55,110
it -- what it wants to be doing is re-compositing
this static unchanging content over and over

201
00:14:55,110 --> 00:14:58,800
again in different positions. But if the content's
changed, then it can't just reposition it.

202
00:14:58,800 --> 00:15:02,959
It needs to repaint it first, re-upload it
to the GPU, and then re-composite it. You

203
00:15:02,959 --> 00:15:09,110
lose all the benefits. And indeed, if I try
to scroll with my mouse over here, the resolution

204
00:15:09,110 --> 00:15:12,920
of this screen is hurting me a little bit,
but it gets a lot Jankier, and you can see

205
00:15:12,920 --> 00:15:18,199
that these are these big red flashes that
occur all over -- all over the page and that

206
00:15:18,199 --> 00:15:22,410
gets in the way of sort of a jankfree scroll.
>>Nat Duca: Yeah. So these big red flashes

207
00:15:22,410 --> 00:15:26,509
are your warning to -- you know, your one-way
trip to Janktown, right? You've got big red

208
00:15:26,509 --> 00:15:31,089
flashes and you're basically going to start
repainting all the time and then on a low-end

209
00:15:31,089 --> 00:15:35,269
machine -- this is a Mac Book Pro so of course
it's going to be in better shape, but on a

210
00:15:35,269 --> 00:15:37,560
lower-end machine especially you're going
to really start paying dearly.

211
00:15:37,560 --> 00:15:41,370
>>Tom Wiltzius: This is the type of thing
that we see as particularly painful on like

212
00:15:41,370 --> 00:15:46,449
phones or tablets. In this case, I mean, getting
rid of the hover effect is a relatively simple

213
00:15:46,449 --> 00:15:52,829
task, right? So if I uncheck this box, there's
a scroll handler here that will disable the

214
00:15:52,829 --> 00:15:58,509
hover effect when it first runs and then sets
a timer and 200 milliseconds after the final

215
00:15:58,509 --> 00:16:03,079
on-scroll event, it will re-enable the hover
effects. This means that I can start scrolling

216
00:16:03,079 --> 00:16:07,519
and the hover effects get disabled and no
repaint is happening during the scroll but

217
00:16:07,519 --> 00:16:11,089
then as soon as the scroll is done, I still
get my sort of nice animation.

218
00:16:11,089 --> 00:16:14,610
>>Nat Duca: And this is sort of your instant
recipe to making it smooth, right? Is if you

219
00:16:14,610 --> 00:16:18,269
are willing to compromise on some of those
gorgeous hover effects or whatever it is that

220
00:16:18,269 --> 00:16:22,399
is causing your repaint in the first place,
if you're willing to reduce it during the

221
00:16:22,399 --> 00:16:26,350
scroll or simplify your content in some way,
you can go nice and fast again.

222
00:16:26,350 --> 00:16:28,779
>>Tom Wiltzius: That's right. I mean, this
is changing the behavior of the page, right?

223
00:16:28,779 --> 00:16:32,199
And that's not always going to be acceptable
to you. So it's important to understand that

224
00:16:32,199 --> 00:16:37,449
there are often tradeoffs between how well
something performs and what it looks -- what

225
00:16:37,449 --> 00:16:41,910
it looks like, but it isn't always going to
be possible to achieve whatever sort of like

226
00:16:41,910 --> 00:16:46,880
crazy effect you want in a -- a totally nice
performance way.

227
00:16:46,880 --> 00:16:51,410
We're sort of picking on hover here, but really
there are all sorts of things that can cause

228
00:16:51,410 --> 00:16:56,630
this sort of problem.
The -- the real thing you want to do is use

229
00:16:56,630 --> 00:17:01,009
show paint reqs to sort of look for these
big red flashes during your scroll or during

230
00:17:01,009 --> 00:17:04,760
your animation and then try total rid of them.
So hover effects are one thing to look out

231
00:17:04,760 --> 00:17:10,720
for but there are a lot of others as well.
Common problems come from fixed-position elements

232
00:17:10,720 --> 00:17:17,720
or overflow scroll divs or touch listeners,
mouse wheel events, trying to reposition things

233
00:17:18,350 --> 00:17:22,180
in an on-scroll handler for like paralax effects
sites. These are all things that we see that

234
00:17:22,180 --> 00:17:24,670
--
>>Nat Duca: Social widgets that you position

235
00:17:24,670 --> 00:17:28,670
when people hover over an article and stuff
like that. Like give the pages a chance to

236
00:17:28,670 --> 00:17:31,410
settle before you bring in your, you know,
+1 button, right?

237
00:17:31,410 --> 00:17:34,110
>>Tom Wiltzius: Right. Which is not to say
that like these things are bad, right? It's

238
00:17:34,110 --> 00:17:38,940
just that you need to be aware that in sort
of liberally using them, you may end up in

239
00:17:38,940 --> 00:17:42,960
a position where you really end up fighting
with the rendering system and the performance

240
00:17:42,960 --> 00:17:46,800
is going to go through the floor. There are
cases where you really do need that paint,

241
00:17:46,800 --> 00:17:49,580
though, you really do want something to change
accident occurring a scroll, and that's fine.

242
00:17:49,580 --> 00:17:53,180
If it's fast enough, you can still be Jankfree,
right? But you're going to have to be very

243
00:17:53,180 --> 00:17:58,250
vigilant about keeping paint as cheap as possible.
For this, you want to be paying a lot of attention

244
00:17:58,250 --> 00:18:02,670
to how visually complicated your CSS is and
continuous painting mode that we plugged earlier

245
00:18:02,670 --> 00:18:07,210
is a good way to try to reduce the cost of
a lot of those paints. Image decodes and resizes

246
00:18:07,210 --> 00:18:10,830
can be really painful. If you're on a media
site with tons of images, you can blow the

247
00:18:10,830 --> 00:18:13,470
image cache inside of Blink and that can be
really painful.

248
00:18:13,470 --> 00:18:16,680
>>Nat Duca: Constant vigilance.
>>Tom Wiltzius: Constant vigilance is the

249
00:18:16,680 --> 00:18:20,310
answer, yeah. But now Nat's going to talk
about some of the other great applications

250
00:18:20,310 --> 00:18:21,750
of layers.
>>Nat Duca: Well, I think we've got another

251
00:18:21,750 --> 00:18:25,560
demo for you which is always fun, more fun
than us talking but, you know, here's the

252
00:18:25,560 --> 00:18:29,220
thing. We showed you how you can use layers
to scroll smoothly, right? And that's -- you

253
00:18:29,220 --> 00:18:32,960
can sort of understand that, when we're moving
something up and down. But people like, you

254
00:18:32,960 --> 00:18:37,790
know, drawers and -- and hover effects and,
you know, slides that -- that zoom in from

255
00:18:37,790 --> 00:18:40,390
the left, right?
And this is a really cool thing. There are

256
00:18:40,390 --> 00:18:44,000
some amazing things you can do here. But the
way to make it fast versus the way that you

257
00:18:44,000 --> 00:18:49,100
encode it up quick are often not well aligned,
so it's very important when you do sort of

258
00:18:49,100 --> 00:18:52,970
animations to also think about layers and
also think about how can I construct this

259
00:18:52,970 --> 00:18:58,010
animation so it plays well with Chrome's layered
rendering model, not fights against it.

260
00:18:58,010 --> 00:19:01,500
>>Tom Wiltzius: Right. And a lot of that comes
down to how can I run this animation without

261
00:19:01,500 --> 00:19:07,790
incurring any paints. So here's a really simple
drawer. This is styled like incredibly plainly,

262
00:19:07,790 --> 00:19:14,790
but you can see that if I open up DevTools
and I have show paint reqs on, that as I run

263
00:19:14,960 --> 00:19:19,860
this animation, which is a simple CSS animation
on the left property -- right? -- like very

264
00:19:19,860 --> 00:19:26,110
basic, I get repaints of the drawer throughout
the entire animation. That means every frame,

265
00:19:26,110 --> 00:19:30,860
this entire part of the screen is being repainted,
re-uploaded to the GPU, and re-composited.

266
00:19:30,860 --> 00:19:34,200
And that's, again, relatively painful.
>>Nat Duca: And if you take that to a low-end

267
00:19:34,200 --> 00:19:37,160
device, it will be worse and worse and worse.
Six times worse, often.

268
00:19:37,160 --> 00:19:39,590
>>Tom Wiltzius: Right. So the question you
want to be asking yourself is, "okay, like

269
00:19:39,590 --> 00:19:46,230
how do I get around this? Like how do I avoid
these red rectangles?" And it so happens that

270
00:19:46,230 --> 00:19:53,090
one good way to do so for moving things like
this is with transforms, through CSS 3 transforms,

271
00:19:53,090 --> 00:19:58,320
rather than changing the position property.
Transforms take elements out of the flow of

272
00:19:58,320 --> 00:20:03,530
the page, which gives the browser some stronger
guarantees about what it can move without

273
00:20:03,530 --> 00:20:07,870
risking having to reflow other elements.
>>Nat Duca: This is an example of not all

274
00:20:07,870 --> 00:20:13,140
-- you can make the same look in CSS with
different types of selectors or different

275
00:20:13,140 --> 00:20:19,060
types of attributes and get the same visual
look. But it is going to perform totally differently.

276
00:20:19,060 --> 00:20:22,520
>>Tom Wiltzius: Chrome has all these fast
pass. But you kind of need to find them, which

277
00:20:22,520 --> 00:20:29,520
can be painful. If I use a Webkit transform
here and a translate X, I have this comparatively

278
00:20:30,500 --> 00:20:34,390
much nicer animation, right? You can see it
is a little bit smoother if your eyes are

279
00:20:34,390 --> 00:20:39,930
attuned to it. But the really nice thing is
I'm not getting any paints, there is no red

280
00:20:39,930 --> 00:20:43,420
rectangles throughout the animation. There
are red rectangles at the beginning and end,

281
00:20:43,420 --> 00:20:48,260
though. And we will talk about those next.
>>Nat Duca: If you get somebody who stamps

282
00:20:48,260 --> 00:20:52,750
out that first bit of animation and Tom comes
over to me and says, I got it! I got it! We

283
00:20:52,750 --> 00:20:56,980
just have red flashes getting in. It is not
good enough. Never, ever paint. That's what

284
00:20:56,980 --> 00:21:01,660
we are looking for. Not, oh, I reduced it
a bit. It's, Don't paint.

285
00:21:01,660 --> 00:21:07,410
>>Tom Wiltzius: We are standing up here stating
that this thing is now fast because it is

286
00:21:07,410 --> 00:21:11,530
in layer. You shouldn't take our word for
it. You should want to look for this yourself.

287
00:21:11,530 --> 00:21:15,750
The way to do that is to open up DevTools
again, turn on show composited layer borders

288
00:21:15,750 --> 00:21:22,230
in DevTools settings. And if you look really
carefully -- I will zoom in here -- there

289
00:21:22,230 --> 00:21:27,940
is an orange border that goes around the edge
of the page and that orange border is your

290
00:21:27,940 --> 00:21:33,120
cue that says, The content inside of this
border is in its own layer.

291
00:21:33,120 --> 00:21:36,010
You can see there is only one orange border.
It is probably hard to see from the audience

292
00:21:36,010 --> 00:21:37,870
on this screen.
>>Nat Duca: Trust us.

293
00:21:37,870 --> 00:21:41,360
>>Tom Wiltzius: There is only one orange border
on this particular page because there is only

294
00:21:41,360 --> 00:21:47,070
one layer. Again, look really carefully. I
will zoom in again. Look really carefully

295
00:21:47,070 --> 00:21:51,430
at the edge of the drawer as this animation
runs. You can see that there is another orange

296
00:21:51,430 --> 00:21:56,780
border that pops up along the edge of the
drawer during the animation. And that's your

297
00:21:56,780 --> 00:22:02,100
sign that says, Oh, this content actually
got promoted to its own layer and now it is

298
00:22:02,100 --> 00:22:08,130
being moved back and forth, which is great.
But the question is: Why the red rectangles

299
00:22:08,130 --> 00:22:11,710
at the beginning and end?
And if you look carefully, maybe you can guess

300
00:22:11,710 --> 00:22:17,200
why. There isn't an orange border before or
after this animation runs, right? So what's

301
00:22:17,200 --> 00:22:22,930
happening is that the layer that the drawer
is in during the animation doesn't exist before

302
00:22:22,930 --> 00:22:27,300
or after the animation, right?
So the animation starts. We pop the drawer

303
00:22:27,300 --> 00:22:32,070
out. Put it in its own layer. It is a new
layer so we need to render its contents, right?

304
00:22:32,070 --> 00:22:35,860
That's the first red flash.
Then we recomposite it, recomposite it, recomposite

305
00:22:35,860 --> 00:22:40,460
it, move it all the over and pop it back into
the base layer. And when we pop it into the

306
00:22:40,460 --> 00:22:46,290
base layer, we need to repaint that part of
it. That's the second red flash.

307
00:22:46,290 --> 00:22:52,170
How do we avoid this? One way is sort of incidental.
If you use a translate 3D instead of a translate

308
00:22:52,170 --> 00:22:56,720
X, you get a layer even when the thing isn't
moving because it will be promoted to a layer

309
00:22:56,720 --> 00:23:01,390
not due to the animation but due to the CSS
transform itself.

310
00:23:01,390 --> 00:23:08,390
If we try that and run this animation, you
can see that I can now run it back and forth,

311
00:23:09,430 --> 00:23:12,580
no red rectangles.
>>Nat Duca: Look, Ma, no red flash, right?

312
00:23:12,580 --> 00:23:16,930
>>Tom Wiltzius: That's great. That's kind
of what we want. And if I open up the timeline

313
00:23:16,930 --> 00:23:20,730
view, we talked about vertical timeline earlier,
usually you would see all sorts of paint events

314
00:23:20,730 --> 00:23:27,340
and stuff, right? But if I start a recording
and run this animation, you can see that throughout

315
00:23:27,340 --> 00:23:31,850
the animation, all we get are these composite
layer operations over and over and over again,

316
00:23:31,850 --> 00:23:36,470
which are comparatively super, super cheap.
That's really good. This is the ideal timeline

317
00:23:36,470 --> 00:23:43,470
case where, yes, things are moving but there
is a minimum of other stuff going on. So that's

318
00:23:43,950 --> 00:23:47,370
drawers.
But sometimes this isn't quite enough. Sometimes

319
00:23:47,370 --> 00:23:52,400
just seeing those borders isn't enough to
tell you really what's going on, especially

320
00:23:52,400 --> 00:23:56,780
if you have really complicated animations,
et cetera. These are contrived examples. It

321
00:23:56,780 --> 00:24:02,920
is easy for us to come up with a demo. You
are trying to debug a site or an app on a

322
00:24:02,920 --> 00:24:06,610
phone in production, there can be lots of
stuff going on. There can be all sorts of

323
00:24:06,610 --> 00:24:11,230
layers all over the place. And you can be
trying to add more but that's only causing

324
00:24:11,230 --> 00:24:14,640
you to have too many. Maybe you are running
out of memory. All sorts of things can go

325
00:24:14,640 --> 00:24:16,490
wrong, right?
So Nat's going to talk a little bit about

326
00:24:16,490 --> 00:24:19,380
what to do in those more advanced scenarios.
>>Nat Duca: What we are going to do now is

327
00:24:19,380 --> 00:24:23,410
we're going to take the covers off of an internal
tool we have been developing in Chrome to

328
00:24:23,410 --> 00:24:28,470
show the nasty innard guts of the compositing
system, which is this thing that makes things

329
00:24:28,470 --> 00:24:33,010
Jankfree.
As you see this, keep in mind basically this

330
00:24:33,010 --> 00:24:37,590
is very, very brand-new. And it is designed
for developers first, but we wanted to show

331
00:24:37,590 --> 00:24:43,860
it because this shows you exactly why things
really are slow. The way it works is you get

332
00:24:43,860 --> 00:24:48,410
a relatively current build of Chrome and that
will probably be like Friday's build, not

333
00:24:48,410 --> 00:24:54,340
today's. So that's how new it is. And you
pop over to your site that you think is Janky.

334
00:24:54,340 --> 00:24:58,710
So I'm just going to start with something
really simple. This is just a tall site with

335
00:24:58,710 --> 00:25:05,059
some As in it, right? Really bringing out
the good content for you guys.

336
00:25:05,059 --> 00:25:09,150
[ Laughter ]
Remember, we showed you the picture of Gmail,

337
00:25:09,150 --> 00:25:14,050
right, with it broken out in layers. You go
over to tracing, this Chrome tracing thing,

338
00:25:14,050 --> 00:25:18,240
and you start it recording.
You go back over to here and you do your thing,

339
00:25:18,240 --> 00:25:20,790
whatever that thing happens to be. Just like
in Timeline.

340
00:25:20,790 --> 00:25:24,650
What you are going to be presented with, once
it does its thinking is something that should

341
00:25:24,650 --> 00:25:28,760
actually remind some of you of Android systrace
in sort of appearance.

342
00:25:28,760 --> 00:25:31,750
What you are seeing here is these all the
different times my finger was moving on the

343
00:25:31,750 --> 00:25:35,800
track pad causing it to scroll. And the nice
regularity of that that should scream out

344
00:25:35,800 --> 00:25:39,150
Jankfreeness right away.
Each one of these green dots are the things

345
00:25:39,150 --> 00:25:42,680
you really want to click on. Everything else
is sort of side show.

346
00:25:42,680 --> 00:25:47,530
The green dot represents Chrome drawing one
frame up onto the screen. That's kind of where

347
00:25:47,530 --> 00:25:51,800
the meat is.
Down here you have got -- in the center here,

348
00:25:51,800 --> 00:25:56,110
you have got a list of the layers on the screen
on that frame. There's two. There is this

349
00:25:56,110 --> 00:26:00,040
one which is shown over here. You can see
that's the really tall page. You can see that's

350
00:26:00,040 --> 00:26:03,390
the whole darn page.
Then you have got this thing which is tall

351
00:26:03,390 --> 00:26:07,560
and narrow. What is that? That's the scroll
bar. It is that little thing. Even on Mac,

352
00:26:07,560 --> 00:26:11,570
we have it, even though it is transparent.
That's sort of the shape of the page.

353
00:26:11,570 --> 00:26:16,920
The thing you want to then look at as I go
from frame to frame, see this thing over here,

354
00:26:16,920 --> 00:26:20,900
this is our mini map. As you go from frame
to frame, you see the green thing which is

355
00:26:20,900 --> 00:26:26,320
the layer moving and that's the scroll happening.
The blue represents the viewport. So just

356
00:26:26,320 --> 00:26:32,210
like in the Gmail example where we showed
the Gmail thing -- the mail list moving and

357
00:26:32,210 --> 00:26:37,690
sort of this hole where the viewport was looking,
this is the same thing but from my live site.

358
00:26:37,690 --> 00:26:40,590
This is kind of -- you can sort of start thinking,
this is kind of useful.

359
00:26:40,590 --> 00:26:45,020
Hey, that's a big picture. I wonder how much
memory it is using. We have a lot of people

360
00:26:45,020 --> 00:26:48,290
who worry about that, where they say, These
layer things are great but they are eating

361
00:26:48,290 --> 00:26:51,830
a lot of memory.
You can actually click now on this and see

362
00:26:51,830 --> 00:26:58,830
the actual bytes consumed by that layer. It
is like 7 megs, something like that.

363
00:26:59,080 --> 00:27:03,160
And I'm beeping. That was fun.
[ Laughter ]

364
00:27:03,160 --> 00:27:07,490
So that's the most fun part of the talk.
You can actually get the actual memory consumption

365
00:27:07,490 --> 00:27:11,680
from this tool, which is super useful when
you are trying to take your site which is

366
00:27:11,680 --> 00:27:16,760
layer heavy, for instance, and bring it to
a phone, which is constrained. Remember, we

367
00:27:16,760 --> 00:27:22,270
had this demo up, right? This drawer. And
Tom was saying, trust me, there is a layer

368
00:27:22,270 --> 00:27:26,120
there. Don't trust, measure.
So we are going to reload. I'm going to set

369
00:27:26,120 --> 00:27:30,420
it to do the thing where it was popping in
and out and we are going to do the effect.

370
00:27:30,420 --> 00:27:36,070
Same old thing. And we wait for it to do a
bit of a think. You can see again there is

371
00:27:36,070 --> 00:27:40,090
two big bursts of animation which is when
the rendering system was active.

372
00:27:40,090 --> 00:27:43,780
I click here. Let's pick that frame. You can
sort of see this, right?

373
00:27:43,780 --> 00:27:48,250
There's my page as before, right? There is
the drawer on the left.

374
00:27:48,250 --> 00:27:53,770
And then there is this big stall here. It
is Jank. When I click here, you see that it

375
00:27:53,770 --> 00:27:59,000
is gone. There is a hole. where did it go,
right? Now you see there are two layers instead

376
00:27:59,000 --> 00:28:02,140
of one.
This is the root layer, and that's this newly

377
00:28:02,140 --> 00:28:06,250
created one. And that got painted. We paid
to paint that and pop it out.

378
00:28:06,250 --> 00:28:10,110
And we also paid to paint the other layer
to create the hole.

379
00:28:10,110 --> 00:28:15,060
Now you see on the left in the mini map that
drawer starting to slide in under the viewport.

380
00:28:15,060 --> 00:28:18,590
So now it is sliding in, sliding in and it
is good and we are happy and it is 60 hertz

381
00:28:18,590 --> 00:28:22,040
and it looks smooth.
Toward the end, what you are going to see

382
00:28:22,040 --> 00:28:27,720
is it smoosh down. So here -- from here to
here, you see that we have two layers like

383
00:28:27,720 --> 00:28:32,050
this still. And then in the next frame, it
is smooshed down to one.

384
00:28:32,050 --> 00:28:37,140
Ah, right? So then we paid yet again to paint
it. We didn't pay so much of a painting penalty

385
00:28:37,140 --> 00:28:41,220
this time, but maybe on a lower-end device,
we would have. If you scroll down, you can

386
00:28:41,220 --> 00:28:46,350
see the painting activity taking place.
One other final thing to show about this tool.

387
00:28:46,350 --> 00:28:50,170
A lot of people wonder when you get a big
-- big site, big production site where there's

388
00:28:50,170 --> 00:28:54,470
a zillion things going on, you get a ton of
layers. And you are like: I didn't ask for

389
00:28:54,470 --> 00:28:58,290
this. Why is this layer promoted?
So if you actually look down at the bottom

390
00:28:58,290 --> 00:29:05,130
of this thing, you can see this compositing
reason. This so no promotion reason given.

391
00:29:05,130 --> 00:29:11,100
But if I click on this one that's moving,
it is using accelerated animation. That's

392
00:29:11,100 --> 00:29:15,290
your key to then start understanding, Hey,
maybe I should keep this promoted for some

393
00:29:15,290 --> 00:29:20,360
other reason, too, so it stays promoted afterward.
And so when we turn this on and do a trace

394
00:29:20,360 --> 00:29:25,030
of this with the real -- that final demo that
we say was Jankfree, you will see that, then,

395
00:29:25,030 --> 00:29:29,090
has several promotion reasons that keep it
promoted the whole time.

396
00:29:29,090 --> 00:29:33,210
So this is sort of the low -- the quick glimpse
into a tool that we are trying to get out

397
00:29:33,210 --> 00:29:36,330
there into people's hands so when you are
really under deadline and you need to make

398
00:29:36,330 --> 00:29:40,920
something Jankfree that's in your available
in your arsenal to help with.

399
00:29:40,920 --> 00:29:47,920
>>Tom Wiltzius: It is as Nat said super, super
new. We have some nascent docs up at this

400
00:29:48,490 --> 00:29:53,860
link. And we do encourage you guys to maybe
in the next couple weeks go try it out as

401
00:29:53,860 --> 00:29:58,500
it lands and starts to stabilize.
But for sort of advanced use cases, this is

402
00:29:58,500 --> 00:30:00,440
--
>>Nat Duca: You can get very far with DevTools.

403
00:30:00,440 --> 00:30:04,700
This is if -- if you are in a pinch, you can
check this out. You will be confused, but

404
00:30:04,700 --> 00:30:07,960
it will help.
>>Tom Wiltzius: That's right. But for starters,

405
00:30:07,960 --> 00:30:13,390
as you sort of begin down your journey towards
fighting Jank, you want to use DevTools. You

406
00:30:13,390 --> 00:30:18,000
want to turn on Share Paint Rectangles every
time you see Jank sort of crop up in the wild.

407
00:30:18,000 --> 00:30:21,570
And you want to look for what is repainting
and try to figure out why.

408
00:30:21,570 --> 00:30:28,090
You want to ask yourself why -- why am I repainting
this? And can I either avoid it by being judicious

409
00:30:28,090 --> 00:30:33,730
and not changing style when I don't have to
or by using layers or some combination of

410
00:30:33,730 --> 00:30:35,580
the above.
And if you can't avoid it, you want to make

411
00:30:35,580 --> 00:30:40,190
it as fast as possible by using continuous
painting mode that we talked about earlier.

412
00:30:40,190 --> 00:30:44,350
>>Nat Duca: There are a lot of great tools.
The thing to keep in mind, if you walk away

413
00:30:44,350 --> 00:30:49,910
with nothing else in your take-aways is this,
all the browsers are basically building something

414
00:30:49,910 --> 00:30:54,380
around layers.
Think about doing your effects, your awesome

415
00:30:54,380 --> 00:30:59,680
immersive Web experiences in terms of layers.
Think about whether you're designing for that,

416
00:30:59,680 --> 00:31:03,080
try to reduce paint.
And if you do, the browsers will pay you back

417
00:31:03,080 --> 00:31:07,250
in scores with Jankfreeness, smoothness, right?
And if you don't, then you are going to be

418
00:31:07,250 --> 00:31:11,080
fighting the browser. It is going to be doing
its best, but you are asking it to do a hard

419
00:31:11,080 --> 00:31:14,010
thing. So happy Jank busting.
[ Laughter ]

420
00:31:14,010 --> 00:31:17,490
>>Tom Wiltzius: I think we're going to take
a few questions because we have some time

421
00:31:17,490 --> 00:31:24,120
left. But if you are hungry for more, we've
got sort of a collection of links and articles

422
00:31:24,120 --> 00:31:28,650
and whatnot up at jankfree.org. It is just
sort of a dumping ground for us. And that's

423
00:31:28,650 --> 00:31:30,360
where we are going to put these slides as
well.

424
00:31:30,360 --> 00:31:33,630
If you take away one URL from this talk, it
should be that. And you can get to everything

425
00:31:33,630 --> 00:31:37,460
else from there. Html5rocks is the Chrome
developer relations Website about this kind

426
00:31:37,460 --> 00:31:40,250
of topic. So you should definitely go check
that out.

427
00:31:40,250 --> 00:31:45,250
We will continue putting up content about
this topic. Go check that out.

428
00:31:45,250 --> 00:31:48,590
Our contact info is up here, too. We are happy
to talk about things like this if you have

429
00:31:48,590 --> 00:31:54,280
interesting cases that you want to sort of
bring to us. We also welcome bugs on the Chrome

430
00:31:54,280 --> 00:31:59,330
bug tracker.
With that, I think we will take some questions.

431
00:31:59,330 --> 00:32:06,330
Thank you very much.
[ Applause ]

432
00:32:06,710 --> 00:32:12,510
>>> Hi. So it seems like layers are really
important. But right now, it seems like you

433
00:32:12,510 --> 00:32:16,760
kind of have to do a snake dance to figure
out or make something into a layer.

434
00:32:16,760 --> 00:32:21,510
>>Nat Duca: I like that expression.
>>> Does it make sense for there to be an

435
00:32:21,510 --> 00:32:26,690
explicit style declaration to say, Hey, I
know how I want to composite my page?

436
00:32:26,690 --> 00:32:29,520
>>Tom Wiltzius: Right.
>>> Let me turn this into a layer, just like

437
00:32:29,520 --> 00:32:35,020
Webkit layer, whatever, make this into a layer,
yeah, almost like Z index. Is that coming?

438
00:32:35,020 --> 00:32:39,580
>>Tom Wiltzius: Right. I mean, it is a good
question. It actually comes up a fair amount.

439
00:32:39,580 --> 00:32:43,040
It is something we've resisted because, like,
in general, there is resistance to adding

440
00:32:43,040 --> 00:32:46,000
APIs to this.
>>Nat Duca: One of the great things about

441
00:32:46,000 --> 00:32:51,130
the Web is that your content can run pretty
much anywhere. And, remember I showed you

442
00:32:51,130 --> 00:32:58,130
in the demo that these layers take memory?
If you start telling Chrome to use a layer

443
00:32:59,210 --> 00:33:03,240
for that, then you run into the situation
of it might fit on your high-end computer,

444
00:33:03,240 --> 00:33:05,960
say, a Pixel, but then it won't fit on an
Android device.

445
00:33:05,960 --> 00:33:10,250
And at which point, what are we to do? If
you start making assumptions about this definitely

446
00:33:10,250 --> 00:33:13,820
being in a layer and we can't fit it in memory,
what are we going to do?

447
00:33:13,820 --> 00:33:17,510
I totally get where you are coming from. This
is something that we as a community, the Web

448
00:33:17,510 --> 00:33:21,210
community, need to really tackle in the next
couple of years, of how to improve the statement

449
00:33:21,210 --> 00:33:24,140
of intent.
But we also have to think about as we do that,

450
00:33:24,140 --> 00:33:27,880
how to make it work and preserve sort of that
promise of the Web where it just sort of works

451
00:33:27,880 --> 00:33:30,710
everywhere. Does that --
>>Tom Wiltzius: I think the intent --

452
00:33:30,710 --> 00:33:31,730
>>Nat Duca: Is that responsive?
>>Tom Wiltzius: The intent point is a good

453
00:33:31,730 --> 00:33:36,480
one, right, because, like, in some ways, the
layer concept, like, it is kind of an implementation

454
00:33:36,480 --> 00:33:40,470
detail. And that's not the kind of thing we
like to codify with syntax, right?

455
00:33:40,470 --> 00:33:46,740
Instead what we want to codify is stuff about
intent, right? So things that, for instance,

456
00:33:46,740 --> 00:33:52,610
the Chrome Compositor is good at right now
is moving stuff around, changing opacity and

457
00:33:52,610 --> 00:33:57,490
sort of doing this 60 times a second. And
there actually are semantic ways of declaring

458
00:33:57,490 --> 00:34:01,950
all of these things. If you declare them,
Chrome will do the right thing. Those things

459
00:34:01,950 --> 00:34:06,810
get layers and those things get hardware accelerated.
I think that's probably more the direction

460
00:34:06,810 --> 00:34:12,280
we want to go. Otherwise, you will try to
end up in some senses abuse it, right? You

461
00:34:12,280 --> 00:34:15,280
will try to trick the compositor into doing
things that it is not really designed ed for.

462
00:34:15,280 --> 00:34:18,580
I wonder -- I don't know. I wonder if we will
end up in a worse place --

463
00:34:18,580 --> 00:34:23,200
>>Nat Duca: TLDR hard problem. And if you
have any brilliant observations, come grab

464
00:34:23,200 --> 00:34:25,419
us.
>>Tom Wiltzius: We will be in the Chrome performance

465
00:34:25,419 --> 00:34:29,639
area later, too, if anyone wants to talk.
In the front.

466
00:34:29,639 --> 00:34:33,520
>>> I was just wondering if this tool is available
on Chrome for Android?

467
00:34:33,520 --> 00:34:36,270
>>Tom Wiltzius: Sorry, can you repeat the
question?

468
00:34:36,270 --> 00:34:42,090
>>> Is this tool available on Chrome for Android?
>>Nat Duca: The last one will work on Chrome

469
00:34:42,090 --> 00:34:44,940
eventually.
>>Tom Wiltzius: All the DevTools stuff, yes.

470
00:34:44,940 --> 00:34:50,370
The last sort of advanced tracing tool doesn't
work yet.

471
00:34:50,370 --> 00:34:51,450
>>Nat Duca: It will come.
>>Tom Wiltzius: It should.

472
00:34:51,450 --> 00:34:54,800
>>Nat Duca: It is all sort of common infrastructure.
>>Tom Wiltzius: The basic tracing does work

473
00:34:54,800 --> 00:34:59,100
on Android. The more advanced features to
view frames doesn't work.

474
00:34:59,100 --> 00:35:04,020
>>Nat Duca: Haven't tried it. It might work.
We'll see. But it is all one big happy family.

475
00:35:04,020 --> 00:35:06,280
We all think about all platforms.
>>Tom Wiltzius: We work across.

476
00:35:06,280 --> 00:35:10,120
>>Nat Duca: If it is not working today, it
will be working very soon because we want

477
00:35:10,120 --> 00:35:15,130
-- our whole vision here is you write your
Web platform thing and we will take care of

478
00:35:15,130 --> 00:35:22,130
all your OSes for you, module a few details.
>>> So instead of asking for a layer, is there

479
00:35:22,290 --> 00:35:28,230
a possibility of getting, like, an experimental
no-paint attribute, I'm sorry, suppress paint

480
00:35:28,230 --> 00:35:33,370
while we move stuff around? Because sometimes
it is kind of like you have to hold the old-style

481
00:35:33,370 --> 00:35:39,160
TV antenna up to get the right -- it is like:
Did I do the right thing to kick the compositor

482
00:35:39,160 --> 00:35:43,920
just the right way?
If we had attributes that, seriously, we actually

483
00:35:43,920 --> 00:35:48,940
know better than you, don't repaint this,
it might help some edge cases we have.

484
00:35:48,940 --> 00:35:53,060
>>Nat Duca: There is a proposal floating around
for, I believe we are calling it, prepainting.

485
00:35:53,060 --> 00:35:58,110
And if you look on one of chromium's graphics
development mailing lists, you will find a

486
00:35:58,110 --> 00:36:03,760
discussion about it. And I think we intend
to broaden that discussion in the coming months.

487
00:36:03,760 --> 00:36:08,500
But this is about being able to say, hey,
I'm bringing -- So, think about infinite scroll.

488
00:36:08,500 --> 00:36:13,760
You are adding elements to the bottom. Hey,
Chrome or, hey, browser, I'm adding this image

489
00:36:13,760 --> 00:36:20,190
but, like, if you can't put that up in time,
no big. I'll put in a placeholder or something.

490
00:36:20,190 --> 00:36:23,870
So, hey, this is optional. And please let
me know when it really is there so I can get

491
00:36:23,870 --> 00:36:27,330
rid of my placeholder asset.
That's being discussed. I think it may be

492
00:36:27,330 --> 00:36:31,930
abusable for the other things you are thinking
about, too. That actually feels relatively

493
00:36:31,930 --> 00:36:36,500
within scope of the platform, I think. We'll
see.

494
00:36:36,500 --> 00:36:42,500
>>Tom Wiltzius: I think there is also room
to do that kind of thing higher up the stack

495
00:36:42,500 --> 00:36:46,350
before we talk about painting. Like, really
what you want to do is declare -- is sort

496
00:36:46,350 --> 00:36:51,230
of make a promise to the browser that you're
not going to do anything that's going to manipulate

497
00:36:51,230 --> 00:36:55,490
style or layout inside of -- sort of a container
block.

498
00:36:55,490 --> 00:37:00,950
If you can do that, then, like, further down
the stack where we are talking about, we can

499
00:37:00,950 --> 00:37:04,280
do the right thing and not paint.
But there is some efforts going around things

500
00:37:04,280 --> 00:37:05,980
like that, too.
>>Nat Duca: There is a lot of discussion here.

501
00:37:05,980 --> 00:37:09,680
We're definitely -- please, come on up and
we can chat if you want. There is a lot of

502
00:37:09,680 --> 00:37:13,930
discussion in the team about how to basically
say to the platform, Hey, I solemnly swear

503
00:37:13,930 --> 00:37:20,210
I'm up to good. Now get out of my way. We
know it is not good enough yet.

504
00:37:20,210 --> 00:37:23,370
>>> Any love for SVG -- Jankfree SVG any time
soon?

505
00:37:23,370 --> 00:37:27,350
>>Nat Duca: Oh, totally. Definitely. One of
the people helping build that tool that we

506
00:37:27,350 --> 00:37:34,310
demoed is one of our SVG awesome peoples.
>>Tom Wiltzius: Definitely important. The

507
00:37:34,310 --> 00:37:39,290
summary is yes. It is a little harder because
of the way SVG works. Gloss over that.

508
00:37:39,290 --> 00:37:41,820
In front.
>>> Jankfree is awesome especially considering

509
00:37:41,820 --> 00:37:45,130
how poor performance still is six years into
smartphones on smartphones.

510
00:37:45,130 --> 00:37:47,600
>>Tom Wiltzius: Totally.
>>> But I can't help but look at these demos

511
00:37:47,600 --> 00:37:52,820
with "Oh, make this translate and then make
this a 3D translate" and think about people

512
00:37:52,820 --> 00:37:56,980
who used underscores for their CSS variables
to make IE7 not look at that one and look

513
00:37:56,980 --> 00:38:00,240
at a different one.
It feels like we are introducing another Web

514
00:38:00,240 --> 00:38:04,280
development snake dance. And I wonder if there
is anything we can do to mitigate that to

515
00:38:04,280 --> 00:38:09,020
make -- to think about our codebases as something
that's going to live for longer than the six

516
00:38:09,020 --> 00:38:13,230
months that I'm on this project and make it
easy for people to maintain down the line.

517
00:38:13,230 --> 00:38:18,330
>>Tom Wiltzius: Absolutely. That's kind of
the reason that we were saying what we were

518
00:38:18,330 --> 00:38:24,860
in response to the first question about, like,
Oh, can we have a primitive for layer promotion?

519
00:38:24,860 --> 00:38:30,450
And the reason that there is hesitancy to
do that kind of thing is because again so

520
00:38:30,450 --> 00:38:34,760
directly targeting implementation details
of the browser, you end up in a world of pain

521
00:38:34,760 --> 00:38:40,410
later where, oh, I don't care about IE7 so
much anymore but now my codebase is all kind

522
00:38:40,410 --> 00:38:43,030
of split up because of that.
That's the kind of thing we don't want to

523
00:38:43,030 --> 00:38:48,500
do. We want to stay as semantic as possible
so future versions of the browser don't need

524
00:38:48,500 --> 00:38:52,480
to handle these kind of weird cases that were
targeted very much at implementation.

525
00:38:52,480 --> 00:38:56,210
>>Nat Duca: But if there is one thing to keep
in the back of your head, it's this. Probably

526
00:38:56,210 --> 00:39:00,430
for the next couple of years it is going to
be messy. So having your infrastructure on

527
00:39:00,430 --> 00:39:05,460
your project be set up to deliver custom CSS
or in some way handle special casing for different

528
00:39:05,460 --> 00:39:09,810
browsers is probably the unfortunate reality
of our platform at this time.

529
00:39:09,810 --> 00:39:13,600
That really stinks and we all know we need
to do better. But you find quirks that you

530
00:39:13,600 --> 00:39:19,190
need to apply for Safari different than, say,
Chrome, that are different from the old Android

531
00:39:19,190 --> 00:39:24,580
Web view or something like that.
I would plan for the possibility of needing

532
00:39:24,580 --> 00:39:29,340
to do that.
How are we doing? We got probably one more

533
00:39:29,340 --> 00:39:30,420
question.
>>Tom Wiltzius: One more minute.

534
00:39:30,420 --> 00:39:36,000
>>Nat Duca: Especially as we are long winded.
>>> Hi. You talked about permanent vigilance.

535
00:39:36,000 --> 00:39:40,580
Can you tell us how Google internally spots
these? Whether you have got automation tools

536
00:39:40,580 --> 00:39:46,220
to assess when things have got worse so that
we cannot depend on developers being vigilant

537
00:39:46,220 --> 00:39:48,500
because they will be distracted by other things
as well?

538
00:39:48,500 --> 00:39:50,770
>>Tom Wiltzius: Yeah, sure, Nat built some
of them. So I will let him --

539
00:39:50,770 --> 00:39:57,770
>>Nat Duca: What we are starting to use, Go
Google Chrome telemetry. It is a framework

540
00:39:57,870 --> 00:40:03,680
built in Python on top of DevTools protocol.
So DevTools has this fantastic JSON-level

541
00:40:03,680 --> 00:40:09,480
-- or Web socket and then JSON-level protocol
where you can talk to the Web page out of

542
00:40:09,480 --> 00:40:13,410
process. And you can build developer tools
on top of it. You can also build fantastic

543
00:40:13,410 --> 00:40:18,510
profiling tools and you can get out of Timeline
stream in that the painting info of what was

544
00:40:18,510 --> 00:40:22,590
painting then you can build all sorts of cool
stuff on that, one of which is telemetry.

545
00:40:22,590 --> 00:40:26,850
>>Tom Wiltzius: That's the harness. And then
we have sort of collections of Web content

546
00:40:26,850 --> 00:40:32,190
that are sort of interesting cases for whatever
reason that we're worried about improving

547
00:40:32,190 --> 00:40:38,260
performance of or aggressing performance against.
We run sort of banks of content with this

548
00:40:38,260 --> 00:40:42,890
harness, and we have performance waterfalls.
>>Nat Duca: Thank you.

549
00:40:42,890 --> 00:40:47,720
>>Tom Wiltzius: So hopefully that is compelling.
>>Nat Duca: Thanks, everybody, so much for

550
00:40:47,720 --> 00:40:48,250
coming.
>>Tom Wiltzius: Yeah.

551
00:40:48,250 --> 00:40:49,059
>>Nat Duca: Good luck dejanking.
[ Applause ]

