1
00:00:00,000 --> 00:00:12,210

2
00:00:12,210 --> 00:00:14,250
PETE LEPAGE: Hey, everybody, and
welcome to another edition

3
00:00:14,250 --> 00:00:17,010
of the Chrome Apps
Office Hours.

4
00:00:17,010 --> 00:00:19,600
Today we're joined by Joe
Marini, who's going to be

5
00:00:19,600 --> 00:00:21,610
joining us in our Mountain
View office.

6
00:00:21,610 --> 00:00:24,550
Special thanks to Louis Gray
and to Peter Lubbers for

7
00:00:24,550 --> 00:00:26,070
helping us get this set up.

8
00:00:26,070 --> 00:00:29,660
Normally we broadcast out here
in New York City and have

9
00:00:29,660 --> 00:00:32,364
people join from London, but we
decided to switch things up

10
00:00:32,364 --> 00:00:34,480
a little bit today.

11
00:00:34,480 --> 00:00:38,410
If you're joining us for the
first time, and want to talk

12
00:00:38,410 --> 00:00:41,790
about this, be sure to add the
Chrome Apps hashtag to any of

13
00:00:41,790 --> 00:00:44,790
your comments or any of the
stuff that you want to talk

14
00:00:44,790 --> 00:00:46,400
about online.

15
00:00:46,400 --> 00:00:49,780
Joe is going to be talking with
the Media Galleries API.

16
00:00:49,780 --> 00:00:53,610
The Media Galleries API is
pretty slick in that it lets

17
00:00:53,610 --> 00:00:58,690
you get access to all of the
videos, the pictures, and the

18
00:00:58,690 --> 00:01:01,500
music that's sitting on your
computer, just like you would

19
00:01:01,500 --> 00:01:03,350
be able to do with any
other native app.

20
00:01:03,350 --> 00:01:06,010
We wanted to make sure that
Chrome Apps had this

21
00:01:06,010 --> 00:01:07,070
capability.

22
00:01:07,070 --> 00:01:09,300
So with that, I'll pass it over
to Joe who's going to

23
00:01:09,300 --> 00:01:12,970
start talking about the new
Media Galleries API.

24
00:01:12,970 --> 00:01:14,500
JOE MARINI: All right,
thanks, Pete.

25
00:01:14,500 --> 00:01:14,920
Hello, everyone.

26
00:01:14,920 --> 00:01:15,690
Hello, developers.

27
00:01:15,690 --> 00:01:16,740
Thanks for joining us.

28
00:01:16,740 --> 00:01:17,910
I am Joe Marini.

29
00:01:17,910 --> 00:01:20,830
I'm a developer advocate here
at Google and Chrome Apps is

30
00:01:20,830 --> 00:01:22,650
one of the things I focus on.

31
00:01:22,650 --> 00:01:25,130
As Pete mentioned, I'm going to
be talking about the Media

32
00:01:25,130 --> 00:01:26,530
Galleries API.

33
00:01:26,530 --> 00:01:29,390
If you want to follow along with
us, there's a GitHub repo

34
00:01:29,390 --> 00:01:30,500
I'll show in a moment.

35
00:01:30,500 --> 00:01:33,100
There's also the documentation
available online at

36
00:01:33,100 --> 00:01:35,510
developer.chrome.com/apps.

37
00:01:35,510 --> 00:01:37,570
And in fact, that's the window
I'm showing right now.

38
00:01:37,570 --> 00:01:40,120
So this is the API I will
be talking about.

39
00:01:40,120 --> 00:01:43,270
And as Pete mentioned, the
Media Galleries API is

40
00:01:43,270 --> 00:01:46,900
essentially intended to provide
access to the media

41
00:01:46,900 --> 00:01:50,170
that the user has stored on
their device-- their pictures,

42
00:01:50,170 --> 00:01:52,760
their music, their movies,
and so on.

43
00:01:52,760 --> 00:01:56,310
And this API gives you access
to that via Chrome Apps.

44
00:01:56,310 --> 00:01:57,920
So it's a pretty simple API.

45
00:01:57,920 --> 00:02:00,130
There's really only one function
you have to worry

46
00:02:00,130 --> 00:02:01,780
about, and it's this
one right here.

47
00:02:01,780 --> 00:02:04,160
It's called get media
file systems.

48
00:02:04,160 --> 00:02:08,970
This function takes an object
that describes the kind of

49
00:02:08,970 --> 00:02:11,880
media you're trying to access
and then a callback function

50
00:02:11,880 --> 00:02:15,970
which will be called back with
the file systems representing

51
00:02:15,970 --> 00:02:19,060
the various kinds of media
on the user's system.

52
00:02:19,060 --> 00:02:21,450
So that's the documentation if
you want to read through it.

53
00:02:21,450 --> 00:02:23,330
I prefer to actually
work in live code.

54
00:02:23,330 --> 00:02:27,150
So let's go over to the code and
take a look at how this is

55
00:02:27,150 --> 00:02:28,050
actually written.

56
00:02:28,050 --> 00:02:29,360
Well, actually before
I do that let me--

57
00:02:29,360 --> 00:02:31,000
PETE LEPAGE: Actually,
Joe, can I ask

58
00:02:31,000 --> 00:02:31,830
a real quick question?

59
00:02:31,830 --> 00:02:32,090
JOE MARINI: Sure.

60
00:02:32,090 --> 00:02:33,540
PETE LEPAGE: What's the
difference between using the

61
00:02:33,540 --> 00:02:36,620
Media Galleries API and actually
going and using like

62
00:02:36,620 --> 00:02:40,670
the HTML5 file system to go
access a picture that the user

63
00:02:40,670 --> 00:02:41,460
has on their system?

64
00:02:41,460 --> 00:02:41,830
Why would I use one
or the other?

65
00:02:41,830 --> 00:02:44,000
JOE MARINI: Yeah, that's
a great question.

66
00:02:44,000 --> 00:02:45,680
Actually, they're
complementary.

67
00:02:45,680 --> 00:02:48,300
The callback that I just
mentioned that the media file

68
00:02:48,300 --> 00:02:51,730
systems comes back
with gives you an

69
00:02:51,730 --> 00:02:53,480
HTML5 file system object.

70
00:02:53,480 --> 00:02:55,310
Well, actually, it's an array
of these objects.

71
00:02:55,310 --> 00:02:57,750
Each one of them represents the
different media systems on

72
00:02:57,750 --> 00:02:58,790
the user's computer.

73
00:02:58,790 --> 00:03:01,960
The main difference is that the
media system that you get

74
00:03:01,960 --> 00:03:06,820
back only contains the media
types that the Chrome Apps

75
00:03:06,820 --> 00:03:08,800
platform supports on
the user's device.

76
00:03:08,800 --> 00:03:10,600
So you don't have to worry about
parsing through files

77
00:03:10,600 --> 00:03:13,590
that the system can't play back
or anything like that.

78
00:03:13,590 --> 00:03:16,240
So think of it as a convenience
way of getting at

79
00:03:16,240 --> 00:03:18,090
the locations on the user's
device of where

80
00:03:18,090 --> 00:03:18,840
the media is stored.

81
00:03:18,840 --> 00:03:20,610
The system worries about where
those things are located.

82
00:03:20,610 --> 00:03:23,270
You don't have to go traipsing
through the user's device

83
00:03:23,270 --> 00:03:25,090
using the file system API.

84
00:03:25,090 --> 00:03:26,550
It just makes things
a lot easier.

85
00:03:26,550 --> 00:03:28,040
But the objects that
you get are

86
00:03:28,040 --> 00:03:29,170
actual file system objects.

87
00:03:29,170 --> 00:03:31,230
So it's a nice little
convenience thing.

88
00:03:31,230 --> 00:03:32,850
PETE LEPAGE: And I think the
other important thing to call

89
00:03:32,850 --> 00:03:35,870
out there is that the HTML5
file system API gives you

90
00:03:35,870 --> 00:03:39,750
access to a small sort of
sandbox portion of the user's

91
00:03:39,750 --> 00:03:40,110
hard drive.

92
00:03:40,110 --> 00:03:43,390
It doesn't give you like full
access to the user's hard

93
00:03:43,390 --> 00:03:45,530
drive, right?

94
00:03:45,530 --> 00:03:47,160
JOE MARINI: Unless you
specifically ask for the

95
00:03:47,160 --> 00:03:49,160
user's permission.

96
00:03:49,160 --> 00:03:51,900
If you're OK with throwing up
an open dialogue or a save

97
00:03:51,900 --> 00:03:53,575
dialogue, then fine, you
can go write files to

98
00:03:53,575 --> 00:03:54,770
your heart's content.

99
00:03:54,770 --> 00:03:59,030
But yes, this actually gives you
access to an entire folder

100
00:03:59,030 --> 00:04:00,230
with the user's permission.

101
00:04:00,230 --> 00:04:02,740
So it's a nice convenience
feature.

102
00:04:02,740 --> 00:04:03,180
PETE LEPAGE: Awesome.

103
00:04:03,180 --> 00:04:03,490
JOE MARINI: Yeah.

104
00:04:03,490 --> 00:04:07,290
And in fact, the sample I'm
going to be showing is in our

105
00:04:07,290 --> 00:04:09,380
Google Chrome GitHub repo.

106
00:04:09,380 --> 00:04:11,060
And I'm showing that on
the screen right now.

107
00:04:11,060 --> 00:04:12,015
So if you go to github.com/googl

108
00:04:12,015 --> 00:04:17,769
echrome/chromeappsamples, and
you scroll down to the Media

109
00:04:17,769 --> 00:04:19,735
Gallery folder right here,
that's the code I'm going to

110
00:04:19,735 --> 00:04:20,240
be working in.

111
00:04:20,240 --> 00:04:21,680
So if you want to follow along
with me on your own

112
00:04:21,680 --> 00:04:24,210
machine, feel free.

113
00:04:24,210 --> 00:04:26,530
Quickly, let me show you what
the app looks like.

114
00:04:26,530 --> 00:04:28,290
I'm going to jump over
here to Chrome.

115
00:04:28,290 --> 00:04:29,900
This is the Canary build,
by the way.

116
00:04:29,900 --> 00:04:32,160
And I'm just going to launch
this app right here.

117
00:04:32,160 --> 00:04:33,980
And this is the Media
Gallery Explorer.

118
00:04:33,980 --> 00:04:36,060
This is the sample that's in
that repo that I'm going to be

119
00:04:36,060 --> 00:04:36,990
talking about.

120
00:04:36,990 --> 00:04:39,320
So let me just quickly show
you how it works.

121
00:04:39,320 --> 00:04:41,780
You can see the UI, I've got
three buttons up here.

122
00:04:41,780 --> 00:04:44,100
I've got a couple different
places in the UI that show the

123
00:04:44,100 --> 00:04:45,660
various media information.

124
00:04:45,660 --> 00:04:48,820
So I'm just going to click on
the Get Galleries Info button.

125
00:04:48,820 --> 00:04:50,750
And you can see that right here
in this little div it

126
00:04:50,750 --> 00:04:52,240
says gallery count three--

127
00:04:52,240 --> 00:04:54,900
music, pictures, and movies.

128
00:04:54,900 --> 00:04:57,310
Now it didn't ask me for
permission because I've

129
00:04:57,310 --> 00:05:00,140
already run this app on my
machine before and I

130
00:05:00,140 --> 00:05:02,870
specifically granted this
application permission to go

131
00:05:02,870 --> 00:05:04,100
get those galleries.

132
00:05:04,100 --> 00:05:07,240
If I want to explicitly ask for
permission or for the user

133
00:05:07,240 --> 00:05:09,580
to choose galleries,
I can do that too.

134
00:05:09,580 --> 00:05:13,100
So the Select Galleries button
here brings up the UI that

135
00:05:13,100 --> 00:05:15,170
allows the user to specify
which galleries

136
00:05:15,170 --> 00:05:16,170
I have access to.

137
00:05:16,170 --> 00:05:18,400
So I can go ahead and turn
off movies, for example.

138
00:05:18,400 --> 00:05:20,470
Or if I want to add another
folder, I can click the Add

139
00:05:20,470 --> 00:05:25,320
button and then add other
folders to the default system

140
00:05:25,320 --> 00:05:26,400
folders for Media Galleries.

141
00:05:26,400 --> 00:05:26,550
PETE LEPAGE: Oh, cool.

142
00:05:26,550 --> 00:05:27,630
JOE MARINI: Yeah, it's
pretty neat.

143
00:05:27,630 --> 00:05:30,350
So when I click the Grant
Permissions, now you'll see

144
00:05:30,350 --> 00:05:31,300
that that div has changed.

145
00:05:31,300 --> 00:05:35,000
Now I only have access to the
music and pictures folder.

146
00:05:35,000 --> 00:05:37,420
So I'm going to go ahead and
click the Scan Galleries

147
00:05:37,420 --> 00:05:37,940
button now.

148
00:05:37,940 --> 00:05:39,900
And when I click Scan Galleries,
you see on the

149
00:05:39,900 --> 00:05:42,850
left-hand side of the screen
there in this div, I've got

150
00:05:42,850 --> 00:05:46,900
the contents my music and my
pictures folder showing up.

151
00:05:46,900 --> 00:05:49,140
And I'll just click on one
of these pictures.

152
00:05:49,140 --> 00:05:53,330
This is a photo that I took on
the rooftop of the Google San

153
00:05:53,330 --> 00:05:54,250
Francisco offices.

154
00:05:54,250 --> 00:05:56,040
You can see that here's
our roof deck.

155
00:05:56,040 --> 00:05:57,210
And it was a pretty nice day.

156
00:05:57,210 --> 00:05:57,990
And I'm just going to
scroll over, and

157
00:05:57,990 --> 00:05:59,500
there's the Bay Bridge.

158
00:05:59,500 --> 00:06:02,530
So I can go ahead and just
take a look through these

159
00:06:02,530 --> 00:06:03,790
various pictures.

160
00:06:03,790 --> 00:06:05,945
And you can see that the picture
content is being read

161
00:06:05,945 --> 00:06:08,280
in and displayed in the div
there on the right.

162
00:06:08,280 --> 00:06:09,660
I could do the same
thing with music.

163
00:06:09,660 --> 00:06:12,690
If I click on a music file,
you'll see that I get a music

164
00:06:12,690 --> 00:06:15,420
player control in the user
interface there.

165
00:06:15,420 --> 00:06:17,880
So this is the sample that
I'm going to be talking

166
00:06:17,880 --> 00:06:18,780
about in the code.

167
00:06:18,780 --> 00:06:22,210
So let's jump over
to the code.

168
00:06:22,210 --> 00:06:25,050
And I'm using Sublime Text here,
but you can use whatever

169
00:06:25,050 --> 00:06:26,750
code editor you're
happy with it.

170
00:06:26,750 --> 00:06:28,210
So let's start off by
taking a look at the

171
00:06:28,210 --> 00:06:30,100
manifest.json file.

172
00:06:30,100 --> 00:06:33,100
This is the file that determines
what permissions

173
00:06:33,100 --> 00:06:34,750
the application has and so on.

174
00:06:34,750 --> 00:06:36,230
And right here on line seven--

175
00:06:36,230 --> 00:06:37,650
this is the one you need
to pay attention to--

176
00:06:37,650 --> 00:06:42,210
I'm asking for permission to
the Media Galleries API.

177
00:06:42,210 --> 00:06:44,460
And I'm requesting read
access, and I'm also

178
00:06:44,460 --> 00:06:47,170
requesting that the system
auto-detects where the media

179
00:06:47,170 --> 00:06:48,090
galleries are.

180
00:06:48,090 --> 00:06:51,410
So when I call this, the system
will say, well, sure,

181
00:06:51,410 --> 00:06:53,430
I'll tell you where they are to
begin with and if the user

182
00:06:53,430 --> 00:06:55,520
wants to add more, they
can add more.

183
00:06:55,520 --> 00:06:55,850
PETE LEPAGE: Perfect.

184
00:06:55,850 --> 00:06:59,720
So that means, on a PC or on a
Mac, you're always going to

185
00:06:59,720 --> 00:07:01,690
get the right path.

186
00:07:01,690 --> 00:07:03,895
You don't have to worry
about, hey, where

187
00:07:03,895 --> 00:07:05,420
is this file located?

188
00:07:05,420 --> 00:07:08,590
Is it in like /users?

189
00:07:08,590 --> 00:07:09,220
JOE MARINI: Exactly.

190
00:07:09,220 --> 00:07:12,130
You don't have to memorize what
the default paths on the

191
00:07:12,130 --> 00:07:13,340
different platforms are.

192
00:07:13,340 --> 00:07:14,390
It just tells you.

193
00:07:14,390 --> 00:07:15,940
PETE LEPAGE: And if it changes,
you don't have to

194
00:07:15,940 --> 00:07:16,380
deal with it either.

195
00:07:16,380 --> 00:07:16,990
JOE MARINI: Exactly.

196
00:07:16,990 --> 00:07:19,970
If the user decides to change
the locations, again, the

197
00:07:19,970 --> 00:07:21,650
system makes that transparent.

198
00:07:21,650 --> 00:07:23,740
You don't have to worry
about any of that.

199
00:07:23,740 --> 00:07:25,440
So that's the manifest.json
file.

200
00:07:25,440 --> 00:07:28,780
Let's run over to what I call
the runtime.js file.

201
00:07:28,780 --> 00:07:31,230
This is basically the
background page.

202
00:07:31,230 --> 00:07:35,080
This controls the way the
application is launched.

203
00:07:35,080 --> 00:07:36,680
A couple of things
I'm doing here.

204
00:07:36,680 --> 00:07:39,720
First, I'm handling the
onLaunched event right here.

205
00:07:39,720 --> 00:07:41,690
I've got an addListener
for onLaunched.

206
00:07:41,690 --> 00:07:44,990
And what I'm doing is creating
the window, and then inside

207
00:07:44,990 --> 00:07:47,110
that window I'm setting a
global variable called

208
00:07:47,110 --> 00:07:49,700
mgabrestart.

209
00:07:49,700 --> 00:07:51,930
And the reason I'm doing this
is because I was playing

210
00:07:51,930 --> 00:07:54,740
around with the API for when
apps are launched as opposed

211
00:07:54,740 --> 00:07:55,870
to being restarted.

212
00:07:55,870 --> 00:07:57,770
And I wanted to see if I
could just make the app

213
00:07:57,770 --> 00:08:00,490
automatically read the gallery
as if it was restarted versus

214
00:08:00,490 --> 00:08:01,980
being just initially launched.

215
00:08:01,980 --> 00:08:04,780
So over down in the onRestarted
event, I have the

216
00:08:04,780 --> 00:08:06,720
same kind of code where I create
the window, but I set

217
00:08:06,720 --> 00:08:09,580
that variable to true to
indicate that the app was

218
00:08:09,580 --> 00:08:11,320
restarted instead of launched.

219
00:08:11,320 --> 00:08:12,350
That's all this does.

220
00:08:12,350 --> 00:08:15,070
This is typical background
page for a Chrome App.

221
00:08:15,070 --> 00:08:18,040
The HTML files, also pretty
straightforward, just got some

222
00:08:18,040 --> 00:08:19,840
buttons that control the UI.

223
00:08:19,840 --> 00:08:22,590
I've got some divs that
contain the content.

224
00:08:22,590 --> 00:08:26,640
I have the script tag right
here that includes my code

225
00:08:26,640 --> 00:08:28,790
that actually runs the
application, and that's

226
00:08:28,790 --> 00:08:30,990
media-gallery.js.

227
00:08:30,990 --> 00:08:33,809
So let's jump over to that file
because this is where the

228
00:08:33,809 --> 00:08:34,770
meat of the code is.

229
00:08:34,770 --> 00:08:36,959
And I'm going to scroll all the
way down to the bottom.

230
00:08:36,959 --> 00:08:38,690
MALE SPEAKER: Hey, Joe, if it's
possible, could you bump

231
00:08:38,690 --> 00:08:39,205
up your text?

232
00:08:39,205 --> 00:08:40,614
We've got some people on
YouTube asking you

233
00:08:40,614 --> 00:08:41,380
to bump that up.

234
00:08:41,380 --> 00:08:42,659
JOE MARINI: Oh, sure, yes.

235
00:08:42,659 --> 00:08:44,370
I will be happy to
bump the text up.

236
00:08:44,370 --> 00:08:46,300
Hang on one second.

237
00:08:46,300 --> 00:08:47,830
Let's go ahead and make
the font size.

238
00:08:47,830 --> 00:08:50,580

239
00:08:50,580 --> 00:08:51,350
There we go out.

240
00:08:51,350 --> 00:08:52,600
That should be easier to read.

241
00:08:52,600 --> 00:08:55,830

242
00:08:55,830 --> 00:08:56,810
Hopefully, that's better.

243
00:08:56,810 --> 00:08:58,930
I got a nice full screen
of code there.

244
00:08:58,930 --> 00:09:03,910
All right, so here in my
window.addEventListener for

245
00:09:03,910 --> 00:09:07,710
the loading event, I'm
setting up the UI.

246
00:09:07,710 --> 00:09:13,080
I've got some addEventListener
calls on the various buttons.

247
00:09:13,080 --> 00:09:16,540
And then down here, I'm
listening for the change event

248
00:09:16,540 --> 00:09:18,640
on that select [INAUDIBLE]

249
00:09:18,640 --> 00:09:19,860
that's on the left-hand
side there.

250
00:09:19,860 --> 00:09:20,930
So whenever the [INAUDIBLE]

251
00:09:20,930 --> 00:09:24,660
changes in the media gallery
content of the list, I have an

252
00:09:24,660 --> 00:09:26,610
event that fires, and then
I update the selection.

253
00:09:26,610 --> 00:09:29,670
And this is where I read the
picture, read the audio,

254
00:09:29,670 --> 00:09:30,460
whatever it is.

255
00:09:30,460 --> 00:09:34,510
So let's actually take a
look at how this works.

256
00:09:34,510 --> 00:09:36,930
Right up here on line
240, this is

257
00:09:36,930 --> 00:09:38,760
where the magic happens.

258
00:09:38,760 --> 00:09:42,140
You can see right here that if
the app was restarted, I call

259
00:09:42,140 --> 00:09:44,640
the getMediaFileSystems API.

260
00:09:44,640 --> 00:09:46,490
This is the restart case.

261
00:09:46,490 --> 00:09:49,330
For the launched case, I
actually wait for the Scan

262
00:09:49,330 --> 00:09:50,480
Galleries button
to be clicked.

263
00:09:50,480 --> 00:09:53,540
But it does the same thing, it
calls getMediaFileSystems.

264
00:09:53,540 --> 00:09:57,220
And it takes that little options
object right there.

265
00:09:57,220 --> 00:09:59,940
The property I'm passing in
is called interactive.

266
00:09:59,940 --> 00:10:01,510
And it says if_needed.

267
00:10:01,510 --> 00:10:04,750
Now I can pass in if_needed,
which means if the user hasn't

268
00:10:04,750 --> 00:10:07,720
already granted permission,
it will be prompted to

269
00:10:07,720 --> 00:10:09,490
the user to do so.

270
00:10:09,490 --> 00:10:11,860
However, if the user has already
granted permissions,

271
00:10:11,860 --> 00:10:13,320
that dialog doesn't show up.

272
00:10:13,320 --> 00:10:15,280
I could also pass in
yes, which will

273
00:10:15,280 --> 00:10:16,170
always show the dialog.

274
00:10:16,170 --> 00:10:19,320
Or I can pass in no, which means
don't show the dialog if

275
00:10:19,320 --> 00:10:20,660
you don't have to.

276
00:10:20,660 --> 00:10:26,360
So the getMediaFileSystems
API call takes

277
00:10:26,360 --> 00:10:27,920
that options object.

278
00:10:27,920 --> 00:10:30,000
And here is the callback
function.

279
00:10:30,000 --> 00:10:31,970
It's called getGalleriesInfo.

280
00:10:31,970 --> 00:10:33,230
So let's go ahead and
scroll up to the

281
00:10:33,230 --> 00:10:34,580
getGalleriesInfo function.

282
00:10:34,580 --> 00:10:36,470
That's right here.

283
00:10:36,470 --> 00:10:38,040
The first thing I'm going
to do is clear out

284
00:10:38,040 --> 00:10:38,990
that content div.

285
00:10:38,990 --> 00:10:40,570
That's the div on the right-hand
side that shows the

286
00:10:40,570 --> 00:10:43,560
pictures, the music,
and so on.

287
00:10:43,560 --> 00:10:46,860
And then, when this function
is called, this parameter

288
00:10:46,860 --> 00:10:49,030
right here, the results
parameter, that's going to be

289
00:10:49,030 --> 00:10:53,390
an array of HTML5 file system
objects representing the

290
00:10:53,390 --> 00:10:54,750
various media galleries.

291
00:10:54,750 --> 00:10:56,360
So the folder for pictures,
the folder for

292
00:10:56,360 --> 00:10:58,770
music, and so on.

293
00:10:58,770 --> 00:11:00,980
PETE LEPAGE: So logically, you
should get three back, and

294
00:11:00,980 --> 00:11:02,950
then I would just [? zoom ?]
within each of the folders.

295
00:11:02,950 --> 00:11:03,700
Oh, cool

296
00:11:03,700 --> 00:11:05,620
JOE MARINI: Yeah, three, two,
however many you requested,

297
00:11:05,620 --> 00:11:08,020
however many the user
granted access to.

298
00:11:08,020 --> 00:11:11,070
So I'm checking here to see if
the length of that results

299
00:11:11,070 --> 00:11:13,400
array is greater than zero,
because then I've

300
00:11:13,400 --> 00:11:14,420
got stuff to process.

301
00:11:14,420 --> 00:11:17,610
And then I'm just using this
forEach loop right here with

302
00:11:17,610 --> 00:11:23,330
this callback function to go
over each one of the gallery

303
00:11:23,330 --> 00:11:25,150
pieces of information
that comes back.

304
00:11:25,150 --> 00:11:28,080
Now the gallery information
comes back as a JSON string.

305
00:11:28,080 --> 00:11:30,090
And it gives you an ID
for the gallery and

306
00:11:30,090 --> 00:11:31,370
it gives you a name.

307
00:11:31,370 --> 00:11:34,250
The name is a human-readable
string like music, or

308
00:11:34,250 --> 00:11:37,130
pictures, or whatever it is
localized to your system.

309
00:11:37,130 --> 00:11:42,480
The ID is a tag that you can use
to uniquely identify the

310
00:11:42,480 --> 00:11:44,060
media gallery that you're
working with.

311
00:11:44,060 --> 00:11:47,260
So you can save that aside and
use it to go back and get

312
00:11:47,260 --> 00:11:49,290
files at a later date
or whatever.

313
00:11:49,290 --> 00:11:51,050
So that's what I'm using
that there for.

314
00:11:51,050 --> 00:11:54,300
So I loop over each one of these
IDs so that I know how

315
00:11:54,300 --> 00:11:55,980
many galleries I'm
dealing with.

316
00:11:55,980 --> 00:11:59,870
And I store those in this global
variable right here

317
00:11:59,870 --> 00:12:03,280
that holds all the different
pieces of arrays.

318
00:12:03,280 --> 00:12:05,520
And then that's how I get the
information about what

319
00:12:05,520 --> 00:12:07,450
galleries are on the system.

320
00:12:07,450 --> 00:12:10,950
Now the Scan Galleries button
fires off of this function

321
00:12:10,950 --> 00:12:12,630
right here called
scanGalleries.

322
00:12:12,630 --> 00:12:14,970
And again, it takes
an argument for a

323
00:12:14,970 --> 00:12:16,390
particular file system.

324
00:12:16,390 --> 00:12:20,010
So what's going to happen is
it's going to loop over each

325
00:12:20,010 --> 00:12:22,680
one of those array elements
for however many

326
00:12:22,680 --> 00:12:24,220
galleries I got back.

327
00:12:24,220 --> 00:12:26,500
And each time it's going to do
that, it's going to call this

328
00:12:26,500 --> 00:12:28,450
addGallery function.

329
00:12:28,450 --> 00:12:32,370
So I parse in the name
object for the

330
00:12:32,370 --> 00:12:33,220
particular file system.

331
00:12:33,220 --> 00:12:35,810
Again, that's an ID and
a human-readable name.

332
00:12:35,810 --> 00:12:38,230
And then I'm going to call
this addGallery function,

333
00:12:38,230 --> 00:12:41,330
which goes through each gallery
and enumerates all the

334
00:12:41,330 --> 00:12:44,430
different file objects
that are in there.

335
00:12:44,430 --> 00:12:46,900
And so what I do is I create
a new object called a

336
00:12:46,900 --> 00:12:47,730
GalleryData.

337
00:12:47,730 --> 00:12:49,020
And you can see that
in my code later.

338
00:12:49,020 --> 00:12:51,330
That's just a little JavaScript
object I have to

339
00:12:51,330 --> 00:12:55,870
keep track of the various file
names, and sizes of files, and

340
00:12:55,870 --> 00:12:57,580
different things the
app needs to do.

341
00:12:57,580 --> 00:13:00,120
And then I call the createReader
function.

342
00:13:00,120 --> 00:13:04,240
Now this is a part of the
HTML5 file system API.

343
00:13:04,240 --> 00:13:06,060
Remember, earlier, I said that
they're complimentary.

344
00:13:06,060 --> 00:13:08,160
So you get a file system object
and then you use the

345
00:13:08,160 --> 00:13:11,090
file system APIs on that
gallery object

346
00:13:11,090 --> 00:13:13,340
to do the file reading.

347
00:13:13,340 --> 00:13:14,890
So I create the reader.

348
00:13:14,890 --> 00:13:17,970
And then on the reader I
call the readEntries.

349
00:13:17,970 --> 00:13:21,430
Again, more HTML5 file system
standard stuff.

350
00:13:21,430 --> 00:13:23,550
I have a function here
called scanGallery.

351
00:13:23,550 --> 00:13:25,150
That's the callback that's going
to get called by the

352
00:13:25,150 --> 00:13:27,750
file system to read
the actual folder.

353
00:13:27,750 --> 00:13:30,000
And that's up here, so
I'll scroll up to

354
00:13:30,000 --> 00:13:32,020
the scanGallery function.

355
00:13:32,020 --> 00:13:34,950
So the scanGallery function is
going to get a whole bunch of

356
00:13:34,950 --> 00:13:36,800
file system entries.

357
00:13:36,800 --> 00:13:40,370
These are the individual file
entries for each particular

358
00:13:40,370 --> 00:13:42,440
file inside that gallery.

359
00:13:42,440 --> 00:13:46,570
So I'm going see if the length
of the entries array is zero.

360
00:13:46,570 --> 00:13:50,240
And when that happens, the
file system API is done

361
00:13:50,240 --> 00:13:51,120
calling this callback.

362
00:13:51,120 --> 00:13:53,020
It's processed all
the elements in

363
00:13:53,020 --> 00:13:54,590
that particular folder.

364
00:13:54,590 --> 00:13:57,040
And the reason that I need to do
this is because the way the

365
00:13:57,040 --> 00:13:59,670
file system works, especially
in the async version, this

366
00:13:59,670 --> 00:14:01,250
function is going to get called
over and over again,

367
00:14:01,250 --> 00:14:04,310
because it may not get called
with all of the entries in a

368
00:14:04,310 --> 00:14:06,590
particular folder the
very first time.

369
00:14:06,590 --> 00:14:08,070
The system is just going to
keep calling this function

370
00:14:08,070 --> 00:14:09,620
until there's no more
files and no more

371
00:14:09,620 --> 00:14:11,470
folders left to process.

372
00:14:11,470 --> 00:14:13,150
So if it's not equal to
zero, that means I've

373
00:14:13,150 --> 00:14:14,230
got stuff to do.

374
00:14:14,230 --> 00:14:17,320
So I'm going to have this loop
here going from zero to the

375
00:14:17,320 --> 00:14:19,500
number of entries
in the array.

376
00:14:19,500 --> 00:14:21,500
I check to see if the
entry is a file.

377
00:14:21,500 --> 00:14:25,360
And if it is a file, I have a
function here called addItem

378
00:14:25,360 --> 00:14:27,450
that's going to add the item to
that little select list on

379
00:14:27,450 --> 00:14:28,980
the left-hand side there.

380
00:14:28,980 --> 00:14:32,490
And then I've got this little
closer function right here

381
00:14:32,490 --> 00:14:34,490
that's going to get
the metadata for

382
00:14:34,490 --> 00:14:35,780
that particular file.

383
00:14:35,780 --> 00:14:37,040
In this case, all I'm
interested in

384
00:14:37,040 --> 00:14:38,940
is the size in bytes.

385
00:14:38,940 --> 00:14:40,240
And I'm not really doing
anything with it.

386
00:14:40,240 --> 00:14:41,780
I'm just showing that
it's possible to get

387
00:14:41,780 --> 00:14:43,620
information like this.

388
00:14:43,620 --> 00:14:46,590
If it's a directory, on the
other hand, and not a file,

389
00:14:46,590 --> 00:14:49,130
I'm going to push that directory
onto a stack that

390
00:14:49,130 --> 00:14:52,160
I'm using to process
subfolders.

391
00:14:52,160 --> 00:14:54,020
And then down here at the
bottom, I'm just going to call

392
00:14:54,020 --> 00:14:55,140
readEntries again.

393
00:14:55,140 --> 00:14:57,220
And so this function is going
to keep calling itself over

394
00:14:57,220 --> 00:14:59,580
and over until there's
no more files.

395
00:14:59,580 --> 00:15:03,560
Now at the end of this function,
that select list in

396
00:15:03,560 --> 00:15:06,700
the div on the left is going
to be full of all the files

397
00:15:06,700 --> 00:15:08,780
that I've processed
and read in.

398
00:15:08,780 --> 00:15:11,410
So now let's go take a look at
the function for the change

399
00:15:11,410 --> 00:15:14,390
handler and see what happens
when the user actually makes a

400
00:15:14,390 --> 00:15:15,340
selection in the list.

401
00:15:15,340 --> 00:15:17,500
So if I scroll back down here
to the bottom, remember

402
00:15:17,500 --> 00:15:20,110
there's this function here
called updateSelection.

403
00:15:20,110 --> 00:15:24,260
So let's scroll on over to
the updateSelection code.

404
00:15:24,260 --> 00:15:28,020
And that is right up here.

405
00:15:28,020 --> 00:15:33,040

406
00:15:33,040 --> 00:15:35,350
PETE LEPAGE: Joe, one thing I
noticed in this particular

407
00:15:35,350 --> 00:15:38,190
example, you didn't use
an MVC framework or

408
00:15:38,190 --> 00:15:39,130
anything like that.

409
00:15:39,130 --> 00:15:43,495
Is there a reason why in this
sample you didn't do that?

410
00:15:43,495 --> 00:15:45,130
JOE MARINI: Just
hacking around.

411
00:15:45,130 --> 00:15:48,040
So I wanted to make a sample
where the code for the Media

412
00:15:48,040 --> 00:15:50,100
Galleries API was the focus.

413
00:15:50,100 --> 00:15:52,800
And everybody's got their
personal preferences.

414
00:15:52,800 --> 00:15:54,990
People bond with their
MVC frameworks.

415
00:15:54,990 --> 00:15:56,690
PETE LEPAGE: It's true,
Angular rocks.

416
00:15:56,690 --> 00:15:58,540
JOE MARINI: Absolutely, so
please go use Angular.

417
00:15:58,540 --> 00:16:02,340
But whatever MVC framework you
feel like using, that's fine.

418
00:16:02,340 --> 00:16:04,150
I just didn't want that to
be getting in the way.

419
00:16:04,150 --> 00:16:07,670
So here in the updateSelection
code, I'm going over the

420
00:16:07,670 --> 00:16:10,930
length of the gallery array
to get the system that the

421
00:16:10,930 --> 00:16:12,180
selected file belongs to.

422
00:16:12,180 --> 00:16:14,530
Remember, I stored aside the ID,
and now I'm going to take

423
00:16:14,530 --> 00:16:16,860
that file and figure out which
gallery it's a part of.

424
00:16:16,860 --> 00:16:19,150
It might be in music, it
might be in pictures,

425
00:16:19,150 --> 00:16:20,430
it might be in movies.

426
00:16:20,430 --> 00:16:23,450
And what I'm going to do is,
based on the kind of file that

427
00:16:23,450 --> 00:16:28,760
it is, whether it's a picture,
or music, or whatever, I'm

428
00:16:28,760 --> 00:16:31,240
going to add that content
to the div.

429
00:16:31,240 --> 00:16:35,240
The way that I'm doing that is
up here I've got these arrays

430
00:16:35,240 --> 00:16:37,340
with the various
file suffixes.

431
00:16:37,340 --> 00:16:41,170
So I've got image formats like
PNG, and BMP and JPEGs.

432
00:16:41,170 --> 00:16:46,140
For video, I've got MOV, and
MPEG, and WEBM and so on.

433
00:16:46,140 --> 00:16:48,840
So that way, I could figure
out what kind of file is.

434
00:16:48,840 --> 00:16:52,070
So back down here, let's go back
down to the code where I

435
00:16:52,070 --> 00:16:54,230
handle the selection.

436
00:16:54,230 --> 00:16:56,630
I'm using these HTML5
data attributes.

437
00:16:56,630 --> 00:17:00,070
Each time an item is added to
the select list, I store the

438
00:17:00,070 --> 00:17:03,610
path to the item as
a data attribute.

439
00:17:03,610 --> 00:17:06,200
So that way I can just
easily get it again.

440
00:17:06,200 --> 00:17:09,660
So that way, when I get the full
path to the item, again,

441
00:17:09,660 --> 00:17:12,240
using the HTML5 file
system API right

442
00:17:12,240 --> 00:17:14,530
here to get the file.

443
00:17:14,530 --> 00:17:17,670
And when that function callback
gets called, I have a

444
00:17:17,670 --> 00:17:18,750
file entry.

445
00:17:18,750 --> 00:17:22,260
And all I do is clear out the
content div to clear out

446
00:17:22,260 --> 00:17:23,819
whatever was in there before.

447
00:17:23,819 --> 00:17:26,710
And then I have these various
functions, addImage, addAudio,

448
00:17:26,710 --> 00:17:28,000
addVideo, and so on.

449
00:17:28,000 --> 00:17:30,250
Let's just take a look at the
addImage case because the rest

450
00:17:30,250 --> 00:17:32,020
of them are just pretty
much carbon copies.

451
00:17:32,020 --> 00:17:39,010
So for adding a picture item,
this function right here,

452
00:17:39,010 --> 00:17:42,520
addImageToContentDiv,
all it does is it

453
00:17:42,520 --> 00:17:45,990
creates an image element.

454
00:17:45,990 --> 00:17:49,400
It appends the image element
into the content div, and then

455
00:17:49,400 --> 00:17:53,410
returns that image element back
to the calling function,

456
00:17:53,410 --> 00:17:55,670
so back down here.

457
00:17:55,670 --> 00:17:59,440
And assuming the new element was
created, I have a function

458
00:17:59,440 --> 00:18:03,180
here that uses the HTML5
file system to just

459
00:18:03,180 --> 00:18:04,590
read the raw bytes.

460
00:18:04,590 --> 00:18:07,140
So I created a new File
Reader object.

461
00:18:07,140 --> 00:18:09,250
I set up onerror handler.

462
00:18:09,250 --> 00:18:12,750
I set up an onloadend handler
function right here.

463
00:18:12,750 --> 00:18:15,950
So when the data is finished
reading, I simply set the

464
00:18:15,950 --> 00:18:19,790
source of the image element
to the result of

465
00:18:19,790 --> 00:18:21,670
the file read operation.

466
00:18:21,670 --> 00:18:24,760
So this is going to come
back as a data URL.

467
00:18:24,760 --> 00:18:26,950
Right here on the next line,
on 130, I'm calling

468
00:18:26,950 --> 00:18:29,100
reader.readAsDataURL.

469
00:18:29,100 --> 00:18:31,920
So if it's an image, it will get
read in as an image data

470
00:18:31,920 --> 00:18:35,100
URL versus music, versus
video, and so on.

471
00:18:35,100 --> 00:18:39,840
And then I just simply append
that content into the source

472
00:18:39,840 --> 00:18:44,060
attribute for, say, the image,
or the movie, or the video.

473
00:18:44,060 --> 00:18:45,670
So that's basically all
there is to it.

474
00:18:45,670 --> 00:18:48,550
I'm using the HTML5 file system
to read the raw bytes.

475
00:18:48,550 --> 00:18:52,620
And I'm just relying on the
Media Gallery API to give me

476
00:18:52,620 --> 00:18:56,730
access to the HTML5 file systems
that represent the

477
00:18:56,730 --> 00:18:59,600
media galleries.

478
00:18:59,600 --> 00:19:00,250
PETE LEPAGE: Cool.

479
00:19:00,250 --> 00:19:02,300
JOE MARINI: Pretty
straightforward, yeah.

480
00:19:02,300 --> 00:19:03,950
Code is online.

481
00:19:03,950 --> 00:19:06,480
This sample is in
our GitHub repo.

482
00:19:06,480 --> 00:19:10,560
I encourage you to fork it, and
play with it, test it out.

483
00:19:10,560 --> 00:19:12,360
And that's pretty much
all there is to it.

484
00:19:12,360 --> 00:19:15,200
So if there's questions, we
can start taking those.

485
00:19:15,200 --> 00:19:16,650
PETE LEPAGE: Just one question
that I wanted to

486
00:19:16,650 --> 00:19:17,910
shoot off the bat.

487
00:19:17,910 --> 00:19:20,390
Is it read-write or is it just
read-only right now?

488
00:19:20,390 --> 00:19:21,900
JOE MARINI: So that's
a good question.

489
00:19:21,900 --> 00:19:25,890
So the intention is when the API
is complete, you'll have

490
00:19:25,890 --> 00:19:29,140
access to read-only, read-write,
and you'll also be

491
00:19:29,140 --> 00:19:33,170
able to add new file content to
the user's media galleries.

492
00:19:33,170 --> 00:19:38,920
So as the API stands today, we
only support read-only access.

493
00:19:38,920 --> 00:19:41,100
So write is coming, add files
is coming, they're

494
00:19:41,100 --> 00:19:42,540
just not there yet.

495
00:19:42,540 --> 00:19:44,950
PETE LEPAGE: OK, and I noticed
as I was looking through the

496
00:19:44,950 --> 00:19:47,280
documentation preparing for this
that some of these things

497
00:19:47,280 --> 00:19:50,140
are still under the experimental
and some are no

498
00:19:50,140 --> 00:19:51,370
longer under experimental.

499
00:19:51,370 --> 00:19:53,630
Do you want to talk to talk
just really quickly about

500
00:19:53,630 --> 00:19:57,140
what's still under experimental,
what's not?

501
00:19:57,140 --> 00:20:01,070
JOE MARINI: If I remember
correctly, the actual code for

502
00:20:01,070 --> 00:20:03,060
getting the media galleries,
let me bring

503
00:20:03,060 --> 00:20:04,520
up that page again.

504
00:20:04,520 --> 00:20:08,350
The Media Galleries API itself
was recently moved out from

505
00:20:08,350 --> 00:20:09,140
experimental.

506
00:20:09,140 --> 00:20:10,380
PETE LEPAGE: Yeah, so that's
what it looked like.

507
00:20:10,380 --> 00:20:10,670
JOE MARINI: Yeah.

508
00:20:10,670 --> 00:20:14,790
So you no longer need to put
the experimental keyword in

509
00:20:14,790 --> 00:20:16,610
front of it.

510
00:20:16,610 --> 00:20:17,860
It's ready to go.

511
00:20:17,860 --> 00:20:21,000
PETE LEPAGE: OK, awesome.

512
00:20:21,000 --> 00:20:22,480
Let me bring up some of
the questions that

513
00:20:22,480 --> 00:20:24,910
we've got over here.

514
00:20:24,910 --> 00:20:26,360
So [? DJazz ?]

515
00:20:26,360 --> 00:20:29,420
from Sweden wants to know if he
can access the local file

516
00:20:29,420 --> 00:20:33,900
system using standard open, and
save, save as dialogs with

517
00:20:33,900 --> 00:20:35,260
a permissions flag.

518
00:20:35,260 --> 00:20:36,690
And I think this is
not necessarily

519
00:20:36,690 --> 00:20:38,390
specifically with--

520
00:20:38,390 --> 00:20:41,070
JOE MARINI: Yeah, this is not
a Media Galleries specific

521
00:20:41,070 --> 00:20:43,240
question, but the
answer is yes.

522
00:20:43,240 --> 00:20:48,590
If you're using the HTML5 file
system, you are able to invoke

523
00:20:48,590 --> 00:20:50,360
an open or save dialog.

524
00:20:50,360 --> 00:20:54,600
In fact, outside of the local
application sandbox, that's

525
00:20:54,600 --> 00:20:57,000
the only way to get file
content onto the

526
00:20:57,000 --> 00:20:58,630
user system, so yes.

527
00:20:58,630 --> 00:21:00,430
But the answer is
yes, you can.

528
00:21:00,430 --> 00:21:02,750
That was a rather long-winded
way of saying, yes.

529
00:21:02,750 --> 00:21:04,280
PETE LEPAGE: Excellent.

530
00:21:04,280 --> 00:21:10,340
And then the second question
that we had, let me just

531
00:21:10,340 --> 00:21:11,590
reread it here.

532
00:21:11,590 --> 00:21:14,270

533
00:21:14,270 --> 00:21:15,700
Sorry.

534
00:21:15,700 --> 00:21:18,200
Web Intents, I'm going to
skip that question and

535
00:21:18,200 --> 00:21:18,710
go to the next one.

536
00:21:18,710 --> 00:21:21,540
JOE MARINI: Oh, I think the
web's intents are good.

537
00:21:21,540 --> 00:21:22,990
PETE LEPAGE: Ba boom chang.

538
00:21:22,990 --> 00:21:26,060
Paul, that one was for you.

539
00:21:26,060 --> 00:21:26,880
All right.

540
00:21:26,880 --> 00:21:29,210
And actually, it looks like
that's all the questions that

541
00:21:29,210 --> 00:21:29,810
we have today.

542
00:21:29,810 --> 00:21:32,360
So nice easy session.

543
00:21:32,360 --> 00:21:34,280
I want to thank everybody
for joining us.

544
00:21:34,280 --> 00:21:35,820
We'll be back next week.

545
00:21:35,820 --> 00:21:37,740
Renato and I are going
to be joining you.

546
00:21:37,740 --> 00:21:39,800
So Renato's going
to be joining, I

547
00:21:39,800 --> 00:21:44,340
guess, me from Sao Paulo.

548
00:21:44,340 --> 00:21:49,310
And we're going to be talking,
I believe, about the Web View

549
00:21:49,310 --> 00:21:55,390
API, so being able to actually
embed, effectively, a web view

550
00:21:55,390 --> 00:21:58,390
within your Chrome
Application.

551
00:21:58,390 --> 00:22:01,410
So that's going to give you a
lot more flexibility to be

552
00:22:01,410 --> 00:22:04,500
able to do some things that you
weren't really easily able

553
00:22:04,500 --> 00:22:09,700
to do before or to be able to
add stuff to your page.

554
00:22:09,700 --> 00:22:11,570
With that, I want to thank
everybody for joining

555
00:22:11,570 --> 00:22:12,710
us again this week.

556
00:22:12,710 --> 00:22:14,120
It was a really great session.

557
00:22:14,120 --> 00:22:15,000
Thanks to Joe.

558
00:22:15,000 --> 00:22:18,430
Thanks to Peter and Louis in
Mountain View for helping make

559
00:22:18,430 --> 00:22:19,340
this happen.

560
00:22:19,340 --> 00:22:20,990
With that, we'll see
you guys next week.

561
00:22:20,990 --> 00:22:21,760
Thanks very much.

562
00:22:21,760 --> 00:22:22,630
JOE MARINI: Thanks, everybody.

563
00:22:22,630 --> 00:22:23,330
Hit me up on G+.

564
00:22:23,330 --> 00:22:24,960
I'm Joe Marini on G+.

565
00:22:24,960 --> 00:22:25,230
PETE LEPAGE: Awesome.

566
00:22:25,230 --> 00:22:26,480
Thanks, Joe.

567
00:22:26,480 --> 00:22:40,800

568
00:22:40,800 --> 00:23:00,467

