1
00:00:02,860 --> 00:00:08,080
>>Joe Marini: All right. Let's get started.
Hi, everyone. Good afternoon. Thanks for coming.

2
00:00:08,080 --> 00:00:15,079
My name is Joe Marini. This is Upgrading to
a Chrome Packaged App. I'm a developer advocate

3
00:00:15,079 --> 00:00:20,450
here on the Google Chrome team. You can see
I've used my considerable clout within Google

4
00:00:20,450 --> 00:00:25,490
to get the highly-sought-after end-of-the-day
slot, but thanks, all, for coming.

5
00:00:25,490 --> 00:00:27,450
[ Laughter ]
>>Joe Marini: So before I get started, let

6
00:00:27,450 --> 00:00:33,730
me do the obligatory survey. How many people
have heard of Chrome packaged apps before?

7
00:00:33,730 --> 00:00:36,670
[ Show of hands ]
>>Joe Marini: Wow! That's amazing. Everybody.

8
00:00:36,670 --> 00:00:39,610
Wow. Okay. All right. Thanks very much. Good
night.

9
00:00:39,610 --> 00:00:45,160
All right. Can you guys here me okay? Volume
all right? One of the great things about being

10
00:00:45,160 --> 00:00:47,660
a New Yorker, no one ever says, "Hey, Joe,
can you speak up?"

11
00:00:47,660 --> 00:00:52,940
All right. So here's what we're going to talk
about today. I'm going to talk about why would

12
00:00:52,940 --> 00:00:56,559
you want to build a packaged app, what are
packaged apps all about.

13
00:00:56,559 --> 00:01:01,130
How many people saw Eric Ky's session yesterday
on the state of the nation?

14
00:01:01,130 --> 00:01:05,920
Okay. Not everybody but some of you. All right.
So in that case, I'll go over some interesting

15
00:01:05,920 --> 00:01:10,850
demos as well. So I'll talk about the structure
of a packaged app, why you'd want to do this,

16
00:01:10,850 --> 00:01:16,610
but most importantly, what I want to cover
in this session is the issues that you're

17
00:01:16,610 --> 00:01:23,130
probably going to face when you take an existing
Webapp and go to make a packaged app out of

18
00:01:23,130 --> 00:01:26,409
it.
So let's go ahead and get started.

19
00:01:26,409 --> 00:01:30,150
And by "get started," I mean, let's take a
look at some cool demos.

20
00:01:30,150 --> 00:01:37,150
So if you -- now that you guys have Pixels,
if you set it to be on the dev channel, you

21
00:01:37,220 --> 00:01:40,530
can go to the Chrome Web Store. How many people
have gone to the Chrome Web Store in the past

22
00:01:40,530 --> 00:01:41,970
to get stuff?
[ Show of hands ]

23
00:01:41,970 --> 00:01:46,100
>>Joe Marini: Okay. We lost a few. All right.
There's this thing called the Chrome Web Store,

24
00:01:46,100 --> 00:01:50,740
and in your Pixel, when you go to the AppLauncher,
there's an icon there. It says "Chrome Web

25
00:01:50,740 --> 00:01:55,350
St" and that means store. They just couldn't
fit it all on one line. But you go to that

26
00:01:55,350 --> 00:01:58,479
little shopping bag icon and you'll go to
the Chrome Web Store. And if you do this in

27
00:01:58,479 --> 00:02:04,299
dev channel, you'll see the new UI where we
have some of the newer packaged apps that

28
00:02:04,299 --> 00:02:07,299
our partners have been working on to get into
the store.

29
00:02:07,299 --> 00:02:12,360
So we haven't put these live to everybody
yet. Right now it's only in dev channel on

30
00:02:12,360 --> 00:02:17,920
Windows and Chrome OS, but you can actually
see what they'll look like.

31
00:02:17,920 --> 00:02:20,360
So let me just start off by showing you a
couple of these apps.

32
00:02:20,360 --> 00:02:27,020
This is The Economist, from FT labs, so The
Economist is a great example of an app that

33
00:02:27,020 --> 00:02:32,640
is a content consumption app for -- for both
online and offline.

34
00:02:32,640 --> 00:02:37,590
So obviously the content has to come from
somewhere, so when I'm on line, I can go get

35
00:02:37,590 --> 00:02:43,900
the content, but you notice that here in the
UI, it says "Available to read off line."

36
00:02:43,900 --> 00:02:48,270
So what has happened is, this app, because
it's a packaged app -- and you can tell that.

37
00:02:48,270 --> 00:02:52,310
There's no URL bar -- right? -- there's no
back/forward buttons -- right? -- why would

38
00:02:52,310 --> 00:02:56,959
you want that in an app? It has cached its
data locally.

39
00:02:56,959 --> 00:03:01,190
So, you know, I can go and read stuff off
line, if I make the UI a little bit bigger.

40
00:03:01,190 --> 00:03:08,190
You can also see that it's -- it's responsive
and the nice thing about this is because we

41
00:03:09,160 --> 00:03:15,580
have a rich windowing API, when I close the
app and reopen it, it will remember its windows

42
00:03:15,580 --> 00:03:17,410
position, right?
So these are some of the things -- I'll talk

43
00:03:17,410 --> 00:03:21,599
about this throughout this session, but these
are the kinds of things that you'll need to

44
00:03:21,599 --> 00:03:26,870
remember when you're building a packaged app,
because when you're an app, you now have control

45
00:03:26,870 --> 00:03:30,989
over the window. The browser no longer says,
"Here's how big you are," right? You can control

46
00:03:30,989 --> 00:03:36,459
how big your window is.
All right. Let's take a look at another example.

47
00:03:36,459 --> 00:03:40,590
This is 500 Pixels. How many people have heard
of 500 Pixels?

48
00:03:40,590 --> 00:03:47,590
Right. Oh, good. A good many of you.
So 500 Pixels is a -- is a professional photography

49
00:03:47,920 --> 00:03:52,580
discovery application, right?
So professional photographers use this app

50
00:03:52,580 --> 00:03:56,750
to get their photos out there, and you can
see -- now I'm on my Pixel, right? So I'm

51
00:03:56,750 --> 00:04:01,030
using my finger to scroll through this. You
can see nice touch responsiveness.

52
00:04:01,030 --> 00:04:06,370
Again, works just fine off line. If I kill
the network connection, fire this app back

53
00:04:06,370 --> 00:04:11,069
up, it has cached the data locally and I can
look at whatever photos I had downloaded prior

54
00:04:11,069 --> 00:04:17,340
to losing the connection.
Okay. Let me show one other example.

55
00:04:17,340 --> 00:04:20,139
And to -- oops. To do that, let me just jump
out really quick.

56
00:04:20,139 --> 00:04:26,749
Now, while this is starting up, this is a
game called So Many Me. One of the questions

57
00:04:26,749 --> 00:04:31,729
I get from developers all the time is, you
know, "I've got this existing code that I've

58
00:04:31,729 --> 00:04:36,300
built using, say, Native Client or Unity."
In this case, this game actually was built

59
00:04:36,300 --> 00:04:43,219
-- you can see right here it was built with
Unity. So this is an example of a loud application

60
00:04:43,219 --> 00:04:47,559
that was built using Native Client and Unity,
and it's a game. It's actually a pretty great

61
00:04:47,559 --> 00:04:51,539
game, so I'll just go ahead and start it.
You can see that it's got some nice animations.

62
00:04:51,539 --> 00:04:56,949
Let me go ahead and skip through this part
because I've already done that. But you see

63
00:04:56,949 --> 00:05:02,699
it's, you know, nice smooth game play, right?
You can see the little animated trees in the

64
00:05:02,699 --> 00:05:06,819
background. We've got some blurring effects
going on there.

65
00:05:06,819 --> 00:05:12,539
So again, you can also see here at the top,
when I mouse over the window, that it has

66
00:05:12,539 --> 00:05:17,889
this title bar that comes and goes, right?
So again, another clue that it's -- it's an

67
00:05:17,889 --> 00:05:22,930
app, it's not a browser-based thing.
But to be clear, all the stuff that you're

68
00:05:22,930 --> 00:05:28,869
seeing was built, with the exception of the
game, in HTML5, right?

69
00:05:28,869 --> 00:05:35,869
HTML5, JavaScript, CSS, all of these are built
using native web technologies. They just happen

70
00:05:36,089 --> 00:05:40,669
to be packaged up as applications, and because
they're packaged up using Chrome packaged

71
00:05:40,669 --> 00:05:46,089
apps, they run on four runtimes just right
out of the box. Right? Mac, Windows, Linux,

72
00:05:46,089 --> 00:05:51,180
Chrome OS. And the plan, the vision that we
have for this platform is that these apps

73
00:05:51,180 --> 00:05:56,089
will run wherever Chrome runs.
So in the future, that means Android and iOS,

74
00:05:56,089 --> 00:06:01,050
and we're working with Adobe on the Cordoba
project to make that happen, okay? So that's

75
00:06:01,050 --> 00:06:06,360
six runtimes.
All right. Let's talk a little bit about why

76
00:06:06,360 --> 00:06:11,439
you'd want to do this. So why take a Webapp,
why build a packaged app out of it?

77
00:06:11,439 --> 00:06:17,050
So Webapps are great, right? I come to praise
Webapp, not to bury him, right? We all love

78
00:06:17,050 --> 00:06:21,379
Webapps. They're all really useful. Webapps,
you know, they're great, right? Until they're

79
00:06:21,379 --> 00:06:24,689
not.
There comes a point in time when Webapps are

80
00:06:24,689 --> 00:06:28,689
decidedly not very great, right? We've all
seen -- we've all seen this, right?

81
00:06:28,689 --> 00:06:33,770
So there's a -- there's off line cases. There's
-- there's times when Webapps just simply

82
00:06:33,770 --> 00:06:38,499
don't work very well.
Games, right? Games on the web are awesome,

83
00:06:38,499 --> 00:06:44,909
right? Full keyboard, mouse input. Games just
rock! Until they don't!

84
00:06:44,909 --> 00:06:47,669
Right?
There's times when, you know, you're be building

85
00:06:47,669 --> 00:06:52,740
a game and you want to be able to give your
game players the same kind of experience that

86
00:06:52,740 --> 00:06:56,729
they would get if they were using a real gaming
machine, right?

87
00:06:56,729 --> 00:07:01,029
So access to the USB, access to Bluetooth.
You can't really do that on the open web.

88
00:07:01,029 --> 00:07:06,899
At least not today.
So packaged apps solve a collection of problems

89
00:07:06,899 --> 00:07:12,050
that we've come to notice over the years at
Google and also elsewhere in the industry,

90
00:07:12,050 --> 00:07:19,050
so first, packaged apps run off line by default.
Okay? By virtue of packaging up all your assets

91
00:07:19,439 --> 00:07:23,259
and storing them locally on the machine, you
just get offline access.

92
00:07:23,259 --> 00:07:28,770
Now, that has some implications for app design
that I'll talk about in a little bit.

93
00:07:28,770 --> 00:07:33,939
Packaged apps also give you access to the
platform's capabilities and the platform's

94
00:07:33,939 --> 00:07:36,719
hardware.
So for example, being able to store files

95
00:07:36,719 --> 00:07:40,999
in the filesystem, access the USB and Bluetooth,
right?

96
00:07:40,999 --> 00:07:46,830
In the case of Chrome, because these are built
on our platform, things like synchronizing

97
00:07:46,830 --> 00:07:50,749
data. You know how in Chrome you set your
bookmarks and then you sync them and you go

98
00:07:50,749 --> 00:07:55,589
to some other computer and all your bookmarks
are there, right? As a packaged app developer,

99
00:07:55,589 --> 00:08:01,039
you can also do that. You can take advantage
of the synchronization architecture that we

100
00:08:01,039 --> 00:08:07,119
do.
Packaged apps give you a much richer, immersive

101
00:08:07,119 --> 00:08:12,959
user experience. Right? I mean, you saw examples
of this, right? There are just some applications

102
00:08:12,959 --> 00:08:17,830
where they don't benefit from back buttons
and URL bars. They just get in the way, right?

103
00:08:17,830 --> 00:08:22,229
What does a back button mean in a game like
So Many Me, right? So why not just package

104
00:08:22,229 --> 00:08:29,219
that up as a true app where the user is immersed
in my experience?

105
00:08:29,219 --> 00:08:34,610
And finally, distribution. So distribution
and updates take place via the Chrome Web

106
00:08:34,610 --> 00:08:36,729
Store.
So when you package your app up, you put it

107
00:08:36,729 --> 00:08:42,129
in the Chrome Web Store and now you make an
edit to it and now you want those updates

108
00:08:42,129 --> 00:08:46,300
pushed out to people.
It takes advantage of the same update mechanism

109
00:08:46,300 --> 00:08:50,339
that we use.
So every so often, we ping the server, say,

110
00:08:50,339 --> 00:08:55,120
"Hey, is there a new version of the app?"
If there is, it gets downloaded. You as a

111
00:08:55,120 --> 00:09:00,370
developer don't have to worry about that.
You publish your updates, people get them.

112
00:09:00,370 --> 00:09:07,370
All right. So now that I've talked a little
bit about what packaged apps are and why you

113
00:09:08,040 --> 00:09:13,500
might want to do them, let's start talking
about what it takes to go from a Webapp to

114
00:09:13,500 --> 00:09:19,319
a packaged app. So the structure of a packaged
app is actually pretty simple. In an existing

115
00:09:19,319 --> 00:09:26,060
Webapp, you have all your content, right?
You have your HTML, your JavaScript, your

116
00:09:26,060 --> 00:09:31,690
CSS, and that's what you deliver from your
server. And in the world of Chrome packaged

117
00:09:31,690 --> 00:09:36,600
apps, you continue to use that same structure.
You build your HTML, your JavaScript, all

118
00:09:36,600 --> 00:09:41,490
the assets that you would normally use to
build any other kind of app. All we do is

119
00:09:41,490 --> 00:09:47,910
put some infrastructure around that.
Okay? So we add a -- a manifest file that

120
00:09:47,910 --> 00:09:53,629
explains to the Chrome platform what the app
is, what its name is, what version, what it

121
00:09:53,629 --> 00:10:00,519
can do like permission-wise, so on.
There's a background page and a main JavaScript

122
00:10:00,519 --> 00:10:05,680
file where you specify things like start-up
events, right? You listen for the app being

123
00:10:05,680 --> 00:10:11,329
launched and create your UI. And in fact,
that background HTML page is actually optional.

124
00:10:11,329 --> 00:10:15,449
If all you do is have your logic in the JavaScript
file, we'll just generate that for you.

125
00:10:15,449 --> 00:10:19,339
So really only two things you have to do on
top of your existing app.

126
00:10:19,339 --> 00:10:25,089
So let me just take a quick -- this is a -- this
is, after all, a developer conference. Let's

127
00:10:25,089 --> 00:10:32,089
take a look at some code and --
All right. So let me switch over to my editor.

128
00:10:32,149 --> 00:10:38,949
All right. So here's an example. Can you guys
read the code okay? Yeah? All right. So here's

129
00:10:38,949 --> 00:10:45,680
an example of a typical manifest file, right?
It's just a set of json, and it explains things

130
00:10:45,680 --> 00:10:49,839
like, you know, what the version of your app
is, you know, what its name is, things like

131
00:10:49,839 --> 00:10:53,670
that. So this gets packaged up as part of
the packaging process to go to the Chrome

132
00:10:53,670 --> 00:10:59,759
Web Store and the other part of it is this
file right here.

133
00:10:59,759 --> 00:11:04,350
Now, this -- the code that I'm showing you
is for -- on our -- on our Github, we have

134
00:11:04,350 --> 00:11:08,839
that windowing API example. You'll notice
that it's all just standard JavaScript. The

135
00:11:08,839 --> 00:11:14,439
only thing that we're doing differently is
that we have these Chrome APIs that let you

136
00:11:14,439 --> 00:11:20,230
get richer access to the platform capabilities.
And the philosophy that we've adopted is whenever

137
00:11:20,230 --> 00:11:24,170
the open web provides a capability, then we
just use it.

138
00:11:24,170 --> 00:11:29,389
Right? So file systems and so on.
If it doesn't and there's a need for something,

139
00:11:29,389 --> 00:11:34,689
then we'll fill that in with a Chrome API.
But again, the -- the driving vision is, we'd

140
00:11:34,689 --> 00:11:38,339
like to standardize as much of this as we
possibly can.

141
00:11:38,339 --> 00:11:45,339
So -- all right. Let's go back to the...
Okay. So let's take a look at some of those

142
00:11:45,629 --> 00:11:50,860
issues I brought up earlier, right? So offline
by default.

143
00:11:50,860 --> 00:11:55,479
So again, just to reiterate, everything in
your app, all of the resources, the UI -- right?

144
00:11:55,479 --> 00:11:59,699
-- your graphic assets, everything, that's
all local. Right? That all gets installed

145
00:11:59,699 --> 00:12:03,889
when you install the app. When you install
the app, just like a user would install any

146
00:12:03,889 --> 00:12:06,519
other app, that's -- your experience is I'm
just getting an app.

147
00:12:06,519 --> 00:12:12,980
Now, this has some implications, right? So
first, you have to think about what the disconnected

148
00:12:12,980 --> 00:12:18,790
experience is going to be, including first
run. I might download your app -- right? -- run

149
00:12:18,790 --> 00:12:24,240
to the airport, get on a plane. I've got no
connection. What's my first run experience?

150
00:12:24,240 --> 00:12:30,790
So you need to think about what kinds of features
do you need to make available when you're

151
00:12:30,790 --> 00:12:36,579
off line, right? So not every feature may
make sense off line. And in fact, you know,

152
00:12:36,579 --> 00:12:41,660
if you think about some of the most cloud-connected
applications that are out there, so like imagine,

153
00:12:41,660 --> 00:12:45,529
I don't know, a videoconferencing app like
Hangouts or something, right? Now, obviously

154
00:12:45,529 --> 00:12:50,069
that doesn't work if you have no connection,
so you need to be able to be on line for that.

155
00:12:50,069 --> 00:12:54,589
But there's no reason why, when I'm off line,
I couldn't do things like look at my contact

156
00:12:54,589 --> 00:12:57,829
lists -- right? -- and see a call history
and so on, right?

157
00:12:57,829 --> 00:13:02,509
So even in the case of the most connected
apps, there's -- there's usually scenarios

158
00:13:02,509 --> 00:13:06,740
where things, you know, can and should work
off line.

159
00:13:06,740 --> 00:13:13,740
You need to consider the case of handling
stale data -- right? -- and synchronization.

160
00:13:14,009 --> 00:13:18,529
So the user is working in your app, they're
off line, then they go on line. Now what happens,

161
00:13:18,529 --> 00:13:23,060
right? That's a -- that's an issue.
And again, restore data locally. Now, there

162
00:13:23,060 --> 00:13:27,439
are certain parts of the web platform that
we don't support for very good reason. So

163
00:13:27,439 --> 00:13:31,910
for example, we don't support window.local
storage. Anyone want to know why? Or take

164
00:13:31,910 --> 00:13:34,220
a guess?
>> (Speaker is off microphone.)

165
00:13:34,220 --> 00:13:41,220
>>Joe Marini: It's synchronous, yes. Right.
So synchronous APIs block the UX thread. So

166
00:13:41,730 --> 00:13:46,689
in cases where APIs are synchronous or are
going to cause problems like that, we provide

167
00:13:46,689 --> 00:13:52,720
asynchronous counterparts for them instead.
So in this particular case, you would use

168
00:13:52,720 --> 00:13:57,680
one of the Chrome APIs instead of local storage.
So this means you have to plan for a great

169
00:13:57,680 --> 00:14:03,309
offline experience, right? Factor the app,
figure out what you need to keep off line,

170
00:14:03,309 --> 00:14:08,540
do the things that you would normally do,
keep your JS separate from your HTML, right?

171
00:14:08,540 --> 00:14:12,829
Figure out what you want to make available
off line. You can use web standard events

172
00:14:12,829 --> 00:14:18,389
like the online property and online/offline
events to figure out when you are available,

173
00:14:18,389 --> 00:14:24,649
when you're connected to the web. Store data
with things like Chrome storage local -- in

174
00:14:24,649 --> 00:14:31,050
this case, it's an asynchronous API -- you
can use the HTML5 filesystem to do that. And

175
00:14:31,050 --> 00:14:35,889
in your manifest file, set the offline enabled
flag. That way in the Chrome Web Store, users

176
00:14:35,889 --> 00:14:41,529
can see, "Oh, this works off line," a little
treatment that we give it in the store.

177
00:14:41,529 --> 00:14:46,850
So here's an example of how you would store
data using the Chrome storage API, right?

178
00:14:46,850 --> 00:14:51,339
So let's suppose I've got some value in a
form and I want to save that. Instead of using

179
00:14:51,339 --> 00:14:56,279
local storage, I would say Chrome storage
local and then set, and then that takes a

180
00:14:56,279 --> 00:15:01,480
whole set of key value pairs and I have a
function that gets called when the data has

181
00:15:01,480 --> 00:15:04,389
been stored. Right?
So we've solved the synchronous problem in

182
00:15:04,389 --> 00:15:10,620
that case.
Okay. In addition to offline by default, there's

183
00:15:10,620 --> 00:15:16,730
its counterpart, which is what we call cloud
by default. So today, users increasingly expect

184
00:15:16,730 --> 00:15:22,839
that their data is going to just be everywhere
that they are, and when you build packaged

185
00:15:22,839 --> 00:15:26,160
apps -- right? -- users are going -- they're
going to have the expectation of your app.

186
00:15:26,160 --> 00:15:29,899
They're going to think to themselves, "Well,
you know, I want my data to be where I am."

187
00:15:29,899 --> 00:15:35,029
And again, we provide ways to do that, but
this has implications, right? So they're going

188
00:15:35,029 --> 00:15:39,139
to expect things to sync. Your app is going
to have to figure out how to handle things

189
00:15:39,139 --> 00:15:44,749
like conflicts. And you need to remember that
your app might be used across multiple OSes

190
00:15:44,749 --> 00:15:50,050
and form factors.
So we have a bunch of cloud features in the

191
00:15:50,050 --> 00:15:54,939
platform that you can use to take care of
some of these things, so a few minutes ago

192
00:15:54,939 --> 00:16:00,069
I talked about Chrome storage local. There's
also Chrome storage sync. Chrome storage sync

193
00:16:00,069 --> 00:16:06,059
is pretty much the online synchronization
part of storing data. So this is how, you

194
00:16:06,059 --> 00:16:10,379
know, in our case we synchronize bookmarks.
If you want to synchronize things like preference

195
00:16:10,379 --> 00:16:16,139
settings or usernames or whatever other small
pieces of data, you would use this API to

196
00:16:16,139 --> 00:16:19,680
do that.
We also provide a synchronized filesystem

197
00:16:19,680 --> 00:16:25,100
API to synchronize larger pieces of data.
So for example, if you have, you know, large

198
00:16:25,100 --> 00:16:28,769
files like, you know, megabytes of data that
you want to sync, this is how you would do

199
00:16:28,769 --> 00:16:31,899
that instead.
Now, today, the way that's architected is

200
00:16:31,899 --> 00:16:36,869
it uses Google Drive, but it's open. So in
the future, you know, we might support other

201
00:16:36,869 --> 00:16:41,379
back-end storage, but out of the box, it's
Google Drive.

202
00:16:41,379 --> 00:16:46,959
We also recently announced the Google cloud
messaging architecture, right? The push messaging?

203
00:16:46,959 --> 00:16:53,809
So your server can send push messages down
to your app, and because the -- the Chrome

204
00:16:53,809 --> 00:16:58,189
packaged app system is local and running on
the machine, your app doesn't have to be awake

205
00:16:58,189 --> 00:17:03,470
in order to receive them, right? The runtime
will get the message and the fact that you've

206
00:17:03,470 --> 00:17:09,179
registered a listener for a push message,
your app will be woken up and told, "Hey,

207
00:17:09,179 --> 00:17:14,039
you know, something has happened and I'm sorry
it's 3:00 a.m. but somebody did something."

208
00:17:14,039 --> 00:17:18,270
We also have an identity API. One of the biggest
problems or most confusing things that people

209
00:17:18,270 --> 00:17:24,110
have run into is identity management and authentication.
And so we've built an identity layer into

210
00:17:24,110 --> 00:17:27,839
the Chrome packaged app system to help handle
this.

211
00:17:27,839 --> 00:17:32,960
So we have an API specifically for Google
services, so when a user is signed into Google

212
00:17:32,960 --> 00:17:37,850
-- and on Chromebooks, they always are -- they
never see a login dialogue, right? All they

213
00:17:37,850 --> 00:17:43,940
-- if you call the -- the Google version of
that API, you'll just get the user's identity

214
00:17:43,940 --> 00:17:49,039
and you're off and running. And we have another
one for third-party services. And in the case

215
00:17:49,039 --> 00:17:53,039
of third parties -- right? -- there's a whole
dance that goes on, right? They get redirected

216
00:17:53,039 --> 00:17:58,039
to the app, they sign in, you know, there's
a redirect URL that goes back.

217
00:17:58,039 --> 00:18:03,340
So obviously it doesn't work in apps. So we
built an API that does the same kind of thing,

218
00:18:03,340 --> 00:18:09,330
right? You take the redirect URL, you get
the token, and you're good to go.

219
00:18:09,330 --> 00:18:14,779
So for example, the synchronized filesystem
-- right? -- you can control what the conflict

220
00:18:14,779 --> 00:18:20,179
resolution policy is. You can say, "Hey, the
last write is the one that wins" or it can

221
00:18:20,179 --> 00:18:27,179
be manual, right? You can simply manage conflicts
yourself. And all you do is request the filesystem,

222
00:18:27,309 --> 00:18:31,350
which is the same kind of API that you would
use in the open web, right? You'd get a -- you'd

223
00:18:31,350 --> 00:18:38,159
get a filesystem, a HTML5 filesystem back,
and off you go. You just simply write your

224
00:18:38,159 --> 00:18:39,980
files.
So for the identity case, what I was talking

225
00:18:39,980 --> 00:18:45,659
before about the two different APIs, that's
them right there. So get auth token is the

226
00:18:45,659 --> 00:18:52,370
Google version, and the other one there, launch
web auth flow, is the one for third parties.

227
00:18:52,370 --> 00:18:59,149
Again, so we just -- now, today, those APIs
as of right now are in experimental, so they're

228
00:18:59,149 --> 00:19:04,080
available in the Canary build and such in
the dev channel. You can't currently ship

229
00:19:04,080 --> 00:19:09,059
an application in the Chrome Web Store that
uses experimental APIs but we expect these

230
00:19:09,059 --> 00:19:12,679
to be hitting the stable channel relatively
soon.

231
00:19:12,679 --> 00:19:19,679
All right. Let's talk a little bit about user
experience.

232
00:19:20,890 --> 00:19:27,890
So because these apps live outside the browser
and they can have richer experiences -- right?

233
00:19:28,960 --> 00:19:33,250
-- richer user interfaces, there are some
things that go along with that.

234
00:19:33,250 --> 00:19:37,520
So first, your app is responsible for things
that it wasn't responsible for before when

235
00:19:37,520 --> 00:19:43,770
it was back in the browser. Users have different
expectations of how an app is going to behave

236
00:19:43,770 --> 00:19:48,679
versus a Web site, right? They just interact
with them differently. So the expectations

237
00:19:48,679 --> 00:19:52,940
are slightly different.
So how do you do this? You build a great user

238
00:19:52,940 --> 00:19:58,570
interface. Number one, we give you a rich
windowing API to manage your app's windows.

239
00:19:58,570 --> 00:20:03,669
You can create windows. You can size them.
There are all kinds of events available to

240
00:20:03,669 --> 00:20:07,649
figure out when they've been changed, when
they've been moved, when they've been resized

241
00:20:07,649 --> 00:20:11,470
and so on.
You can do things like use the screen size

242
00:20:11,470 --> 00:20:16,690
to figure out what the initial size of your
window should be. So when the app launches,

243
00:20:16,690 --> 00:20:21,140
you can say, "Hey, how big is my screen,"
do some calculations, center your window,

244
00:20:21,140 --> 00:20:28,140
make it as big as you want.
You should remember where the window is, right?

245
00:20:28,179 --> 00:20:32,779
When the user closes the app and then they
come back to it again later, they are not

246
00:20:32,779 --> 00:20:36,909
going to be happy with the fact that you have
recalculated everything. The reason why they

247
00:20:36,909 --> 00:20:41,409
set the window the way they wanted is because
that's how they want their window, right?

248
00:20:41,409 --> 00:20:46,590
We've all done this. We get sublime text just
the way we want it, right? And then we expect

249
00:20:46,590 --> 00:20:50,950
it to be there.
So in a browser, obviously, you can't do that.

250
00:20:50,950 --> 00:20:54,890
And users don't expect that. They expect the
browser to remember how big it was. Your app

251
00:20:54,890 --> 00:20:59,440
is now responsible for things like that. You
can do things like decide whether you want

252
00:20:59,440 --> 00:21:04,029
the operating system title bar. In the apps
I showed earlier in the demos, they didn't

253
00:21:04,029 --> 00:21:10,179
have the native -- the native title bars,
right? They decided to show -- to hide them.

254
00:21:10,179 --> 00:21:15,200
So you can choose whether you want the title
bar or not. If you don't want it, you still

255
00:21:15,200 --> 00:21:19,720
have to let the user drag your app around.
That's just a basic capability. So we support

256
00:21:19,720 --> 00:21:26,049
the Webkit app region CSS property. All you
do is set that on the element that you want

257
00:21:26,049 --> 00:21:33,049
to act as whatever the title bar is or the
drag region. And we also give you methods

258
00:21:33,230 --> 00:21:38,980
inside the windowing API to do things like
handle maximize, handle minimize, right, figure

259
00:21:38,980 --> 00:21:41,570
out when you open and close, that kind of
stuff.

260
00:21:41,570 --> 00:21:46,480
So we also give you a way to do context menus.
Again, this is an expectation that people

261
00:21:46,480 --> 00:21:51,130
have of apps, right? I control click or I
right click, whatever it is, I expect the

262
00:21:51,130 --> 00:21:58,130
context menu to come up. You can do that in
your apps. We give you that ability.

263
00:22:00,390 --> 00:22:05,580
So I talked also a little bit about access
to the platform and hardware. And so you are

264
00:22:05,580 --> 00:22:10,659
able to get access to the platform via a bunch
of different ways: Files, USB, Bluetooth.

265
00:22:10,659 --> 00:22:17,659
We have APIs for all of that. Sockets, you
can open raw sockets in your packaged app.

266
00:22:18,390 --> 00:22:23,870
So if you want to write the next great IRC
client, you can now do that.

267
00:22:23,870 --> 00:22:29,769
This, of course, has implications. Any time
you give the user access to things like the

268
00:22:29,769 --> 00:22:34,740
hardware, right, security and privacy become
even more important now, right? Now it is

269
00:22:34,740 --> 00:22:39,669
not just cookies anymore. Now it is like,
oh, I can discover devices around me and I

270
00:22:39,669 --> 00:22:46,669
can get files and I can open up raw just data
sockets and start exchanging data with, you

271
00:22:46,830 --> 00:22:52,030
know, anybody I want.
So it's important to remember that these issues

272
00:22:52,030 --> 00:22:56,010
-- you know, they become paramount when you
have these kinds of capabilities.

273
00:22:56,010 --> 00:23:03,010
I believe the wise prophet Spiderman's uncle
once said, "With great power comes great responsibility."

274
00:23:05,269 --> 00:23:12,029
Right? So remember that. So, be clear to the
user about when you're using platform resources.

275
00:23:12,029 --> 00:23:16,700
Now, in some cases you have no choice, right?
The camera comes on. The little light goes

276
00:23:16,700 --> 00:23:23,360
on, right? I'm on air. So in that case, the
platform takes care of it for you. But you

277
00:23:23,360 --> 00:23:26,690
should be clear. Like, you should say, Hey,
here's how much data storage you have used

278
00:23:26,690 --> 00:23:31,130
out of this many bytes. Hey, I'm currently
communicating over connection with this other

279
00:23:31,130 --> 00:23:36,000
computer.
Hey, I'm using the USB to do this game pad.

280
00:23:36,000 --> 00:23:40,590
Or, hey, Bluetooth is currently enabled. Just
give the user some indication of what's going

281
00:23:40,590 --> 00:23:44,429
on.
And, remember, that in many cases these are

282
00:23:44,429 --> 00:23:50,399
shared resources. So, again, this is an example
of where your app is responsible for something

283
00:23:50,399 --> 00:23:55,630
that in the past it wasn't. You need to remember
to release things when you are finished using

284
00:23:55,630 --> 00:24:01,649
them.
All right. Let's talk a little bit about application

285
00:24:01,649 --> 00:24:08,630
security. So how many people are familiar
with the content security policy or have heard

286
00:24:08,630 --> 00:24:14,519
of it? All right. Not many people, okay?
So the content security policy is implemented

287
00:24:14,519 --> 00:24:18,559
inside of Chrome packaged apps. And I will
show you a URL where you can learn more about

288
00:24:18,559 --> 00:24:24,899
this. Basically, it sets up a whole set of
rules for what apps can and can't do. And

289
00:24:24,899 --> 00:24:30,880
we have a lot of rules that are intended to
make applications a lot more trustworthy.

290
00:24:30,880 --> 00:24:36,350
We want these Chrome packaged apps to be thought
of by users as really powerful but at the

291
00:24:36,350 --> 00:24:41,789
same time safe, like, Web pages are today,
right? People feel safe. They go to their

292
00:24:41,789 --> 00:24:45,990
browsers. They click on links, right? They
feel like they can do that without having

293
00:24:45,990 --> 00:24:50,669
to worry about their machine blowing up, whatever.
We want packaged apps to have that same kind

294
00:24:50,669 --> 00:24:55,389
of trust that users have come to give Web
pages. So the first thing we do is we don't

295
00:24:55,389 --> 00:25:00,010
let you do things like eval, right? So don't
be eval.

296
00:25:00,010 --> 00:25:06,730
We don't let you do things like use new function
calls. All your JavaScript code has to be

297
00:25:06,730 --> 00:25:12,539
in separate JS files, okay? You can't -- you
can't do things like inline event handlers

298
00:25:12,539 --> 00:25:17,399
and script blocks inside your HTML. That just
doesn't work.

299
00:25:17,399 --> 00:25:22,820
You can't embed iframes, right? We have a
Web view tag for that, and I will talk about

300
00:25:22,820 --> 00:25:29,340
that in a little bit. But iframes are verboten.
You need to declare where your content is

301
00:25:29,340 --> 00:25:33,919
coming from if it is not coming from your
local app. A great example of this is using

302
00:25:33,919 --> 00:25:40,490
Google Analytics. How many people use Analytics
in their apps? A bunch of you. Yeah. So that

303
00:25:40,490 --> 00:25:44,919
-- by default, the content security policy
will say, oh, you are trying to make a request

304
00:25:44,919 --> 00:25:51,250
to a domain that's not part of your local
app here and so by default that won't work.

305
00:25:51,250 --> 00:25:55,760
So what you need to do is edit the content
security policy for your application to say

306
00:25:55,760 --> 00:26:01,330
I'm allowed to go and get data from this domain.
And the experience that the user will get

307
00:26:01,330 --> 00:26:06,600
when they install the app from the Chrome
Web store will be, Hey, here's what this app

308
00:26:06,600 --> 00:26:11,070
can do, right? It can access data on this
domain, and it can write files, and it can

309
00:26:11,070 --> 00:26:16,929
do these other things. So that's -- it is
a hint to the user of what's going on.

310
00:26:16,929 --> 00:26:22,250
So, again, just to reiterate the point. So
typically when you write a Web page, you'll

311
00:26:22,250 --> 00:26:27,559
see code that looks like this, right? I have
got my script block, my function. I have an

312
00:26:27,559 --> 00:26:32,149
event, says onload, do that. None of this
is going to work, okay? This is just simply

313
00:26:32,149 --> 00:26:35,389
not going to work.
So what you need to do instead is put the

314
00:26:35,389 --> 00:26:40,470
code in an external file and then do things
like get element by ID and whatever else and

315
00:26:40,470 --> 00:26:46,389
add event handlers on the fly, right? That's
a much better way of doing it.

316
00:26:46,389 --> 00:26:50,820
So to embed Web content, this is, of course,
one of the first questions that comes up:

317
00:26:50,820 --> 00:26:54,289
Well, then how do I do things like put stuff
in a frame?

318
00:26:54,289 --> 00:26:59,559
We have actually built a Web view tag to do
this. So if you want to embed content in your

319
00:26:59,559 --> 00:27:02,470
application, you can use the Web view tag.
And the Web view tag gives you the ability

320
00:27:02,470 --> 00:27:07,559
to do things like point at external URLs.
And it gives you an event like, Hey, I have

321
00:27:07,559 --> 00:27:12,200
finished loading the content. So that's how
we solve that problem.

322
00:27:12,200 --> 00:27:17,580
For accessing remote resources, the only thing
-- the only types of data that you are allowed

323
00:27:17,580 --> 00:27:23,019
to refer to that are not local to the machine
in your apps are video and audio. So images

324
00:27:23,019 --> 00:27:27,929
have to be local, right? You can't say image
tag and then path to some image on the Internet.

325
00:27:27,929 --> 00:27:33,370
If we go back to the example of The Economist,
how are they doing that? Or 500 Pixels, how

326
00:27:33,370 --> 00:27:38,480
are they doing that?
What they do is you use XHR to fetch the resources

327
00:27:38,480 --> 00:27:44,259
from the remote location, store them in the
local filesystem Sandbox that you have. And

328
00:27:44,259 --> 00:27:49,250
that's without permission, by the way. Your
app has a local Sandbox for files that you

329
00:27:49,250 --> 00:27:53,179
can just access till your heart's content,
okay?

330
00:27:53,179 --> 00:27:58,809
So then once you have got that, you can refer
to them, like, blob or data URLs. And, in

331
00:27:58,809 --> 00:28:05,809
fact, this scenario comes up so frequently
that we built a remote access loader library

332
00:28:05,960 --> 00:28:10,710
that will handle this for you. You simply
-- you include the JavaScript code. You use

333
00:28:10,710 --> 00:28:15,409
the API and you're good to go.
So then, of course, the question comes up:

334
00:28:15,409 --> 00:28:20,539
Well, what about templating libraries? Don't
they use eval? Don't they use new function?

335
00:28:20,539 --> 00:28:25,470
And the answer is yes. So what do you do?
Well, you can use libraries that precompile

336
00:28:25,470 --> 00:28:31,340
their templates, right? So handlebars, for
example, you can precompile your templates.

337
00:28:31,340 --> 00:28:38,230
Other libraries do the same thing. So do that.
The one escape hatch that you do have from

338
00:28:38,230 --> 00:28:42,000
pretty much everything I have said for the
last five minutes, other than the doors over

339
00:28:42,000 --> 00:28:46,940
there on the side of the room, the one escape
hatch that you have is that you can say, "I

340
00:28:46,940 --> 00:28:53,230
want to run this particular page of my application
in what's called a Sandbox." So back in your

341
00:28:53,230 --> 00:28:57,259
manifest file, you can say you know what?
I want to be able to use eval. I want to be

342
00:28:57,259 --> 00:29:02,130
able to use new function. I want to be able
to use some weird template library that does

343
00:29:02,130 --> 00:29:06,610
all the things you are not supposed to do.
You can declare that that page lives inside

344
00:29:06,610 --> 00:29:11,120
of a Sandbox, and that page is then part of
your application but it is kept separate.

345
00:29:11,120 --> 00:29:17,590
You know, process-wise, it is kept separate.
And then you can just use post-message to

346
00:29:17,590 --> 00:29:23,850
communicate between that page and the rest
of your app. Right? That's how we solve that

347
00:29:23,850 --> 00:29:29,470
particular issue.
All right. So I have got about ten minutes

348
00:29:29,470 --> 00:29:35,149
left. I'm going to try to leave some time
for questions. But let me sum up. So, remember,

349
00:29:35,149 --> 00:29:40,080
offline, by default, right, figure out what
it is you want to make available. Keep all

350
00:29:40,080 --> 00:29:44,600
your stuff local, right? Identify what it
is you want to make -- you want the user to

351
00:29:44,600 --> 00:29:49,809
be able to do.
Cloud by default, we have a great set of APIs

352
00:29:49,809 --> 00:29:55,880
for working with cloud-connected apps. The
sync filesystem, the sync architecture, the

353
00:29:55,880 --> 00:30:01,509
user experience, right? Your app controls
all of that. Your app controls whether it

354
00:30:01,509 --> 00:30:06,440
wants to look native or look like something
people haven't seen before, how its windows

355
00:30:06,440 --> 00:30:10,779
behave, and so on.
Platform access, you can now have a real API

356
00:30:10,779 --> 00:30:17,539
for USB, for Bluetooth, all that great stuff.
Security, remember content security policy,

357
00:30:17,539 --> 00:30:23,090
it defines how your app behaves.
Keep all your code separate and use Sandbox

358
00:30:23,090 --> 00:30:30,090
pages for things that are not safe.
Let me just jump over back to my Mac for a

359
00:30:32,519 --> 00:30:39,519
second, which has helpfully gone to sleep.
Okay. So let's go back to the code and let

360
00:30:42,019 --> 00:30:49,019
me go back -- actually, let me show you on
our site, developer.chrome.com/apps, this

361
00:30:50,669 --> 00:30:55,440
is where we have all the documentation for
how to build these. So if you have any questions

362
00:30:55,440 --> 00:31:01,289
about how the APIs work, you know, we have
all that documented here. We've also got a

363
00:31:01,289 --> 00:31:06,539
full list of the things that are native to
the Web platform that we don't support for

364
00:31:06,539 --> 00:31:10,690
one reason or another.
So, for example, plug-ins, right, Flash, et

365
00:31:10,690 --> 00:31:16,850
cetera, no, no plug-ins supported, no local
storage, right? We don't do things like annoying

366
00:31:16,850 --> 00:31:20,590
alert and confirm dialogues. So all of that
is gone.

367
00:31:20,590 --> 00:31:24,789
Yeah, some of these decisions we made for
security reasons. Some of these decisions

368
00:31:24,789 --> 00:31:30,549
we made because, well, aesthetic reasons.
The other thing I want to show you guys really

369
00:31:30,549 --> 00:31:37,549
quick -- oh, yeah, I'm running Canary, by
the way. So that's bound to happen more than

370
00:31:39,289 --> 00:31:44,429
once.
So these are the Chrome JavaScript APIs. So

371
00:31:44,429 --> 00:31:51,429
where the open Web has you covered, that's
great. For places where the open Web APIs

372
00:31:52,809 --> 00:31:58,409
have not yet caught up or just don't make
sense yet to have an open Web API, this is

373
00:31:58,409 --> 00:32:04,029
where we come in and we give you the Chrome
platform APIs. So this is where we provide

374
00:32:04,029 --> 00:32:08,429
capabilities like the windowing and supporting
things like the DevTools.

375
00:32:08,429 --> 00:32:12,759
And, remember, because these are Chrome packaged
apps, because they're running on the Chrome

376
00:32:12,759 --> 00:32:17,629
platform, you get all the goodness of Chrome.
How many people use the Chrome DevTools? All

377
00:32:17,629 --> 00:32:23,110
right. Did you guys go to the DevTools unleashed
session that was just -- yeah. All of that

378
00:32:23,110 --> 00:32:27,360
awesome goodness that you get in the Chrome
DevTools work here, too.

379
00:32:27,360 --> 00:32:30,789
So while you're developing your app, you can
bring up the DevTools, debug till your heart's

380
00:32:30,789 --> 00:32:34,720
delight, use all the great stuff that we give
you in the DevTools. All the great stuff that

381
00:32:34,720 --> 00:32:39,970
comes in the Chrome platform you get because
you're in the Chrome packaged app.

382
00:32:39,970 --> 00:32:46,649
So let me just take a quick visit over to
the Chrome Web store.

383
00:32:46,649 --> 00:32:51,379
So this is the Chrome Web store as it will
look for you when you go there in the DevChannel.

384
00:32:51,379 --> 00:32:54,039
Now this is on Chrome OS.
Actually, I should probably switch over to

385
00:32:54,039 --> 00:32:58,230
it. Sorry.
This is how it will look. You can see that

386
00:32:58,230 --> 00:33:05,230
the existing hosted apps have been rebranded
as Web sites, and the real packaged apps are

387
00:33:05,480 --> 00:33:10,179
now in the apps category. It actually has
an apps category now. It never had one before.

388
00:33:10,179 --> 00:33:14,309
And this is where apps will be available to
the user. The experience that the user will

389
00:33:14,309 --> 00:33:19,000
get is that when they go to install an app,
right, if they don't have Chrome installed,

390
00:33:19,000 --> 00:33:22,860
we'll take care of putting the runtime on
the machine for them. As far as they're concerned,

391
00:33:22,860 --> 00:33:29,860
it is a runtime. The app will show up in the
launcher like it does for any other app. And

392
00:33:30,990 --> 00:33:36,460
that's the experience that they will get.
Has anyone used inline installation for extensions

393
00:33:36,460 --> 00:33:41,960
before? No? Okay. A few people, yeah.
So one of the features we provide in the Chrome

394
00:33:41,960 --> 00:33:46,179
Web store is a feature called inline installation.
So just the same way that I can go to the

395
00:33:46,179 --> 00:33:51,929
store as a user and get an application, you
as a developer can put a link on your Web

396
00:33:51,929 --> 00:33:57,269
site that will trigger the installation process
inside Chrome. And then from that point out,

397
00:33:57,269 --> 00:34:01,000
the user gets the same experience that they
would have gotten had they gone to the Chrome

398
00:34:01,000 --> 00:34:04,389
Web store.
For example, if I choose to install an app,

399
00:34:04,389 --> 00:34:06,419
I will get a little dialogue that says, Hey,
you really want to install this thing? This

400
00:34:06,419 --> 00:34:10,550
is how many stars it has. You can do the same
thing so the user never has to leave your

401
00:34:10,550 --> 00:34:16,440
site. It works today for extensions and the
hosted apps, and we are going to support that

402
00:34:16,440 --> 00:34:19,850
for packaged apps as well. It is a really
great distribution mechanism because it provides

403
00:34:19,850 --> 00:34:25,810
a nice continuity of flow, right, for users
coming to your site.

404
00:34:25,810 --> 00:34:32,810
Okay. One last thing I want to show you guys
before I take questions. That is something

405
00:34:33,400 --> 00:34:40,400
that we've been working on. It's -- how many
people have opened up their Pixels and said,

406
00:34:41,440 --> 00:34:48,440
"Now, how would I code on this thing?"
Yes, almost everybody. Now, today we don't

407
00:34:49,100 --> 00:34:55,180
have a full-on local IDE. We're working on
it. The DevTools can do some code editing.

408
00:34:55,180 --> 00:35:00,310
There is some great online editors, Cloud
9, Nitrous, all those guys. We thought we

409
00:35:00,310 --> 00:35:07,030
might try our hand at providing an experience
of what code editing might look like.

410
00:35:07,030 --> 00:35:11,850
Now I want to be clear. I'm not about to announce
any great product or anything. So you can

411
00:35:11,850 --> 00:35:16,920
put your phones away. I'm not going to...
What I am going to show you, though, is we

412
00:35:16,920 --> 00:35:22,200
as the team sat down and said, What kinds
of things would an IDE need to do? And then

413
00:35:22,200 --> 00:35:26,700
let's see if we can do that. And this will
teach us what kinds of capabilities we need

414
00:35:26,700 --> 00:35:32,010
to give the platform.
And so down here I've got an application called

415
00:35:32,010 --> 00:35:36,370
code editor. And it is called that because
the developer who has built it has had a ton

416
00:35:36,370 --> 00:35:37,640
of marketing training.
[ Laughter ]

417
00:35:37,640 --> 00:35:41,120
>>Joe Marini: That's what it does.
[ Laughter ]

418
00:35:41,120 --> 00:35:47,540
>>Joe Marini: So... all right. So this is
it. This is the code editor project. This

419
00:35:47,540 --> 00:35:51,110
is on github. And I will show you the repo
in a second.

420
00:35:51,110 --> 00:35:56,580
The idea here basically is that -- you can
see it has kind of got the Googlish UI. So

421
00:35:56,580 --> 00:36:03,420
when I create a project, right, I can create
a new project and I can call it, I don't know,

422
00:36:03,420 --> 00:36:10,420
Joe's demo. And so I will create that.
And so when I do that, it fills out the skeleton

423
00:36:10,790 --> 00:36:13,690
for me of the packaged app, right? So you
can see here -- I mean, I know the font is

424
00:36:13,690 --> 00:36:17,410
kind of small. I'm sorry.
This is the manifest file that you're looking

425
00:36:17,410 --> 00:36:24,410
at right here. Here is the main startup JavaScript
file. You can see here it is creating a window,

426
00:36:25,780 --> 00:36:29,800
right? You can see here it is following the
practice I said before, you know, figure out

427
00:36:29,800 --> 00:36:34,830
the screen height and so on.
I've got things like -- what do you call it

428
00:36:34,830 --> 00:36:41,170
-- code hinting. If I say Chrome dot and then
control space, right? And so pretty cool.

429
00:36:41,170 --> 00:36:44,780
I have got this nice little tabbed interface.
I can switch between my files.

430
00:36:44,780 --> 00:36:50,090
I can also just run this app. I should probably
get rid of the error first, right?

431
00:36:50,090 --> 00:36:56,770
Here's the HTML file. Here's a graphic that
I am including in my app. You can see when

432
00:36:56,770 --> 00:37:02,140
I look at the graphic in the tool, it just
shows you the image. So if I run this, it

433
00:37:02,140 --> 00:37:08,010
will package it up on the fly, build it and
then run it so I can do this edit, refresh,

434
00:37:08,010 --> 00:37:13,030
run cycle. You can see it says "hello world."
I will close that. I will go back into the

435
00:37:13,030 --> 00:37:20,000
HTML and I will change that to say, you know,
"Hello I/O." Don't need to save. We will just

436
00:37:20,000 --> 00:37:25,060
run it again.
Okay. That works. And so at some point, I'm

437
00:37:25,060 --> 00:37:27,850
going to be done with my app and then I'm
going to want to put it in the Chrome Web

438
00:37:27,850 --> 00:37:34,850
store. What do I do? I click export and it
will export this whole project as a zip file

439
00:37:35,240 --> 00:37:39,360
which then just goes right to the Chrome Web
store. This is something we are playing around

440
00:37:39,360 --> 00:37:46,360
with.
The Google Chrome github repo is right here.

441
00:37:47,350 --> 00:37:52,100
So if you want to help us out with any of
this stuff, submit ideas, give us feedback,

442
00:37:52,100 --> 00:37:56,600
please do so. You can see here that we have
the Chrome app samples. So all of the APIs

443
00:37:56,600 --> 00:38:03,100
that I showed you before have corresponding
samples in the Chrome app samples repo here

444
00:38:03,100 --> 00:38:10,100
on github.
And that one -- the aptly named code editor

445
00:38:10,320 --> 00:38:17,320
app is right here. Let's go back. Okay. So,
anyway... looks like I got two minutes left.

446
00:38:18,430 --> 00:38:23,890
So if you have any questions, feel free to
come to the mic and ask them. Otherwise, I

447
00:38:23,890 --> 00:38:28,100
will be up at the Chrome for questions bar
hanging out there. I will be here all day

448
00:38:28,100 --> 00:38:33,210
tomorrow as well. So if you have questions,
please feel free to come ask. And that's it.

449
00:38:33,210 --> 00:38:36,550
Thank you, guys.
[ Applause ]

450
00:38:36,550 --> 00:38:42,430
>>Joe Marini: Oh, we have a line. Great.
>>> Can I use Angular JS to build?

451
00:38:42,430 --> 00:38:45,040
>>Joe Marini: You can use Angular, yes.
>>> Cool.

452
00:38:45,040 --> 00:38:49,010
[ Laughter ]
>>Joe Marini: Oh, yeah, how embarrassing would

453
00:38:49,010 --> 00:38:54,160
that have been? Oh, there is this called CSP
and the Angular guys...

454
00:38:54,160 --> 00:38:57,570
>>> Early on you joked that this wasn't the
death of Web apps but when you showed the

455
00:38:57,570 --> 00:39:03,300
new Chrome Web store, it looks like it kind
of is because in order to be under the apps

456
00:39:03,300 --> 00:39:07,820
category, you have to be an installed app
and the rest of us will be relegated to be

457
00:39:07,820 --> 00:39:11,300
called a Web site.
>>Joe Marini: Yeah, we had to choose branding.

458
00:39:11,300 --> 00:39:14,800
So we couldn't call -- see, the problem is
things like the word "hosted app" doesn't

459
00:39:14,800 --> 00:39:19,180
mean anything to anybody. So we had to figure
out what do we call these -- these new things

460
00:39:19,180 --> 00:39:26,100
are apps. What do we call the old stuff? Before
you rush the stage and just pummel me, just

461
00:39:26,100 --> 00:39:28,400
understand I did not make that decision.
[ Laughter ]

462
00:39:28,400 --> 00:39:34,270
>>Joe Marini: But, yeah, so -- the future
is that, yes, what was called hosted apps

463
00:39:34,270 --> 00:39:39,580
before will now live in the Web sites section.
But they're still promoted. They're still

464
00:39:39,580 --> 00:39:41,490
there.
>>> Does that reflect a direction that Google

465
00:39:41,490 --> 00:39:45,650
is heading, though? Will all of the Google
Apps end up being packaged apps only?

466
00:39:45,650 --> 00:39:50,700
>>Joe Marini: No, we still support hosted
apps. They're still supported. We needed to

467
00:39:50,700 --> 00:39:53,670
make a clear distinction, and that's the way
we went. Yeah.

468
00:39:53,670 --> 00:39:59,670
>>> Do you have any plans to do anything with,
like, the top task bar where you can, like,

469
00:39:59,670 --> 00:40:03,110
put an icon up there? Because sometimes it
is more convenient instead of running it down,

470
00:40:03,110 --> 00:40:05,780
like on the OS?
>>Joe Marini: So, yeah, and similarly like

471
00:40:05,780 --> 00:40:08,090
a system tray icon and things like that.
>>> Yeah.

472
00:40:08,090 --> 00:40:12,030
>>Joe Marini: So, yes, we have looked at these.
Right now we are driving toward a stable 1.0

473
00:40:12,030 --> 00:40:16,200
release. So we want to get the platform right.
Once we have done that, we will start looking

474
00:40:16,200 --> 00:40:20,330
at things like polish and other things we
can do with systems.

475
00:40:20,330 --> 00:40:23,130
>>> Cool.
>>Joe Marini: Yeah.

476
00:40:23,130 --> 00:40:27,940
>>> Thanks.
>>> Can a Chrome packaged app use any of the

477
00:40:27,940 --> 00:40:33,180
Chrome extension APIs?
>>Joe Marini: No. They can't use Chrome extension

478
00:40:33,180 --> 00:40:37,890
APIs. What we have tried to do is in the case
where an extension API made sense in the apps

479
00:40:37,890 --> 00:40:42,630
namespace, we decided to just make it available.
We made an apps version of it.

480
00:40:42,630 --> 00:40:47,890
But, again, for security reasons and other
reasons, we can't use extension APIs.

481
00:40:47,890 --> 00:40:52,150
>>> Okay, thank you.
>>Joe Marini: All right. Other questions?

482
00:40:52,150 --> 00:40:56,680
>>> For an app that's internal to our company,
is there a way to do deployment through an

483
00:40:56,680 --> 00:41:00,460
internal Web store?
>>Joe Marini: Yeah, there is. So we have the

484
00:41:00,460 --> 00:41:05,380
notion of an internal Web store. So, for example,
if you have a Google App account, you can

485
00:41:05,380 --> 00:41:10,680
do automatic provisioning, yeah. So you can
do stuff like that, yeah.

486
00:41:10,680 --> 00:41:17,000
>>> You mentioned API supported Socket. What's
the name of the -- I could not find it.

487
00:41:17,000 --> 00:41:21,380
>>Joe Marini: So it might be in the trunk
version of the docs. It's right here. It is

488
00:41:21,380 --> 00:41:24,220
the Socket docs right here, chrome.socket.
>>> Chrome.socket?

489
00:41:24,220 --> 00:41:30,300
>>Joe Marini: Right here. No, right there.
Hang on. Sorry. Right there. Yeah.

490
00:41:30,300 --> 00:41:36,370
>>> Okay. It is not on the regular API.
>>Joe Marini: If you go to -- it is down in

491
00:41:36,370 --> 00:41:39,580
the list. It is actually in the stable docs.
If you scroll down the list, it should be

492
00:41:39,580 --> 00:41:41,250
listed there, yeah. Yeah.
Yes?

493
00:41:41,250 --> 00:41:45,570
>>> So if I want to download that IDE and
run it on the Pixel, do I have to download

494
00:41:45,570 --> 00:41:48,480
as a zip file from github?
>>Joe Marini: Yeah, you can. When you download

495
00:41:48,480 --> 00:41:53,590
a zip file onto the Pixel -- first of all,
don't do this. The reason is because right

496
00:41:53,590 --> 00:41:59,660
now it requires the Canary to run.
We expect that that will change -- as the

497
00:41:59,660 --> 00:42:03,500
API that we're using makes it into the DevChannel
that will happen. So once that happens, the

498
00:42:03,500 --> 00:42:08,390
download it as a zip file onto your Pixel.
The way -- the incredibly intuitive way that

499
00:42:08,390 --> 00:42:13,550
you unpack zip fills in your Pixel is you
go into the zip file, you select all the files,

500
00:42:13,550 --> 00:42:17,940
you do a control-c, you go back to the filesystem
and do a control-paste and that will unpack

501
00:42:17,940 --> 00:42:21,490
the zip file.
I saved you about five minutes of Googling.

502
00:42:21,490 --> 00:42:23,660
Trust me.
[ Laughter ]

503
00:42:23,660 --> 00:42:27,520
>>> Okay, thanks.
>>> Is there a way to package the Chrome apps

504
00:42:27,520 --> 00:42:31,910
with the Chrome browser installer for OS which
are not Chrome OS, Chromebook?

505
00:42:31,910 --> 00:42:34,470
>>Joe Marini: I'm sorry. Is there a way to
packaged app?

506
00:42:34,470 --> 00:42:39,480
>>> Let's say I created a Chrome app. Now
I want to distribute it not only on Chrome

507
00:42:39,480 --> 00:42:41,580
OS but also --
>>Joe Marini: So it runs --

508
00:42:41,580 --> 00:42:47,330
>>> It runs on the Chrome browser.
>>Joe Marini: No, it runs -- no, you are not

509
00:42:47,330 --> 00:42:50,730
in the browser anymore. No, this is -- what
we have done is taken the Chrome runtime,

510
00:42:50,730 --> 00:42:54,190
factored it out from the browser. So now this
is any other runtime like Java or dot net

511
00:42:54,190 --> 00:42:57,250
or whatever.
You build your app and as far as the user

512
00:42:57,250 --> 00:43:01,110
is concerned, they are just running an app
on a runtime. So they don't know that they're

513
00:43:01,110 --> 00:43:03,610
using Chrome.
>>> I'm getting an executable?

514
00:43:03,610 --> 00:43:07,990
>>Joe Marini: Yeah. So what we do is package
up what is called a CRX file in the Chrome

515
00:43:07,990 --> 00:43:13,160
Web store. That's what gets installed onto
the user system. And then when they launch

516
00:43:13,160 --> 00:43:15,340
it using --
>>> You can only run CRX if you are using

517
00:43:15,340 --> 00:43:18,010
a Chrome browser?
>>Joe Marini: No, you are using the Chrome

518
00:43:18,010 --> 00:43:23,130
runtime.
>>> Outside of the Chrome OS. What about Windows,

519
00:43:23,130 --> 00:43:27,940
Mac?
>>Joe Marini: Windows, Mac, Linux, yes. The

520
00:43:27,940 --> 00:43:32,730
runtime will be installed for the user when
they install the app if it is not already

521
00:43:32,730 --> 00:43:34,500
there.
(Speaker off microphone.)

522
00:43:34,500 --> 00:43:41,040
>>Joe Marini: Yes, right. It is not a browser-based
thing anymore. All right. Looks like I'm over.

523
00:43:41,040 --> 00:43:43,150
Anyway, any other questions, please come find
me upstairs.

524
00:43:43,150 --> 00:43:43,400
[ Applause ]

