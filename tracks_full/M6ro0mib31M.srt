1
00:00:00,000 --> 00:00:00,780

2
00:00:00,780 --> 00:00:02,260
SILVANO LUCIANI:
Hi, everybody.

3
00:00:02,260 --> 00:00:05,470
Welcome to Google+ Sign-In
for iOS developers.

4
00:00:05,470 --> 00:00:08,570
I'm Silvano Luciani, and I'm a
Developer Programs Engineer

5
00:00:08,570 --> 00:00:10,590
for the Google+ platform.

6
00:00:10,590 --> 00:00:12,840
XIANGTIAN DAI: I'm Xiangtian
Dai, and I'm a software

7
00:00:12,840 --> 00:00:15,450
engineer for Google+
iOS platform.

8
00:00:15,450 --> 00:00:18,010
I'm not a native English
speaker, so I have been

9
00:00:18,010 --> 00:00:22,140
rehearsing this talk many, many
times to make it crystal

10
00:00:22,140 --> 00:00:23,850
clear to you.

11
00:00:23,850 --> 00:00:25,540
SILVANO LUCIANI: And I'm
Italian, so I might say things

12
00:00:25,540 --> 00:00:26,610
with a funny accent.

13
00:00:26,610 --> 00:00:28,590
Please forgive me.

14
00:00:28,590 --> 00:00:33,040
So in the next half an hour,
what we want to show you is

15
00:00:33,040 --> 00:00:36,300
what you can get by integrating
Google+ Sign-In in

16
00:00:36,300 --> 00:00:37,440
your iOS app.

17
00:00:37,440 --> 00:00:41,020
We will start with the basic
Google+ Sign-In, get users to

18
00:00:41,020 --> 00:00:42,240
sign into your app.

19
00:00:42,240 --> 00:00:44,480
We will show you two
ways of sharing--

20
00:00:44,480 --> 00:00:47,720
an active way of sharing,
interactive posts, and a

21
00:00:47,720 --> 00:00:50,180
passive way of sharing,
app activities.

22
00:00:50,180 --> 00:00:52,970
And in the end, we will tell you
something about sign out

23
00:00:52,970 --> 00:00:56,170
and disconnect, which are two
requirements that we ask you

24
00:00:56,170 --> 00:00:59,250
to implement if you want
to integrate Google+

25
00:00:59,250 --> 00:01:01,140
Sign-In in your app.

26
00:01:01,140 --> 00:01:05,150
We will show you examples from
some of our partners, and then

27
00:01:05,150 --> 00:01:08,240
we will show you the steps to
integrate this functionality

28
00:01:08,240 --> 00:01:10,910
in your XCode project.

29
00:01:10,910 --> 00:01:14,740
We will show a lot of
resources and URLs.

30
00:01:14,740 --> 00:01:17,840
Don't worry if you don't
get those URLs down.

31
00:01:17,840 --> 00:01:20,080
These slides will
be public soon.

32
00:01:20,080 --> 00:01:21,300
The talk is being recorded.

33
00:01:21,300 --> 00:01:22,560
It will be public.

34
00:01:22,560 --> 00:01:26,780
You can get back to it later
with more [? calm. ?]

35
00:01:26,780 --> 00:01:30,820
But let's start trying to
understand why do you want to

36
00:01:30,820 --> 00:01:33,440
integrate Google+ Sign-In
in your app.

37
00:01:33,440 --> 00:01:36,870
So the first thing, the very
basic thing that you get, is

38
00:01:36,870 --> 00:01:39,280
login from a trusted provider.

39
00:01:39,280 --> 00:01:43,120
Google is well-known to be safe,
especially when it comes

40
00:01:43,120 --> 00:01:44,200
to authentication.

41
00:01:44,200 --> 00:01:47,440
For example, we have two-step
verification, which is very

42
00:01:47,440 --> 00:01:50,260
effective against account
hijacking.

43
00:01:50,260 --> 00:01:53,215
Once you get the very basics,
once you get the user to sign

44
00:01:53,215 --> 00:01:58,020
in to your app using their
Google+ profile, you get back

45
00:01:58,020 --> 00:02:01,600
the possibility of customizing
your app, using information

46
00:02:01,600 --> 00:02:04,600
from their profile and using
information that you can get

47
00:02:04,600 --> 00:02:07,820
from the Google+ social graph,
which means making the

48
00:02:07,820 --> 00:02:11,360
experience for every
user more personal.

49
00:02:11,360 --> 00:02:15,570
But you can also get the
possibility of engage, having

50
00:02:15,570 --> 00:02:19,480
users from your app engage with
their friends on Google+.

51
00:02:19,480 --> 00:02:23,850
This means interactive posts,
content shared from your app

52
00:02:23,850 --> 00:02:27,325
with an action that will drive
engagement and adoption back

53
00:02:27,325 --> 00:02:28,370
to your app.

54
00:02:28,370 --> 00:02:31,440
And app activities, which means
activities that the

55
00:02:31,440 --> 00:02:35,500
users are doing on your app
written to Google and surfaced

56
00:02:35,500 --> 00:02:37,150
in many different ways.

57
00:02:37,150 --> 00:02:41,180
As I mentioned, that's adoptions
back to your app.

58
00:02:41,180 --> 00:02:43,800
So let's start from
the very basic--

59
00:02:43,800 --> 00:02:45,490
Google+ Sign-In.

60
00:02:45,490 --> 00:02:48,440
I will use one of our partners
as an example--

61
00:02:48,440 --> 00:02:49,240
Banjo.

62
00:02:49,240 --> 00:02:52,350
They were here in the
Sandbox today.

63
00:02:52,350 --> 00:02:56,210
If you don't know them, it's a
social discovery app that can

64
00:02:56,210 --> 00:02:59,870
aggregate information from
different social networks and

65
00:02:59,870 --> 00:03:03,220
show that info based
on your location.

66
00:03:03,220 --> 00:03:06,130
So when you want to start using
Banjo, first thing, you

67
00:03:06,130 --> 00:03:08,450
need to sign up to
one of the social

68
00:03:08,450 --> 00:03:10,260
networks that they support.

69
00:03:10,260 --> 00:03:12,760
And you can see a red
button, Google.

70
00:03:12,760 --> 00:03:15,250
You can sign in with
Google to Banjo.

71
00:03:15,250 --> 00:03:18,130
When you click the Sign-In, the
first thing that you will

72
00:03:18,130 --> 00:03:21,560
see is our consent dialogue.

73
00:03:21,560 --> 00:03:25,990
We designed this consent
dialogue very carefully with

74
00:03:25,990 --> 00:03:28,350
one thing in mind-- the user.

75
00:03:28,350 --> 00:03:31,890
Users want to have control
over certain things.

76
00:03:31,890 --> 00:03:35,090
And one of the most important
things for the users is

77
00:03:35,090 --> 00:03:37,770
controlling which of their
friends will be

78
00:03:37,770 --> 00:03:39,300
shared with an app.

79
00:03:39,300 --> 00:03:42,150
Which is why, as you can see
in the first line of the

80
00:03:42,150 --> 00:03:46,020
consent dialogue, they can
click, "edit list," and they

81
00:03:46,020 --> 00:03:50,610
can edit, add or subtract
circles from the circles that

82
00:03:50,610 --> 00:03:53,030
will be shared with your app.

83
00:03:53,030 --> 00:03:56,600
This doesn't mean that we are
sending your app information

84
00:03:56,600 --> 00:03:57,610
about the circles.

85
00:03:57,610 --> 00:04:01,460
We will send the users that are
contained in those circles

86
00:04:01,460 --> 00:04:04,590
as a flat list.

87
00:04:04,590 --> 00:04:06,930
There's another line, which
is very important,

88
00:04:06,930 --> 00:04:08,450
is the third line.

89
00:04:08,450 --> 00:04:13,300
Users care about what will
be visible to whom in the

90
00:04:13,300 --> 00:04:15,100
activities that they
do on your app.

91
00:04:15,100 --> 00:04:19,089
We will get back to that line
later when talking about app

92
00:04:19,089 --> 00:04:21,149
activities.

93
00:04:21,149 --> 00:04:24,900
So once I'm signed in to Banjo,
it's already different.

94
00:04:24,900 --> 00:04:27,680
I have my profile picture
on the top-right corner.

95
00:04:27,680 --> 00:04:30,330
And this is the very basic
personalization

96
00:04:30,330 --> 00:04:31,330
that you can do.

97
00:04:31,330 --> 00:04:34,940
There's a lot more that you can
do by getting data from

98
00:04:34,940 --> 00:04:37,230
our public data API.

99
00:04:37,230 --> 00:04:40,570
You can also get the list of
friends, a list of my friends,

100
00:04:40,570 --> 00:04:43,950
that are already using this app,
which means that I can

101
00:04:43,950 --> 00:04:47,230
start my experience with Banjo
not from scratch, not from

102
00:04:47,230 --> 00:04:50,110
nothing, but interacting with
some of the friends that I

103
00:04:50,110 --> 00:04:53,030
already have.

104
00:04:53,030 --> 00:04:57,140
To get started in integrating
Google+ Sign-In in your

105
00:04:57,140 --> 00:05:00,490
project, the first thing that
you will need to do is go to

106
00:05:00,490 --> 00:05:02,410
the Google API Console.

107
00:05:02,410 --> 00:05:05,140
The Google API Console is a tool
that will allow you to

108
00:05:05,140 --> 00:05:07,290
manage access to all
the Google APIs

109
00:05:07,290 --> 00:05:09,100
for all your project.

110
00:05:09,100 --> 00:05:11,310
The first thing, you will need
to create a project.

111
00:05:11,310 --> 00:05:14,840
The second thing, you will need
to create an OAuth 2.0

112
00:05:14,840 --> 00:05:17,430
Client ID, which will allow
us to track the

113
00:05:17,430 --> 00:05:19,670
usage of every API.

114
00:05:19,670 --> 00:05:23,740
In your case, this will be a
client ID for an installed

115
00:05:23,740 --> 00:05:26,460
application of type iOS.

116
00:05:26,460 --> 00:05:31,850
Now, you can find detailed stats
of this procedure on our

117
00:05:31,850 --> 00:05:33,630
developer documentation.

118
00:05:33,630 --> 00:05:37,700
One thing that I want to point
out is three parameters which

119
00:05:37,700 --> 00:05:40,450
are very specific for
your iOS app.

120
00:05:40,450 --> 00:05:42,630
The first one is the
bundle ID, which is

121
00:05:42,630 --> 00:05:44,260
identifying your app.

122
00:05:44,260 --> 00:05:47,570
You will configure this later in
the XCode project as well.

123
00:05:47,570 --> 00:05:50,330
And we will see why it's
important, because it's the

124
00:05:50,330 --> 00:05:53,340
way your app will handle the
data that is coming back from

125
00:05:53,340 --> 00:05:55,560
the authentication.

126
00:05:55,560 --> 00:05:58,260
The second parameter is
the App Store ID.

127
00:05:58,260 --> 00:06:01,150
That's the ID of your app
on the App Store.

128
00:06:01,150 --> 00:06:04,600
And it's very important, because
in some cases users

129
00:06:04,600 --> 00:06:07,400
might try to interact with your
app without having the

130
00:06:07,400 --> 00:06:09,860
app installed on their
iOS device.

131
00:06:09,860 --> 00:06:13,410
If we have this correctly
configured, it means that we

132
00:06:13,410 --> 00:06:16,900
can redirect the user to the App
Store ID, to the page of

133
00:06:16,900 --> 00:06:20,380
your app, have them install your
app, and then using deep

134
00:06:20,380 --> 00:06:24,040
linking, they can go back in
the same context what they

135
00:06:24,040 --> 00:06:26,350
were trying to interact
with your app.

136
00:06:26,350 --> 00:06:28,290
Now, I've just mentioned
deep linking.

137
00:06:28,290 --> 00:06:32,710
How many of you know what
deep linking is?

138
00:06:32,710 --> 00:06:34,420
Ah, good number, good number.

139
00:06:34,420 --> 00:06:35,440
Good job.

140
00:06:35,440 --> 00:06:37,410
So the third thing that
you can do here

141
00:06:37,410 --> 00:06:38,720
is enable deep linking.

142
00:06:38,720 --> 00:06:41,880
And deep linking will allow
you to specify strings.

143
00:06:41,880 --> 00:06:43,560
The format is up to you.

144
00:06:43,560 --> 00:06:47,790
You can determine whatever
format is better for your app.

145
00:06:47,790 --> 00:06:50,780
And this will allow you to bring
the user in the exact

146
00:06:50,780 --> 00:06:54,980
context where they wanted to
interact with your app, which

147
00:06:54,980 --> 00:06:57,370
could be a specific view
where they can

148
00:06:57,370 --> 00:06:58,980
perform a specific action.

149
00:06:58,980 --> 00:07:01,150
And we will see more
about this later.

150
00:07:01,150 --> 00:07:05,250

151
00:07:05,250 --> 00:07:07,250
XIANGTIAN DAI: Now you have
registered your app in Google

152
00:07:07,250 --> 00:07:11,310
APIs Console, it is time to
download Google+ iOS SDK.

153
00:07:11,310 --> 00:07:12,925
You download it from
developers.googl

154
00:07:12,925 --> 00:07:19,080
e.com/+/mobile/ios.

155
00:07:19,080 --> 00:07:21,990
And also, check out our online
references there.

156
00:07:21,990 --> 00:07:25,410

157
00:07:25,410 --> 00:07:28,730
Now that you have downloaded
Google iOS SDK, there are four

158
00:07:28,730 --> 00:07:32,600
steps to set up your XCode
configuration for your

159
00:07:32,600 --> 00:07:34,520
application target.

160
00:07:34,520 --> 00:07:38,850
The first step is to drag the
following items from Google+

161
00:07:38,850 --> 00:07:40,655
iOS SDK to your project--

162
00:07:40,655 --> 00:07:44,760

163
00:07:44,760 --> 00:07:48,540
GooglePlus.framework,
GoogleOpenSource.framework,

164
00:07:48,540 --> 00:07:50,870
and then GooglePlus.bundle.

165
00:07:50,870 --> 00:07:55,240
GooglePlus.framework contains
header files and libraries for

166
00:07:55,240 --> 00:07:57,690
the Google+ iOS SDK.

167
00:07:57,690 --> 00:08:00,970
GoogleOpenSource.framework
contains open source files

168
00:08:00,970 --> 00:08:05,000
provided by Google that
is used in this SDK.

169
00:08:05,000 --> 00:08:07,790
However, if you're already
using some of these open

170
00:08:07,790 --> 00:08:11,210
source files, do not
include .framework.

171
00:08:11,210 --> 00:08:15,610
Instead, include individual
files under the open source

172
00:08:15,610 --> 00:08:17,710
directory of the SDK.

173
00:08:17,710 --> 00:08:20,930
Only include these files you are
not already using so that

174
00:08:20,930 --> 00:08:24,090
you do not end up with
duplicate symbols.

175
00:08:24,090 --> 00:08:29,110
GooglePlus.bundle contains
images and strings used by the

176
00:08:29,110 --> 00:08:30,420
Google+ Sign-In button.

177
00:08:30,420 --> 00:08:34,419

178
00:08:34,419 --> 00:08:35,480
Step two.

179
00:08:35,480 --> 00:08:41,860
On the info tab,
add a URL type.

180
00:08:41,860 --> 00:08:43,750
Use your bundle ID for both the

181
00:08:43,750 --> 00:08:48,280
identifier and the URL scheme.

182
00:08:48,280 --> 00:08:51,160
You must use the same bundle ID
that matches what you have

183
00:08:51,160 --> 00:08:54,880
registered in Google
APIs Console.

184
00:08:54,880 --> 00:08:58,980
This is how your app gets data
from authentication, sharing,

185
00:08:58,980 --> 00:09:02,130
and deep linking.

186
00:09:02,130 --> 00:09:05,730
Step three, build
Settings tab.

187
00:09:05,730 --> 00:09:12,290
Find other linker flags, and
add dash Objective C. This

188
00:09:12,290 --> 00:09:15,760
linker flag is needed for
libraries with Objective C

189
00:09:15,760 --> 00:09:19,000
categories to link properly.

190
00:09:19,000 --> 00:09:23,570
And step four, build
Phases tab.

191
00:09:23,570 --> 00:09:29,460
In section, add binary to
libraries and the following

192
00:09:29,460 --> 00:09:30,440
frameworks--

193
00:09:30,440 --> 00:09:34,370
Security.framework and the
SystemConfiguration.framework.

194
00:09:34,370 --> 00:09:38,705
These frameworks are needed
for the Google+ iOS SDK.

195
00:09:38,705 --> 00:09:41,560

196
00:09:41,560 --> 00:09:44,370
Now let's go with
some code setup.

197
00:09:44,370 --> 00:09:47,840
First, you need to import
GooglePlus.h and

198
00:09:47,840 --> 00:09:49,920
GoogleOpenSource.h.

199
00:09:49,920 --> 00:09:53,490
You can import them in
individual .m files as needed,

200
00:09:53,490 --> 00:09:56,660
or you can also import them in
your precompiled header file.

201
00:09:56,660 --> 00:09:59,430

202
00:09:59,430 --> 00:10:03,710
Second, you need to initialize
a client ID property of the

203
00:10:03,710 --> 00:10:08,100
GPPSignIn instance before
using this object.

204
00:10:08,100 --> 00:10:13,160
This client ID identifies your
app to Google services.

205
00:10:13,160 --> 00:10:17,730
You get this client ID string by
registering your app in the

206
00:10:17,730 --> 00:10:20,990
Google APIs Console.

207
00:10:20,990 --> 00:10:25,170
If your app requires more
permissions from the user, in

208
00:10:25,170 --> 00:10:30,670
addition to what the default
plus.login scope provides, you

209
00:10:30,670 --> 00:10:35,160
need also to declare this list
of scopes and do this

210
00:10:35,160 --> 00:10:38,120
initialization before using this
Google+ Sign-In object.

211
00:10:38,120 --> 00:10:40,840

212
00:10:40,840 --> 00:10:45,230
Now, adding a Sign-In button
to your app is very easy.

213
00:10:45,230 --> 00:10:49,810
All you have to do is to drag a
button to your storyboard or

214
00:10:49,810 --> 00:10:55,790
XIB file and set its custom
class to GPPSignInButton.

215
00:10:55,790 --> 00:10:58,940

216
00:10:58,940 --> 00:11:03,192
And don't forget to remove
the default label.

217
00:11:03,192 --> 00:11:07,310
The SDK will handle the
appearance of the button.

218
00:11:07,310 --> 00:11:10,500
You can also customize its style
and the color scheme to

219
00:11:10,500 --> 00:11:13,540
match your app's
look and feel.

220
00:11:13,540 --> 00:11:19,280
If you want, you can also draw
your own button, as long as it

221
00:11:19,280 --> 00:11:23,500
meets our branding guidelines
at this location.

222
00:11:23,500 --> 00:11:26,850
Now, if you draw your own
button, don't forget to call

223
00:11:26,850 --> 00:11:30,950
Authenticate method on the
GPPSignIn instance.

224
00:11:30,950 --> 00:11:33,420
This starts authentication
flow when

225
00:11:33,420 --> 00:11:34,670
user taps on the button.

226
00:11:34,670 --> 00:11:37,340

227
00:11:37,340 --> 00:11:39,460
To complete the authentication
flow, you

228
00:11:39,460 --> 00:11:41,290
need to do two things.

229
00:11:41,290 --> 00:11:47,250
First, in your AppDelegate, let
GPPURLHandler handle the

230
00:11:47,250 --> 00:11:48,500
incoming URL.

231
00:11:48,500 --> 00:11:50,660

232
00:11:50,660 --> 00:11:55,870
Second, one of your classes
must implement the

233
00:11:55,870 --> 00:12:01,710
GPPSignInDelegate protocol,
for example, your relevant

234
00:12:01,710 --> 00:12:04,000
ViewController class.

235
00:12:04,000 --> 00:12:07,090
And you need to assign an
instance of this class as a

236
00:12:07,090 --> 00:12:11,020
delegate to the GPPSignIn
object.

237
00:12:11,020 --> 00:12:14,380
In this class, you implement
a method called

238
00:12:14,380 --> 00:12:15,630
finishedWithAuth.

239
00:12:15,630 --> 00:12:18,810

240
00:12:18,810 --> 00:12:20,800
This method will be
called when the

241
00:12:20,800 --> 00:12:22,060
authentication flow completes.

242
00:12:22,060 --> 00:12:28,080

243
00:12:28,080 --> 00:12:31,750
As a side note, when user
finishes signing in, we save

244
00:12:31,750 --> 00:12:34,770
user's credentials in the
user's private keychain.

245
00:12:34,770 --> 00:12:37,700
This is so that the user does
not need to type in their

246
00:12:37,700 --> 00:12:42,160
password again when your
app starts next time.

247
00:12:42,160 --> 00:12:44,700
In order to make use of
this feature, call

248
00:12:44,700 --> 00:12:45,950
trySilentAuthentication.

249
00:12:45,950 --> 00:12:51,670

250
00:12:51,670 --> 00:12:54,060
There are two tips I
would like to offer

251
00:12:54,060 --> 00:12:55,880
for the Sign-In flow.

252
00:12:55,880 --> 00:13:00,840
First, user will be directed
to another

253
00:13:00,840 --> 00:13:03,230
app to compete sign-in.

254
00:13:03,230 --> 00:13:06,390
So that user will type into the
username and password in

255
00:13:06,390 --> 00:13:07,210
another app.

256
00:13:07,210 --> 00:13:10,910
This means your app will
go into the background.

257
00:13:10,910 --> 00:13:14,990
Do not assume that your app,
when user has already signed

258
00:13:14,990 --> 00:13:19,020
in, when your app comes back
to the foreground.

259
00:13:19,020 --> 00:13:23,310
User could have declined to sign
in, or they could simply

260
00:13:23,310 --> 00:13:28,000
use this Home button to switch
back to your app.

261
00:13:28,000 --> 00:13:31,120
Instead, using the programming
interface that we just

262
00:13:31,120 --> 00:13:33,990
discussed to get a notification
that the user has

263
00:13:33,990 --> 00:13:37,170
finished signing in.

264
00:13:37,170 --> 00:13:40,410
Second, to provide the user
with a single sign-in

265
00:13:40,410 --> 00:13:44,870
experience we always prefer
to use the Google+ app, if

266
00:13:44,870 --> 00:13:48,660
installed, to handle the
user signing in.

267
00:13:48,660 --> 00:13:52,520
If this is not the behavior
you want, that's fine.

268
00:13:52,520 --> 00:13:58,390
Simply set the attemptSSO
property of the GPPSignIn

269
00:13:58,390 --> 00:14:05,150
object to "no." This way, the
SDK will always switch to

270
00:14:05,150 --> 00:14:06,835
browser to handle
user's sign in.

271
00:14:06,835 --> 00:14:10,220

272
00:14:10,220 --> 00:14:13,770
Now user has signed in, let's
say we want to get the user's

273
00:14:13,770 --> 00:14:16,700
profile image and their
display name.

274
00:14:16,700 --> 00:14:20,080
To do that, we use
three objects--

275
00:14:20,080 --> 00:14:25,680
a service, a query, and
a completion handler.

276
00:14:25,680 --> 00:14:28,900
The service object identifies
which Google

277
00:14:28,900 --> 00:14:31,230
service you're accessing.

278
00:14:31,230 --> 00:14:36,690
In our case, it's the Google+
service, which you should have

279
00:14:36,690 --> 00:14:40,680
enabled in Google APIs Console
for your project.

280
00:14:40,680 --> 00:14:44,340
We get this object by calling
PlusService method on the

281
00:14:44,340 --> 00:14:45,815
GPPSignIn instance.

282
00:14:45,815 --> 00:14:48,770

283
00:14:48,770 --> 00:14:54,070
A query is a request you send
to this Google service.

284
00:14:54,070 --> 00:14:59,640
In our case, it's the query to
get the people's profile.

285
00:14:59,640 --> 00:15:01,970
And then we get this
object by calling

286
00:15:01,970 --> 00:15:07,490
queryForPeopleGetWithUserId
method, with the argument

287
00:15:07,490 --> 00:15:13,850
"me." This special string
represents the current user.

288
00:15:13,850 --> 00:15:17,560

289
00:15:17,560 --> 00:15:21,210
And the completion handler is a
block that gets called when

290
00:15:21,210 --> 00:15:24,260
the request comes back.

291
00:15:24,260 --> 00:15:29,340
In our case, we're expecting
a GTLPlusPerson object.

292
00:15:29,340 --> 00:15:34,050
This object contains information
about the user.

293
00:15:34,050 --> 00:15:37,290
Both users' profile image and
their display name can be

294
00:15:37,290 --> 00:15:41,980
retrieved from this topic
as its properties.

295
00:15:41,980 --> 00:15:46,930
Finally, execute the query on
the Plus service with the

296
00:15:46,930 --> 00:15:50,080
completion handler, and don't
forget to check for errors

297
00:15:50,080 --> 00:15:53,200
inside the completion handler.

298
00:15:53,200 --> 00:15:55,620
SILVANO LUCIANI: So now that you
have the users, it's time

299
00:15:55,620 --> 00:15:57,680
to engage with their friends.

300
00:15:57,680 --> 00:16:01,350
And the way to do this is
use interactive posts.

301
00:16:01,350 --> 00:16:03,950
And I will use the Fancy
as an example.

302
00:16:03,950 --> 00:16:05,720
The Fancy is another partner.

303
00:16:05,720 --> 00:16:09,320
They were in our Sandbox
yesterday.

304
00:16:09,320 --> 00:16:13,470
If you don't know them, it's an
app where people curate a

305
00:16:13,470 --> 00:16:17,685
list of items, places, and
you can fancy items if

306
00:16:17,685 --> 00:16:18,600
you like the items.

307
00:16:18,600 --> 00:16:21,570
You can buy items, add
them to at list, or

308
00:16:21,570 --> 00:16:25,010
just share with friends.

309
00:16:25,010 --> 00:16:27,240
This is an example of
things that you

310
00:16:27,240 --> 00:16:28,950
can find on the Fancy.

311
00:16:28,950 --> 00:16:32,360
A very fancy watch, I have
to admit, on the bottom.

312
00:16:32,360 --> 00:16:36,810
And the USB Hub House, which
is one of my favorites.

313
00:16:36,810 --> 00:16:39,980
But I decide to focus
on this article.

314
00:16:39,980 --> 00:16:41,550
Summer is coming.

315
00:16:41,550 --> 00:16:44,960
I think that a hanging cliff
cabana, it's something that

316
00:16:44,960 --> 00:16:46,040
you want to have.

317
00:16:46,040 --> 00:16:49,180
And for $700, it's
a real deal.

318
00:16:49,180 --> 00:16:52,110
So let's say I want to share
it with my friends.

319
00:16:52,110 --> 00:16:54,610
On the top-right corner,
I have the Share icon.

320
00:16:54,610 --> 00:16:57,580
When I click the Share icon,
I can see Google+

321
00:16:57,580 --> 00:16:58,960
is one of the options.

322
00:16:58,960 --> 00:17:03,120
When I click on Google+, I can
see the Share box for an

323
00:17:03,120 --> 00:17:05,170
interactive post.

324
00:17:05,170 --> 00:17:09,280
Looks like your average Share
box, but it's not.

325
00:17:09,280 --> 00:17:13,589
I'm sharing, I'm adding some
text, saying this is really

326
00:17:13,589 --> 00:17:15,250
handy for the summer.

327
00:17:15,250 --> 00:17:17,970
You can see in the center
what I'm sharing.

328
00:17:17,970 --> 00:17:19,530
But also, there's a button--

329
00:17:19,530 --> 00:17:20,220
Buy.

330
00:17:20,220 --> 00:17:23,040
And that's what we call
a call to action.

331
00:17:23,040 --> 00:17:26,619
I'm not just sharing this with
my friends, I'm also telling

332
00:17:26,619 --> 00:17:29,310
them, hey, you should
buy this thing.

333
00:17:29,310 --> 00:17:31,420
You should do something with
this thing, because I think

334
00:17:31,420 --> 00:17:34,220
that this thing is really
important for you.

335
00:17:34,220 --> 00:17:38,120
And what happens when I share
this with my friends?

336
00:17:38,120 --> 00:17:41,030
They receive a notification
across all the Google

337
00:17:41,030 --> 00:17:41,900
properties.

338
00:17:41,900 --> 00:17:45,820
And in this example, we have
YouTube, we have Google Drive,

339
00:17:45,820 --> 00:17:47,090
we have Google Search.

340
00:17:47,090 --> 00:17:52,800
But this will surface also
on Gmail, G+, and so on.

341
00:17:52,800 --> 00:17:55,970
And if they have the Google+ app
installed on their mobile

342
00:17:55,970 --> 00:17:59,090
device, they will receive a
notification on their mobile

343
00:17:59,090 --> 00:18:01,200
device as well.

344
00:18:01,200 --> 00:18:03,510
So this is me receiving
the notification.

345
00:18:03,510 --> 00:18:07,300
I'm telling myself to
buy this thing.

346
00:18:07,300 --> 00:18:10,930
When I open it, this is how
the Share box is rendered.

347
00:18:10,930 --> 00:18:13,180
And what happens when
I click Buy?

348
00:18:13,180 --> 00:18:17,080
You remember when we said deep
linking, putting people,

349
00:18:17,080 --> 00:18:20,850
users, in the context where
we want them to be?

350
00:18:20,850 --> 00:18:25,500
They not only see the object
that I'm sharing.

351
00:18:25,500 --> 00:18:29,660
Adding to cart, buying us a
gift, is one tap away from

352
00:18:29,660 --> 00:18:30,930
them at this point.

353
00:18:30,930 --> 00:18:33,830
They just need to tap on the
green or blue button, and they

354
00:18:33,830 --> 00:18:37,450
will perform the action that
we wanted them to perform.

355
00:18:37,450 --> 00:18:40,980
Notify the Google+ properties,
drive back to your app.

356
00:18:40,980 --> 00:18:48,320

357
00:18:48,320 --> 00:18:51,190
XIANGTIAN DAI: To share from
your app, the first thing to

358
00:18:51,190 --> 00:18:56,100
do is to get the GPPShareBuilder
object.

359
00:18:56,100 --> 00:19:00,590
And you get this object by
calling the shareDialog method

360
00:19:00,590 --> 00:19:03,570
on the GPPShare instance.

361
00:19:03,570 --> 00:19:06,520
This GPPShareBuilder object
allows you to set the

362
00:19:06,520 --> 00:19:09,110
parameters for your
share dialog.

363
00:19:09,110 --> 00:19:13,070
One of the parameters you can
set is the PrefillText, which

364
00:19:13,070 --> 00:19:18,470
allows you, as the developer,
to prepopulate text for the

365
00:19:18,470 --> 00:19:20,600
shareDialog, so the
user does not have

366
00:19:20,600 --> 00:19:21,850
to start from scratch.

367
00:19:21,850 --> 00:19:24,770

368
00:19:24,770 --> 00:19:27,440
You can also set
a URL to share.

369
00:19:27,440 --> 00:19:31,240
The shareDialog shows a preview
of the content of this

370
00:19:31,240 --> 00:19:35,650
URL so user knows what
they are sharing.

371
00:19:35,650 --> 00:19:39,270
Now, to make it an interactive
post, you need to call the

372
00:19:39,270 --> 00:19:43,320
method named
setCallToActionButtonWithLabel.

373
00:19:43,320 --> 00:19:47,570
This method adds a Call to
Action button to the post.

374
00:19:47,570 --> 00:19:50,870
A Call to Action button consists
of three parts.

375
00:19:50,870 --> 00:19:55,070
First, a label, which is one of
the predefined texts on our

376
00:19:55,070 --> 00:19:59,160
developer site that best
describes your action.

377
00:19:59,160 --> 00:20:02,050
For example, Bookmark.

378
00:20:02,050 --> 00:20:06,510
Second, a URL, which must be
on the same domain as the

379
00:20:06,510 --> 00:20:08,900
content URL.

380
00:20:08,900 --> 00:20:12,650
And then lastly, an optional
deepLinkID.

381
00:20:12,650 --> 00:20:16,640
The deepLinkID is a string
understood by your app that

382
00:20:16,640 --> 00:20:21,160
navigates into a particular
view of your app.

383
00:20:21,160 --> 00:20:24,520
This is so that when a user
taps on the Call to Action

384
00:20:24,520 --> 00:20:28,500
button, they are taken directly
into the right place

385
00:20:28,500 --> 00:20:30,500
inside of your app.

386
00:20:30,500 --> 00:20:35,190
If your app is not installed,
the user will be prompted for

387
00:20:35,190 --> 00:20:37,780
it to download and
install your app.

388
00:20:37,780 --> 00:20:40,930
And then they are taken directly
into the right place

389
00:20:40,930 --> 00:20:42,820
inside your app.

390
00:20:42,820 --> 00:20:44,070
Deep linking is cross-platform.

391
00:20:44,070 --> 00:20:47,790

392
00:20:47,790 --> 00:20:51,165
In order to make the interactive
post shared from

393
00:20:51,165 --> 00:20:56,770
your iOS app, handled by your
Android app, and vice versa,

394
00:20:56,770 --> 00:21:01,520
make sure that your OAuth2
clients, or your both iOS and

395
00:21:01,520 --> 00:21:04,615
Android apps in the Google
APIs Console,

396
00:21:04,615 --> 00:21:06,590
are in the same project.

397
00:21:06,590 --> 00:21:09,330
And also make sure that
both clients have

398
00:21:09,330 --> 00:21:12,900
deep linking enabled.

399
00:21:12,900 --> 00:21:16,840
And finally, call the
[? share ?] method on this

400
00:21:16,840 --> 00:21:21,320
GPPShareBuilder instance, and
share dialog will be displayed

401
00:21:21,320 --> 00:21:22,570
to the user.

402
00:21:22,570 --> 00:21:25,630

403
00:21:25,630 --> 00:21:29,160
SILVANO LUCIANI: So after the
active sharing that you've

404
00:21:29,160 --> 00:21:30,810
seen with interactive posts--

405
00:21:30,810 --> 00:21:34,300
users want to share something
with their friends--

406
00:21:34,300 --> 00:21:37,390
we go to passive sharing,
app activities.

407
00:21:37,390 --> 00:21:40,720
And I will use Flixter, which
is another of our partners.

408
00:21:40,720 --> 00:21:43,130
And they were in the
Sandbox today.

409
00:21:43,130 --> 00:21:46,370
If you know Flixter, it's a
community where users can

410
00:21:46,370 --> 00:21:49,800
share reviews and ratings and
movies, and they can also

411
00:21:49,800 --> 00:21:54,450
invite each other to
go watch a movie

412
00:21:54,450 --> 00:21:56,870
somewhere at some time.

413
00:21:56,870 --> 00:22:00,050
So an app activity, it's
something that the app is

414
00:22:00,050 --> 00:22:03,360
writing to Google on behalf
of the users.

415
00:22:03,360 --> 00:22:06,520
The user gave consent
to the app when they

416
00:22:06,520 --> 00:22:08,110
signed in to Google.

417
00:22:08,110 --> 00:22:11,020
And this time, we will focus
on a different part of the

418
00:22:11,020 --> 00:22:12,450
consent dialogue.

419
00:22:12,450 --> 00:22:16,480
As you can see, it's showing
us which type of activities

420
00:22:16,480 --> 00:22:18,420
Flixter wants to write.

421
00:22:18,420 --> 00:22:22,600
And it's asking us, who do you
want to be able to view these

422
00:22:22,600 --> 00:22:24,440
activities on Google?

423
00:22:24,440 --> 00:22:27,550
And again, we can choose
all our circles.

424
00:22:27,550 --> 00:22:30,500
We can choose some
of our circles.

425
00:22:30,500 --> 00:22:34,580
As a top-level option, we can
choose to keep it private.

426
00:22:34,580 --> 00:22:37,370
There are some things that we
want to keep it private, and

427
00:22:37,370 --> 00:22:39,820
we don't want to share
with anyone or be

428
00:22:39,820 --> 00:22:41,630
visible to anyone else.

429
00:22:41,630 --> 00:22:44,950
We can do it right here.

430
00:22:44,950 --> 00:22:47,920
To show what app activities are
about, we have an example

431
00:22:47,920 --> 00:22:50,320
of a movie on Flixter.

432
00:22:50,320 --> 00:22:53,590
And from here, there are two
things that could trigger an

433
00:22:53,590 --> 00:22:55,600
app activity to be written.

434
00:22:55,600 --> 00:22:59,530
The first one is, I can say that
I want to see this movie.

435
00:22:59,530 --> 00:23:02,430
That will trigger
a Want activity.

436
00:23:02,430 --> 00:23:04,660
Or I can add the rating
for that movie.

437
00:23:04,660 --> 00:23:08,240
And that will trigger
a Review activity.

438
00:23:08,240 --> 00:23:10,210
I mentioned two different
types--

439
00:23:10,210 --> 00:23:11,200
Want and Review.

440
00:23:11,200 --> 00:23:13,010
We have 10 different types.

441
00:23:13,010 --> 00:23:14,920
As you can see, some
are more generic.

442
00:23:14,920 --> 00:23:16,930
Some are more specific.

443
00:23:16,930 --> 00:23:20,080
If you have a compelling use
case that are not in this

444
00:23:20,080 --> 00:23:24,670
list, please let us know, and we
will consider if it's worth

445
00:23:24,670 --> 00:23:28,360
implementing your use case.

446
00:23:28,360 --> 00:23:31,740
So what happens after Flixter
has written an app activity?

447
00:23:31,740 --> 00:23:34,570
Well, the first place where
we started surfacing app

448
00:23:34,570 --> 00:23:37,010
activities is the profile.

449
00:23:37,010 --> 00:23:40,410
So as you can see, there's a
list of things that I did on

450
00:23:40,410 --> 00:23:44,590
Flixter, movies that I want to
see, movies that I review.

451
00:23:44,590 --> 00:23:49,370
This is visible to all the
people coming to my profile

452
00:23:49,370 --> 00:23:52,500
that I selected in the
consent dialog.

453
00:23:52,500 --> 00:23:58,090
And as you can see, I can check
to whom these activities

454
00:23:58,090 --> 00:23:59,820
are currently visible.

455
00:23:59,820 --> 00:24:02,330
What if I change my mind?

456
00:24:02,330 --> 00:24:08,140
I can choose to go back and edit
the circles again, making

457
00:24:08,140 --> 00:24:12,280
this wider or smaller.

458
00:24:12,280 --> 00:24:15,800
What happens if there's a
specific activity that I want

459
00:24:15,800 --> 00:24:17,940
to share with more people?

460
00:24:17,940 --> 00:24:19,200
I can do it from here.

461
00:24:19,200 --> 00:24:20,800
I can actually do many
different things.

462
00:24:20,800 --> 00:24:23,820
I can delete the activity, I
can report the activity as

463
00:24:23,820 --> 00:24:26,850
spam if I don't like what
the app is doing.

464
00:24:26,850 --> 00:24:29,700
But if the press the button in
the middle, at this point I

465
00:24:29,700 --> 00:24:34,250
can share it to Google+, with
the public, or with the circle

466
00:24:34,250 --> 00:24:36,960
of my friends that I know
they like to destroy

467
00:24:36,960 --> 00:24:40,200
world with a hammer.

468
00:24:40,200 --> 00:24:42,650
There is another thing that we
started doing and that we

469
00:24:42,650 --> 00:24:45,410
announced a couple of weeks
ago, Which is search

470
00:24:45,410 --> 00:24:46,220
integration.

471
00:24:46,220 --> 00:24:49,660
So we started surfacing
activities from the users in

472
00:24:49,660 --> 00:24:51,000
Google Search.

473
00:24:51,000 --> 00:24:55,660
So if we search on Google for
Flixter, on the right you can

474
00:24:55,660 --> 00:24:59,440
see that we are telling you
which are the most popular

475
00:24:59,440 --> 00:25:02,510
activities on Flixter
by Google users.

476
00:25:02,510 --> 00:25:05,330
And if you click on any of those
activities, they will go

477
00:25:05,330 --> 00:25:08,290
back to the Flixter website.

478
00:25:08,290 --> 00:25:11,410

479
00:25:11,410 --> 00:25:14,490
XIANGTIAN DAI: Before your app
can write app activities, you

480
00:25:14,490 --> 00:25:19,560
need to declare all types of
app activities your app is

481
00:25:19,560 --> 00:25:23,275
about to write before
user signs in.

482
00:25:23,275 --> 00:25:27,600
This is so that user has a
chance to review the list of

483
00:25:27,600 --> 00:25:29,770
app activities.

484
00:25:29,770 --> 00:25:35,070
To do that, I find Actions
property of the GPPSignIn

485
00:25:35,070 --> 00:25:39,080
instance to an array of strings,
each of which is an

486
00:25:39,080 --> 00:25:42,300
app activity type.

487
00:25:42,300 --> 00:25:47,490
Now, to write app activity,
first you need to construct a

488
00:25:47,490 --> 00:25:52,460
Moment object, which represents
app activity.

489
00:25:52,460 --> 00:25:57,445
Assign the type of this Moment
object to be the type of the

490
00:25:57,445 --> 00:26:02,750
app activity, and assign the
target of this Moment object

491
00:26:02,750 --> 00:26:05,230
to be the target of
the app activity--

492
00:26:05,230 --> 00:26:07,730
in our case, a URL.

493
00:26:07,730 --> 00:26:12,800
Please note that we require
certain schema.org microdata

494
00:26:12,800 --> 00:26:15,420
on the content of this URL.

495
00:26:15,420 --> 00:26:17,970
Refer to our developer
doc for more details.

496
00:26:17,970 --> 00:26:20,510

497
00:26:20,510 --> 00:26:24,050
Now, with this Moment object,
it's time to construct our

498
00:26:24,050 --> 00:26:26,000
query object.

499
00:26:26,000 --> 00:26:27,960
We'll construct our
query object to

500
00:26:27,960 --> 00:26:29,950
insert this Moment object.

501
00:26:29,950 --> 00:26:34,030
And this query consists
of three objects.

502
00:26:34,030 --> 00:26:37,640
First, the Moment object that
we just constructed.

503
00:26:37,640 --> 00:26:41,180
Second, a special string, "me,"
which represents the

504
00:26:41,180 --> 00:26:42,730
current user.

505
00:26:42,730 --> 00:26:46,500
And third, a constant for
the default collection.

506
00:26:46,500 --> 00:26:49,130

507
00:26:49,130 --> 00:26:55,560
Now again, execute the query
on the plusService.

508
00:26:55,560 --> 00:26:59,410
And in the completion handler,
you can check whether your app

509
00:26:59,410 --> 00:27:02,430
activity has been successfully
written or not.

510
00:27:02,430 --> 00:27:05,490

511
00:27:05,490 --> 00:27:08,100
SILVANO LUCIANI: So the last
thing, as we mentioned, is

512
00:27:08,100 --> 00:27:11,590
something that we ask you
implement in your developer

513
00:27:11,590 --> 00:27:15,810
policies, sign out, and a
disconnect functionality.

514
00:27:15,810 --> 00:27:19,480
Now, how many of you know
what to sign out means?

515
00:27:19,480 --> 00:27:22,500
I hope everyone.

516
00:27:22,500 --> 00:27:26,120
Sign out means that when the
users are signed into your

517
00:27:26,120 --> 00:27:28,620
app, they get the personalized
experience.

518
00:27:28,620 --> 00:27:30,490
When they are signed
out, they don't.

519
00:27:30,490 --> 00:27:34,390
So you don't show them in the
app any data that you retrieve

520
00:27:34,390 --> 00:27:38,110
from that profile and that is
specific to their profile.

521
00:27:38,110 --> 00:27:40,090
Disconnect is something
different.

522
00:27:40,090 --> 00:27:44,230
It means that the user tried
your app, it worked for

523
00:27:44,230 --> 00:27:46,850
awhile, the love is finished.

524
00:27:46,850 --> 00:27:48,520
They don't want your
app anymore.

525
00:27:48,520 --> 00:27:51,800
They want to delete any link
between your app and their

526
00:27:51,800 --> 00:27:53,410
Google+ account.

527
00:27:53,410 --> 00:27:57,630
So for you, this means that you
also need to delete all

528
00:27:57,630 --> 00:28:01,420
the information that you
obtained from the Google+ API.

529
00:28:01,420 --> 00:28:04,600
Now, there are some important
exceptions to this.

530
00:28:04,600 --> 00:28:07,270
For example, if you need to
keep some information to

531
00:28:07,270 --> 00:28:10,500
comply with laws or regulation,
let's say as a

532
00:28:10,500 --> 00:28:12,910
proof of purchase,
you can do it.

533
00:28:12,910 --> 00:28:15,065
And you can find more details
at developers.googl

534
00:28:15,065 --> 00:28:20,550
e.com/+/policies, all that you
can keep, and all that you

535
00:28:20,550 --> 00:28:21,800
cannot keep.

536
00:28:21,800 --> 00:28:23,900

537
00:28:23,900 --> 00:28:27,180
XIANGTIAN DAI: The GPPSignIn
object already implements the

538
00:28:27,180 --> 00:28:29,490
signOut and Disconnect
methods.

539
00:28:29,490 --> 00:28:33,290
So all you have to do is to call
these methods as needed.

540
00:28:33,290 --> 00:28:35,490
And don't forget to clean
up user data.

541
00:28:35,490 --> 00:28:39,560

542
00:28:39,560 --> 00:28:42,820
Both signOut and Disconnect
methods remove user

543
00:28:42,820 --> 00:28:45,950
credentials from memory
and from keychain.

544
00:28:45,950 --> 00:28:49,350
However, there's a difference
between these two methods.

545
00:28:49,350 --> 00:28:51,800
SignOut removes user
credentials

546
00:28:51,800 --> 00:28:53,880
for the current device.

547
00:28:53,880 --> 00:28:58,140
On the other hand, Disconnect
revokes user credentials for

548
00:28:58,140 --> 00:29:02,250
the user connecting to the
app across all devices.

549
00:29:02,250 --> 00:29:06,910
If you want to know whether
disconnect succeeds or not,

550
00:29:06,910 --> 00:29:11,910
implement the optional method in
GPPSignInDelegate protocol

551
00:29:11,910 --> 00:29:14,900
called didDisconnectWithError.

552
00:29:14,900 --> 00:29:16,670
And you can check the
results there.

553
00:29:16,670 --> 00:29:19,500

554
00:29:19,500 --> 00:29:24,380
SILVANO LUCIANI: So to conclude,
why do you want to,

555
00:29:24,380 --> 00:29:27,720
when you go out from this
room, start integrating

556
00:29:27,720 --> 00:29:31,290
Google+ in your iOS
app immediately?

557
00:29:31,290 --> 00:29:33,120
Because of all of
these points.

558
00:29:33,120 --> 00:29:33,740
It's easy.

559
00:29:33,740 --> 00:29:36,020
The integration is very
easy when you use

560
00:29:36,020 --> 00:29:39,260
the Google+ iOS SDK.

561
00:29:39,260 --> 00:29:41,810
You get the login from
a trusted provider.

562
00:29:41,810 --> 00:29:44,870
You get Profile and Social
Graph access.

563
00:29:44,870 --> 00:29:50,000
And also, you get to drive
adoption and engagement using

564
00:29:50,000 --> 00:29:54,040
interactive posts, and you get
re-engagement using app

565
00:29:54,040 --> 00:29:55,390
activities.

566
00:29:55,390 --> 00:29:57,170
You've seen some examples.

567
00:29:57,170 --> 00:30:00,120
You've seen all of those
partners are being very

568
00:30:00,120 --> 00:30:03,000
successful with their
integration, and they're

569
00:30:03,000 --> 00:30:07,740
improving their apps and the
experience for their users.

570
00:30:07,740 --> 00:30:10,800
So go out and try it out.

571
00:30:10,800 --> 00:30:11,985
And thanks for coming.

572
00:30:11,985 --> 00:30:13,235
XIANGTIAN DAI: Thank you.

573
00:30:13,235 --> 00:30:19,480

574
00:30:19,480 --> 00:30:22,320
SILVANO LUCIANI: Now, if you
have any questions, please use

575
00:30:22,320 --> 00:30:23,570
the two mics.

576
00:30:23,570 --> 00:30:33,600

577
00:30:33,600 --> 00:30:33,900
AUDIENCE: Hi.

578
00:30:33,900 --> 00:30:34,590
Thanks for the talk.

579
00:30:34,590 --> 00:30:37,650
I just have a quick question
about analytics on the

580
00:30:37,650 --> 00:30:39,160
interactive posts.

581
00:30:39,160 --> 00:30:44,310
I was wondering if there's a way
that you can track who is

582
00:30:44,310 --> 00:30:46,970
making the interactive posts
and then which users are

583
00:30:46,970 --> 00:30:51,790
clicking on those posts, as a
way to be able to identify

584
00:30:51,790 --> 00:30:55,760
users and then ultimately
influencers and people who are

585
00:30:55,760 --> 00:30:58,630
easily influenced.

586
00:30:58,630 --> 00:31:01,950
SILVANO LUCIANI: So you can
get aggregate data.

587
00:31:01,950 --> 00:31:06,240
There's no way of tracking who
is sharing, because it's an

588
00:31:06,240 --> 00:31:06,570
[? added ?]

589
00:31:06,570 --> 00:31:07,070
Share box.

590
00:31:07,070 --> 00:31:14,692
So everything that's happening
inside the Google + iOS app.

591
00:31:14,692 --> 00:31:15,110
AUDIENCE: OK.

592
00:31:15,110 --> 00:31:15,520
So right.

593
00:31:15,520 --> 00:31:17,890
It's outside the scope
of being able to

594
00:31:17,890 --> 00:31:19,390
identify to a user.

595
00:31:19,390 --> 00:31:20,170
SILVANO LUCIANI: Yeah.

596
00:31:20,170 --> 00:31:23,390
But you can get aggregate data
on how your interactive posts

597
00:31:23,390 --> 00:31:24,430
are performing.

598
00:31:24,430 --> 00:31:27,930
And if you have different
platforms, Android Web and

599
00:31:27,930 --> 00:31:32,340
iOS, you can see which platform
is working best, and

600
00:31:32,340 --> 00:31:33,590
things like that.

601
00:31:33,590 --> 00:31:36,100

602
00:31:36,100 --> 00:31:41,710
AUDIENCE: I've got a question
regarding the storage of the

603
00:31:41,710 --> 00:31:43,730
identity in the keychain.

604
00:31:43,730 --> 00:31:47,240
Sometimes, I found on several
apps, that you need to store a

605
00:31:47,240 --> 00:31:49,040
different type of security.

606
00:31:49,040 --> 00:31:50,550
Like, always available,
only when

607
00:31:50,550 --> 00:31:52,370
devices is first unlocked.

608
00:31:52,370 --> 00:31:54,110
Can you comment a little
bit on that one

609
00:31:54,110 --> 00:31:55,260
and how it will work?

610
00:31:55,260 --> 00:31:57,670
Especially in the case when
you have, let's say, two

611
00:31:57,670 --> 00:32:01,010
iPhone devices that are using
Google Sign-In, and they're

612
00:32:01,010 --> 00:32:04,355
trying to exchange information
with the app is backgrounded.

613
00:32:04,355 --> 00:32:06,910

614
00:32:06,910 --> 00:32:08,960
XIANGTIAN DAI: Yes.

615
00:32:08,960 --> 00:32:11,690
Actually, when user successfully
signed in, we

616
00:32:11,690 --> 00:32:14,600
store the user's credential in
the private keychain, it's

617
00:32:14,600 --> 00:32:16,830
actually private to your app.

618
00:32:16,830 --> 00:32:21,240
So each app will hold its own
storage of user's credentials.

619
00:32:21,240 --> 00:32:24,710
So we don't have sharing
between apps.

620
00:32:24,710 --> 00:32:25,650
AUDIENCE: OK.

621
00:32:25,650 --> 00:32:30,350
But it's more regardless to
there's an attribute for that

622
00:32:30,350 --> 00:32:31,270
keychain [? attribute ?]

623
00:32:31,270 --> 00:32:32,330
that's been written.

624
00:32:32,330 --> 00:32:36,710
So if my application is
backgrounded, and it's waking

625
00:32:36,710 --> 00:32:41,200
up by a service like Bluetooth
[? profile ?] connection, I

626
00:32:41,200 --> 00:32:44,945
won't be able to get
the credential.

627
00:32:44,945 --> 00:32:46,585
So that will bubble up errors.

628
00:32:46,585 --> 00:32:50,280
So I was wondering if there
is a solution for that.

629
00:32:50,280 --> 00:32:54,480
XIANGTIAN DAI: Well, if we
cannot get the keychain, and

630
00:32:54,480 --> 00:32:57,110
you try to authenticate,
we'll always invoke the

631
00:32:57,110 --> 00:32:59,240
authentication flow again.

632
00:32:59,240 --> 00:33:03,300
It's just an optional
optimization thing, that we

633
00:33:03,300 --> 00:33:07,500
try to save you the time by
giving them the choice not to

634
00:33:07,500 --> 00:33:08,600
type the password again.

635
00:33:08,600 --> 00:33:11,460
Actually, giving you, as
developer, choice to use this

636
00:33:11,460 --> 00:33:12,410
functionality.

637
00:33:12,410 --> 00:33:15,240
So if it's not available, then,
well, we just don't have

638
00:33:15,240 --> 00:33:17,404
this functionality, and users
have to sign in again.

639
00:33:17,404 --> 00:33:17,868
AUDIENCE: OK.

640
00:33:17,868 --> 00:33:19,724
Thanks.

641
00:33:19,724 --> 00:33:21,120
AUDIENCE: Hi.

642
00:33:21,120 --> 00:33:25,100
I have a question about the
Google Disconnect and the

643
00:33:25,100 --> 00:33:29,010
deleting of data that you've
gathered from their profile.

644
00:33:29,010 --> 00:33:30,610
So here's the hypothetical
scenario.

645
00:33:30,610 --> 00:33:36,900
Say I've implemented a sign-in
where I've used some of the

646
00:33:36,900 --> 00:33:41,640
Google+ profile information to
assist a registration to an

647
00:33:41,640 --> 00:33:45,205
account of my own, of
my application.

648
00:33:45,205 --> 00:33:47,750
And say I pull up an email
address, and I've gotten

649
00:33:47,750 --> 00:33:51,580
permission to gather email
address and then have asked

650
00:33:51,580 --> 00:33:54,760
somebody to enter in their own
password to create their own

651
00:33:54,760 --> 00:33:57,110
account on my application.

652
00:33:57,110 --> 00:34:00,700
Now, if somebody then
disconnects the app, and I

653
00:34:00,700 --> 00:34:04,160
have gathered that email
information to seed my

654
00:34:04,160 --> 00:34:09,119
registration, must I also delete
that email address?

655
00:34:09,119 --> 00:34:15,310
Or does that email address
become my own data?

656
00:34:15,310 --> 00:34:17,760
SILVANO LUCIANI: So if you
got the address from the

657
00:34:17,760 --> 00:34:19,960
Google+ API, yeah.

658
00:34:19,960 --> 00:34:23,969
Unless there's some law or
regulation that's asking you

659
00:34:23,969 --> 00:34:27,780
to keep the email address for
any reason, then the answer is

660
00:34:27,780 --> 00:34:31,974
yes, from the Google+ API.

661
00:34:31,974 --> 00:34:33,754
AUDIENCE: [INAUDIBLE].

662
00:34:33,754 --> 00:34:34,360
SILVANO LUCIANI: Oh, OK.

663
00:34:34,360 --> 00:34:35,610
Maybe I'm wrong.

664
00:34:35,610 --> 00:34:37,750

665
00:34:37,750 --> 00:34:38,010
AUDIENCE: Hi--

666
00:34:38,010 --> 00:34:39,320
SILVANO LUCIANI: But that's
a different API.

667
00:34:39,320 --> 00:34:43,710
AUDIENCE: If you presented a
form for the user, and you

668
00:34:43,710 --> 00:34:46,500
pre-filled it, and they have
entered that, then they're

669
00:34:46,500 --> 00:34:48,050
giving that information
to you.

670
00:34:48,050 --> 00:34:50,219
So that's separate, necessarily,
from the

671
00:34:50,219 --> 00:34:51,340
information that's
coming back.

672
00:34:51,340 --> 00:34:53,210
So that's going to be covered
by your own terms.

673
00:34:53,210 --> 00:34:54,400
So you wouldn't necessarily
have to

674
00:34:54,400 --> 00:34:56,180
delete that stuff, then.

675
00:34:56,180 --> 00:34:57,130
AUDIENCE: OK.

676
00:34:57,130 --> 00:34:59,510
Thank you.

677
00:34:59,510 --> 00:34:59,660
SILVANO LUCIANI: Yeah.

678
00:34:59,660 --> 00:35:00,890
So it's another thing.

679
00:35:00,890 --> 00:35:03,650
It's another way of getting the
email address, which is

680
00:35:03,650 --> 00:35:06,590
using another scope,
userinfo.email.

681
00:35:06,590 --> 00:35:10,170
In that case, it doesn't come
from the Google+ API, so you

682
00:35:10,170 --> 00:35:11,165
can keep it.

683
00:35:11,165 --> 00:35:14,870
AUDIENCE: Oh, if I added it
as one of the scope--

684
00:35:14,870 --> 00:35:15,830
SILVANO LUCIANI: Yeah.

685
00:35:15,830 --> 00:35:18,520
It's an additional scope, and
it will be shown in the

686
00:35:18,520 --> 00:35:19,340
consent dialog.

687
00:35:19,340 --> 00:35:21,960
So you would see an additional
line, which would say, this

688
00:35:21,960 --> 00:35:23,700
app wants to know your
email address.

689
00:35:23,700 --> 00:35:24,510
AUDIENCE: OK.

690
00:35:24,510 --> 00:35:26,395
SILVANO LUCIANI: And that will
be shown to the user.

691
00:35:26,395 --> 00:35:26,790
AUDIENCE: Right.

692
00:35:26,790 --> 00:35:27,580
OK.

693
00:35:27,580 --> 00:35:28,830
Thank you.

694
00:35:28,830 --> 00:35:32,750

695
00:35:32,750 --> 00:35:34,463
SILVANO LUCIANI: I
think that's it.

696
00:35:34,463 --> 00:35:35,170
Thanks.

697
00:35:35,170 --> 00:35:35,560
XIANGTIAN DAI: Thank you.

698
00:35:35,560 --> 00:35:36,050
Thank you.

699
00:35:36,050 --> 00:35:37,550
[APPLAUSE]

700
00:35:37,550 --> 00:35:39,880

