1
00:00:00,000 --> 00:01:22,999
[MUSIC PLAYING]

2
00:01:22,999 --> 00:01:36,550

3
00:01:36,550 --> 00:01:37,150
CHRIS WILSON: Hi.

4
00:01:37,150 --> 00:01:38,030
I'm Chris Wilson.

5
00:01:38,030 --> 00:01:40,670
I'm a Developer Advocate
on the Chrome team.

6
00:01:40,670 --> 00:01:42,065
JAN LINDEN: And I'm
Jan Linden.

7
00:01:42,065 --> 00:01:44,620
I'm a Product Manager
on the Chrome team.

8
00:01:44,620 --> 00:01:47,230
CHRIS WILSON: And we're here
to update you with where we

9
00:01:47,230 --> 00:01:49,380
are with Web Audio and some of
the exciting things that have

10
00:01:49,380 --> 00:01:52,590
been happening there lately.

11
00:01:52,590 --> 00:01:55,330
I wanted to start by showing
a few demos that I've been

12
00:01:55,330 --> 00:01:58,300
building over the past few
months and we'll get into some

13
00:01:58,300 --> 00:01:59,910
of the new features
from there.

14
00:01:59,910 --> 00:02:03,200
So let's go take a look
at my computer here.

15
00:02:03,200 --> 00:02:06,780
And you can see I have
this web page up.

16
00:02:06,780 --> 00:02:08,030
It's webaudiodemos.appspot.com.

17
00:02:08,030 --> 00:02:09,949

18
00:02:09,949 --> 00:02:11,610
This is kind of where
I dump everything.

19
00:02:11,610 --> 00:02:14,900
So it doesn't mean it's polished
or finished or great,

20
00:02:14,900 --> 00:02:17,400
but it's usually pretty
interesting at least.

21
00:02:17,400 --> 00:02:20,490
And probably the most exciting
thing since the last time we

22
00:02:20,490 --> 00:02:24,390
talked, back in August, was
we have live input now.

23
00:02:24,390 --> 00:02:28,490
Like we can get a live audio
input into the web platform.

24
00:02:28,490 --> 00:02:36,050
So you may remember I did this
net little Vocoder application

25
00:02:36,050 --> 00:02:40,620
that takes a sound, takes a
voice or any other sound, and

26
00:02:40,620 --> 00:02:41,670
Vocodes it.

27
00:02:41,670 --> 00:02:44,270
So you should be hearing,
hopefully, some--

28
00:02:44,270 --> 00:02:45,431
[COMPUTERIZED VOICE]

29
00:02:45,431 --> 00:02:47,160
CHRIS WILSON: There we go.

30
00:02:47,160 --> 00:02:51,890
And I built this back for Google
I/O before we had live

31
00:02:51,890 --> 00:02:52,850
audio input.

32
00:02:52,850 --> 00:02:55,620
But the process it's going
through, this Vocoding process

33
00:02:55,620 --> 00:02:58,710
of analyzing frequency bands
and applying those to a

34
00:02:58,710 --> 00:03:02,910
different sound over time, it
actually works in real time.

35
00:03:02,910 --> 00:03:04,520
All of this is happening
in real time.

36
00:03:04,520 --> 00:03:08,120
So when we finally got live
input working, it actually

37
00:03:08,120 --> 00:03:11,740
took me all of about half an
hour to get it up and running

38
00:03:11,740 --> 00:03:13,670
on the Vocoder.

39
00:03:13,670 --> 00:03:16,630
I just had to put in a little
button to turn it on.

40
00:03:16,630 --> 00:03:19,040
And of course, we have to ask
if it's OK if we use your

41
00:03:19,040 --> 00:03:21,770
microphone because we don't want
people spying on you or

42
00:03:21,770 --> 00:03:23,070
listening in on you.

43
00:03:23,070 --> 00:03:26,650
But once you do that, you can
actually hear that I'm talking

44
00:03:26,650 --> 00:03:28,090
into this and--

45
00:03:28,090 --> 00:03:29,000
let's crank the gain up.

46
00:03:29,000 --> 00:03:30,720
It's a little weak here.

47
00:03:30,720 --> 00:03:31,480
There we go.

48
00:03:31,480 --> 00:03:35,180
And now, I can just give my
entire talk in the Vocoder for

49
00:03:35,180 --> 00:03:36,410
the rest of the time.

50
00:03:36,410 --> 00:03:37,580
And mess around with
the pitch.

51
00:03:37,580 --> 00:03:37,930
JAN LINDEN: Please don't.

52
00:03:37,930 --> 00:03:39,370
CHRIS WILSON: Oh, OK.

53
00:03:39,370 --> 00:03:39,850
All right.

54
00:03:39,850 --> 00:03:44,620
I've been told that's not a good
idea, so we'll skip that.

55
00:03:44,620 --> 00:03:47,610
But kind of neat for the Vocoder
but this also means

56
00:03:47,610 --> 00:03:50,780
it's quite easy to build
other applications.

57
00:03:50,780 --> 00:03:54,480
The next thing that I did was
immediately took a bunch of

58
00:03:54,480 --> 00:03:57,730
the effects that we'd been
talking about, just things

59
00:03:57,730 --> 00:04:01,671
like delay and reverb and
that sort of thing.

60
00:04:01,671 --> 00:04:04,660
And made an application that
lets you switch between them

61
00:04:04,660 --> 00:04:06,740
so you can hear what
they sound like.

62
00:04:06,740 --> 00:04:10,148
You can apply different
effects.

63
00:04:10,148 --> 00:04:13,040
It's a little zoomed in here.

64
00:04:13,040 --> 00:04:15,370
And this also meant that I could
start playing with more

65
00:04:15,370 --> 00:04:18,950
complex effects, things like
flanging or chorusing.

66
00:04:18,950 --> 00:04:21,990
And these effects actually take
a fair amount of plugging

67
00:04:21,990 --> 00:04:24,780
together of audio nodes
and doing some

68
00:04:24,780 --> 00:04:28,140
tricks with audio params.

69
00:04:28,140 --> 00:04:30,720
And there's also my personal
favorite, the octave doubler

70
00:04:30,720 --> 00:04:34,310
effect where you can
hear a sub-octave.

71
00:04:34,310 --> 00:04:38,168
And which is an effect Chris
Rogers developed.

72
00:04:38,168 --> 00:04:42,555
[COMPUTERIZED VOICE]

73
00:04:42,555 --> 00:04:45,680
CHRIS WILSON: But this also
means you can do things like

74
00:04:45,680 --> 00:04:47,250
audio recording directly.

75
00:04:47,250 --> 00:04:49,670
So I threw this app together.

76
00:04:49,670 --> 00:04:53,620
All it does is show a frequency
analysis of the

77
00:04:53,620 --> 00:04:55,030
current audio input.

78
00:04:55,030 --> 00:04:56,980
But at any point in time,
I can just say, I

79
00:04:56,980 --> 00:04:57,920
want to start recording.

80
00:04:57,920 --> 00:05:01,780
So I click Record and I get
a little red button.

81
00:05:01,780 --> 00:05:03,990
And then when I'm done
recording, I can see a

82
00:05:03,990 --> 00:05:05,300
waveform analysis.

83
00:05:05,300 --> 00:05:08,560
And I can download it to my
machine immediately and then I

84
00:05:08,560 --> 00:05:11,300
have a wave file.

85
00:05:11,300 --> 00:05:12,730
I can play back the wave file--

86
00:05:12,730 --> 00:05:13,110
Recording.

87
00:05:13,110 --> 00:05:15,490
So I click record
and I get a--

88
00:05:15,490 --> 00:05:18,700
and you can tell it's
recorded the bit of

89
00:05:18,700 --> 00:05:20,420
sound that I had there.

90
00:05:20,420 --> 00:05:22,770
This is a very, very small
chunk of code.

91
00:05:22,770 --> 00:05:25,140
All these, by the way, are up
on GitHub so you can go grab

92
00:05:25,140 --> 00:05:26,880
the code and play around with
them and look at them.

93
00:05:26,880 --> 00:05:31,520
JAN LINDEN: So Chris, can you
explain how you record to disc

94
00:05:31,520 --> 00:05:33,266
because that's actually
something that people have a

95
00:05:33,266 --> 00:05:33,890
lot of questions about--

96
00:05:33,890 --> 00:05:34,590
CHRIS WILSON: Yes it is.

97
00:05:34,590 --> 00:05:35,650
JAN LINDEN: --how to do that.

98
00:05:35,650 --> 00:05:38,080
CHRIS WILSON: So this is an
interesting one because this

99
00:05:38,080 --> 00:05:40,780
is actually taking several
different pieces of code,

100
00:05:40,780 --> 00:05:42,380
several different library
functions and

101
00:05:42,380 --> 00:05:43,870
plugging them together.

102
00:05:43,870 --> 00:05:46,550
The first one, of course, is
just grabbing user media.

103
00:05:46,550 --> 00:05:50,400
So getting a live input and
pulling it into an audio node,

104
00:05:50,400 --> 00:05:52,860
doing a frequency
analyzer on it.

105
00:05:52,860 --> 00:05:57,230
So I draw my own little
frequency analyzer at the top

106
00:05:57,230 --> 00:06:00,130
of the screen that I pulled
from some other code.

107
00:06:00,130 --> 00:06:02,650
I wrote a library that does the
audio buffer display at

108
00:06:02,650 --> 00:06:04,040
the bottom.

109
00:06:04,040 --> 00:06:06,870
But the real time recording part
is actually done using a

110
00:06:06,870 --> 00:06:08,290
JavaScript node.

111
00:06:08,290 --> 00:06:10,260
And the JavaScript node
basically just sits there and

112
00:06:10,260 --> 00:06:13,050
collects buffers and stacks
them together.

113
00:06:13,050 --> 00:06:15,920
And then when I say that I want
to download it, there's

114
00:06:15,920 --> 00:06:19,300
actually a function in this
library that will encode that.

115
00:06:19,300 --> 00:06:21,010
This is a library called
Recorderjs

116
00:06:21,010 --> 00:06:21,920
that's also up on GitHub.

117
00:06:21,920 --> 00:06:26,420
It's pointed to from my
repository for this app too.

118
00:06:26,420 --> 00:06:28,480
So you can go find it
and play with it.

119
00:06:28,480 --> 00:06:31,920
It only encodes into
wave file format.

120
00:06:31,920 --> 00:06:33,540
It doesn't do compression.

121
00:06:33,540 --> 00:06:37,020
It doesn't try to do bit
reduction or anything fancy to

122
00:06:37,020 --> 00:06:41,260
try to get it into an MP3 file
or an Ogg Vorbis format or

123
00:06:41,260 --> 00:06:44,010
something and do a little
bit better than that.

124
00:06:44,010 --> 00:06:46,320
That will come, I'm sure, but
it's going to take a little

125
00:06:46,320 --> 00:06:48,925
bit of time to do good encoding
in JavaScript.

126
00:06:48,925 --> 00:06:49,220
JAN LINDEN: Yeah.

127
00:06:49,220 --> 00:06:50,340
We can actually--

128
00:06:50,340 --> 00:06:52,923
we'll talk about that a little
bit later when we come to some

129
00:06:52,923 --> 00:06:55,070
of the new stuff coming
in web audio API.

130
00:06:55,070 --> 00:06:56,855
But when offline mode
is coming that

131
00:06:56,855 --> 00:06:57,980
will help in order--

132
00:06:57,980 --> 00:06:58,340
CHRIS WILSON: Absolutely.

133
00:06:58,340 --> 00:06:58,700
JAN LINDEN: --to do
these things.

134
00:06:58,700 --> 00:06:59,240
CHRIS WILSON: Absolutely.

135
00:06:59,240 --> 00:06:59,760
Yeah.

136
00:06:59,760 --> 00:07:02,470
This was an interesting
experiment, mostly because I

137
00:07:02,470 --> 00:07:05,540
got to play around with moving
audio buffers around and

138
00:07:05,540 --> 00:07:08,250
actually grabbing the bits out
of them and sticking them

139
00:07:08,250 --> 00:07:11,260
together and that sort of thing,
which I hadn't really

140
00:07:11,260 --> 00:07:14,050
played with much before.

141
00:07:14,050 --> 00:07:16,710
And let's see.

142
00:07:16,710 --> 00:07:21,460
That kind of gives you a good
idea of what you can do with

143
00:07:21,460 --> 00:07:22,170
live input.

144
00:07:22,170 --> 00:07:24,990
The only other one that I
added live input to--

145
00:07:24,990 --> 00:07:26,380
and this was actually
the first one-- is

146
00:07:26,380 --> 00:07:27,630
apparently not there.

147
00:07:27,630 --> 00:07:29,690
Never mind.

148
00:07:29,690 --> 00:07:32,380
So I'll fix that after the show
and you can check out the

149
00:07:32,380 --> 00:07:33,160
pitch detection.

150
00:07:33,160 --> 00:07:38,660
But basically just doing
analysis on an input and I

151
00:07:38,660 --> 00:07:42,110
actually used a real time
analyzer to do that instead of

152
00:07:42,110 --> 00:07:43,780
a JavaScript node.

153
00:07:43,780 --> 00:07:46,840
Although, it's a very, very
naive pitch detector.

154
00:07:46,840 --> 00:07:49,080
It's not something you
should really use.

155
00:07:49,080 --> 00:07:52,780
It can barely tune my
guitar into tune.

156
00:07:52,780 --> 00:07:54,530
Although, it does pretty
well with whistling,

157
00:07:54,530 --> 00:07:55,830
which was kind of cool.

158
00:07:55,830 --> 00:07:58,610
Apparently, I picked the right
test sample the first time

159
00:07:58,610 --> 00:08:01,220
when I wrote it.

160
00:08:01,220 --> 00:08:04,620
But I wanted to talk too, in
general today, just about some

161
00:08:04,620 --> 00:08:07,980
of the more advanced uses of web
audio that are starting to

162
00:08:07,980 --> 00:08:11,090
solidify now that we've got a
pretty mature implementation.

163
00:08:11,090 --> 00:08:14,930
And we've been working through
a lot of the issues.

164
00:08:14,930 --> 00:08:18,620
For example, the chorus and
flanging effect that I have in

165
00:08:18,620 --> 00:08:19,870
the live input demo.

166
00:08:19,870 --> 00:08:23,860
I originally wrote the chorus
and flange for Google I/O, and

167
00:08:23,860 --> 00:08:26,550
then I had to pull it out at the
last minute because I was

168
00:08:26,550 --> 00:08:29,780
sitting there like a week and
a half before the show

169
00:08:29,780 --> 00:08:32,559
wondering why my code wasn't
working, why I wasn't getting

170
00:08:32,559 --> 00:08:33,490
a chorusing effect.

171
00:08:33,490 --> 00:08:36,580
And finally, I went to Chris and
asked him to take a look

172
00:08:36,580 --> 00:08:40,400
at my code and he dug through
it and he was like, huh, oh

173
00:08:40,400 --> 00:08:41,650
yeah, we have a bug here.

174
00:08:41,650 --> 00:08:44,280

175
00:08:44,280 --> 00:08:47,880
In the interim, it got fixed
so my code just kind of

176
00:08:47,880 --> 00:08:50,860
started working and I had
another input effect.

177
00:08:50,860 --> 00:08:53,040
But when you start plugging all
of these things together,

178
00:08:53,040 --> 00:08:56,670
you can see sort of the power
of what you can do with the

179
00:08:56,670 --> 00:08:57,920
Web Audio API.

180
00:08:57,920 --> 00:09:01,090
And I started saying, one of
the things that I really

181
00:09:01,090 --> 00:09:04,960
wanted to-- the reason that I
really got into Web Audio was

182
00:09:04,960 --> 00:09:07,740
I was interested in
synthesizers.

183
00:09:07,740 --> 00:09:10,190
I've always had a passion
for synthesizers.

184
00:09:10,190 --> 00:09:11,865
And so I started building
a synthesizer.

185
00:09:11,865 --> 00:09:14,790

186
00:09:14,790 --> 00:09:18,030
This is kind of loosely based
on the Moog Prodigy

187
00:09:18,030 --> 00:09:19,920
synthesizer architecture.

188
00:09:19,920 --> 00:09:23,140
It's not like a direct copy.

189
00:09:23,140 --> 00:09:24,740
It's not a re-creation.

190
00:09:24,740 --> 00:09:28,090
So don't rip on it too much
from that perspective.

191
00:09:28,090 --> 00:09:31,697
But I wanted to give something
where you could actually play

192
00:09:31,697 --> 00:09:35,550
notes in it and you could
control a bunch of different

193
00:09:35,550 --> 00:09:37,040
parameters.

194
00:09:37,040 --> 00:09:38,826
So you can [INAUDIBLE]

195
00:09:38,826 --> 00:09:41,380
filter and cut off and
things like that.

196
00:09:41,380 --> 00:09:44,590
And all of the modulation
effects and those sorts of

197
00:09:44,590 --> 00:09:45,990
things work.

198
00:09:45,990 --> 00:09:48,365
And I actually had a ton
of fun building this.

199
00:09:48,365 --> 00:09:50,620
It took me about a week
from beginning to end

200
00:09:50,620 --> 00:09:52,040
to build this sample.

201
00:09:52,040 --> 00:09:56,260
And the interesting bit to me
was most of the time, actually

202
00:09:56,260 --> 00:10:00,930
like 90% of the work that I did
here, 80-90%, was all user

203
00:10:00,930 --> 00:10:02,130
experience.

204
00:10:02,130 --> 00:10:04,740
The Web Audio part was actually
very, very small.

205
00:10:04,740 --> 00:10:07,890
It was a small chunk of figuring
out how to do a

206
00:10:07,890 --> 00:10:10,300
volume envelope the right way
and figuring out how to

207
00:10:10,300 --> 00:10:12,870
connect the modulators
and things like that.

208
00:10:12,870 --> 00:10:15,500
JAN LINDEN: Did you have to make
any JavaScript nodes for

209
00:10:15,500 --> 00:10:16,150
any special stuff?

210
00:10:16,150 --> 00:10:17,340
CHRIS WILSON: I did
not actually.

211
00:10:17,340 --> 00:10:18,655
JAN LINDEN: You can do
everything in Web Audio

212
00:10:18,655 --> 00:10:18,930
[INAUDIBLE]?

213
00:10:18,930 --> 00:10:21,450
CHRIS WILSON: You know, I think
the only application

214
00:10:21,450 --> 00:10:24,140
that I built thus far that I had
to use a JavaScript node

215
00:10:24,140 --> 00:10:28,350
for was the audio recorder
because it really needs every

216
00:10:28,350 --> 00:10:30,630
bit, like it needs every
piece of information

217
00:10:30,630 --> 00:10:32,250
that goes past it.

218
00:10:32,250 --> 00:10:35,340
The pitch detector, really if
I wanted to do super high

219
00:10:35,340 --> 00:10:38,240
quality pitch detection, I
might switch over to a

220
00:10:38,240 --> 00:10:40,410
JavaScript processor.

221
00:10:40,410 --> 00:10:42,930
But there is some latency
because going into the

222
00:10:42,930 --> 00:10:48,520
JavaScript process is going
to introduce latency and

223
00:10:48,520 --> 00:10:50,350
imprecision.

224
00:10:50,350 --> 00:10:53,660
But I thought this
was a ton of fun.

225
00:10:53,660 --> 00:10:56,400
But of course, the interesting
bit of Web Audio is how

226
00:10:56,400 --> 00:10:58,410
programmable it is, how much
you can play with it.

227
00:10:58,410 --> 00:11:02,100
And I wanted to point out one
thing that I did was, after I

228
00:11:02,100 --> 00:11:05,510
built this, I realized I spent
all this time building the

229
00:11:05,510 --> 00:11:09,750
user experience and all these
knobs are just jQuery knob UI.

230
00:11:09,750 --> 00:11:12,600
I didn't like hand code all
of the UI and you can tell

231
00:11:12,600 --> 00:11:17,030
there's still some little bits
that don't look great.

232
00:11:17,030 --> 00:11:19,220
But I realized that one of the
parts I spent a bunch of time

233
00:11:19,220 --> 00:11:21,590
on was just a voice architecture
for a synthesizer

234
00:11:21,590 --> 00:11:23,740
and building the keyboard
and making it so you

235
00:11:23,740 --> 00:11:25,600
can play it on screen.

236
00:11:25,600 --> 00:11:28,920
You can play it using the
computer keyboard.

237
00:11:28,920 --> 00:11:31,605
I have it plugged in with the
MIDI polyfill so I can play it

238
00:11:31,605 --> 00:11:34,420
with a little keyboard
that I have standing

239
00:11:34,420 --> 00:11:35,295
over to the side here.

240
00:11:35,295 --> 00:11:37,260
It's off-screen.

241
00:11:37,260 --> 00:11:40,880
And then I can actually play it
and it sounds more like I'm

242
00:11:40,880 --> 00:11:42,500
actually playing music.

243
00:11:42,500 --> 00:11:46,930
But I wrapped all that code
together and I have the super

244
00:11:46,930 --> 00:11:50,530
simple version of this, the
template for a synthesizer,

245
00:11:50,530 --> 00:11:52,790
which you'll notice all
of the UI is missing.

246
00:11:52,790 --> 00:11:56,750
And you can still play
it the same way.

247
00:11:56,750 --> 00:11:59,810
But the interesting bit about
this one, is you can go in and

248
00:11:59,810 --> 00:12:01,610
grab the code.

249
00:12:01,610 --> 00:12:07,100
And it just has a voice object
type and when a voice is

250
00:12:07,100 --> 00:12:11,560
created, when I call new voice
every time, a new note gets

251
00:12:11,560 --> 00:12:17,310
played, then it pulls in and we
have code right here that

252
00:12:17,310 --> 00:12:20,130
can figure out what the
frequency needs to be.

253
00:12:20,130 --> 00:12:20,860
JAN LINDEN: Can you bump
the font up just one?

254
00:12:20,860 --> 00:12:22,336
CHRIS WILSON: Sure.

255
00:12:22,336 --> 00:12:24,440
Let me pump it way up.

256
00:12:24,440 --> 00:12:27,020
Obviously, I was in deep
programming mode yesterday and

257
00:12:27,020 --> 00:12:28,960
had it down a little bit.

258
00:12:28,960 --> 00:12:32,430
You can grab the frequency for
the note and then you just

259
00:12:32,430 --> 00:12:34,070
create an oscillator
in this case.

260
00:12:34,070 --> 00:12:37,090
Or maybe you want to grab an
audio buffer and figure out

261
00:12:37,090 --> 00:12:39,660
what playback rate
to set for it.

262
00:12:39,660 --> 00:12:42,940
But in this particular case, all
that I have is a sine wave

263
00:12:42,940 --> 00:12:47,010
oscillator and then I create a
pretty standard attack, decay,

264
00:12:47,010 --> 00:12:49,650
sustain, release envelope
for it.

265
00:12:49,650 --> 00:12:51,300
And then at the end,
I call note on.

266
00:12:51,300 --> 00:12:52,590
And that's it.

267
00:12:52,590 --> 00:12:55,190
There's no other processing in
this particular synthesizer.

268
00:12:55,190 --> 00:12:57,180
It's a pretty straightforward
one.

269
00:12:57,180 --> 00:13:00,910
But if I wanted to make this a
sample playback synth instead

270
00:13:00,910 --> 00:13:04,060
of creating an oscillator, I'd
create an audio buffer source

271
00:13:04,060 --> 00:13:06,930
node connected to an audio
buffer, figure out what the

272
00:13:06,930 --> 00:13:09,560
right playback rate was to get
it to play back at the right

273
00:13:09,560 --> 00:13:12,770
frequency, and you're
off and running.

274
00:13:12,770 --> 00:13:16,510
So you can grab this synth
template, plug your own code

275
00:13:16,510 --> 00:13:20,570
into the note on and note off
parts, and really easily get

276
00:13:20,570 --> 00:13:22,330
up and running and have
something that's playable and

277
00:13:22,330 --> 00:13:27,120
usable without having to go
build the actual onscreen code

278
00:13:27,120 --> 00:13:28,472
and stuff like that.

279
00:13:28,472 --> 00:13:28,910
JAN LINDEN: Wow.

280
00:13:28,910 --> 00:13:30,490
Nice.

281
00:13:30,490 --> 00:13:33,090
CHRIS WILSON: And of course, the
other bit that I probably

282
00:13:33,090 --> 00:13:35,565
ought to mention is I've been
working on making sure that

283
00:13:35,565 --> 00:13:40,090
that works well on
iOS as well.

284
00:13:40,090 --> 00:13:41,670
I've got my iPad here.

285
00:13:41,670 --> 00:13:47,640
I have the same page up and
running and you can probably

286
00:13:47,640 --> 00:13:48,030
hear it now.

287
00:13:48,030 --> 00:13:50,200
It plays the same way.

288
00:13:50,200 --> 00:13:54,750
So I put touch support into it
as well so you can get some

289
00:13:54,750 --> 00:13:59,280
effects there, get some
additional device support.

290
00:13:59,280 --> 00:14:01,750
In fact, I think one of the
interesting things to me too

291
00:14:01,750 --> 00:14:06,620
is seeing how touch and mobile
devices is going to affect Web

292
00:14:06,620 --> 00:14:08,330
Audio as it rolls into there.

293
00:14:08,330 --> 00:14:10,910
The iOS implementation
is really good.

294
00:14:10,910 --> 00:14:14,060
It has some parts of it that are
still pretty challenging.

295
00:14:14,060 --> 00:14:17,150
I was talking with Jan right
before this about convolver

296
00:14:17,150 --> 00:14:20,900
node is still pretty
iffy on iOS.

297
00:14:20,900 --> 00:14:22,700
I ran into some problems because
I was using it for

298
00:14:22,700 --> 00:14:24,910
reverb on the synthesizer.

299
00:14:24,910 --> 00:14:27,070
But a lot of other apps are
really easy to build, and the

300
00:14:27,070 --> 00:14:28,610
responsiveness of
having a touch

301
00:14:28,610 --> 00:14:30,190
interface is pretty cool.

302
00:14:30,190 --> 00:14:33,970
I have one app in here that
is called Touchpad.

303
00:14:33,970 --> 00:14:40,300
It's really kind of like my
first mobile audio demo.

304
00:14:40,300 --> 00:14:44,190
All it does is it plays a sound
when you touch and as

305
00:14:44,190 --> 00:14:46,220
you move around, it changes
filter parameters.

306
00:14:46,220 --> 00:14:48,150
So it changes the filter
cutoff frequencies.

307
00:14:48,150 --> 00:14:50,770
You drag down and it changes
the Q values.

308
00:14:50,770 --> 00:14:52,790
You drag across.

309
00:14:52,790 --> 00:14:56,850
So you can kind of close the
filter and open it back up.

310
00:14:56,850 --> 00:14:58,520
And you can whirl around.

311
00:14:58,520 --> 00:15:00,540
I'm just going to carry
this around with me

312
00:15:00,540 --> 00:15:02,500
when I go out at night.

313
00:15:02,500 --> 00:15:02,540
JAN LINDEN: [? You can annoy ?]

314
00:15:02,540 --> 00:15:03,180
[? anyone. ?]

315
00:15:03,180 --> 00:15:03,880
CHRIS WILSON: Soundtrack.

316
00:15:03,880 --> 00:15:04,500
Soundtrack.

317
00:15:04,500 --> 00:15:04,810
Yeah.

318
00:15:04,810 --> 00:15:05,970
JAN LINDEN: Excellent.

319
00:15:05,970 --> 00:15:07,010
CHRIS WILSON: So Yeah.

320
00:15:07,010 --> 00:15:10,270
I think one of the great things
to me is we're really

321
00:15:10,270 --> 00:15:10,950
getting to the point--

322
00:15:10,950 --> 00:15:13,390
I've been seeing a lot of other
people's applications

323
00:15:13,390 --> 00:15:18,500
come out with Web Audio, in
Web Audio 2, and some

324
00:15:18,500 --> 00:15:20,890
interesting new things.

325
00:15:20,890 --> 00:15:24,970
There's like Pedalboard.js,
for example, that does a

326
00:15:24,970 --> 00:15:30,010
framework for building effects,
effects chains, and

327
00:15:30,010 --> 00:15:30,990
pedal boards, really.

328
00:15:30,990 --> 00:15:31,620
It's kind of cool.

329
00:15:31,620 --> 00:15:33,930
JAN LINDEN: So you can just
hook up your guitar and--

330
00:15:33,930 --> 00:15:35,740
CHRIS WILSON: You can hook
up your guitar and go.

331
00:15:35,740 --> 00:15:36,330
Yeah.

332
00:15:36,330 --> 00:15:39,870
I really should have brought my
guitar with me but then I'd

333
00:15:39,870 --> 00:15:42,470
have to play it on camera and
that would've been kind of

334
00:15:42,470 --> 00:15:45,080
embarrassing.

335
00:15:45,080 --> 00:15:47,186
But just plug in my guitar.

336
00:15:47,186 --> 00:15:48,740
I actually have a guitar--

337
00:15:48,740 --> 00:15:53,090
I used to have a guitar in my
office all the time and then I

338
00:15:53,090 --> 00:15:54,560
didn't for a long time.

339
00:15:54,560 --> 00:15:56,520
And now I've brought my electric
guitar into work and

340
00:15:56,520 --> 00:15:59,210
it sits there all the time, just
to plug into Web Audio

341
00:15:59,210 --> 00:16:00,470
and play around with it.

342
00:16:00,470 --> 00:16:02,550
Because sitting there and
playing through all of these

343
00:16:02,550 --> 00:16:07,280
live input effects with an
instrument is pretty cool,

344
00:16:07,280 --> 00:16:08,550
even cooler than doing
the voice and things.

345
00:16:08,550 --> 00:16:12,160
JAN LINDEN: We should maybe talk
a little bit about on the

346
00:16:12,160 --> 00:16:14,650
input on the latency
that you get.

347
00:16:14,650 --> 00:16:15,830
CHRIS WILSON: Definitely yes.

348
00:16:15,830 --> 00:16:16,410
Yes.

349
00:16:16,410 --> 00:16:21,320
So one of the things that has
really been a goal then for

350
00:16:21,320 --> 00:16:24,540
the whole time has been
super low latency.

351
00:16:24,540 --> 00:16:27,930
That was one of the things that
I know it was frustrating

352
00:16:27,930 --> 00:16:32,570
to me for a long time because I
really wanted live input but

353
00:16:32,570 --> 00:16:34,540
the engineering team, and
Chris in particular, was

354
00:16:34,540 --> 00:16:37,920
really passionate about having
super low latency, like

355
00:16:37,920 --> 00:16:41,890
musically useful audio input,
rather than just something

356
00:16:41,890 --> 00:16:45,780
that you can get audio input but
you might have a lag time

357
00:16:45,780 --> 00:16:50,610
of over 10 milliseconds or 20
milliseconds or things that

358
00:16:50,610 --> 00:16:52,870
aren't super useful when you're
trying to play a guitar

359
00:16:52,870 --> 00:16:53,440
through it.

360
00:16:53,440 --> 00:16:54,210
JAN LINDEN: Yeah.

361
00:16:54,210 --> 00:16:56,750
I actually did some measurements
recently and you

362
00:16:56,750 --> 00:17:00,620
can get down to five
milliseconds from microphone

363
00:17:00,620 --> 00:17:06,339
in to speaker out, with pretty
standard hardware.

364
00:17:06,339 --> 00:17:09,890
And if you just use your Mac
without any USB device or

365
00:17:09,890 --> 00:17:11,480
anything, you can--

366
00:17:11,480 --> 00:17:13,670
on my Mac, I got it to
nine milliseconds.

367
00:17:13,670 --> 00:17:15,220
CHRIS WILSON: That's
pretty good.

368
00:17:15,220 --> 00:17:16,280
JAN LINDEN: That's
very useful.

369
00:17:16,280 --> 00:17:18,460
I mean it's like having
a speaker nine

370
00:17:18,460 --> 00:17:19,650
feet away from you.

371
00:17:19,650 --> 00:17:20,280
CHRIS WILSON: Right.

372
00:17:20,280 --> 00:17:24,740
JAN LINDEN: That's
very manageable.

373
00:17:24,740 --> 00:17:29,720
CHRIS WILSON: It's really nice
to have such good feedback and

374
00:17:29,720 --> 00:17:33,340
such low latency and be able to
do something that's, like I

375
00:17:33,340 --> 00:17:36,160
said, musically useful.

376
00:17:36,160 --> 00:17:40,670
That's one of the exciting
things to me has been just

377
00:17:40,670 --> 00:17:44,380
working with such a low latency
API, although it ends

378
00:17:44,380 --> 00:17:47,110
up bringing up new challenges
too and you have to come up

379
00:17:47,110 --> 00:17:48,770
with new architectures.

380
00:17:48,770 --> 00:17:50,620
Like one of the things that I've
been talking with people

381
00:17:50,620 --> 00:17:54,040
a lot about lately has been
the concept of scheduling.

382
00:17:54,040 --> 00:17:58,190
And scheduling musical notes as
well as Web Audio and then,

383
00:17:58,190 --> 00:18:00,610
of course, web MIDI
events as well.

384
00:18:00,610 --> 00:18:05,580
And the idea of how you would go
about building a system so

385
00:18:05,580 --> 00:18:08,770
that you sort of schedule ahead
on the high precision

386
00:18:08,770 --> 00:18:12,200
timer because you don't have
events in the Web Audio space,

387
00:18:12,200 --> 00:18:14,220
in the Web Audio time
I should say.

388
00:18:14,220 --> 00:18:17,300
Like you can't say, call me back
at precisely this number

389
00:18:17,300 --> 00:18:20,810
of microseconds, basically,
because JavaScript doesn't

390
00:18:20,810 --> 00:18:23,620
have that kind of level of
precision in its eventing

391
00:18:23,620 --> 00:18:24,700
system either.

392
00:18:24,700 --> 00:18:26,630
So you have to sit there and
say, you know what, I'm going

393
00:18:26,630 --> 00:18:31,790
to set an interval timer and
every 30 milliseconds I'm

394
00:18:31,790 --> 00:18:34,760
going to call back, or even
less than that, every 15

395
00:18:34,760 --> 00:18:38,260
milliseconds, which JavaScript
can usually handle, I'm going

396
00:18:38,260 --> 00:18:42,310
to go play the next 20
milliseconds of events and set

397
00:18:42,310 --> 00:18:44,900
them up in the Web Audio
event queue, or

398
00:18:44,900 --> 00:18:47,570
the MIDI event queue.

399
00:18:47,570 --> 00:18:51,210
I think those sorts of
architectures are still coming

400
00:18:51,210 --> 00:18:53,530
and I'm working on a demo for
that but I don't quite

401
00:18:53,530 --> 00:18:56,060
have it done yet.

402
00:18:56,060 --> 00:18:59,040
JAN LINDEN: Since you mentioned
MIDI, I know another

403
00:18:59,040 --> 00:19:03,670
very passionate thing for you
is to get the APIs for that.

404
00:19:03,670 --> 00:19:04,430
CHRIS WILSON: Absolutely.

405
00:19:04,430 --> 00:19:05,360
Yes.

406
00:19:05,360 --> 00:19:09,920
Yeah, so MIDI is sort of the way
that you hook up musical

407
00:19:09,920 --> 00:19:11,690
instruments, controllers.

408
00:19:11,690 --> 00:19:13,310
I have a whole pile
of controllers

409
00:19:13,310 --> 00:19:14,220
on my desk at work.

410
00:19:14,220 --> 00:19:17,265
People always stop by and say,
what do you do here anyway?

411
00:19:17,265 --> 00:19:20,490
It's because I have all these
weird things sitting there.

412
00:19:20,490 --> 00:19:23,370
And it's also used for things
like lighting systems and

413
00:19:23,370 --> 00:19:24,400
other things as well.

414
00:19:24,400 --> 00:19:28,200
But it's not just I have this
professional synthesizer that

415
00:19:28,200 --> 00:19:29,940
I want to connect anymore.

416
00:19:29,940 --> 00:19:33,840
And to me, when I first started
looking at Web Audio

417
00:19:33,840 --> 00:19:36,780
here, the thing that immediately
was obvious to me

418
00:19:36,780 --> 00:19:38,630
was that it was super
powerful.

419
00:19:38,630 --> 00:19:42,220
You could create these really
rich musical applications

420
00:19:42,220 --> 00:19:45,780
except the inputs were still
like go click on something

421
00:19:45,780 --> 00:19:49,400
with a mouse or go drag
this slider and I was

422
00:19:49,400 --> 00:19:50,740
like, that's horrible.

423
00:19:50,740 --> 00:19:51,700
I can't stand it.

424
00:19:51,700 --> 00:19:55,540
I like having physical things to
touch and move around, and

425
00:19:55,540 --> 00:19:57,670
knobs and buttons and things.

426
00:19:57,670 --> 00:19:59,650
And MIDI is the way
to do that.

427
00:19:59,650 --> 00:20:02,950
So I immediately said, OK, how
do we go about adding MIDI to

428
00:20:02,950 --> 00:20:03,940
the web platform.

429
00:20:03,940 --> 00:20:07,990
And I became the co-editor
of the specification.

430
00:20:07,990 --> 00:20:09,840
We now are in our second
public draft.

431
00:20:09,840 --> 00:20:11,285
It's getting pretty stable.

432
00:20:11,285 --> 00:20:14,660
We've still got a few open
issues but we did bounce at

433
00:20:14,660 --> 00:20:16,530
zero issues for awhile there.

434
00:20:16,530 --> 00:20:21,610
And we're looking to get some
native implementation.

435
00:20:21,610 --> 00:20:25,230
But I also wrote a polyfill for
it that uses a plug-in on

436
00:20:25,230 --> 00:20:28,280
OS X and Windows.

437
00:20:28,280 --> 00:20:30,380
And the plug-in basically allows
you to include this

438
00:20:30,380 --> 00:20:33,690
JavaScript library and then just
act as if the web MIDI

439
00:20:33,690 --> 00:20:34,850
API is there.

440
00:20:34,850 --> 00:20:36,630
So you can listen
for MIDI events.

441
00:20:36,630 --> 00:20:40,680
You can grab on to different
devices, send MIDI outputs if

442
00:20:40,680 --> 00:20:42,940
you want, that sort of thing.

443
00:20:42,940 --> 00:20:47,810
So it really helps unlock the
power of Web Audio to me,

444
00:20:47,810 --> 00:20:49,610
particularly with things
like the synthesizer.

445
00:20:49,610 --> 00:20:53,440
I mean, it's really hard, even
with the computer keyboard,

446
00:20:53,440 --> 00:20:55,710
which is a physical button, to
play anything that's really

447
00:20:55,710 --> 00:20:56,790
expressive.

448
00:20:56,790 --> 00:21:00,570
But of course, I can play it
pretty expressively on my

449
00:21:00,570 --> 00:21:01,680
keyboard here.

450
00:21:01,680 --> 00:21:05,270
And because this was a
replication of an old analog

451
00:21:05,270 --> 00:21:08,120
synth, it didn't have a ton of
controllers or anything.

452
00:21:08,120 --> 00:21:12,120
I haven't yet done things like
velocity responsiveness and

453
00:21:12,120 --> 00:21:15,190
the controller responses
and that sort of thing.

454
00:21:15,190 --> 00:21:17,030
I have some of the
things hooked up.

455
00:21:17,030 --> 00:21:17,630
You could tell.

456
00:21:17,630 --> 00:21:19,450
You can play with the filters
in real time,

457
00:21:19,450 --> 00:21:20,700
that sort of thing.

458
00:21:20,700 --> 00:21:23,300

459
00:21:23,300 --> 00:21:27,120
Yeah so that's kind of the
lap around the newer

460
00:21:27,120 --> 00:21:28,000
stuff that we have.

461
00:21:28,000 --> 00:21:29,290
JAN LINDEN: So let's talk
a little bit about

462
00:21:29,290 --> 00:21:30,520
what's coming up next.

463
00:21:30,520 --> 00:21:31,440
CHRIS WILSON: Yeah.

464
00:21:31,440 --> 00:21:36,890
JAN LINDEN: So a few things I'm
aware of is the engineers

465
00:21:36,890 --> 00:21:41,710
are working on an offline mode,
which means that you can

466
00:21:41,710 --> 00:21:45,170
do processing not in real time,
faster than real time if

467
00:21:45,170 --> 00:21:47,460
you want to or sometimes slower
than real time if it's

468
00:21:47,460 --> 00:21:50,050
really complex.

469
00:21:50,050 --> 00:21:53,260
And that, as we mentioned, will
help you in doing, for

470
00:21:53,260 --> 00:21:56,500
example, encoding before
you dump something.

471
00:21:56,500 --> 00:21:57,220
CHRIS WILSON: Exactly.

472
00:21:57,220 --> 00:22:00,020
It's also nice for when you're
building digital audio

473
00:22:00,020 --> 00:22:03,660
workstation type software
because you can apply an

474
00:22:03,660 --> 00:22:06,970
effect and then just grab the
audio buffer if you want to

475
00:22:06,970 --> 00:22:09,468
save it and not have to try to
do everything in real time.

476
00:22:09,468 --> 00:22:10,902
JAN LINDEN: Yep.

477
00:22:10,902 --> 00:22:11,380
That's a nice one.

478
00:22:11,380 --> 00:22:14,540
CHRIS WILSON: I saw that there
had been a sort of trial

479
00:22:14,540 --> 00:22:17,200
implementation of that under
the covers in Chrome for

480
00:22:17,200 --> 00:22:21,280
awhile, but Chris added that to
the Web Audio specification

481
00:22:21,280 --> 00:22:23,990
too so you can read up on
how to do it and go

482
00:22:23,990 --> 00:22:25,280
play with it in Chrome.

483
00:22:25,280 --> 00:22:25,690
JAN LINDEN: Yeah.

484
00:22:25,690 --> 00:22:29,580
And there is a new spec
coming out pretty

485
00:22:29,580 --> 00:22:33,260
soon, I think as well.

486
00:22:33,260 --> 00:22:37,220
And then the other big thing and
the input is part of this,

487
00:22:37,220 --> 00:22:41,350
so input is done by hooking up
to the get user media, which

488
00:22:41,350 --> 00:22:45,720
is part of the WebRTC efforts,
and there is a lot of effort

489
00:22:45,720 --> 00:22:50,760
going on to hook up WebRTC and
Web Audio in other ways so you

490
00:22:50,760 --> 00:22:55,100
can actually take the input or
the output from a Web Audio

491
00:22:55,100 --> 00:23:00,142
and connect that to WebRTC and
then, for example, if you have

492
00:23:00,142 --> 00:23:02,920
a video conference going on,
then you can apply all these

493
00:23:02,920 --> 00:23:05,830
cool effects and then
send it over there.

494
00:23:05,830 --> 00:23:09,250
And likewise, the next step is
on the receiving side, then

495
00:23:09,250 --> 00:23:14,670
you can do the same thing or do
analysis or do spatial or

496
00:23:14,670 --> 00:23:17,900
whatever you want to do on
the receiving things.

497
00:23:17,900 --> 00:23:19,330
CHRIS WILSON: For a while, I've
wanted the ability to

498
00:23:19,330 --> 00:23:23,370
just hack into my Hangout and
apply Web Audio effects, if

499
00:23:23,370 --> 00:23:25,260
for no other reason than
taking that dynamics

500
00:23:25,260 --> 00:23:28,590
compressor and applying it to
everyone in the room because

501
00:23:28,590 --> 00:23:32,690
I'm on a lot of teleconferences
with people

502
00:23:32,690 --> 00:23:36,910
from different locations and
invariably half of the group

503
00:23:36,910 --> 00:23:38,850
is in a conference room
somewhere and they're very

504
00:23:38,850 --> 00:23:41,940
quiet and you have to listen,
crank your volume up, and then

505
00:23:41,940 --> 00:23:44,950
there's the one guy who's
sitting with a microphone

506
00:23:44,950 --> 00:23:48,513
right on his lips and jumps in
and blasts everybody out.

507
00:23:48,513 --> 00:23:48,866
JAN LINDEN: Yep.

508
00:23:48,866 --> 00:23:51,700
CHRIS WILSON: It would be nice
to kind of tone that down just

509
00:23:51,700 --> 00:23:52,590
a little bit.

510
00:23:52,590 --> 00:23:54,930
But yeah, it's going to
be really exciting.

511
00:23:54,930 --> 00:23:57,930
I can't wait to sort
of start applying--

512
00:23:57,930 --> 00:23:59,950
doing all my Hangouts
in Vocoder mode

513
00:23:59,950 --> 00:24:01,306
or things like that.

514
00:24:01,306 --> 00:24:02,210
That would be kind of cool.

515
00:24:02,210 --> 00:24:04,260
JAN LINDEN: Great.

516
00:24:04,260 --> 00:24:05,400
CHRIS WILSON: So
yeah, I think--

517
00:24:05,400 --> 00:24:11,250
did we have any questions to
answer from the queue?

518
00:24:11,250 --> 00:24:12,500
I can't remember.

519
00:24:12,500 --> 00:24:14,450

520
00:24:14,450 --> 00:24:15,700
One second.

521
00:24:15,700 --> 00:24:18,553

522
00:24:18,553 --> 00:24:29,320
[SYNTHESIZER PLAYING]

523
00:24:29,320 --> 00:24:30,070
MALE SPEAKER: So we
do have a couple

524
00:24:30,070 --> 00:24:31,940
questions on the moderator.

525
00:24:31,940 --> 00:24:33,490
So let's go ahead and
get ready for those.

526
00:24:33,490 --> 00:24:35,260
One of them asked about
performance.

527
00:24:35,260 --> 00:24:38,140
How much will the difference in
implementation on different

528
00:24:38,140 --> 00:24:39,340
operating systems make?

529
00:24:39,340 --> 00:24:41,630
For example, a tablet
or smartphone.

530
00:24:41,630 --> 00:24:44,660
And then second, obviously some
operations require more

531
00:24:44,660 --> 00:24:45,560
power than others.

532
00:24:45,560 --> 00:24:48,805
What are the dangers in the
current implementations?

533
00:24:48,805 --> 00:24:50,020
CHRIS WILSON: Good,
good questions.

534
00:24:50,020 --> 00:24:50,710
Yes.

535
00:24:50,710 --> 00:24:54,580
So of course, there are going
to be differences in

536
00:24:54,580 --> 00:24:56,670
performance on different
pieces of hardware.

537
00:24:56,670 --> 00:24:57,600
We see that today.

538
00:24:57,600 --> 00:25:02,270
Even depending on what audio
hardware you have, you can get

539
00:25:02,270 --> 00:25:05,950
different latency, particularly,
but even so,

540
00:25:05,950 --> 00:25:08,130
you'll see a difference in
processing if you have to do a

541
00:25:08,130 --> 00:25:11,786
lot of conversions for buffers
and things like that.

542
00:25:11,786 --> 00:25:15,370
JAN LINDEN: You'll really have
to optimize hard to get it to

543
00:25:15,370 --> 00:25:20,160
run well on the mobile
processes, for example.

544
00:25:20,160 --> 00:25:23,720
And that's definitely room
for improvement there.

545
00:25:23,720 --> 00:25:24,670
As you mentioned,
the convolver--

546
00:25:24,670 --> 00:25:24,810
CHRIS WILSON: Of course.

547
00:25:24,810 --> 00:25:29,350
JAN LINDEN: --node is not quite
working as you would

548
00:25:29,350 --> 00:25:31,635
like it to on iOS yet.

549
00:25:31,635 --> 00:25:36,720
But the combination of faster
processes coming out there and

550
00:25:36,720 --> 00:25:39,740
more optimization will
see that improve.

551
00:25:39,740 --> 00:25:44,740
But it's definitely a very
important thing and today, it

552
00:25:44,740 --> 00:25:47,310
won't run perfectly
on every scenario.

553
00:25:47,310 --> 00:25:47,650
CHRIS WILSON: No.

554
00:25:47,650 --> 00:25:49,180
No, of course not.

555
00:25:49,180 --> 00:25:51,800
JAN LINDEN: And then operating
system also has an impact,

556
00:25:51,800 --> 00:25:56,310
like doing things in Mac and
Windows is slightly different

557
00:25:56,310 --> 00:25:58,660
and there are things
that can be done.

558
00:25:58,660 --> 00:26:02,160
Typically, we get better
performance on Mac but still

559
00:26:02,160 --> 00:26:04,930
really good on Windows,
especially when we can use

560
00:26:04,930 --> 00:26:06,300
certain modes there.

561
00:26:06,300 --> 00:26:11,300
And then Linux is obviously a
little bit more spread in what

562
00:26:11,300 --> 00:26:12,260
you can get.

563
00:26:12,260 --> 00:26:12,970
CHRIS WILSON: Of course.

564
00:26:12,970 --> 00:26:14,670
And mobile as well.

565
00:26:14,670 --> 00:26:21,270
The spread in hardware in mobile
is just so broad, even

566
00:26:21,270 --> 00:26:23,230
outside of Web Audio,
of course.

567
00:26:23,230 --> 00:26:26,450
JAN LINDEN: But the basic
effects that you really need

568
00:26:26,450 --> 00:26:30,170
for doing gaming, et cetera,
if you don't want to go too

569
00:26:30,170 --> 00:26:33,390
far, you should be able
to do a lot of that.

570
00:26:33,390 --> 00:26:35,560
CHRIS WILSON: One of the
things that has been

571
00:26:35,560 --> 00:26:38,730
fascinating to me to understand
has been one of the

572
00:26:38,730 --> 00:26:42,390
big values of Web Audio is
simply cracking apart that

573
00:26:42,390 --> 00:26:46,990
process of downloading,
decoding, and playing audio

574
00:26:46,990 --> 00:26:51,940
files because with the HTML5
audio element, that's all

575
00:26:51,940 --> 00:26:52,910
wrapped together.

576
00:26:52,910 --> 00:26:55,060
Like you can play separately
but it's not--

577
00:26:55,060 --> 00:26:55,880
JAN LINDEN: You can't
really do anything--

578
00:26:55,880 --> 00:26:57,600
CHRIS WILSON: --really
a low latency play.

579
00:26:57,600 --> 00:27:01,830
And the download and decode
is all wrapped together.

580
00:27:01,830 --> 00:27:04,150
And at least you can crack those
apart and just the value

581
00:27:04,150 --> 00:27:05,870
of being able to control
when those steps

582
00:27:05,870 --> 00:27:07,480
happen is pretty important.

583
00:27:07,480 --> 00:27:10,720
And then, when you're building
gaming or even just like

584
00:27:10,720 --> 00:27:14,200
interactive sound for an
application, making little

585
00:27:14,200 --> 00:27:17,020
beeps and boops when you roll
over things or select

586
00:27:17,020 --> 00:27:20,070
different options or whatever,
that's actually really

587
00:27:20,070 --> 00:27:22,930
lightweight in terms of what
you're doing with Web Audio

588
00:27:22,930 --> 00:27:25,690
but it's very effective in terms
of giving feedback to

589
00:27:25,690 --> 00:27:28,770
the user and having a more
immersive experience.

590
00:27:28,770 --> 00:27:32,030
Then there's, of course, the
whole processing pipeline and

591
00:27:32,030 --> 00:27:34,740
even doing some basic effects
can be pretty easy.

592
00:27:34,740 --> 00:27:37,920
But once you start trying to
really crank out a lot of

593
00:27:37,920 --> 00:27:39,120
nodes together--

594
00:27:39,120 --> 00:27:42,650
I was kind of fascinated that
Vocoder actually worked when I

595
00:27:42,650 --> 00:27:45,940
first implemented it, because
when that's running in real

596
00:27:45,940 --> 00:27:51,310
time, it has about 400 audio
nodes of various kinds active

597
00:27:51,310 --> 00:27:54,840
all the time and processing all
the time, which I was sure

598
00:27:54,840 --> 00:27:56,570
it was just going
to fall over.

599
00:27:56,570 --> 00:27:58,940
But it was doing OK except every
once in a while as I was

600
00:27:58,940 --> 00:28:02,110
practicing my I/O slide deck,
I would discover that it

601
00:28:02,110 --> 00:28:03,920
wasn't working quite as
well as I thought.

602
00:28:03,920 --> 00:28:05,290
It sounded a little noisy.

603
00:28:05,290 --> 00:28:08,120
It wasn't really glitching
but it was kind of

604
00:28:08,120 --> 00:28:09,800
crackling or something.

605
00:28:09,800 --> 00:28:13,490
And then I realized that I was
using the speaker notes mode

606
00:28:13,490 --> 00:28:16,440
and it was actually
instantiating it twice.

607
00:28:16,440 --> 00:28:20,810
And it only happened when I was
like triggering it from

608
00:28:20,810 --> 00:28:24,310
the MIDI keyboard that it was
running both of them at once.

609
00:28:24,310 --> 00:28:27,260
But it was basically setting up
800 nodes and running them

610
00:28:27,260 --> 00:28:29,670
all at once on my poor
little MacBook Air.

611
00:28:29,670 --> 00:28:30,400
JAN LINDEN: So you
still have to be

612
00:28:30,400 --> 00:28:31,280
careful what you're doing.

613
00:28:31,280 --> 00:28:32,920
CHRIS WILSON: You still have
to be pretty careful what

614
00:28:32,920 --> 00:28:33,820
you're doing.

615
00:28:33,820 --> 00:28:37,110
But I think for a lot of the
basic things, it's actually

616
00:28:37,110 --> 00:28:38,170
not that complex.

617
00:28:38,170 --> 00:28:42,040
And if you look at things like
the synthesizer that I built,

618
00:28:42,040 --> 00:28:46,380
for example, it's actually not
doing a lot with audio nodes.

619
00:28:46,380 --> 00:28:49,170
It is doing some pretty
solid processing.

620
00:28:49,170 --> 00:28:52,240
I need to go back and play with
it more in iOS now that

621
00:28:52,240 --> 00:28:55,740
I've sort of narrowed down that
the convolver is causing

622
00:28:55,740 --> 00:28:56,670
a challenge for us.

623
00:28:56,670 --> 00:28:59,820
But I think that, in general,
you'll see performance will

624
00:28:59,820 --> 00:29:03,410
continue to improve and
be easier to manage.

625
00:29:03,410 --> 00:29:07,270
On the power issue, power to me
is really very related, in

626
00:29:07,270 --> 00:29:09,900
this case, to performance
and memory

627
00:29:09,900 --> 00:29:11,110
usage as well, of course.

628
00:29:11,110 --> 00:29:15,240
But I think that the fewer nodes
you can get away with,

629
00:29:15,240 --> 00:29:18,060
the more lightweight you can
make your application, the

630
00:29:18,060 --> 00:29:18,950
better you're going to be.

631
00:29:18,950 --> 00:29:20,940
But I don't think you're
going to see some kind

632
00:29:20,940 --> 00:29:22,380
of huge power drain.

633
00:29:22,380 --> 00:29:22,970
JAN LINDEN: No.

634
00:29:22,970 --> 00:29:26,850
And when you look at these
devices, typically nothing

635
00:29:26,850 --> 00:29:30,080
gets close in power consumption
to the display and

636
00:29:30,080 --> 00:29:30,720
everything so--

637
00:29:30,720 --> 00:29:33,110
CHRIS WILSON: Exactly.

638
00:29:33,110 --> 00:29:36,050
JAN LINDEN: --it very often
drowns in that.

639
00:29:36,050 --> 00:29:38,840
But of course, if you're running
at full speed for a

640
00:29:38,840 --> 00:29:41,970
long time, that will have
an effect on power.

641
00:29:41,970 --> 00:29:42,615
MALE SPEAKER: All right.

642
00:29:42,615 --> 00:29:43,910
So our next question.

643
00:29:43,910 --> 00:29:48,780
Jeff wants to know, how he can
make simple onsite effects,

644
00:29:48,780 --> 00:29:52,370
for example, distortion or
pitch with only one user

645
00:29:52,370 --> 00:29:56,010
adjustable parameter that the
user could activate for

646
00:29:56,010 --> 00:29:58,010
streaming music on the site.

647
00:29:58,010 --> 00:30:01,670
And in terms of page load speed,
what would be the best

648
00:30:01,670 --> 00:30:04,890
practice for doing this?

649
00:30:04,890 --> 00:30:08,090
CHRIS WILSON: One effect
with one parameter.

650
00:30:08,090 --> 00:30:08,360
MALE SPEAKER: Yeah.

651
00:30:08,360 --> 00:30:11,740
So apply one effect to
some music that's

652
00:30:11,740 --> 00:30:14,120
playing on your site.

653
00:30:14,120 --> 00:30:17,080
And what would be the best way
to go about doing that?

654
00:30:17,080 --> 00:30:18,330
CHRIS WILSON: OK.

655
00:30:18,330 --> 00:30:22,360

656
00:30:22,360 --> 00:30:24,630
Applying one effect at a time
and giving a small set of

657
00:30:24,630 --> 00:30:27,590
parameters, it's kind of similar
to the audio input

658
00:30:27,590 --> 00:30:30,850
effects demo that I built which
I've meant to come back

659
00:30:30,850 --> 00:30:34,930
to and make it a little more
componentized, but I think

660
00:30:34,930 --> 00:30:38,230
that it's a pretty good example
of how to plug in a

661
00:30:38,230 --> 00:30:40,240
single effect and let you
play around with a

662
00:30:40,240 --> 00:30:41,570
parameter or two.

663
00:30:41,570 --> 00:30:46,150
The one challenge is music
playing back on the site.

664
00:30:46,150 --> 00:30:48,660
If you don't control the site,
even if you can inject

665
00:30:48,660 --> 00:30:52,690
JavaScript, you can't always
grab control, like grab that

666
00:30:52,690 --> 00:30:53,680
audio stream.

667
00:30:53,680 --> 00:30:56,480
You can't grab an audio
stream off of a

668
00:30:56,480 --> 00:30:58,060
Flash object, for example.

669
00:30:58,060 --> 00:30:59,330
JAN LINDEN: But if
it's playing in

670
00:30:59,330 --> 00:31:02,550
an HTML5 audio tag--

671
00:31:02,550 --> 00:31:04,360
CHRIS WILSON: Or even a video
tag you can then--

672
00:31:04,360 --> 00:31:07,540
JAN LINDEN: --then you can just
use that as an input node

673
00:31:07,540 --> 00:31:10,950
to Web Audio and then you can do
whatever you want with it.

674
00:31:10,950 --> 00:31:12,180
CHRIS WILSON: Yep.

675
00:31:12,180 --> 00:31:12,930
MALE SPEAKER: Awesome.

676
00:31:12,930 --> 00:31:17,100
And Lincoln from Miami wants
to know, he'd like to use

677
00:31:17,100 --> 00:31:20,610
filters on real time audio
capturing from the microphone.

678
00:31:20,610 --> 00:31:24,210
Is it possible and do you
have a demo for it?

679
00:31:24,210 --> 00:31:28,360
CHRIS WILSON: So real time
filtering of audio input.

680
00:31:28,360 --> 00:31:29,160
Actually, yeah.

681
00:31:29,160 --> 00:31:30,520
There's--

682
00:31:30,520 --> 00:31:31,590
JAN LINDEN: It's one of the--

683
00:31:31,590 --> 00:31:34,990
CHRIS WILSON: That's one of the
effects on the live input

684
00:31:34,990 --> 00:31:42,750
effects demo is an
LFO filter that--

685
00:31:42,750 --> 00:31:44,700
this actually runs it on
a [COMPUTERIZED VOICE]

686
00:31:44,700 --> 00:31:45,950
low frequency oscillator.

687
00:31:45,950 --> 00:31:49,740

688
00:31:49,740 --> 00:31:52,840
You know, actually, telephone
effect is a good one too.

689
00:31:52,840 --> 00:31:57,230
You can tell it's making my
voice a little bit clipped

690
00:31:57,230 --> 00:32:01,840
here but let's flip
to the LFO one.

691
00:32:01,840 --> 00:32:02,780
Well.

692
00:32:02,780 --> 00:32:04,910
The telephone demo is a good
place to start just because

693
00:32:04,910 --> 00:32:10,460
all it does is take the user
input audio and it runs it

694
00:32:10,460 --> 00:32:12,200
through two filters.

695
00:32:12,200 --> 00:32:15,970
One to mask off the low
frequencies and one of mask

696
00:32:15,970 --> 00:32:17,530
off the high frequencies.

697
00:32:17,530 --> 00:32:19,580
And so you only get the middle,
which is typically

698
00:32:19,580 --> 00:32:23,730
what a telephone does.

699
00:32:23,730 --> 00:32:27,030
And the LFO filter, on the other
hand, has this kind of

700
00:32:27,030 --> 00:32:30,810
weird bouncing effect where
it's using a low frequency

701
00:32:30,810 --> 00:32:34,010
oscillator to control the
frequency cut off of a low

702
00:32:34,010 --> 00:32:35,160
pass filter.

703
00:32:35,160 --> 00:32:38,510
So if you listen to yourself
through it, you'll actually

704
00:32:38,510 --> 00:32:41,160
hear it kind of bounce
in and out.

705
00:32:41,160 --> 00:32:44,320
JAN LINDEN: So that shows how
you can vary it in real time.

706
00:32:44,320 --> 00:32:45,940
CHRIS WILSON: Exactly.

707
00:32:45,940 --> 00:32:48,410
And that's actually a
really good topic.

708
00:32:48,410 --> 00:32:51,040
It's one that I'm going to
come up with some more

709
00:32:51,040 --> 00:32:55,220
tutorials on and some videos on,
is doing that sort of real

710
00:32:55,220 --> 00:33:00,030
time effects control using audio
node routing into audio

711
00:33:00,030 --> 00:33:03,990
parameters, which I think is
super powerful and not very

712
00:33:03,990 --> 00:33:04,680
well understood.

713
00:33:04,680 --> 00:33:07,687
In fact, I was talking to one of
my coworkers yesterday who

714
00:33:07,687 --> 00:33:09,280
has done a bunch of Web
Audio stuff and he's

715
00:33:09,280 --> 00:33:10,750
like, you can do that?

716
00:33:10,750 --> 00:33:11,490
I'm like, well yeah.

717
00:33:11,490 --> 00:33:15,060
That's how you do chorus and
flange and these other effects

718
00:33:15,060 --> 00:33:18,885
that you need to have audio rate
controls over things on.

719
00:33:18,885 --> 00:33:22,770

720
00:33:22,770 --> 00:33:24,160
MALE SPEAKER: That's all
the questions we

721
00:33:24,160 --> 00:33:25,320
have time for today.

722
00:33:25,320 --> 00:33:25,850
CHRIS WILSON: OK.

723
00:33:25,850 --> 00:33:26,165
Great.

724
00:33:26,165 --> 00:33:26,480
JAN LINDEN: Excellent.

725
00:33:26,480 --> 00:33:29,610
CHRIS WILSON: Well I think we'll
close there and until

726
00:33:29,610 --> 00:33:32,380
next time, that's Web Audio.

727
00:33:32,380 --> 00:33:33,630
JAN LINDEN: Thank you.

728
00:33:33,630 --> 00:33:41,780

729
00:33:41,780 --> 00:33:56,267
[MUSIC PLAYING]

