1
00:00:00,000 --> 00:00:07,160

2
00:00:07,160 --> 00:00:07,620
ILYA GRIGORIK: Hello.

3
00:00:07,620 --> 00:00:08,370
Welcome.

4
00:00:08,370 --> 00:00:11,750
Today I would like to share some
tools, tips, and tricks

5
00:00:11,750 --> 00:00:15,240
in Chrome Developer Tools that
will help you build better and

6
00:00:15,240 --> 00:00:16,720
faster web apps.

7
00:00:16,720 --> 00:00:19,690
These are tips that I find
useful, and I use every day.

8
00:00:19,690 --> 00:00:22,820
And we're going to touch on a
little bit of everything,

9
00:00:22,820 --> 00:00:25,950
networking, JavaScript
performance, rendering, and

10
00:00:25,950 --> 00:00:29,790
other kind of deeper tools
within Chrome DevTools.

11
00:00:29,790 --> 00:00:32,740
So without any further ado,
let's get right into it.

12
00:00:32,740 --> 00:00:35,010
We're going to have two parts
to this presentation.

13
00:00:35,010 --> 00:00:38,350
So in the first one, we'll
talk about the high-level

14
00:00:38,350 --> 00:00:40,500
features available in
Chrome DevTools.

15
00:00:40,500 --> 00:00:42,700
And these are the tools that
you'll be using every day on

16
00:00:42,700 --> 00:00:45,190
your pages or on your apps
as you're building them.

17
00:00:45,190 --> 00:00:48,690
And then part two will be a
little bit deeper, going into

18
00:00:48,690 --> 00:00:50,110
how does Chrome DevTools work?

19
00:00:50,110 --> 00:00:51,410
How can you extend it?

20
00:00:51,410 --> 00:00:54,020
How can customize it and do
some really awesome stuff?

21
00:00:54,020 --> 00:00:56,600
So I encourage you guys to
check out both videos.

22
00:00:56,600 --> 00:01:01,190
But to start, you can follow
along by viewing these slides

23
00:01:01,190 --> 00:01:01,750
on your own.

24
00:01:01,750 --> 00:01:04,390
And in fact, I encourage you to
do so after you watch this,

25
00:01:04,390 --> 00:01:07,150
because it's one thing to just
watch somebody do it and then

26
00:01:07,150 --> 00:01:08,240
to try it yourself.

27
00:01:08,240 --> 00:01:13,270
So grab the slides later, but
let's get right into it.

28
00:01:13,270 --> 00:01:17,030
So first we have the Elements
and Console view which, of

29
00:01:17,030 --> 00:01:18,900
course, everybody will
be familiar with.

30
00:01:18,900 --> 00:01:20,840
You've used this every day.

31
00:01:20,840 --> 00:01:23,650
And a couple of things that I've
actually just recently

32
00:01:23,650 --> 00:01:26,590
discovered myself is that
you can drag and

33
00:01:26,590 --> 00:01:28,180
drop elements in here.

34
00:01:28,180 --> 00:01:31,870
And there's a couple of very
nifty features for debugging.

35
00:01:31,870 --> 00:01:35,150
So, for example, if I right
click on this element here--

36
00:01:35,150 --> 00:01:37,350
and I'm going to inspect
this element.

37
00:01:37,350 --> 00:01:38,790
We our LI here.

38
00:01:38,790 --> 00:01:41,420
Let me just scroll up a
little bit so we can

39
00:01:41,420 --> 00:01:43,830
see what we're doing.

40
00:01:43,830 --> 00:01:45,610
And we have this Delete
Me element.

41
00:01:45,610 --> 00:01:49,030
So I can actually drag this up
and change its position, which

42
00:01:49,030 --> 00:01:49,790
is quite nice.

43
00:01:49,790 --> 00:01:53,410
And because we have this element
selected, we can also

44
00:01:53,410 --> 00:01:56,100
do $0 to view the element
itself. so

45
00:01:56,100 --> 00:01:58,580
very nice for debugging.

46
00:01:58,580 --> 00:02:00,310
All of that's kind of neat.

47
00:02:00,310 --> 00:02:04,590
But this is what really
interested me when I

48
00:02:04,590 --> 00:02:05,220
discovered this.

49
00:02:05,220 --> 00:02:07,480
So we have this element called
Delete Me, and we have the

50
00:02:07,480 --> 00:02:08,370
Delete button.

51
00:02:08,370 --> 00:02:10,910
And oftentimes you're doing some
sort of Ajax interactions

52
00:02:10,910 --> 00:02:11,830
or building an app.

53
00:02:11,830 --> 00:02:13,870
And you're trying to figure
out what's causing some

54
00:02:13,870 --> 00:02:16,800
certain event, what's causing
a certain element to be

55
00:02:16,800 --> 00:02:17,800
modified in the DOM.

56
00:02:17,800 --> 00:02:19,580
And in fact, you can do
that very easily.

57
00:02:19,580 --> 00:02:22,292
You can discover what's
happening by right clicking on

58
00:02:22,292 --> 00:02:25,150
an element, going to Break On,
and in this case, I'm actually

59
00:02:25,150 --> 00:02:26,480
going to remove the
element, so going

60
00:02:26,480 --> 00:02:27,920
to say on-node removal.

61
00:02:27,920 --> 00:02:30,380
But you can also do it on any
sub-tree modifications or

62
00:02:30,380 --> 00:02:31,060
anything similar.

63
00:02:31,060 --> 00:02:33,210
So I'll set a break
point in here.

64
00:02:33,210 --> 00:02:35,900
And when I click Delete Me,
you can see that the page

65
00:02:35,900 --> 00:02:36,550
actually paused.

66
00:02:36,550 --> 00:02:38,120
It says, Pausing Debugger.

67
00:02:38,120 --> 00:02:42,410
And it'll show us the specific
element or the JavaScript

68
00:02:42,410 --> 00:02:46,890
file, the function that's
causing the action to occur.

69
00:02:46,890 --> 00:02:50,300
So if I hit Continue, it'll
delete that element.

70
00:02:50,300 --> 00:02:53,520
So nice and simple, very useful
if you're building

71
00:02:53,520 --> 00:02:57,270
JavaScript apps or anything
that modifies the DOM.

72
00:02:57,270 --> 00:03:00,310
And speaking of which, before
we get too far into the

73
00:03:00,310 --> 00:03:04,120
specifics of the tools,
a couple of tips.

74
00:03:04,120 --> 00:03:06,890
First of all, definitely check
out your settings.

75
00:03:06,890 --> 00:03:09,680
There's a lot of very nice
features in there.

76
00:03:09,680 --> 00:03:11,550
And some of those features don't
make sense to have on

77
00:03:11,550 --> 00:03:14,970
all the time, but sometimes
they can be invaluable.

78
00:03:14,970 --> 00:03:18,480
So, for example, I do a lot of
optimization of first-page

79
00:03:18,480 --> 00:03:21,890
loads, so trying to figure out
how we can accelerate the

80
00:03:21,890 --> 00:03:23,020
loading the page.

81
00:03:23,020 --> 00:03:26,770
And for that, I find Disable
Cache as one of the most

82
00:03:26,770 --> 00:03:28,330
useful features all the time.

83
00:03:28,330 --> 00:03:30,770
Because I often wonder, did I
reload this page correctly?

84
00:03:30,770 --> 00:03:32,330
Did I fetch that resource
out of the cache?

85
00:03:32,330 --> 00:03:34,130
Because that could be
skewing the results.

86
00:03:34,130 --> 00:03:36,970
So when you have that checked
on, it means that any time you

87
00:03:36,970 --> 00:03:42,670
have the DevTools open, Chrome
will not use the cache.

88
00:03:42,670 --> 00:03:44,280
It will always fetch
the resources

89
00:03:44,280 --> 00:03:46,210
from the origin page.

90
00:03:46,210 --> 00:03:48,970
Now, if you close your DevTools,
it'll continue using

91
00:03:48,970 --> 00:03:49,390
your cache.

92
00:03:49,390 --> 00:03:52,940
So this is actually something
you can keep on, and it'll

93
00:03:52,940 --> 00:03:53,660
work just fine.

94
00:03:53,660 --> 00:03:56,090
So don't worry about disabling
all your caches.

95
00:03:56,090 --> 00:03:58,480
We'll talk about Show
Paint Rectangles.

96
00:03:58,480 --> 00:04:01,470
This is an awesome feature, very
important for rendering

97
00:04:01,470 --> 00:04:02,350
performance.

98
00:04:02,350 --> 00:04:05,840
If you are building an app
that is Ajax heavy--

99
00:04:05,840 --> 00:04:08,220
a lot of modifications
within the app--

100
00:04:08,220 --> 00:04:11,070
logging XML HTTP requests
is actually very useful.

101
00:04:11,070 --> 00:04:13,550
You can, of course, see the
outbound requests in your

102
00:04:13,550 --> 00:04:14,280
network panel.

103
00:04:14,280 --> 00:04:17,459
But if you have this enabled,
you will actually see Chrome

104
00:04:17,459 --> 00:04:21,380
log the events, the HTTP
requests, into your console.

105
00:04:21,380 --> 00:04:23,800
And it'll actually print the
object there so you can open

106
00:04:23,800 --> 00:04:25,870
it up and look at some
of the parameters.

107
00:04:25,870 --> 00:04:29,190
So your mileage will vary
based on what kind of

108
00:04:29,190 --> 00:04:30,870
applications you're building
but may be

109
00:04:30,870 --> 00:04:32,030
interesting to explore.

110
00:04:32,030 --> 00:04:33,730
And then the last one that I
like to highlight, because

111
00:04:33,730 --> 00:04:36,010
this bugged me for a little
while until I discovered this

112
00:04:36,010 --> 00:04:41,750
option, is that Chrome tends to
reformat your CSS markup or

113
00:04:41,750 --> 00:04:44,410
the colors into RGB
by default.

114
00:04:44,410 --> 00:04:48,670
Whereas if you're using HEX,
if all of your code is

115
00:04:48,670 --> 00:04:50,460
originally in HEX, you would
like to see it in HEX.

116
00:04:50,460 --> 00:04:52,140
Well, you can tell it
to preserve it.

117
00:04:52,140 --> 00:04:54,720
Or you can actually make it
switch into a different mode

118
00:04:54,720 --> 00:04:58,630
like HSL, which allows you to
use the color picker right

119
00:04:58,630 --> 00:05:03,350
within Chrome to get nice
changes done right within

120
00:05:03,350 --> 00:05:06,040
Chrome DevTools if you're trying
to find a lighter shade

121
00:05:06,040 --> 00:05:08,430
of color or something similar.

122
00:05:08,430 --> 00:05:10,750
So moving right along,
network timeline.

123
00:05:10,750 --> 00:05:12,570
This is the bread and
butter of a lot of

124
00:05:12,570 --> 00:05:13,290
the work that I do.

125
00:05:13,290 --> 00:05:14,600
So I spend a lot
of time in it.

126
00:05:14,600 --> 00:05:18,180
And one of the things that I
know that happens to me is,

127
00:05:18,180 --> 00:05:22,200
after awhile, there's a lot of
information hidden here, and

128
00:05:22,200 --> 00:05:23,630
it just kind of gets
lost on you.

129
00:05:23,630 --> 00:05:26,290
So I like to bring back the
attention on some of the

130
00:05:26,290 --> 00:05:28,340
awesome features that
are hidden in here.

131
00:05:28,340 --> 00:05:31,430
So, for example, we have-- if
you look at the Size column in

132
00:05:31,430 --> 00:05:33,670
here, we have Size
and Content.

133
00:05:33,670 --> 00:05:37,330
And maybe this is not the most
intuitive way to explain it,

134
00:05:37,330 --> 00:05:40,880
but if you look at this, it
says that the size of this

135
00:05:40,880 --> 00:05:45,020
page is 10 kilobytes, but the
content is 41 kilobytes.

136
00:05:45,020 --> 00:05:45,640
What does that mean?

137
00:05:45,640 --> 00:05:47,990
Well, it means that we've
transferred 10 kilobytes to

138
00:05:47,990 --> 00:05:48,910
fetch this page.

139
00:05:48,910 --> 00:05:51,840
But the actual resource is 41
kilobytes, which means that we

140
00:05:51,840 --> 00:05:53,360
are actually using gzip.

141
00:05:53,360 --> 00:05:54,550
So we've fetched 10 kilobytes.

142
00:05:54,550 --> 00:05:56,790
That got expanded on a client
and all the rest.

143
00:05:56,790 --> 00:06:00,090
And in fact, you can see that
this applies to virtually all

144
00:06:00,090 --> 00:06:01,330
of the resources,
which is great.

145
00:06:01,330 --> 00:06:03,330
It means that gzip is on.

146
00:06:03,330 --> 00:06:06,070
We're using compression, which
is a very good optimization.

147
00:06:06,070 --> 00:06:09,090
But then you scroll here to the
bottom, and you'll find

148
00:06:09,090 --> 00:06:14,500
that we have our Google
Analytics snippet, and it only

149
00:06:14,500 --> 00:06:17,640
fetches 35 bytes, or the content
is only 35 bytes.

150
00:06:17,640 --> 00:06:22,050
But there's 855 bytes of HTTP
overhead, if you will.

151
00:06:22,050 --> 00:06:24,720
And that also makes sense
because this is simply an

152
00:06:24,720 --> 00:06:25,560
Analytics beacon.

153
00:06:25,560 --> 00:06:28,100
So we're sending data to the
Google Analytics service.

154
00:06:28,100 --> 00:06:31,440
It just returns a 204, and
there's nothing wrong here.

155
00:06:31,440 --> 00:06:34,950
But very quickly, you can
diagnose if any resource is

156
00:06:34,950 --> 00:06:37,010
not getting properly
compressed.

157
00:06:37,010 --> 00:06:38,790
That's the place to find it.

158
00:06:38,790 --> 00:06:42,050
The other and very similar
view that's worth paying

159
00:06:42,050 --> 00:06:44,040
attention to is the
Time column.

160
00:06:44,040 --> 00:06:46,790
So here we have, once again,
two elements--

161
00:06:46,790 --> 00:06:48,260
Time and Latency.

162
00:06:48,260 --> 00:06:53,480
So time is the total duration
to fetch that resource.

163
00:06:53,480 --> 00:06:58,710
So for this specific page,
it took 1.18 seconds.

164
00:06:58,710 --> 00:07:01,960
But the latency is the time that
it took to get the first

165
00:07:01,960 --> 00:07:03,930
byte of that response.

166
00:07:03,930 --> 00:07:06,740
So for whatever reason, we were
waiting for one second.

167
00:07:06,740 --> 00:07:08,700
Maybe that's a new TCP
connection that needed to be

168
00:07:08,700 --> 00:07:09,540
established.

169
00:07:09,540 --> 00:07:12,500
So we needed to do
the negotiation

170
00:07:12,500 --> 00:07:14,380
and hence the delay.

171
00:07:14,380 --> 00:07:17,390
So you can see that, for
example, in this case we spent

172
00:07:17,390 --> 00:07:18,980
most of the time waiting
on the network.

173
00:07:18,980 --> 00:07:21,690
And then once the request got
fulfilled, it actually came

174
00:07:21,690 --> 00:07:24,460
back very, very quickly to us.

175
00:07:24,460 --> 00:07:28,000
Now, the last bit that I find
incredibly useful, but perhaps

176
00:07:28,000 --> 00:07:32,490
is not the most intuitive, is
I'm going to flip to this page

177
00:07:32,490 --> 00:07:35,250
here, just a random page.

178
00:07:35,250 --> 00:07:41,140
And looking at this waterfall,
we get the timeline of how the

179
00:07:41,140 --> 00:07:42,300
resources are loading.

180
00:07:42,300 --> 00:07:46,090
But you can actually click on
the timeline and sort it by a

181
00:07:46,090 --> 00:07:46,760
different metrics.

182
00:07:46,760 --> 00:07:48,240
So, for example, we already
talked about

183
00:07:48,240 --> 00:07:49,570
duration and latency.

184
00:07:49,570 --> 00:07:52,570
So if I want to find out which
are the resources that were

185
00:07:52,570 --> 00:07:55,210
queued the most or were waiting
the most for the

186
00:07:55,210 --> 00:07:58,130
network to respond, I can
click on latency, and it

187
00:07:58,130 --> 00:08:01,460
re-sorts all of the resources in
this timeline and shows you

188
00:08:01,460 --> 00:08:04,190
that, hey, this photo file that
we were fetching, we were

189
00:08:04,190 --> 00:08:07,150
waiting for 1.46 seconds.

190
00:08:07,150 --> 00:08:11,510
There was some connection time,
SSL time, et cetera.

191
00:08:11,510 --> 00:08:14,570
And then the actual resource
fetch was basically a no-op,

192
00:08:14,570 --> 00:08:16,230
so very, very useful.

193
00:08:16,230 --> 00:08:18,930
You can find very interesting
performance bottlenecks by

194
00:08:18,930 --> 00:08:19,750
using this.

195
00:08:19,750 --> 00:08:22,700
And likewise, we can re-sort
this by duration, which is the

196
00:08:22,700 --> 00:08:23,470
total time.

197
00:08:23,470 --> 00:08:26,390
So this is combined waiting
on the latency and

198
00:08:26,390 --> 00:08:27,560
fetching the resource.

199
00:08:27,560 --> 00:08:31,180
So, for example, this JOD file,
which we're fetching

200
00:08:31,180 --> 00:08:37,230
from Twitter in this case, 357
milliseconds to do the DNS

201
00:08:37,230 --> 00:08:39,409
look up, which is quite
a bit of time.

202
00:08:39,409 --> 00:08:43,159
Then kind of a waterfall of
all the other metrics for

203
00:08:43,159 --> 00:08:44,920
connection and receiving
and all the rest,

204
00:08:44,920 --> 00:08:48,810
so very, very useful.

205
00:08:48,810 --> 00:08:51,430
Let's go back.

206
00:08:51,430 --> 00:08:54,660
Similarly in the same timeline,
we actually have two

207
00:08:54,660 --> 00:08:59,460
very useful tips for figuring
out how the resources are

208
00:08:59,460 --> 00:09:00,180
getting scheduled.

209
00:09:00,180 --> 00:09:06,090
So when the server responds with
data-- so whether that's

210
00:09:06,090 --> 00:09:09,670
an HTML file or JavaScript
or CSS file--

211
00:09:09,670 --> 00:09:14,510
the document parser or the
browser picks it up and tries

212
00:09:14,510 --> 00:09:16,560
to figure out what other
resources are required.

213
00:09:16,560 --> 00:09:19,620
So the browser schedules
these resources.

214
00:09:19,620 --> 00:09:22,610
And here we can actually show
you that some documents-- or

215
00:09:22,610 --> 00:09:26,430
sorry, some resources are being
schedule by the document

216
00:09:26,430 --> 00:09:28,020
parser and some by scripts.

217
00:09:28,020 --> 00:09:29,310
Now, why is this interesting?

218
00:09:29,310 --> 00:09:31,400
It's interesting because in
order for something to get

219
00:09:31,400 --> 00:09:33,850
scheduled by a script, the
script needs to be downloaded.

220
00:09:33,850 --> 00:09:35,430
It needs to be executed first.

221
00:09:35,430 --> 00:09:37,660
And only then can the
browser fetch these

222
00:09:37,660 --> 00:09:39,800
resources, which is fine.

223
00:09:39,800 --> 00:09:41,450
But it hides a lot of
the information

224
00:09:41,450 --> 00:09:42,300
away from the browser.

225
00:09:42,300 --> 00:09:44,580
So in that case, the browser
can actually help you

226
00:09:44,580 --> 00:09:45,750
accelerate these downloads.

227
00:09:45,750 --> 00:09:49,230
If you just have the resources
directly in your HTML, the

228
00:09:49,230 --> 00:09:52,090
browser can be actually very
smart about how to schedule

229
00:09:52,090 --> 00:09:55,460
those and preemptively fetch
those resources to avoid

230
00:09:55,460 --> 00:09:56,900
slowdowns on the page.

231
00:09:56,900 --> 00:10:00,040
So it's very popular now to
use JavaScript loaders.

232
00:10:00,040 --> 00:10:00,650
Those are great.

233
00:10:00,650 --> 00:10:03,200
They can offer a lot
of great features.

234
00:10:03,200 --> 00:10:05,270
But you're hiding some
of that information.

235
00:10:05,270 --> 00:10:08,970
And we'll come back to
this in a second.

236
00:10:08,970 --> 00:10:13,610
So after you look at the network
timeline closely, you

237
00:10:13,610 --> 00:10:16,050
kind of drill into the specifics
of where am I

238
00:10:16,050 --> 00:10:16,800
spending my time?

239
00:10:16,800 --> 00:10:17,530
Is it the latency?

240
00:10:17,530 --> 00:10:19,270
Am I blocking the server
and other things?

241
00:10:19,270 --> 00:10:20,800
You start to observe patterns.

242
00:10:20,800 --> 00:10:23,420
And it's actually quite
remarkable because after a

243
00:10:23,420 --> 00:10:27,230
while, it doesn't even matter
what the specific page is you

244
00:10:27,230 --> 00:10:28,470
are looking at.

245
00:10:28,470 --> 00:10:31,380
You just see patterns where you
quickly figure out another

246
00:10:31,380 --> 00:10:34,580
one and like, OK, I have a
blocking JavaScript file which

247
00:10:34,580 --> 00:10:35,950
is doing a document
write which is

248
00:10:35,950 --> 00:10:37,110
blocking something else.

249
00:10:37,110 --> 00:10:40,380
So as an example, I have this
seemingly incredibly simple

250
00:10:40,380 --> 00:10:43,210
example here where we're
fetching two resources, and

251
00:10:43,210 --> 00:10:44,910
it's an HTML page.

252
00:10:44,910 --> 00:10:49,210
And as you can see, now we
know how to read this.

253
00:10:49,210 --> 00:10:53,530
It takes 1.5 seconds to fetch
this entire HTML page.

254
00:10:53,530 --> 00:10:55,040
But the latency is very low.

255
00:10:55,040 --> 00:10:57,050
It's 9 milliseconds, which
means that we send the

256
00:10:57,050 --> 00:10:59,620
request, and we get a response
almost immediately.

257
00:10:59,620 --> 00:11:01,350
Or at least we don't get
the full response.

258
00:11:01,350 --> 00:11:03,260
We get some part of
the response.

259
00:11:03,260 --> 00:11:05,240
So the server gave us some
data, but it's still

260
00:11:05,240 --> 00:11:06,600
processing the rest.

261
00:11:06,600 --> 00:11:10,070
And based on this data, because
we're scheduling the

262
00:11:10,070 --> 00:11:12,680
style.css file, it means that
that data that got served

263
00:11:12,680 --> 00:11:14,820
contained a reference
to this style sheet.

264
00:11:14,820 --> 00:11:18,240
So that already tips off
the browser to go and

265
00:11:18,240 --> 00:11:19,770
download this file.

266
00:11:19,770 --> 00:11:23,130
But this file, the style sheet,
has a very different

267
00:11:23,130 --> 00:11:24,200
performance profile.

268
00:11:24,200 --> 00:11:27,790
So in here, you can see
that the opacity is

269
00:11:27,790 --> 00:11:28,960
different on this line.

270
00:11:28,960 --> 00:11:32,490
And this shows you that the
latency is high, which means

271
00:11:32,490 --> 00:11:36,542
that we've sent the request, but
the server took one second

272
00:11:36,542 --> 00:11:39,030
to generate the actual
response.

273
00:11:39,030 --> 00:11:40,240
It didn't return any bytes.

274
00:11:40,240 --> 00:11:43,810
And then at the very end, it
gave us that little bit of CSS

275
00:11:43,810 --> 00:11:45,400
that we needed to render
this page.

276
00:11:45,400 --> 00:11:48,180
So just by looking at this, you
can actually infer a lot

277
00:11:48,180 --> 00:11:51,010
of what's happening on the
back-end and figure out how

278
00:11:51,010 --> 00:11:52,900
you can optimize your pages.

279
00:11:52,900 --> 00:11:56,150
So this also highlights another
property, which is

280
00:11:56,150 --> 00:11:59,805
time to first byte, which means
that in this case, even

281
00:11:59,805 --> 00:12:02,970
though the page itself was
taking 1.5 seconds, we were

282
00:12:02,970 --> 00:12:05,830
able to flush some of the
content early and get the

283
00:12:05,830 --> 00:12:08,820
browser to start downloading
these resources, which speeds

284
00:12:08,820 --> 00:12:10,690
up the overall experience,
of course.

285
00:12:10,690 --> 00:12:13,430

286
00:12:13,430 --> 00:12:18,110
So I already covered some of
this, but the very high-level

287
00:12:18,110 --> 00:12:22,100
overview is that the browser
tries to be your friend in the

288
00:12:22,100 --> 00:12:25,080
sense that it tries to help
you build a fast web page.

289
00:12:25,080 --> 00:12:28,880
And the network stack inside of
a modern browser tries to

290
00:12:28,880 --> 00:12:32,440
do predictive loading
of resources and

291
00:12:32,440 --> 00:12:33,210
all kinds of things.

292
00:12:33,210 --> 00:12:37,560
So when you think about it, as
we push bytes to the browser,

293
00:12:37,560 --> 00:12:40,860
it starts to tokenize those
files-- so for example, the

294
00:12:40,860 --> 00:12:41,720
HTML file--

295
00:12:41,720 --> 00:12:43,950
and figures out that, hey,
there's the style

296
00:12:43,950 --> 00:12:44,850
sheet that I need.

297
00:12:44,850 --> 00:12:47,030
And at that point, it can
actually schedule it onto the

298
00:12:47,030 --> 00:12:49,260
network stack to fetch it, which
is exactly what we saw

299
00:12:49,260 --> 00:12:50,880
in the previous slide.

300
00:12:50,880 --> 00:12:54,780
Alternatively, if the parser
blocks for whatever reason--

301
00:12:54,780 --> 00:12:57,920
so let's say we have a
JavaScript file which needs to

302
00:12:57,920 --> 00:12:58,830
be downloaded--

303
00:12:58,830 --> 00:13:01,260
well, you don't want to wait
because maybe there's a style

304
00:13:01,260 --> 00:13:03,560
sheet right after it that
we could fetch.

305
00:13:03,560 --> 00:13:05,560
So we have this thing called
the pre-load scanner which

306
00:13:05,560 --> 00:13:06,620
kind of forges ahead.

307
00:13:06,620 --> 00:13:09,310
And it doesn't even do
a deep parse of HTML.

308
00:13:09,310 --> 00:13:12,240
Instead, it just looks for
things like images, style

309
00:13:12,240 --> 00:13:13,380
sheets, and JavaScript.

310
00:13:13,380 --> 00:13:16,540
And it then schedules those
resources ahead.

311
00:13:16,540 --> 00:13:20,350
So that's also fairly good
in terms of performance.

312
00:13:20,350 --> 00:13:24,220
And perhaps the slowest way to
schedule something and fetch

313
00:13:24,220 --> 00:13:28,500
it from the network is to
construct the DOM, get the

314
00:13:28,500 --> 00:13:32,550
JavaScript to executive, and
then JavaScript is the piece

315
00:13:32,550 --> 00:13:34,400
that schedules the resources.

316
00:13:34,400 --> 00:13:36,970
So we have a script that
schedules, let's say, an image

317
00:13:36,970 --> 00:13:38,520
or another JavaScript
download.

318
00:13:38,520 --> 00:13:42,350
So it's the lowest layer in the
stack here because, well,

319
00:13:42,350 --> 00:13:44,380
it'll take the longest
in general.

320
00:13:44,380 --> 00:13:48,500
So this is a trade-off that you
have if you're using, or

321
00:13:48,500 --> 00:13:52,420
abusing even, the JavaScript
loaders.

322
00:13:52,420 --> 00:13:56,040
So just keep that in mind.

323
00:13:56,040 --> 00:13:59,790
Speaking of network, we also
have web socket integration.

324
00:13:59,790 --> 00:14:04,100
So let me find this demo here.

325
00:14:04,100 --> 00:14:08,010
We have a sample website
which has web sockets.

326
00:14:08,010 --> 00:14:09,930
And it says Socket Open.

327
00:14:09,930 --> 00:14:11,980
And in fact, if you look
down here, we have

328
00:14:11,980 --> 00:14:13,560
the Web Socket tab.

329
00:14:13,560 --> 00:14:15,160
So we click into that.

330
00:14:15,160 --> 00:14:16,510
We see the actual request.

331
00:14:16,510 --> 00:14:18,100
This is the web socket
connection.

332
00:14:18,100 --> 00:14:20,820
We can click on this, and we get
the actual request headers

333
00:14:20,820 --> 00:14:23,740
and the handshake and everything
that's associated.

334
00:14:23,740 --> 00:14:26,750
But you can also click into
frames and see the actual

335
00:14:26,750 --> 00:14:29,600
frames being exchanged between
the client and server.

336
00:14:29,600 --> 00:14:33,450
So if I type in hello here,
you can see that this new

337
00:14:33,450 --> 00:14:35,220
frame was sent--

338
00:14:35,220 --> 00:14:35,830
hello--

339
00:14:35,830 --> 00:14:39,830
the length and the time, so
very useful if you're

340
00:14:39,830 --> 00:14:42,720
transferring ASCII text across
your web socket.

341
00:14:42,720 --> 00:14:44,550
Of course, if you're
transferring binary data

342
00:14:44,550 --> 00:14:46,890
across web sockets, this is
not going to be as useful.

343
00:14:46,890 --> 00:14:50,890
But for many applications, this
is exactly what you need,

344
00:14:50,890 --> 00:14:52,250
so very handy.

345
00:14:52,250 --> 00:14:54,830

346
00:14:54,830 --> 00:14:56,880
Another feature that I don't
think a lot of people know

347
00:14:56,880 --> 00:14:59,820
about is the HAR format.

348
00:14:59,820 --> 00:15:03,490
So the HAR format stands for
the HTTP Archive format.

349
00:15:03,490 --> 00:15:07,570
And the way to think about it is
the HAR format captures all

350
00:15:07,570 --> 00:15:10,640
of the data necessary to capture
exactly what you see

351
00:15:10,640 --> 00:15:13,190
in the network waterfall, so
all of the metadata that's

352
00:15:13,190 --> 00:15:14,330
happening here.

353
00:15:14,330 --> 00:15:16,130
And it's not only just the
visible stuff that we see

354
00:15:16,130 --> 00:15:18,140
here, but we can, of course,
also click into any one of

355
00:15:18,140 --> 00:15:21,330
these files and see all kinds
of other information.

356
00:15:21,330 --> 00:15:25,290
So to capture this file, you can
right click, and you have

357
00:15:25,290 --> 00:15:26,090
two options.

358
00:15:26,090 --> 00:15:32,610
You can save these specific
metadata for one resource, so,

359
00:15:32,610 --> 00:15:36,020
for example, a CSS file,
or for the entire page.

360
00:15:36,020 --> 00:15:36,820
So I'm going to do this.

361
00:15:36,820 --> 00:15:39,800
I'm going to click on
Save All as HAR.

362
00:15:39,800 --> 00:15:41,150
And I'm just going
to download it.

363
00:15:41,150 --> 00:15:45,340
And it gives me this
.HAR File.

364
00:15:45,340 --> 00:15:47,980
And this is just a JSON file,
which contains all of the

365
00:15:47,980 --> 00:15:50,590
information that is embedded
in this file.

366
00:15:50,590 --> 00:15:53,760
Now, why would I want this
in this timeline?

367
00:15:53,760 --> 00:15:57,920
So often, I'll be debugging
a page, and I find

368
00:15:57,920 --> 00:15:59,450
some sort of a problem.

369
00:15:59,450 --> 00:16:02,260
And I'll mark it up in a
screenshot, send it to my

370
00:16:02,260 --> 00:16:04,130
buddy, and say like, hey,
I found a problem.

371
00:16:04,130 --> 00:16:05,150
We need to fix this.

372
00:16:05,150 --> 00:16:07,920
And then he comes back and says,
well, that's cool, but

373
00:16:07,920 --> 00:16:09,300
I'm missing this metadata.

374
00:16:09,300 --> 00:16:10,970
So can you give me
more information?

375
00:16:10,970 --> 00:16:12,540
And, of course, by that
time I've closed the

376
00:16:12,540 --> 00:16:14,410
tab, so that's it.

377
00:16:14,410 --> 00:16:15,470
It's over.

378
00:16:15,470 --> 00:16:18,340
With HAR files, you have all of
the metadata that you could

379
00:16:18,340 --> 00:16:21,360
attach to a bug report or
send to somebody else.

380
00:16:21,360 --> 00:16:22,150
Very useful stuff.

381
00:16:22,150 --> 00:16:25,490
So for example, here's
a web app.

382
00:16:25,490 --> 00:16:27,360
It looks like Chrome
Developer Tools.

383
00:16:27,360 --> 00:16:29,400
That's because it
basically is.

384
00:16:29,400 --> 00:16:31,610
Somebody just extracted the code
out of Chrome Developer

385
00:16:31,610 --> 00:16:35,160
Tools and made it
as a web page.

386
00:16:35,160 --> 00:16:37,500
And what I can do is I can
take the HAR file we just

387
00:16:37,500 --> 00:16:39,730
saved, drag it in here,
and look at that.

388
00:16:39,730 --> 00:16:43,020
We have the entire waterfall
available to us.

389
00:16:43,020 --> 00:16:45,090
And in fact, you can even click
into this file, and

390
00:16:45,090 --> 00:16:47,320
there's all of that
same metadata.

391
00:16:47,320 --> 00:16:49,720
So now when somebody sends you
this HAR file, you can just

392
00:16:49,720 --> 00:16:52,130
pop in here, look at
all of the data.

393
00:16:52,130 --> 00:16:53,630
You have the full fidelity.

394
00:16:53,630 --> 00:16:56,700
You don't need to sacrifice on
anything, which I think is

395
00:16:56,700 --> 00:16:59,260
quite, quite awesome.

396
00:16:59,260 --> 00:17:02,950
And not only that, but there's
a ton of other tools that you

397
00:17:02,950 --> 00:17:06,740
could use once you have these
HAR files to build better

398
00:17:06,740 --> 00:17:08,780
dashboards, better
integrations.

399
00:17:08,780 --> 00:17:11,760
You can feed them automatically
into tools like

400
00:17:11,760 --> 00:17:14,750
YSlow to run performance reports
and other things.

401
00:17:14,750 --> 00:17:17,470
So Peter and myself actually
recorded an entire one-hour

402
00:17:17,470 --> 00:17:19,930
episode on the myriad of
different things that you can

403
00:17:19,930 --> 00:17:20,609
do with a HAR file.

404
00:17:20,609 --> 00:17:24,930
So I definitely recommend that
you guys check it out.

405
00:17:24,930 --> 00:17:27,099
It's a very, very powerful tool,
and there's a lot of

406
00:17:27,099 --> 00:17:31,490
open source projects that are
doing amazing stuff with it.

407
00:17:31,490 --> 00:17:34,800
So that's a lot about
the network, right?

408
00:17:34,800 --> 00:17:38,800
And once we fetch those
resources, we actually need to

409
00:17:38,800 --> 00:17:41,900
display the page layout, the
page, and provide a good

410
00:17:41,900 --> 00:17:45,230
experience once the user is
interacting with the page.

411
00:17:45,230 --> 00:17:47,660
And the way to think about it is
there are kind of two broad

412
00:17:47,660 --> 00:17:48,270
components.

413
00:17:48,270 --> 00:17:50,670
There is the DOM tree, which is
what gets constructed out

414
00:17:50,670 --> 00:17:53,580
of your HTML, and then there's
all the rendering information

415
00:17:53,580 --> 00:17:55,460
or the CSS object model.

416
00:17:55,460 --> 00:17:58,920
And those two things have to
come together in order to

417
00:17:58,920 --> 00:18:02,060
create the render tree, which
is ultimately what gets

418
00:18:02,060 --> 00:18:04,920
outputted to the screen,
or painted to the

419
00:18:04,920 --> 00:18:06,320
screen, if you will.

420
00:18:06,320 --> 00:18:10,570
And the thing to keep in mind
is that, generally speaking,

421
00:18:10,570 --> 00:18:13,800
the rule of thumb is the further
apart you can keep

422
00:18:13,800 --> 00:18:15,070
these things--

423
00:18:15,070 --> 00:18:17,600
if your DOM object model
JavaScript is querying your

424
00:18:17,600 --> 00:18:20,470
CSS all the time, that's going
to be synchronizing these

425
00:18:20,470 --> 00:18:22,310
basically concurrent
data structures.

426
00:18:22,310 --> 00:18:24,850
And any time you synchronize
anything, performance

427
00:18:24,850 --> 00:18:26,390
goes out the door.

428
00:18:26,390 --> 00:18:29,180
So that's kind of a
high-level tip.

429
00:18:29,180 --> 00:18:30,950
But what are we after?

430
00:18:30,950 --> 00:18:33,200
We're after a smooth
experience, right?

431
00:18:33,200 --> 00:18:36,240
We want 60 frames per second
on our web pages.

432
00:18:36,240 --> 00:18:38,010
And if at this point you're
asking yourself

433
00:18:38,010 --> 00:18:39,330
60 frames per second?

434
00:18:39,330 --> 00:18:41,060
I'm not trying to build
a game here.

435
00:18:41,060 --> 00:18:44,140
I'm just trying to scroll
on a page like it's

436
00:18:44,140 --> 00:18:45,210
nothing crazy, right?

437
00:18:45,210 --> 00:18:46,540
Well, not so fast.

438
00:18:46,540 --> 00:18:50,340
It turns out you can actually
do a lot of things that can

439
00:18:50,340 --> 00:18:53,610
compromise on the general
performance.

440
00:18:53,610 --> 00:18:56,910
So here's an example
that I like to use.

441
00:18:56,910 --> 00:18:59,450
We have a couple of different
tools within Chrome DevTools

442
00:18:59,450 --> 00:19:02,770
that can really help you
highlight or discover if you

443
00:19:02,770 --> 00:19:04,210
have an issue in this respect.

444
00:19:04,210 --> 00:19:09,620
So I'm going to go into Google+,
and I'm going to

445
00:19:09,620 --> 00:19:11,710
enable Show Paint Rectangles.

446
00:19:11,710 --> 00:19:14,740
So this is one of these options
that you don't want to

447
00:19:14,740 --> 00:19:17,740
have on all the time, but very
useful when you need it.

448
00:19:17,740 --> 00:19:20,320
So I'm going to click
on this, make this

449
00:19:20,320 --> 00:19:21,650
a little bit smaller.

450
00:19:21,650 --> 00:19:25,160
And now as I hover over
different elements, you see a

451
00:19:25,160 --> 00:19:28,790
little box around all the
different elements.

452
00:19:28,790 --> 00:19:32,000
And what this box tells you is
these are the elements that

453
00:19:32,000 --> 00:19:33,080
are being repainted.

454
00:19:33,080 --> 00:19:36,600
So the box shows you the
specific part of the screen

455
00:19:36,600 --> 00:19:37,880
that needs to be repainted.

456
00:19:37,880 --> 00:19:40,910
And generally speaking, the
smaller the area that you need

457
00:19:40,910 --> 00:19:43,820
to repaint, the better, the less
work that the CPU and the

458
00:19:43,820 --> 00:19:45,970
GPU and the browser has to do.

459
00:19:45,970 --> 00:19:49,540
So hovering just over one
link highlights that.

460
00:19:49,540 --> 00:19:52,900
But if you pay attention, in
some cases, we are actually

461
00:19:52,900 --> 00:19:54,930
highlighting not only--

462
00:19:54,930 --> 00:19:58,190
so in this case, we have this
box, but sometimes this entire

463
00:19:58,190 --> 00:19:59,630
area is outlined.

464
00:19:59,630 --> 00:20:03,690
So that means that on certain
interactions, this entire box

465
00:20:03,690 --> 00:20:06,730
needs to be repainted, which
is probably not the best

466
00:20:06,730 --> 00:20:06,995
experience.

467
00:20:06,995 --> 00:20:08,970
Now, I haven't looked
in as to why.

468
00:20:08,970 --> 00:20:10,880
Maybe there's a good reason
for why that needs to be

469
00:20:10,880 --> 00:20:12,130
repainted in this case.

470
00:20:12,130 --> 00:20:14,590
But generally speaking, this is
kind of a tip off to say,

471
00:20:14,590 --> 00:20:17,850
hey, perhaps we shouldn't be
repainting the chat area every

472
00:20:17,850 --> 00:20:23,050
single time that we hover over
a link, so very handy.

473
00:20:23,050 --> 00:20:26,490
So we can disable that and
go back into here.

474
00:20:26,490 --> 00:20:30,270
That tells you which areas get
repainted, which helps you

475
00:20:30,270 --> 00:20:31,670
catch certain problems.

476
00:20:31,670 --> 00:20:35,430
Or sometimes, you re-flow a
style on some other component

477
00:20:35,430 --> 00:20:37,410
of the page that you didn't
even expect, and you're

478
00:20:37,410 --> 00:20:40,180
rendering a lot of stuff that
you didn't need to.

479
00:20:40,180 --> 00:20:42,590
But you can go even a
little bit deeper.

480
00:20:42,590 --> 00:20:44,710
And you can go into our Frames
view, which we'll see in a

481
00:20:44,710 --> 00:20:48,260
second, and it will highlight
how much time you're spending

482
00:20:48,260 --> 00:20:49,520
on painting each frame.

483
00:20:49,520 --> 00:20:53,410
So if we do our very basic math,
we have one second, and

484
00:20:53,410 --> 00:20:55,430
we want to have 60 frames
per second.

485
00:20:55,430 --> 00:20:59,160
That amounts to about 16
milliseconds per frame.

486
00:20:59,160 --> 00:21:01,770
So that means you have a budget
of 16 milliseconds.

487
00:21:01,770 --> 00:21:04,550
Now, Chrome itself has to do
some work to paint the screen.

488
00:21:04,550 --> 00:21:07,400
So, generally speaking, let's
say we want to stay within 10

489
00:21:07,400 --> 00:21:08,430
milliseconds.

490
00:21:08,430 --> 00:21:11,230
And this is exactly what this
Frame view is showing you.

491
00:21:11,230 --> 00:21:14,680
So each section here is
a specific frame.

492
00:21:14,680 --> 00:21:17,350
And this is the amount
of time that it took

493
00:21:17,350 --> 00:21:18,180
to paint each frame.

494
00:21:18,180 --> 00:21:20,600
So if we stay under
this line--

495
00:21:20,600 --> 00:21:22,740
and we'll see a better
example in a second--

496
00:21:22,740 --> 00:21:26,110
that means that we're well
within our budget of 16

497
00:21:26,110 --> 00:21:26,680
milliseconds.

498
00:21:26,680 --> 00:21:29,330
But every once in awhile, we get
these frames which take a

499
00:21:29,330 --> 00:21:30,480
lot longer.

500
00:21:30,480 --> 00:21:33,840
And this causes a
skipped frame.

501
00:21:33,840 --> 00:21:36,320
So why is that an issue?

502
00:21:36,320 --> 00:21:39,070
Well, I have this very
simple example here.

503
00:21:39,070 --> 00:21:42,410
When I click on this, this line
here is just showing you

504
00:21:42,410 --> 00:21:47,540
the delay between a timer
firing on this page.

505
00:21:47,540 --> 00:21:50,400
So, generally speaking, we want
this to be flat, which

506
00:21:50,400 --> 00:21:52,510
means that it's firing on
a periodic interval.

507
00:21:52,510 --> 00:21:53,310
There's no delays.

508
00:21:53,310 --> 00:21:54,980
Everything's good, right?

509
00:21:54,980 --> 00:21:57,890
And when I click on this button
right here, nothing

510
00:21:57,890 --> 00:22:00,630
really happens because this
button kicks off about 5

511
00:22:00,630 --> 00:22:01,700
milliseconds of work.

512
00:22:01,700 --> 00:22:04,870
And as you would expect, we have
16 milliseconds during

513
00:22:04,870 --> 00:22:06,680
which we need to finish
all of our work.

514
00:22:06,680 --> 00:22:08,850
So you wouldn't expect anything
to happen, which is

515
00:22:08,850 --> 00:22:10,510
exactly the way you want it.

516
00:22:10,510 --> 00:22:13,660
Now, if I do the same thing and
I click on Skip 3, which

517
00:22:13,660 --> 00:22:17,700
stands for skip three frames,
so about 50 milliseconds,

518
00:22:17,700 --> 00:22:18,910
watch what happens.

519
00:22:18,910 --> 00:22:22,480
All of a sudden, the timer
gets this major delay.

520
00:22:22,480 --> 00:22:24,280
And that's because
we're literally

521
00:22:24,280 --> 00:22:25,960
skipping three frames.

522
00:22:25,960 --> 00:22:30,000
And maybe it's a little bit
hard to see, but in our

523
00:22:30,000 --> 00:22:32,560
animation here, there's
a little bit of delay.

524
00:22:32,560 --> 00:22:36,440
And to see it really show up,
we can click on skip 10.

525
00:22:36,440 --> 00:22:38,990
And all of sudden, the entire
animation pauses, right?

526
00:22:38,990 --> 00:22:41,410
So we have our JavaScript
running the animation.

527
00:22:41,410 --> 00:22:44,190
And we're doing work in the
background, or we're kicking

528
00:22:44,190 --> 00:22:45,700
off work when we click
on this button.

529
00:22:45,700 --> 00:22:49,100
And that really causes this
jenk, which is not a good

530
00:22:49,100 --> 00:22:50,330
experience.

531
00:22:50,330 --> 00:22:51,940
So, couple of tips there.

532
00:22:51,940 --> 00:22:55,440
If you do have work that needs
to be done for a good chunk of

533
00:22:55,440 --> 00:22:58,350
work that doesn't fit into a
single frame, two things you

534
00:22:58,350 --> 00:22:59,150
could think about.

535
00:22:59,150 --> 00:23:02,380
One is to push it into
a web worker.

536
00:23:02,380 --> 00:23:04,760
And the second is perhaps
even to split it.

537
00:23:04,760 --> 00:23:08,500
So instead of doing one piece
of work over, let's say, 100

538
00:23:08,500 --> 00:23:13,760
milliseconds, perhaps you can
split it into five chunks of

539
00:23:13,760 --> 00:23:15,530
20 milliseconds.

540
00:23:15,530 --> 00:23:20,770
And what that will allow you
to do is then allow the

541
00:23:20,770 --> 00:23:24,900
browser to inject some frames
such that the animation

542
00:23:24,900 --> 00:23:25,800
doesn't stop.

543
00:23:25,800 --> 00:23:27,310
So you're still doing your
work, but you're kind of

544
00:23:27,310 --> 00:23:29,290
piecing it together while
the browser is painting.

545
00:23:29,290 --> 00:23:32,310
So that in itself
could be useful.

546
00:23:32,310 --> 00:23:33,850
Let's look at this
next example.

547
00:23:33,850 --> 00:23:42,230
This is an example that we had
at Google I/O. So this is a

548
00:23:42,230 --> 00:23:43,360
very simple page.

549
00:23:43,360 --> 00:23:45,850
As you scroll down, we're
just moving the Chrome

550
00:23:45,850 --> 00:23:46,680
logos up and down.

551
00:23:46,680 --> 00:23:50,630
So, let's opened DevTools.

552
00:23:50,630 --> 00:23:53,530
We're gonna go into Timeline,
Frame view, and we're gonna

553
00:23:53,530 --> 00:23:54,025
hit Record.

554
00:23:54,025 --> 00:23:57,400
And we're just going to scroll,
so nothing too bad.

555
00:23:57,400 --> 00:23:59,580
Now let's add some costly
effects, try scrolling again.

556
00:23:59,580 --> 00:24:01,110
Ooh, look at that.

557
00:24:01,110 --> 00:24:03,040
All of a sudden, the frames
are taking much longer.

558
00:24:03,040 --> 00:24:07,070
And now I'm going to add some
on-scroll events, and boy, it

559
00:24:07,070 --> 00:24:09,830
really gets bad.

560
00:24:09,830 --> 00:24:11,490
So this is our original
experience here.

561
00:24:11,490 --> 00:24:14,841
We can drill in on one
of these frames.

562
00:24:14,841 --> 00:24:17,190
Let's actually pick even--
there we go.

563
00:24:17,190 --> 00:24:19,640
So you can see that this one
frame-- so we have three

564
00:24:19,640 --> 00:24:21,370
frames that we're
looking at here.

565
00:24:21,370 --> 00:24:23,920
Each one of these was taking
approximately 100

566
00:24:23,920 --> 00:24:24,770
milliseconds.

567
00:24:24,770 --> 00:24:29,060
So, correspondingly, the page
was scrolling much slower.

568
00:24:29,060 --> 00:24:31,280
And that's because we have
a couple different things

569
00:24:31,280 --> 00:24:31,760
happening here.

570
00:24:31,760 --> 00:24:34,550
First, we have this paint
happening, which-- so we're

571
00:24:34,550 --> 00:24:36,370
updating the entire screen.

572
00:24:36,370 --> 00:24:38,730
And we know that it's the entire
screen because you can

573
00:24:38,730 --> 00:24:39,830
actually see the dimensions.

574
00:24:39,830 --> 00:24:43,250
So this is literally the full
screen, and it's taking 15

575
00:24:43,250 --> 00:24:45,920
milliseconds just to paint
this entire area.

576
00:24:45,920 --> 00:24:48,210
So this is basically
our budget.

577
00:24:48,210 --> 00:24:49,230
So that's a problem.

578
00:24:49,230 --> 00:24:50,170
But not only that.

579
00:24:50,170 --> 00:24:54,960
We also have this JavaScript
callback, so the on-scroll

580
00:24:54,960 --> 00:24:56,230
event that gets fired.

581
00:24:56,230 --> 00:25:00,110
And if we expand this, you can
see that, boy, we have a ton

582
00:25:00,110 --> 00:25:02,900
of different style
recalculations.

583
00:25:02,900 --> 00:25:05,240
So, of course, this is
a demo showing you a

584
00:25:05,240 --> 00:25:06,250
pathological example.

585
00:25:06,250 --> 00:25:09,310
But unfortunately, this is
something that happens very

586
00:25:09,310 --> 00:25:11,350
frequently in the
wild as well.

587
00:25:11,350 --> 00:25:16,880
So definitely check out the
Frames view, very handy to

588
00:25:16,880 --> 00:25:19,360
help you debug and find problems
on your site in terms

589
00:25:19,360 --> 00:25:23,600
of overall experience to improve
your experience.

590
00:25:23,600 --> 00:25:27,020
And one last comment I'll make
about this is ideally you're

591
00:25:27,020 --> 00:25:28,760
running at 60 frames
per second,

592
00:25:28,760 --> 00:25:30,600
everything is nice and smooth.

593
00:25:30,600 --> 00:25:31,630
But if you can't--

594
00:25:31,630 --> 00:25:33,090
and that's OK--

595
00:25:33,090 --> 00:25:35,390
try to run at a consistent
frame rate.

596
00:25:35,390 --> 00:25:36,270
Maybe that's 30.

597
00:25:36,270 --> 00:25:38,330
Maybe that's even 15 or lower.

598
00:25:38,330 --> 00:25:42,960
But it's better to be consistent
than to jump up and

599
00:25:42,960 --> 00:25:44,230
down all the time.

600
00:25:44,230 --> 00:25:49,210
We're very good at detecting
changes in that respect.

601
00:25:49,210 --> 00:25:51,320
So users will notice that.

602
00:25:51,320 --> 00:25:55,730
So stay consistent, try to do
60 milliseconds where--

603
00:25:55,730 --> 00:25:58,910
60 milliseconds.

604
00:25:58,910 --> 00:26:00,740
The other tip I have
here is similar

605
00:26:00,740 --> 00:26:02,090
to the network timeline.

606
00:26:02,090 --> 00:26:05,030
You can actually export
this data.

607
00:26:05,030 --> 00:26:08,040
And once again, you can
attach it to a ticket.

608
00:26:08,040 --> 00:26:09,320
You can send it to
somebody else.

609
00:26:09,320 --> 00:26:12,090
You can save it for analysis
for later, any

610
00:26:12,090 --> 00:26:12,770
one of those things.

611
00:26:12,770 --> 00:26:15,210
And not only that, but
you can also import

612
00:26:15,210 --> 00:26:17,330
this data into DevTools.

613
00:26:17,330 --> 00:26:21,030
So in the network view, we
use an external tool to

614
00:26:21,030 --> 00:26:23,530
view the HAR file.

615
00:26:23,530 --> 00:26:28,230
Here you can import that same
JSON right into DevTools and

616
00:26:28,230 --> 00:26:31,640
reconstruct this entire
experience, so once again

617
00:26:31,640 --> 00:26:32,700
very, very useful.

618
00:26:32,700 --> 00:26:36,230
And if you look at the JSON file
that gets emitted, it is

619
00:26:36,230 --> 00:26:37,630
incredibly data rich.

620
00:26:37,630 --> 00:26:40,770
So it has all the information
about which JavaScript file is

621
00:26:40,770 --> 00:26:43,910
executing, which lines, which
functions, what was the heap

622
00:26:43,910 --> 00:26:45,750
size before, what was
the heap size after,

623
00:26:45,750 --> 00:26:46,620
all kinds of stuff.

624
00:26:46,620 --> 00:26:51,020
So even outside of DevTools,
that data could be used to

625
00:26:51,020 --> 00:26:53,770
generate other reports or build
other interesting tools,

626
00:26:53,770 --> 00:26:57,710
so definitely interesting
to explore.

627
00:26:57,710 --> 00:27:01,040
On that note, let's move
into JavaScript.

628
00:27:01,040 --> 00:27:04,420
So lots and lots of pages
are using lots

629
00:27:04,420 --> 00:27:05,590
of JavaScript nowadays.

630
00:27:05,590 --> 00:27:09,560
And a common problem, especially
for long-lived apps

631
00:27:09,560 --> 00:27:13,350
that stay open for awhile, is
memory leaks, where you

632
00:27:13,350 --> 00:27:16,120
allocate objects, and for
whatever reason, they stick

633
00:27:16,120 --> 00:27:18,660
around, and they're not getting
garbage collected.

634
00:27:18,660 --> 00:27:24,240
So, one tip that I have for you
guys is to use the Heaps

635
00:27:24,240 --> 00:27:25,580
Snapshots view.

636
00:27:25,580 --> 00:27:27,400
So let's take a look
at an example here.

637
00:27:27,400 --> 00:27:29,990

638
00:27:29,990 --> 00:27:32,790
You can find this example
on our Chrome Developers

639
00:27:32,790 --> 00:27:36,210
documentation, but what I'm
going to do here is I'm going

640
00:27:36,210 --> 00:27:37,960
to go into Profiles,
and I'm going to

641
00:27:37,960 --> 00:27:39,050
take a heaps snapshot.

642
00:27:39,050 --> 00:27:40,080
So I haven't done anything.

643
00:27:40,080 --> 00:27:41,680
This is just a fresh page.

644
00:27:41,680 --> 00:27:44,400
And it's going to capture
a snapshot.

645
00:27:44,400 --> 00:27:46,840
And in here, it just shows you
all of the objects there are

646
00:27:46,840 --> 00:27:48,740
currently allocated.

647
00:27:48,740 --> 00:27:50,080
Nothing interesting happened.

648
00:27:50,080 --> 00:27:51,850
Now, what we're going to do
is we're going to run this

649
00:27:51,850 --> 00:27:54,540
snippet of code, and this
snippet of code just is going

650
00:27:54,540 --> 00:27:57,970
to create a whole bunch
of item objects.

651
00:27:57,970 --> 00:28:00,530
So you can take a look at this
JavaScript later, but

652
00:28:00,530 --> 00:28:01,330
effectively, that's
all we're doing.

653
00:28:01,330 --> 00:28:03,150
We're going to allocate a bunch
of objects and delete

654
00:28:03,150 --> 00:28:05,240
some, except that we're
going to forget to

655
00:28:05,240 --> 00:28:06,220
delete some of them.

656
00:28:06,220 --> 00:28:07,970
So let's click on this
Action button.

657
00:28:07,970 --> 00:28:10,080
We just allocated objects.

658
00:28:10,080 --> 00:28:11,700
And we're going to take
another snapshot.

659
00:28:11,700 --> 00:28:15,300
So let's go back, click
Start again, and

660
00:28:15,300 --> 00:28:16,440
now we have two snapshots.

661
00:28:16,440 --> 00:28:18,750
So, of course, once again, we
can drill into the snapshot

662
00:28:18,750 --> 00:28:21,640
and look at the heap,
which is nice.

663
00:28:21,640 --> 00:28:24,510
But ideally we want to see a
diff between these two states.

664
00:28:24,510 --> 00:28:25,960
And that's exactly what
we can do here.

665
00:28:25,960 --> 00:28:28,150
We can click on Comparisons.

666
00:28:28,150 --> 00:28:30,580
And we can compare it
to snapshot one.

667
00:28:30,580 --> 00:28:32,700
So we're comparing two to one.

668
00:28:32,700 --> 00:28:34,550
And guess what?

669
00:28:34,550 --> 00:28:38,370
You can see that the difference
is that between

670
00:28:38,370 --> 00:28:42,470
these two runs, we allocated
over 10,000 objects.

671
00:28:42,470 --> 00:28:46,770
We deleted 9,000, but
we forgot 1,000.

672
00:28:46,770 --> 00:28:49,350
So 1,000 objects kind
of stuck around.

673
00:28:49,350 --> 00:28:51,235
And you can expand that,
and you can see all

674
00:28:51,235 --> 00:28:53,370
of these guys here.

675
00:28:53,370 --> 00:28:55,210
So that's our memory leak.

676
00:28:55,210 --> 00:28:57,610
So we just ran a diff between
the two different heaps, which

677
00:28:57,610 --> 00:29:01,190
is very nice, very handy
for catching these.

678
00:29:01,190 --> 00:29:03,850
Of course, you can also watch
your memory usage in the

679
00:29:03,850 --> 00:29:05,720
timeline as you're
recording it.

680
00:29:05,720 --> 00:29:11,340
But this is a very handy way
of finding the difference.

681
00:29:11,340 --> 00:29:12,320
So let's go back.

682
00:29:12,320 --> 00:29:18,100
You can also do similar things
for constructing DOM objects.

683
00:29:18,100 --> 00:29:21,160
So oftentimes, maybe a
templating engine or maybe

684
00:29:21,160 --> 00:29:24,590
your own code is creating some
sort of an HTML or a DOM

685
00:29:24,590 --> 00:29:28,110
sub-tree, which then
gets misplaced.

686
00:29:28,110 --> 00:29:28,860
You forget to delete it.

687
00:29:28,860 --> 00:29:34,290
Or maybe you discard it, and
you don't deallocate it or

688
00:29:34,290 --> 00:29:35,930
don't de-reference it.

689
00:29:35,930 --> 00:29:37,700
And it's going to
stick around.

690
00:29:37,700 --> 00:29:39,350
It's going to occupy
your memory.

691
00:29:39,350 --> 00:29:42,990
So similar to what we did just
previously with JavaScript,

692
00:29:42,990 --> 00:29:46,280
you can identify that via
the same process, so

693
00:29:46,280 --> 00:29:47,530
definitely check it.

694
00:29:47,530 --> 00:29:49,820

695
00:29:49,820 --> 00:29:50,810
Getting to the audits.

696
00:29:50,810 --> 00:29:53,280
So the Audit panel
has a couple of

697
00:29:53,280 --> 00:29:55,100
very interesting features.

698
00:29:55,100 --> 00:30:00,740
First of all, you can run an
audit to get a sense for what

699
00:30:00,740 --> 00:30:03,890
are the kind of easy pickings
on this page to improve its

700
00:30:03,890 --> 00:30:04,510
performance.

701
00:30:04,510 --> 00:30:06,900
So let me go back to
this page here.

702
00:30:06,900 --> 00:30:08,110
I'll go into Audits.

703
00:30:08,110 --> 00:30:09,910
And we have a couple of built
an audits, right?

704
00:30:09,910 --> 00:30:11,420
There's a network
and web page.

705
00:30:11,420 --> 00:30:13,980
But really, the power of this
tool is in the fact that you

706
00:30:13,980 --> 00:30:16,020
can easily extend it and
customize it, which is

707
00:30:16,020 --> 00:30:19,010
something we're going to
talk about in the next

708
00:30:19,010 --> 00:30:20,050
part of this video.

709
00:30:20,050 --> 00:30:22,130
But let's run this
report here.

710
00:30:22,130 --> 00:30:24,210
You can see that it's giving
me a couple of suggestions.

711
00:30:24,210 --> 00:30:27,930
It's saying that, hey, you have
some resources which are

712
00:30:27,930 --> 00:30:29,080
not being cached.

713
00:30:29,080 --> 00:30:31,150
So perhaps that's something
you can fix.

714
00:30:31,150 --> 00:30:33,880
Some cookie, image dimensions.

715
00:30:33,880 --> 00:30:36,090
The one elective highlight
here is the

716
00:30:36,090 --> 00:30:38,270
Remove Unused CSS Rules.

717
00:30:38,270 --> 00:30:41,640
So if I expand this, it tells
me that, hey, you've

718
00:30:41,640 --> 00:30:44,260
downloaded a bunch of CSS
to render this page.

719
00:30:44,260 --> 00:30:48,650
But in fact, 78% of it is not
being used on this page.

720
00:30:48,650 --> 00:30:49,100
Wow!

721
00:30:49,100 --> 00:30:53,710
So, specifically on this
one file, we have 5

722
00:30:53,710 --> 00:30:55,170
kilobytes of CSS.

723
00:30:55,170 --> 00:30:56,570
54% is not being used.

724
00:30:56,570 --> 00:30:58,630
And not only that, you can also
expand it and see the

725
00:30:58,630 --> 00:31:02,130
specific selectors that are
embedded in that CSS file that

726
00:31:02,130 --> 00:31:03,290
are not being used.

727
00:31:03,290 --> 00:31:06,380
So if you're really trying
to tune your first-load

728
00:31:06,380 --> 00:31:08,460
performance, perhaps you
can actually separate

729
00:31:08,460 --> 00:31:09,180
these files, right?

730
00:31:09,180 --> 00:31:11,590
Sometimes it's nice to have one
file which contains the

731
00:31:11,590 --> 00:31:13,100
CSS for all your pages.

732
00:31:13,100 --> 00:31:16,600
But sometimes, it does make
sense to split them apart and

733
00:31:16,600 --> 00:31:21,280
use them as such, so
very handy tool.

734
00:31:21,280 --> 00:31:25,820
And for a deeper look at your
page, I'd actually encourage

735
00:31:25,820 --> 00:31:28,790
you guys to install an extension
from the Chrome

736
00:31:28,790 --> 00:31:32,330
Store, which is PageSpeed
Insights.

737
00:31:32,330 --> 00:31:34,540
So once you install
the extension,

738
00:31:34,540 --> 00:31:36,270
you'll find a new tab.

739
00:31:36,270 --> 00:31:39,500
And let me go to the
CNN example here.

740
00:31:39,500 --> 00:31:42,435
I actually just ran
this report.

741
00:31:42,435 --> 00:31:46,900
So I'm using PageSpeed, I hit
Run, and it analyzed the page.

742
00:31:46,900 --> 00:31:49,400
It downloaded all the resources
and then did a whole

743
00:31:49,400 --> 00:31:50,220
bunch of things.

744
00:31:50,220 --> 00:31:52,600
And it's giving me a number
of recommendations.

745
00:31:52,600 --> 00:31:54,710
So you can see that we
have high-priority,

746
00:31:54,710 --> 00:31:57,130
medium-priority, and
low-priority recommendations

747
00:31:57,130 --> 00:32:00,840
for how we could improve the
performance of this page, so

748
00:32:00,840 --> 00:32:03,050
combine images, optimize
images.

749
00:32:03,050 --> 00:32:05,790
I'll show you one--
optimize images.

750
00:32:05,790 --> 00:32:10,020
So we found that by running this
extension that we could

751
00:32:10,020 --> 00:32:13,750
reduce the size of this page
by 113 kilobytes, which is

752
00:32:13,750 --> 00:32:14,480
quite significant.

753
00:32:14,480 --> 00:32:16,210
So that's 31%.

754
00:32:16,210 --> 00:32:18,410
And not only that, but we're
showing you the specific

755
00:32:18,410 --> 00:32:23,940
images and how much you could
save if you used a better

756
00:32:23,940 --> 00:32:27,180
compression technique, or
maybe you need to strip

757
00:32:27,180 --> 00:32:28,230
metadata and other things.

758
00:32:28,230 --> 00:32:33,010
So, one tip that I have is--

759
00:32:33,010 --> 00:32:34,720
I don't think a lot of
people realize this.

760
00:32:34,720 --> 00:32:37,240
We actually also give you
the optimized version.

761
00:32:37,240 --> 00:32:40,900
So not only do we highlight what
was the image that could

762
00:32:40,900 --> 00:32:43,150
have been optimized, we also
try to optimize it and give

763
00:32:43,150 --> 00:32:43,660
you this version.

764
00:32:43,660 --> 00:32:48,600
So I can click on See Optimized
Content here, and

765
00:32:48,600 --> 00:32:49,790
here's the optimized file.

766
00:32:49,790 --> 00:32:52,460
You can actually just save this
directly to your access

767
00:32:52,460 --> 00:32:54,220
folder, and just replace
the original file,

768
00:32:54,220 --> 00:32:55,420
and there you go--

769
00:32:55,420 --> 00:32:56,670
optimization done.

770
00:32:56,670 --> 00:32:59,540
So here's your image
optimization

771
00:32:59,540 --> 00:33:02,950
built into Chrome DevTools.

772
00:33:02,950 --> 00:33:06,040
And lots of other tips, I
should say, within the

773
00:33:06,040 --> 00:33:07,180
Insights extension.

774
00:33:07,180 --> 00:33:09,240
And there's a lot of very good
documentation as well.

775
00:33:09,240 --> 00:33:11,140
So if some of the
recommendations don't actually

776
00:33:11,140 --> 00:33:14,410
make sense, you can click on
Learn More, and we have

777
00:33:14,410 --> 00:33:18,060
extensive documentation on why
it makes sense, when it

778
00:33:18,060 --> 00:33:19,460
doesn't make sense to do that.

779
00:33:19,460 --> 00:33:21,810
Not every optimization is
applicable to your case.

780
00:33:21,810 --> 00:33:24,720
So check that out.

781
00:33:24,720 --> 00:33:28,430
And with that, we're going
to wrap up with part one.

782
00:33:28,430 --> 00:33:30,220
So in the next section, we're
going to go a little bit

783
00:33:30,220 --> 00:33:33,680
deeper into DevTools itself,
how we can extend it, and

784
00:33:33,680 --> 00:33:36,090
other cool things that
we can do with it.

785
00:33:36,090 --> 00:33:37,340
Thanks.

786
00:33:37,340 --> 00:33:39,800

