1
00:00:00,000 --> 00:00:08,250

2
00:00:08,250 --> 00:00:10,110
PETE LEPAGE: All right, well,
thanks everybody for joining

3
00:00:10,110 --> 00:00:14,640
us for another edition of our
"Chrome Apps Office Hours."

4
00:00:14,640 --> 00:00:17,560
We're joined today by Renato
Mangini, who is joining us

5
00:00:17,560 --> 00:00:19,110
from Brazil today.

6
00:00:19,110 --> 00:00:20,100
I'm Pete LePage.

7
00:00:20,100 --> 00:00:23,180
I'm a Developer Advocate here
in New York City, working on

8
00:00:23,180 --> 00:00:23,890
Chrome apps.

9
00:00:23,890 --> 00:00:26,690
And It's great to have everybody
join us today.

10
00:00:26,690 --> 00:00:29,520
I think we've got a
pretty interesting

11
00:00:29,520 --> 00:00:30,430
setup for you today.

12
00:00:30,430 --> 00:00:34,180
We're going to be talking about
the WebView Control,

13
00:00:34,180 --> 00:00:40,200
which allows you to embed live
web components within your

14
00:00:40,200 --> 00:00:41,890
Chrome app.

15
00:00:41,890 --> 00:00:44,290
So with that, I'm going to pass
it over to Renato, who

16
00:00:44,290 --> 00:00:48,250
can talk a little bit about
Chrome apps and the WebView.

17
00:00:48,250 --> 00:00:51,160
Renato, whenever you're ready to
share some screens, let me

18
00:00:51,160 --> 00:00:55,570
know, and I'll get us
going from there.

19
00:00:55,570 --> 00:00:58,070
RENATO MANGINI: Thank
you, everyone.

20
00:00:58,070 --> 00:00:58,890
This is Renato Mangini.

21
00:00:58,890 --> 00:01:01,520
I'm a Developer Advocate
for Chrome apps.

22
00:01:01,520 --> 00:01:04,879
And I'm talking directly
from Brazil.

23
00:01:04,879 --> 00:01:07,930
Today we will present the
WebView component.

24
00:01:07,930 --> 00:01:11,300
The WebView component,
it's an element.

25
00:01:11,300 --> 00:01:15,820
You put this Element inside
your Chrome packaged app.

26
00:01:15,820 --> 00:01:19,880
And what it does is, it gives
you the ability to embed, as

27
00:01:19,880 --> 00:01:25,090
Pete said, a whole website
inside your application.

28
00:01:25,090 --> 00:01:33,290
This is quite interesting, and
one friend of mine asked me,

29
00:01:33,290 --> 00:01:37,760
why would you want to embed
a website inside your

30
00:01:37,760 --> 00:01:38,740
application?

31
00:01:38,740 --> 00:01:40,225
No, because you are doing
an application.

32
00:01:40,225 --> 00:01:42,420
You are not doing a website.

33
00:01:42,420 --> 00:01:44,790
And there are some compelling
use cases.

34
00:01:44,790 --> 00:01:47,930
We'll talk about that
at the end.

35
00:01:47,930 --> 00:01:51,350
But you can think, like,
testing websites.

36
00:01:51,350 --> 00:01:54,800
You can think about
several other

37
00:01:54,800 --> 00:01:56,540
potential reasons for that.

38
00:01:56,540 --> 00:02:02,100
But we identified two very, very
compelling reasons for

39
00:02:02,100 --> 00:02:03,600
that at the beginning.

40
00:02:03,600 --> 00:02:05,490
The first one--

41
00:02:05,490 --> 00:02:07,530
Chrome packaged app
is new platform.

42
00:02:07,530 --> 00:02:10,160
You who are listening
to us now.

43
00:02:10,160 --> 00:02:16,490
You probably have one website or
one Chrome old packaged app

44
00:02:16,490 --> 00:02:21,340
or a Chrome hosted App, and you
want to use the new APIs.

45
00:02:21,340 --> 00:02:24,860
They are available to Chrome
packaged app and only to

46
00:02:24,860 --> 00:02:26,230
Chrome packaged app.

47
00:02:26,230 --> 00:02:28,930
However, you don't want to--

48
00:02:28,930 --> 00:02:31,750
at the first moment, you want to
create a prototype to show

49
00:02:31,750 --> 00:02:35,520
to your boss or to present to
your customers at first.

50
00:02:35,520 --> 00:02:38,430
And you just want to try
the platform before

51
00:02:38,430 --> 00:02:39,970
committing to it.

52
00:02:39,970 --> 00:02:46,180
So you can create a hybrid
application, where you embed

53
00:02:46,180 --> 00:02:47,030
your application.

54
00:02:47,030 --> 00:02:49,090
You change your code
to detect if it's

55
00:02:49,090 --> 00:02:51,160
running inside the WebView.

56
00:02:51,160 --> 00:02:56,130
And if it does, it uses a form,
a way of communicating

57
00:02:56,130 --> 00:03:01,100
between the WebView and the
platform, the Chrome packaged

58
00:03:01,100 --> 00:03:03,680
app, the real Chrome packaged
app that is

59
00:03:03,680 --> 00:03:06,660
embedded in that WebView.

60
00:03:06,660 --> 00:03:10,130
This is one use case, one
potential use case.

61
00:03:10,130 --> 00:03:15,100
And the other use case that we
are working on to make it very

62
00:03:15,100 --> 00:03:19,440
easy for you to use is
the social network

63
00:03:19,440 --> 00:03:22,010
buttons, the widgets.

64
00:03:22,010 --> 00:03:25,650
Suppose you want to include the
Google+ widget inside your

65
00:03:25,650 --> 00:03:27,060
Chrome packaged app.

66
00:03:27,060 --> 00:03:32,310
Currently you cannot unless
you use the WebView.

67
00:03:32,310 --> 00:03:37,320
Because it uses a series of
embed scripting and things

68
00:03:37,320 --> 00:03:39,530
that CSP doesn't allow
you to do.

69
00:03:39,530 --> 00:03:45,520
And so basically, what we want
to give you here is a way to

70
00:03:45,520 --> 00:03:50,460
include either a whole web
application, or more probably,

71
00:03:50,460 --> 00:03:53,590
a small widget or a small part
of your application inside

72
00:03:53,590 --> 00:03:57,715
your Chrome packaged app and
have all the benefits of a

73
00:03:57,715 --> 00:04:00,550
Chrome packaged app that you
probably heard about.

74
00:04:00,550 --> 00:04:03,260
That's why you are here
listening to us.

75
00:04:03,260 --> 00:04:04,510
So, OK.

76
00:04:04,510 --> 00:04:08,550

77
00:04:08,550 --> 00:04:10,210
Do I have any questions, Pete?

78
00:04:10,210 --> 00:04:10,880
Anything that--

79
00:04:10,880 --> 00:04:13,960
PETE LEPAGE: No, I think that
lays out things really well.

80
00:04:13,960 --> 00:04:16,680
The one thing I do want say
is, as we're going through

81
00:04:16,680 --> 00:04:19,860
this, if you have questions that
you want to ask either

82
00:04:19,860 --> 00:04:22,210
Renato or myself, if there's
things that you're kind of

83
00:04:22,210 --> 00:04:24,690
curious about, we're taking
questions through our Google

84
00:04:24,690 --> 00:04:25,480
Moderator page.

85
00:04:25,480 --> 00:04:27,170
The link's up on the
screen right now.

86
00:04:27,170 --> 00:04:36,500
You can go post your questions
at goo.gl/YfPN5.

87
00:04:36,500 --> 00:04:39,130
Like I said, the URL
is there on screen.

88
00:04:39,130 --> 00:04:40,880
You can go post your
questions there.

89
00:04:40,880 --> 00:04:44,240
We'll be taking those live
towards the end.

90
00:04:44,240 --> 00:04:46,720
And as well, we'll post the
link to some of the

91
00:04:46,720 --> 00:04:50,270
documentation and samples
as we go on.

92
00:04:50,270 --> 00:04:52,280
So, all right, Renato.

93
00:04:52,280 --> 00:04:53,090
Why don't we--

94
00:04:53,090 --> 00:04:53,880
RENATO MANGINI: OK.

95
00:04:53,880 --> 00:04:56,710
So, let's code, right?

96
00:04:56,710 --> 00:05:02,430
Before you switch to my window,
I will show you first

97
00:05:02,430 --> 00:05:08,170
and before everyone else, one
special project I'm working on

98
00:05:08,170 --> 00:05:12,940
that will help you develop
Chrome apps and Chrome

99
00:05:12,940 --> 00:05:13,780
extensions.

100
00:05:13,780 --> 00:05:15,540
It's not ready yet.

101
00:05:15,540 --> 00:05:18,300
That's why we didn't
publish it.

102
00:05:18,300 --> 00:05:21,100
PETE LEPAGE: This is the one
that you've been talking about

103
00:05:21,100 --> 00:05:24,880
internally that you've
shown us--

104
00:05:24,880 --> 00:05:25,170
RENATO MANGINI: Yes.

105
00:05:25,170 --> 00:05:25,540
Yes, yes, yes.

106
00:05:25,540 --> 00:05:30,710
It's API integration
with some IDEs--

107
00:05:30,710 --> 00:05:31,660
PETE LEPAGE: This is pretty
awesome, guys.

108
00:05:31,660 --> 00:05:34,200
RENATO MANGINI: --especially
Sublime.

109
00:05:34,200 --> 00:05:37,650
But yeah, as I say, it's
very, very early stage.

110
00:05:37,650 --> 00:05:40,800
There are a lot of functions
that are not ready yet.

111
00:05:40,800 --> 00:05:45,770
But anyway, I will start this
project using this project.

112
00:05:45,770 --> 00:05:50,120
I will start the sample using
this project, so you see how

113
00:05:50,120 --> 00:05:51,300
it simplifies things.

114
00:05:51,300 --> 00:05:52,560
PETE LEPAGE: OK, cool.

115
00:05:52,560 --> 00:05:54,690
RENATO MANGINI: So can
you switch my window?

116
00:05:54,690 --> 00:05:55,230
PETE LEPAGE: All right.

117
00:05:55,230 --> 00:05:58,215
So they can now see me
with your window up.

118
00:05:58,215 --> 00:06:02,110
And they've got you up in
the top right corner.

119
00:06:02,110 --> 00:06:03,020
RENATO MANGINI: Yes,
all right.

120
00:06:03,020 --> 00:06:05,930
This is Sublime editor.

121
00:06:05,930 --> 00:06:10,100
This is a code editor.

122
00:06:10,100 --> 00:06:13,530
Several people in the front
end would use a lot.

123
00:06:13,530 --> 00:06:15,310
It's very cool.

124
00:06:15,310 --> 00:06:21,570
We've been using it here since
the first GDL session.

125
00:06:21,570 --> 00:06:29,040
And if you have enough
resolution on your streaming,

126
00:06:29,040 --> 00:06:32,590
you can see there is
an additional menu,

127
00:06:32,590 --> 00:06:34,650
the last item here.

128
00:06:34,650 --> 00:06:37,865
It's Chrome, right?

129
00:06:37,865 --> 00:06:38,440
PETE LEPAGE: Yep.

130
00:06:38,440 --> 00:06:42,300
RENATO MANGINI: And there
are some options.

131
00:06:42,300 --> 00:06:45,780
And most of the options
are not implemented

132
00:06:45,780 --> 00:06:49,060
now, so never mind.

133
00:06:49,060 --> 00:06:54,150
But anyway, before I start, I
will show the URL where you

134
00:06:54,150 --> 00:06:55,410
can download this extension.

135
00:06:55,410 --> 00:06:58,070
It's not available on Sublime
Package Manager yet.

136
00:06:58,070 --> 00:07:00,420
As I said, it's very,
very early stage.

137
00:07:00,420 --> 00:07:06,210
But in one or two weeks, we
will have an alpha version

138
00:07:06,210 --> 00:07:07,210
that you can try.

139
00:07:07,210 --> 00:07:09,395
So Pete, here are you again.

140
00:07:09,395 --> 00:07:12,580
PETE LEPAGE: Hey, guys.

141
00:07:12,580 --> 00:07:14,220
RENATO MANGINI: Let me show--

142
00:07:14,220 --> 00:07:14,780
yeah, that's it.

143
00:07:14,780 --> 00:07:18,580
That's the URL.

144
00:07:18,580 --> 00:07:21,030
I'm not sure if you
can see that.

145
00:07:21,030 --> 00:07:21,290
PETE LEPAGE: All right.

146
00:07:21,290 --> 00:07:22,400
Well, you know what, Renato?

147
00:07:22,400 --> 00:07:25,040
I'll get that up on-screen
in a little bit.

148
00:07:25,040 --> 00:07:25,580
If you can--

149
00:07:25,580 --> 00:07:27,760
RENATO MANGINI: All right.

150
00:07:27,760 --> 00:07:29,010
All right.

151
00:07:29,010 --> 00:07:31,610

152
00:07:31,610 --> 00:07:32,360
Can I go ahead?

153
00:07:32,360 --> 00:07:34,660
Or do you want to--

154
00:07:34,660 --> 00:07:37,790
PETE LEPAGE: You go ahead,
and I'll get the URL.

155
00:07:37,790 --> 00:07:38,750
RENATO MANGINI: All right.

156
00:07:38,750 --> 00:07:41,060
So I will start a new
project here.

157
00:07:41,060 --> 00:07:42,810
It's a Chrome app project.

158
00:07:42,810 --> 00:07:45,450
So I go to Chrome, New
App, and I get

159
00:07:45,450 --> 00:07:47,580
the Hello World sample.

160
00:07:47,580 --> 00:07:49,650
And, ta-da!

161
00:07:49,650 --> 00:07:55,340
You have the base snippets
done, ready for you.

162
00:07:55,340 --> 00:08:03,640
So let's save it here on
my Genie and WebView.

163
00:08:03,640 --> 00:08:06,260

164
00:08:06,260 --> 00:08:06,980
Folder.

165
00:08:06,980 --> 00:08:11,510
That's the live folder,
here, and that's it.

166
00:08:11,510 --> 00:08:18,050
And I saved the Main at the same
directory and the same

167
00:08:18,050 --> 00:08:23,820
for the index.html.

168
00:08:23,820 --> 00:08:27,920
As you probably are aware of,
this is the main structure of

169
00:08:27,920 --> 00:08:29,870
the Chrome packaged app.

170
00:08:29,870 --> 00:08:33,510
There is a JSON, a manifest.

171
00:08:33,510 --> 00:08:37,260
There's a JavaScript, which
is the background page.

172
00:08:37,260 --> 00:08:41,690
The background page is
responsible to open the UI,

173
00:08:41,690 --> 00:08:43,760
the actual UI of your app.

174
00:08:43,760 --> 00:08:47,890
So you listen to this
onLaunched event.

175
00:08:47,890 --> 00:08:49,210
And you do whatever you want.

176
00:08:49,210 --> 00:08:53,650
Usually you just create another
window with the

177
00:08:53,650 --> 00:08:57,330
point-and-shoot correct HTML.

178
00:08:57,330 --> 00:09:01,350
And here we have
the basic HTML.

179
00:09:01,350 --> 00:09:03,950
PETE LEPAGE: Again, this is the
standard stuff that people

180
00:09:03,950 --> 00:09:04,770
are used to seeing.

181
00:09:04,770 --> 00:09:08,670
All you did was create a real
quick way of being able to put

182
00:09:08,670 --> 00:09:10,880
that in so that you don't have
to either go write that

183
00:09:10,880 --> 00:09:13,970
yourself or maybe even
just copy it from

184
00:09:13,970 --> 00:09:15,550
somewhere else, right?

185
00:09:15,550 --> 00:09:18,250
RENATO MANGINI: Exactly.

186
00:09:18,250 --> 00:09:19,070
That's it.

187
00:09:19,070 --> 00:09:31,020
So let's add this application
to my live directory.

188
00:09:31,020 --> 00:09:36,240
And here it is, it's
Hello World, OK?

189
00:09:36,240 --> 00:09:38,050
So let's execute it.

190
00:09:38,050 --> 00:09:42,610
It's nothing different
from the basics.

191
00:09:42,610 --> 00:09:45,370
It's a Hello World
application.

192
00:09:45,370 --> 00:09:52,140
And now we will add the
WebView component.

193
00:09:52,140 --> 00:09:55,120
The WebView component,
it's an HTML

194
00:09:55,120 --> 00:09:58,160
element, as I said before.

195
00:09:58,160 --> 00:10:05,590
It's a simple element.

196
00:10:05,590 --> 00:10:07,950
PETE LEPAGE: So you're
just adding a

197
00:10:07,950 --> 00:10:10,160
WebView tag to your element.

198
00:10:10,160 --> 00:10:14,040
So it's basically exactly like
you would add maybe an iFrame

199
00:10:14,040 --> 00:10:14,955
or something like that.

200
00:10:14,955 --> 00:10:19,040
You're just using a WebView
tag, which normal browsers

201
00:10:19,040 --> 00:10:21,030
aren't going to do
anything with.

202
00:10:21,030 --> 00:10:21,380
RENATO MANGINI: Yes.

203
00:10:21,380 --> 00:10:24,900
And it's a good thing you
mentioned iFrame, because one

204
00:10:24,900 --> 00:10:28,520
of the most common questions
we get is what is the

205
00:10:28,520 --> 00:10:32,700
difference between the WebView
and the iFrame?

206
00:10:32,700 --> 00:10:37,970
And the difference is, there's
one structural difference, and

207
00:10:37,970 --> 00:10:41,670
there are several consequences
of that.

208
00:10:41,670 --> 00:10:44,020
The structural difference
is the WebView

209
00:10:44,020 --> 00:10:46,280
runs in its own process.

210
00:10:46,280 --> 00:10:53,120
It's a different process than
your main tread, your

211
00:10:53,120 --> 00:10:54,990
JavaScript tread.

212
00:10:54,990 --> 00:10:59,360
What it means is, first,
it's sandboxed.

213
00:10:59,360 --> 00:11:03,450
So you can't load.

214
00:11:03,450 --> 00:11:05,740
And you are safe.

215
00:11:05,740 --> 00:11:06,990
Your application is safe.

216
00:11:06,990 --> 00:11:11,130

217
00:11:11,130 --> 00:11:12,780
You have some--

218
00:11:12,780 --> 00:11:16,550
actually, you have many methods
that you can control

219
00:11:16,550 --> 00:11:20,410
your WebView.

220
00:11:20,410 --> 00:11:24,970
So while we talk, I'm
trying to turn my

221
00:11:24,970 --> 00:11:26,220
other computer here.

222
00:11:26,220 --> 00:11:29,340

223
00:11:29,340 --> 00:11:33,320
So this method allows
you to control--

224
00:11:33,320 --> 00:11:36,980
in fact, there's one sample
on our GitHub repository.

225
00:11:36,980 --> 00:11:39,480
Do you have the URL there?

226
00:11:39,480 --> 00:11:39,590
PETE LEPAGE: Yeah.

227
00:11:39,590 --> 00:11:42,420
I can pop that URL
up right now.

228
00:11:42,420 --> 00:11:46,380
RENATO MANGINI: So it's the
sample called Browser.

229
00:11:46,380 --> 00:11:49,430
If you're interested in the
Browser tag, in the WebView

230
00:11:49,430 --> 00:11:52,440
tag, you should take a
look at this browser.

231
00:11:52,440 --> 00:11:57,640
Many things we do here, it's
based on this sample.

232
00:11:57,640 --> 00:12:02,150
And the idea of the sample is
it's not practical, because

233
00:12:02,150 --> 00:12:06,090
it's just a simulation of a
browser inside the Chrome

234
00:12:06,090 --> 00:12:06,940
packaged app.

235
00:12:06,940 --> 00:12:09,260
But it shows you how
powerful it can be.

236
00:12:09,260 --> 00:12:11,580
You can control anything
off the WebView.

237
00:12:11,580 --> 00:12:13,520
PETE LEPAGE: It sort of lets
you build your own browser,

238
00:12:13,520 --> 00:12:15,990
get the idea of how some of
those things might want to

239
00:12:15,990 --> 00:12:18,340
work, how you might use these
things in a real-world

240
00:12:18,340 --> 00:12:19,950
application.

241
00:12:19,950 --> 00:12:22,600
RENATO MANGINI: Yeah.

242
00:12:22,600 --> 00:12:24,865
You don't want to create a
Chrome packaged app that

243
00:12:24,865 --> 00:12:26,070
simulates a browser, right?

244
00:12:26,070 --> 00:12:29,680
PETE LEPAGE: That would be a
little silly, but certainly

245
00:12:29,680 --> 00:12:31,220
something that--

246
00:12:31,220 --> 00:12:32,600
you could do it if you wanted.

247
00:12:32,600 --> 00:12:34,160
RENATO MANGINI: Yeah,
you can do it

248
00:12:34,160 --> 00:12:34,932
PETE LEPAGE: Hey, we've
done stranger

249
00:12:34,932 --> 00:12:36,345
things with Chrome apps.

250
00:12:36,345 --> 00:12:40,560
You know, control helicopters,
we've done things like, write

251
00:12:40,560 --> 00:12:42,870
a web server within
a Chrome app.

252
00:12:42,870 --> 00:12:47,410
So effectively, you're writing a
web server within a web app.

253
00:12:47,410 --> 00:12:50,120
So no reason why you
couldn't do it.

254
00:12:50,120 --> 00:12:52,150
Maybe not the most practical.

255
00:12:52,150 --> 00:12:54,400
RENATO MANGINI: Drones
and bacon fryers--

256
00:12:54,400 --> 00:12:56,110
oh, that's not featured yet.

257
00:12:56,110 --> 00:12:56,990
PETE LEPAGE: Hey,
you know what?

258
00:12:56,990 --> 00:13:04,170
If somebody writes a bacon
fryer-controlling Chrome app,

259
00:13:04,170 --> 00:13:08,895
I will feature that in one of
these "Chrome Apps Office

260
00:13:08,895 --> 00:13:11,070
Hours" because that'd
be kind of cool.

261
00:13:11,070 --> 00:13:13,140
RENATO MANGINI: Yeah,
definitely.

262
00:13:13,140 --> 00:13:13,820
OK.

263
00:13:13,820 --> 00:13:16,590
So let's see what
happened here.

264
00:13:16,590 --> 00:13:19,500
What I did here, I just
added a WebView.

265
00:13:19,500 --> 00:13:22,770
I set the source attribute,
the src attribute.

266
00:13:22,770 --> 00:13:26,800
The WebView has nothing
inside the tag.

267
00:13:26,800 --> 00:13:28,550
So it's an empty tag.

268
00:13:28,550 --> 00:13:30,170
And I just save it.

269
00:13:30,170 --> 00:13:34,560
And let's check what's happens
when I reload this

270
00:13:34,560 --> 00:13:37,080
application.

271
00:13:37,080 --> 00:13:38,760
Oh, nothing.

272
00:13:38,760 --> 00:13:40,750
Why is that?

273
00:13:40,750 --> 00:13:44,760
So let's check what
happened here.

274
00:13:44,760 --> 00:13:47,750
And you see that this
is planned, OK?

275
00:13:47,750 --> 00:13:49,840
It's not a bug.

276
00:13:49,840 --> 00:13:51,410
PETE LEPAGE: Always
love those--

277
00:13:51,410 --> 00:13:52,640
intentional.

278
00:13:52,640 --> 00:13:54,160
We've got to show you
something first.

279
00:13:54,160 --> 00:13:56,260
RENATO MANGINI: That's true.

280
00:13:56,260 --> 00:13:58,990
It's on my script.

281
00:13:58,990 --> 00:14:02,420
The problem is the WebView
doesn't come with the full

282
00:14:02,420 --> 00:14:03,500
width and height.

283
00:14:03,500 --> 00:14:06,090
It doesn't come with
the full size.

284
00:14:06,090 --> 00:14:10,290
So you have to size it
to properly show it.

285
00:14:10,290 --> 00:14:14,300
And we'll do it using
CSS properties.

286
00:14:14,300 --> 00:14:15,870
It's the only way to do it.

287
00:14:15,870 --> 00:14:19,790
The first version of WebView, if
you looked at some samples

288
00:14:19,790 --> 00:14:24,680
or some documentation before,
you saw the width and height

289
00:14:24,680 --> 00:14:25,390
properties.

290
00:14:25,390 --> 00:14:29,590
But those are not available
anymore, OK?

291
00:14:29,590 --> 00:14:33,970

292
00:14:33,970 --> 00:14:38,370
Let's do some--

293
00:14:38,370 --> 00:14:41,490
I will do two things at once.

294
00:14:41,490 --> 00:14:49,720
I will change the window size,
so we can see the size, the

295
00:14:49,720 --> 00:14:51,280
WebView, properly.

296
00:14:51,280 --> 00:14:52,830
PETE LEPAGE: Reasonably sized.

297
00:14:52,830 --> 00:14:53,730
RENATO MANGINI: Exactly.

298
00:14:53,730 --> 00:14:57,413
And let's change it to--

299
00:14:57,413 --> 00:15:00,870

300
00:15:00,870 --> 00:15:02,460
and that's it.

301
00:15:02,460 --> 00:15:07,640
To make sure that we know the
limits of the WebView, you add

302
00:15:07,640 --> 00:15:15,450
a simple and beautiful
border, right?

303
00:15:15,450 --> 00:15:23,020
And voila, let's see,
reload app, and

304
00:15:23,020 --> 00:15:25,440
there it is, my WebView.

305
00:15:25,440 --> 00:15:29,320

306
00:15:29,320 --> 00:15:30,530
PETE LEPAGE: Wow, that's
a pretty red

307
00:15:30,530 --> 00:15:32,200
border you have there.

308
00:15:32,200 --> 00:15:34,180
RENATO MANGINI: Yes.

309
00:15:34,180 --> 00:15:43,330
So first of all, if I inspect
this element, this window.

310
00:15:43,330 --> 00:15:48,730
You can see that there's
nothing inside

311
00:15:48,730 --> 00:15:50,750
the WebView, right?

312
00:15:50,750 --> 00:15:53,470
PETE LEPAGE: Right.

313
00:15:53,470 --> 00:15:57,180
RENATO MANGINI: The WebView
uses a shadow DOM.

314
00:15:57,180 --> 00:16:01,690
So it's a very advanced topic,
probably, but anyway, I just

315
00:16:01,690 --> 00:16:03,380
show it here.

316
00:16:03,380 --> 00:16:11,840
It's advanced, the advanced
settings of Developer Tools.

317
00:16:11,840 --> 00:16:21,800
And now, as you can see here,
oh, that's awesome!

318
00:16:21,800 --> 00:16:27,400
So the second feature you
have to remember,

319
00:16:27,400 --> 00:16:28,760
that was planted here--

320
00:16:28,760 --> 00:16:32,870

321
00:16:32,870 --> 00:16:33,710
you think it's a bug.

322
00:16:33,710 --> 00:16:35,080
It's not.

323
00:16:35,080 --> 00:16:37,800
The WebView requires
a permission.

324
00:16:37,800 --> 00:16:38,580
PETE LEPAGE: Aha.

325
00:16:38,580 --> 00:16:41,660
So, one of the really important
things with Chrome

326
00:16:41,660 --> 00:16:43,810
apps is that they work on a

327
00:16:43,810 --> 00:16:45,290
permissions-based model, right?

328
00:16:45,290 --> 00:16:49,300
So we need a permission that
says, hey, we want to do this.

329
00:16:49,300 --> 00:16:52,290
RENATO MANGINI: That's a very
frequent source of errors,

330
00:16:52,290 --> 00:16:57,450
because there is no debugging
information about that.

331
00:16:57,450 --> 00:17:00,420
The WebView element is
simply not available.

332
00:17:00,420 --> 00:17:03,710
PETE LEPAGE: Yeah, that's just
kind of frustrating isn't it?

333
00:17:03,710 --> 00:17:05,060
RENATO MANGINI: Yes.

334
00:17:05,060 --> 00:17:07,690
There's no error in the
console at all.

335
00:17:07,690 --> 00:17:10,000
PETE LEPAGE: Do you happen to
know, is there a bug filed on

336
00:17:10,000 --> 00:17:11,140
that, Renato?

337
00:17:11,140 --> 00:17:15,339
RENATO MANGINI: If there's not,
it will be in one hour.

338
00:17:15,339 --> 00:17:16,630
I will add it.

339
00:17:16,630 --> 00:17:16,859
PETE LEPAGE: Yeah.

340
00:17:16,859 --> 00:17:18,040
So that's the other thing.

341
00:17:18,040 --> 00:17:21,359
For those of you guys who
are watching live,

342
00:17:21,359 --> 00:17:22,520
go star that bug.

343
00:17:22,520 --> 00:17:24,329
Go have a look, or
you know what?

344
00:17:24,329 --> 00:17:25,530
Don't even wait the hour.

345
00:17:25,530 --> 00:17:28,820
Go have a quick peek
in crbug.com.

346
00:17:28,820 --> 00:17:31,220
See if you can find it
and file that bug.

347
00:17:31,220 --> 00:17:35,040
Let us know about it so that the
more people who star this

348
00:17:35,040 --> 00:17:39,800
thing, the better chances of
it getting fixed sooner.

349
00:17:39,800 --> 00:17:43,130
And the engineers who are
working on these things know

350
00:17:43,130 --> 00:17:45,870
that it's an important
factor for you.

351
00:17:45,870 --> 00:17:48,330
RENATO MANGINI: Yes, exactly.

352
00:17:48,330 --> 00:17:53,500
So, OK, I added the permission
for the WebView.

353
00:17:53,500 --> 00:17:58,740
And now if I reload the
app, I have here

354
00:17:58,740 --> 00:18:00,840
the Google page because--

355
00:18:00,840 --> 00:18:01,700
why is this Google?

356
00:18:01,700 --> 00:18:08,200
Because I set explicitly the
source of my WebView here.

357
00:18:08,200 --> 00:18:15,880
And as you can see, if I go to
the Developer Tools, after I

358
00:18:15,880 --> 00:18:22,350
enabled shadow root, I can see
the element have this shadow

359
00:18:22,350 --> 00:18:29,700
root, and this is implemented
through a plug-in like

360
00:18:29,700 --> 00:18:31,170
internal implementation.

361
00:18:31,170 --> 00:18:35,320
But anyway, this shadow
DOM doesn't matter

362
00:18:35,320 --> 00:18:39,450
for the normal usage.

363
00:18:39,450 --> 00:18:43,480
Let's get through
how to debug the

364
00:18:43,480 --> 00:18:44,790
content inside the WebView.

365
00:18:44,790 --> 00:18:46,530
Because as you see, you
cannot have access

366
00:18:46,530 --> 00:18:48,780
to the content here.

367
00:18:48,780 --> 00:18:52,160
However, the Chrome packaged
app, you probably noted that

368
00:18:52,160 --> 00:18:56,440
it has one inspector, one
Developer Tool for each

369
00:18:56,440 --> 00:19:01,560
window, for each page
that it opens.

370
00:19:01,560 --> 00:19:05,930
That includes the WebView.

371
00:19:05,930 --> 00:19:10,150
So if we right-click inside
the WebView and we Inspect

372
00:19:10,150 --> 00:19:13,370
Element, here we are.

373
00:19:13,370 --> 00:19:17,090
Now we can inspect the content
inside the WebView.

374
00:19:17,090 --> 00:19:19,990

375
00:19:19,990 --> 00:19:21,450
All right?

376
00:19:21,450 --> 00:19:23,630
PETE LEPAGE: All right.

377
00:19:23,630 --> 00:19:35,290
RENATO MANGINI: So now
let's see what we can

378
00:19:35,290 --> 00:19:37,950
do with this component.

379
00:19:37,950 --> 00:19:41,840
I will copy and paste some code
to make it faster, OK?

380
00:19:41,840 --> 00:19:45,380
But first I will explain what
I'm going to do here.

381
00:19:45,380 --> 00:19:48,570
As I said, the WebView, it's
not a simple iFrame.

382
00:19:48,570 --> 00:19:50,390
I have control over
the WebView.

383
00:19:50,390 --> 00:19:56,670
I can load a specific URL on the
JavaScript code, not only

384
00:19:56,670 --> 00:20:00,330
setting the attribute
on the HTML5.

385
00:20:00,330 --> 00:20:03,920
I can reload the page.

386
00:20:03,920 --> 00:20:05,440
I can stop the loading.

387
00:20:05,440 --> 00:20:10,060
I can receive notification of
events, like if the load

388
00:20:10,060 --> 00:20:11,680
starts, if the load stops.

389
00:20:11,680 --> 00:20:13,450
So let's implement
a very simple

390
00:20:13,450 --> 00:20:14,630
thing that's very important.

391
00:20:14,630 --> 00:20:18,655
If you want to embed a website
inside your Chrome packaged

392
00:20:18,655 --> 00:20:23,960
app, it's very important that
you know when the user clicks

393
00:20:23,960 --> 00:20:29,000
on a link, it makes it load,
and when the load finishes,

394
00:20:29,000 --> 00:20:35,150
which means that your UI
probably wants to show some

395
00:20:35,150 --> 00:20:38,720
stuff to the user based on the
fact that the load finished on

396
00:20:38,720 --> 00:20:41,130
the WebView, right?

397
00:20:41,130 --> 00:20:44,130
So what are we going
to do here?

398
00:20:44,130 --> 00:20:47,970
We're going to include
a script.

399
00:20:47,970 --> 00:20:51,470
And this script, we
will create it.

400
00:20:51,470 --> 00:20:56,320

401
00:20:56,320 --> 00:20:57,820
Pete, can you answer
me one question?

402
00:20:57,820 --> 00:20:59,790
Can I put some scripts here?

403
00:20:59,790 --> 00:21:01,700
PETE LEPAGE: Inside
that script block?

404
00:21:01,700 --> 00:21:02,130
No.

405
00:21:02,130 --> 00:21:05,590
That's another thing that a
bunch of people have run into.

406
00:21:05,590 --> 00:21:09,360
That's one of the Content
Security Policy rules that are

407
00:21:09,360 --> 00:21:10,590
implemented.

408
00:21:10,590 --> 00:21:14,350
You can't, unfortunately, put
script within a script log.

409
00:21:14,350 --> 00:21:17,510
You can only refer to external
script sources.

410
00:21:17,510 --> 00:21:18,700
RENATO MANGINI: Excellent.

411
00:21:18,700 --> 00:21:21,850
Thank you very much, sir.

412
00:21:21,850 --> 00:21:26,380
So this is how--

413
00:21:26,380 --> 00:21:27,640
one more thing I want
to show you.

414
00:21:27,640 --> 00:21:31,420
This is totally unrelated
to WebView, again, OK?

415
00:21:31,420 --> 00:21:33,420
It's a parentheses.

416
00:21:33,420 --> 00:21:44,620
And part of this Chrome app
API integration is code

417
00:21:44,620 --> 00:21:45,870
completion.

418
00:21:45,870 --> 00:21:47,510

419
00:21:47,510 --> 00:21:49,330
PETE LEPAGE: In fact, while
you're doing that code

420
00:21:49,330 --> 00:21:52,940
completion, I'm going to put up
the URL right now, so that

421
00:21:52,940 --> 00:21:55,060
people can go download
this if they want.

422
00:21:55,060 --> 00:22:04,800
The Sublime plug-in you can go
to the URL goo.go/F6dht.

423
00:22:04,800 --> 00:22:07,560
So you can go to that
URL, grab that, and

424
00:22:07,560 --> 00:22:08,190
you can install it.

425
00:22:08,190 --> 00:22:13,920
Keep in mind, as Renato said,
it is a beta stage product.

426
00:22:13,920 --> 00:22:17,670
It's not something that's quite
ready for full-time use.

427
00:22:17,670 --> 00:22:19,380
But it is a great
place to start.

428
00:22:19,380 --> 00:22:22,610
And if you run into questions,
problems, anything like that,

429
00:22:22,610 --> 00:22:25,530
please let us know about them,
because this is something we

430
00:22:25,530 --> 00:22:28,720
want to make your development
and our development on these

431
00:22:28,720 --> 00:22:30,920
apps a lot easier.

432
00:22:30,920 --> 00:22:32,790
RENATO MANGINI: Yeah,
absolutely.

433
00:22:32,790 --> 00:22:36,630
So we are back to
the code, OK?

434
00:22:36,630 --> 00:22:41,230
While Pete was talking to
you, distracting you, I

435
00:22:41,230 --> 00:22:43,760
typed out this code.

436
00:22:43,760 --> 00:22:47,980
I'm pretty quick on typing
code, as you see.

437
00:22:47,980 --> 00:22:49,150
But OK.

438
00:22:49,150 --> 00:22:56,130
So let's add one ID to this
element, because I will need

439
00:22:56,130 --> 00:22:57,560
two elements later.

440
00:22:57,560 --> 00:22:59,830
That's why I added an ID.

441
00:22:59,830 --> 00:23:05,140
And this code, it's a very
simple code to get the WebView

442
00:23:05,140 --> 00:23:10,020
and to add infinite listings
to this WebView.

443
00:23:10,020 --> 00:23:12,670
And I have this indicator.

444
00:23:12,670 --> 00:23:14,840
I haven't created it yet.

445
00:23:14,840 --> 00:23:18,730
But I would do it through
div here.

446
00:23:18,730 --> 00:23:25,920

447
00:23:25,920 --> 00:23:30,240
And I want to show loading on
this div, inside this div

448
00:23:30,240 --> 00:23:33,560
every time the WebView
is loading.

449
00:23:33,560 --> 00:23:36,220
And I want to clean
this message

450
00:23:36,220 --> 00:23:38,590
when the load is finished.

451
00:23:38,590 --> 00:23:40,690
So look at this code.

452
00:23:40,690 --> 00:23:42,035
It's very, very simple.

453
00:23:42,035 --> 00:23:46,540

454
00:23:46,540 --> 00:23:49,370
There are two event
listings here.

455
00:23:49,370 --> 00:23:52,860
And I listed these two events.

456
00:23:52,860 --> 00:23:58,700
One thing, this documentation,
this information about events,

457
00:23:58,700 --> 00:24:04,770
properties of the WebView, is
not on the website, on our

458
00:24:04,770 --> 00:24:07,000
documentation website yet.

459
00:24:07,000 --> 00:24:12,180
It's a very new thing, like
one or two weeks.

460
00:24:12,180 --> 00:24:16,340
It's very recent, and we have
technical writers at this

461
00:24:16,340 --> 00:24:19,250
exact moment working to improve
this documentation and

462
00:24:19,250 --> 00:24:21,460
to insert all of these
properties.

463
00:24:21,460 --> 00:24:26,250
That's why I said on the Google+
event, I said come

464
00:24:26,250 --> 00:24:27,870
watch the secrets and

465
00:24:27,870 --> 00:24:30,570
undocumented stuff from WebView.

466
00:24:30,570 --> 00:24:30,960
PETE LEPAGE: Nice.

467
00:24:30,960 --> 00:24:34,660
So I just put up a URL to
the documentation that

468
00:24:34,660 --> 00:24:36,210
we have right now.

469
00:24:36,210 --> 00:24:39,550
And this is the stuff that, as
Renato said, we don't have all

470
00:24:39,550 --> 00:24:40,960
the final stuff up there yet.

471
00:24:40,960 --> 00:24:42,900
The stuff that he's showing
you here is

472
00:24:42,900 --> 00:24:44,230
not documented yet.

473
00:24:44,230 --> 00:24:45,760
We are working to
get that done.

474
00:24:45,760 --> 00:24:49,630
So keep an eye on that URL
that you see there.

475
00:24:49,630 --> 00:24:51,350
We should have that up
hopefully within the

476
00:24:51,350 --> 00:24:53,880
next week or two.

477
00:24:53,880 --> 00:24:54,870
RENATO MANGINI: OK.

478
00:24:54,870 --> 00:24:59,850
So OK.

479
00:24:59,850 --> 00:25:02,270
What this is--

480
00:25:02,270 --> 00:25:04,090
let's try this code, right?

481
00:25:04,090 --> 00:25:11,510
If there is no typo or copy and
paste error, we will see

482
00:25:11,510 --> 00:25:12,760
this load indicator.

483
00:25:12,760 --> 00:25:20,400

484
00:25:20,400 --> 00:25:21,820
PETE LEPAGE: So we load up.

485
00:25:21,820 --> 00:25:23,596
Boom, boom, boom.

486
00:25:23,596 --> 00:25:25,020
RENATO MANGINI: It
loaded already.

487
00:25:25,020 --> 00:25:25,940
So--

488
00:25:25,940 --> 00:25:29,480
PETE LEPAGE: And we just saw
that loading that showed up in

489
00:25:29,480 --> 00:25:31,270
the top left.

490
00:25:31,270 --> 00:25:31,640
RENATO MANGINI: Yes.

491
00:25:31,640 --> 00:25:35,090
So let's try some--

492
00:25:35,090 --> 00:25:40,930
look, I'm not sure if the
streaming allows you to see.

493
00:25:40,930 --> 00:25:41,816
But you know--

494
00:25:41,816 --> 00:25:44,300
PETE LEPAGE: We need to find
something slow, that's like,

495
00:25:44,300 --> 00:25:48,080
really, really, really,
really slow.

496
00:25:48,080 --> 00:25:49,330
RENATO MANGINI: Google
is too fast.

497
00:25:49,330 --> 00:25:52,040

498
00:25:52,040 --> 00:25:55,060
PETE LEPAGE: You know, it's
always a benefit when stuff is

499
00:25:55,060 --> 00:25:57,490
nice and fast.

500
00:25:57,490 --> 00:25:58,820
RENATO MANGINI: Yes,
yes, absolutely.

501
00:25:58,820 --> 00:26:05,860
At least this case, we really
would get some benefits from

502
00:26:05,860 --> 00:26:07,070
slow loading.

503
00:26:07,070 --> 00:26:09,320
But anyway--

504
00:26:09,320 --> 00:26:13,910
so see, it's very interesting
because it's two processes.

505
00:26:13,910 --> 00:26:17,670
They are one process in WebView,
one process in your

506
00:26:17,670 --> 00:26:18,470
application.

507
00:26:18,470 --> 00:26:23,150
And they are talking to each
other through these methods.

508
00:26:23,150 --> 00:26:25,920
We haven't shown any
methods yet.

509
00:26:25,920 --> 00:26:28,160
We have shown only the events.

510
00:26:28,160 --> 00:26:31,930
But there are some methods you
can also use to reload

511
00:26:31,930 --> 00:26:33,530
applications, start,
abort, et cetera.

512
00:26:33,530 --> 00:26:37,230

513
00:26:37,230 --> 00:26:40,290
One very important thing here
is since there are two

514
00:26:40,290 --> 00:26:43,330
processes, all the communication
between the

515
00:26:43,330 --> 00:26:48,050
WebView and your web page
are asynchronous.

516
00:26:48,050 --> 00:26:53,770
It's not synchronous, which
means don't expect if you send

517
00:26:53,770 --> 00:27:00,450
a comment like Reload, the
reload will be sent to the

518
00:27:00,450 --> 00:27:03,710
WebView through an internal
post message.

519
00:27:03,710 --> 00:27:06,930
And that process, we'll
get that information,

520
00:27:06,930 --> 00:27:08,390
put it on the queue.

521
00:27:08,390 --> 00:27:11,000
And when it's ready, it will
execute that queue.

522
00:27:11,000 --> 00:27:14,550
So it's not immediately.

523
00:27:14,550 --> 00:27:17,500
It looks immediately but
it's not internally.

524
00:27:17,500 --> 00:27:21,550
So don't think that since you
have methods and not message

525
00:27:21,550 --> 00:27:23,710
sending, don't think
it's synchronous

526
00:27:23,710 --> 00:27:28,230
because it's not, OK?

527
00:27:28,230 --> 00:27:37,930
So now let's change this code
to have a small-- but how--

528
00:27:37,930 --> 00:27:41,470
we are reaching our time so--

529
00:27:41,470 --> 00:27:43,890
PETE LEPAGE: We've got another
couple minutes.

530
00:27:43,890 --> 00:27:46,860
If you want to dive into a
little bit more, no problem.

531
00:27:46,860 --> 00:27:48,380
RENATO MANGINI: OK.

532
00:27:48,380 --> 00:27:50,950
There's one piece of code.

533
00:27:50,950 --> 00:27:56,810
This is more recent than the
events and et cetera, so it

534
00:27:56,810 --> 00:27:58,860
probably will not be in
the next batch of

535
00:27:58,860 --> 00:28:00,835
documentation updates.

536
00:28:00,835 --> 00:28:05,110
But it will be soon, like
in two or three weeks.

537
00:28:05,110 --> 00:28:09,380
There's this concept of
storage partition.

538
00:28:09,380 --> 00:28:12,141
What it means?

539
00:28:12,141 --> 00:28:15,460
Since this is a different
process--

540
00:28:15,460 --> 00:28:20,820
it runs on a different process
operation system-wise.

541
00:28:20,820 --> 00:28:21,590
It cannot--

542
00:28:21,590 --> 00:28:26,500
and for security reasons,
it cannot share the same

543
00:28:26,500 --> 00:28:28,610
partition as your Chrome
packaged app.

544
00:28:28,610 --> 00:28:30,590
What is saved in a partition?

545
00:28:30,590 --> 00:28:36,800
Like cookies, like all
information that is--

546
00:28:36,800 --> 00:28:40,340
it could be persistent, or it
could be session-persistent.

547
00:28:40,340 --> 00:28:40,860
PETE LEPAGE: Right.

548
00:28:40,860 --> 00:28:42,170
So you're not going to have--

549
00:28:42,170 --> 00:28:46,670
if your WebView stores anything
in local storage,

550
00:28:46,670 --> 00:28:49,420
you're not going to be able
to get that even though--

551
00:28:49,420 --> 00:28:51,800
and actually, that's a bad
example because you don't have

552
00:28:51,800 --> 00:28:53,540
access to local storage
within a Chrome app.

553
00:28:53,540 --> 00:28:56,370
But say, for example,
IndexedDB--

554
00:28:56,370 --> 00:28:58,500
RENATO MANGINI: In fact,
the WebView has.

555
00:28:58,500 --> 00:29:02,593
And that's interesting, because
the WebView, it runs

556
00:29:02,593 --> 00:29:03,510
in a different process.

557
00:29:03,510 --> 00:29:08,670
And that process runs as a
browser view, not as a Chrome

558
00:29:08,670 --> 00:29:09,670
packaged view.

559
00:29:09,670 --> 00:29:13,180
It doesn't have access to the
Chrome APIs, but it does have

560
00:29:13,180 --> 00:29:15,400
access to all the other things
that Chrome packaged apps

561
00:29:15,400 --> 00:29:18,160
cannot do, including if all were
included in local storage

562
00:29:18,160 --> 00:29:19,480
and everything else.

563
00:29:19,480 --> 00:29:20,730
PETE LEPAGE: OK.

564
00:29:20,730 --> 00:29:21,380
RENATO MANGINI: RIght?

565
00:29:21,380 --> 00:29:27,940
So local storage cooks, wherever
It's all tied through

566
00:29:27,940 --> 00:29:29,590
your process.

567
00:29:29,590 --> 00:29:35,500
And it's not shared between the
WebView and your main app.

568
00:29:35,500 --> 00:29:36,260
That's all right.

569
00:29:36,260 --> 00:29:39,280
That's the contract.

570
00:29:39,280 --> 00:29:42,000
It's obvious that it should
be like this.

571
00:29:42,000 --> 00:29:44,700
However, I mentioned
that one of the use

572
00:29:44,700 --> 00:29:47,170
cases is for widgets.

573
00:29:47,170 --> 00:29:51,770
And our widget requires
a user to login.

574
00:29:51,770 --> 00:29:54,230
PETE LEPAGE: Yeah, like if I
want to +1 something, I want

575
00:29:54,230 --> 00:29:57,790
to re-tweet something, I
need to be logged in.

576
00:29:57,790 --> 00:30:00,160
RENATO MANGINI: Yes, exactly.

577
00:30:00,160 --> 00:30:09,170
Suppose your application has a
list of items, like books.

578
00:30:09,170 --> 00:30:11,130
It's a book-reading
application.

579
00:30:11,130 --> 00:30:18,070
And you want to put a +1
button below each book.

580
00:30:18,070 --> 00:30:20,720
But that button is inside
the WebView.

581
00:30:20,720 --> 00:30:24,026
Let's suppose it is inside
the WebView.

582
00:30:24,026 --> 00:30:24,980
Huh.

583
00:30:24,980 --> 00:30:30,320
So you want the user to log in
on each of those widgets on

584
00:30:30,320 --> 00:30:31,310
those WebViews?

585
00:30:31,310 --> 00:30:32,240
No, you don't.

586
00:30:32,240 --> 00:30:33,380
You definitely don't, right?

587
00:30:33,380 --> 00:30:34,900
PETE LEPAGE: Yeah, that
would be a small pain.

588
00:30:34,900 --> 00:30:37,780

589
00:30:37,780 --> 00:30:39,670
RENATO MANGINI: A small pain?

590
00:30:39,670 --> 00:30:41,610
PETE LEPAGE: It's a polite
way of putting it.

591
00:30:41,610 --> 00:30:42,460
RENATO MANGINI: OK.

592
00:30:42,460 --> 00:30:46,840
So there is this feature.

593
00:30:46,840 --> 00:30:48,320
It's just--

594
00:30:48,320 --> 00:30:50,790
the implementation finished
like last Friday.

595
00:30:50,790 --> 00:30:53,560
It's very recent.

596
00:30:53,560 --> 00:30:56,430
But it's really awesome.

597
00:30:56,430 --> 00:31:00,060
What I do here, and I'm missing
time to implement it,

598
00:31:00,060 --> 00:31:01,160
but it's pretty simple.

599
00:31:01,160 --> 00:31:04,330
I implement it quickly here.

600
00:31:04,330 --> 00:31:11,890
It's this property called
Partition, where you give your

601
00:31:11,890 --> 00:31:18,610
WebView, you put your WebView
in one named partition.

602
00:31:18,610 --> 00:31:22,022
You put whatever name
you want here.

603
00:31:22,022 --> 00:31:24,680
PETE LEPAGE: Oh, so it's kind
of like giving it an ID or

604
00:31:24,680 --> 00:31:26,290
something like that.

605
00:31:26,290 --> 00:31:26,910
RENATO MANGINI: Yes.

606
00:31:26,910 --> 00:31:33,250
PETE LEPAGE: But it's the
partition name for that area.

607
00:31:33,250 --> 00:31:34,390
RENATO MANGINI: Exactly.

608
00:31:34,390 --> 00:31:43,360
So if you do it on two WebViews
and you use the same

609
00:31:43,360 --> 00:31:54,540
partition name, those will
share the same partition.

610
00:31:54,540 --> 00:32:02,280
So if you login one, the other
will be logged in also.

611
00:32:02,280 --> 00:32:04,970
The cookie will be available
to the second one.

612
00:32:04,970 --> 00:32:06,260
PETE LEPAGE: Oh, perfect.

613
00:32:06,260 --> 00:32:07,720
RENATO MANGINI: There
is one a small bug.

614
00:32:07,720 --> 00:32:13,450
I noticed it yesterday while I
was implementing the sample.

615
00:32:13,450 --> 00:32:14,590
That I not try.

616
00:32:14,590 --> 00:32:16,460
I will report today.

617
00:32:16,460 --> 00:32:22,100
Those named partitions should
be-- by spec, they should be,

618
00:32:22,100 --> 00:32:27,700
at least in my understanding,
stored persistently.

619
00:32:27,700 --> 00:32:29,330
So it should be on disk.

620
00:32:29,330 --> 00:32:33,520
It you queue Chrome, if you
queue application, when you

621
00:32:33,520 --> 00:32:38,360
get back, you should have
the cookies back.

622
00:32:38,360 --> 00:32:43,960
The spec says explicitly that
unnamed partitions should use

623
00:32:43,960 --> 00:32:46,790
the memory, a memory
partition.

624
00:32:46,790 --> 00:32:48,440
But named partitions
should not.

625
00:32:48,440 --> 00:32:52,590
So I will talk to the engineers
who implemented

626
00:32:52,590 --> 00:32:56,330
that, just to make sure that
it's really a bug or it's a

627
00:32:56,330 --> 00:32:57,910
feature that we will
implemented later.

628
00:32:57,910 --> 00:33:01,140
But the idea is it should--

629
00:33:01,140 --> 00:33:10,150
in theory, it should keep your
partition safe from restarts.

630
00:33:10,150 --> 00:33:11,480
All right.

631
00:33:11,480 --> 00:33:19,350
So there are several methods
that I could talk about, but

632
00:33:19,350 --> 00:33:22,850
they are all implemented
on the browser tag--

633
00:33:22,850 --> 00:33:25,180
on the browser sample, sorry.

634
00:33:25,180 --> 00:33:27,740
I keep saying browser tag
because the name of the

635
00:33:27,740 --> 00:33:30,590
WebView before was
browser tag.

636
00:33:30,590 --> 00:33:34,065
If you see browser tag mentioned
somewhere else, you

637
00:33:34,065 --> 00:33:36,940
know that it's the
old WebView.

638
00:33:36,940 --> 00:33:39,060
But anyway, it's implemented.

639
00:33:39,060 --> 00:33:45,020
The sample on the GitHub,
it's pretty cool.

640
00:33:45,020 --> 00:33:47,080
It's really complete.

641
00:33:47,080 --> 00:33:48,710
It uses most of the methods.

642
00:33:48,710 --> 00:33:51,940
It doesn't use the partition
because it's a very recent.

643
00:33:51,940 --> 00:33:52,340
PETE LEPAGE: It's brand new.

644
00:33:52,340 --> 00:33:56,290
RENATO MANGINI: But it does
use the other methods.

645
00:33:56,290 --> 00:34:00,400
There is one last feature
I want to talk about.

646
00:34:00,400 --> 00:34:02,410
It's the Autosize.

647
00:34:02,410 --> 00:34:03,720
The Autosize--

648
00:34:03,720 --> 00:34:07,480
I was not showed the whole code,
but it's not implemented

649
00:34:07,480 --> 00:34:10,210
anywhere else, but I'm
working on a sample--

650
00:34:10,210 --> 00:34:14,920
so soon we'll you have it on
the GitHub repository.

651
00:34:14,920 --> 00:34:18,949
The Autosize property,
it's a property

652
00:34:18,949 --> 00:34:20,310
of the WebView element.

653
00:34:20,310 --> 00:34:25,199
When you set it,
it allows the--

654
00:34:25,199 --> 00:34:32,230
when the embedded web page
changes its layout size, it

655
00:34:32,230 --> 00:34:38,330
notifies the WebView element
on the embedder.

656
00:34:38,330 --> 00:34:41,570
There is the WebView content,
which is embedded.

657
00:34:41,570 --> 00:34:46,159
And the embedder, the
host of the WebView,

658
00:34:46,159 --> 00:34:50,409
receives an event of resize.

659
00:34:50,409 --> 00:34:53,060
So you can handle--

660
00:34:53,060 --> 00:34:54,830
you can auto resize.

661
00:34:54,830 --> 00:34:57,710
It's not automatically,
but it's almost--

662
00:34:57,710 --> 00:35:01,130
you receive notifications
that the web

663
00:35:01,130 --> 00:35:03,030
page changed its layout.

664
00:35:03,030 --> 00:35:06,330
The web page embedded
inside the WebView.

665
00:35:06,330 --> 00:35:09,180
This is very, very important
for widgets

666
00:35:09,180 --> 00:35:10,910
that change its size.

667
00:35:10,910 --> 00:35:14,520
For example, the Google+
widget, the

668
00:35:14,520 --> 00:35:15,530
button is very small.

669
00:35:15,530 --> 00:35:19,230
But when you click on the
button, or you hover over it--

670
00:35:19,230 --> 00:35:20,170
PETE LEPAGE: It gets bigger.

671
00:35:20,170 --> 00:35:20,620
RENATO MANGINI: Exactly.

672
00:35:20,620 --> 00:35:26,190
It shows you friends
that +1 the page,

673
00:35:26,190 --> 00:35:28,380
the element, et cetera.

674
00:35:28,380 --> 00:35:34,480
So you can code, and I will have
a sample code for that.

675
00:35:34,480 --> 00:35:40,270
You can listen to this event
and resize your WebView

676
00:35:40,270 --> 00:35:42,430
appropriately.

677
00:35:42,430 --> 00:35:51,250
So it gets current with the
WebView content size, what you

678
00:35:51,250 --> 00:35:55,040
present on your Chrome
packaged app.

679
00:35:55,040 --> 00:35:56,500
And that's it.

680
00:35:56,500 --> 00:35:58,400
PETE LEPAGE: All right.

681
00:35:58,400 --> 00:36:00,740
RENATO MANGINI: Any questions
before we start?

682
00:36:00,740 --> 00:36:02,970
PETE LEPAGE: There's a bunch of
really great questions up

683
00:36:02,970 --> 00:36:04,280
on our Google Moderator page.

684
00:36:04,280 --> 00:36:09,330
And as a reminder, the
link is right there.

685
00:36:09,330 --> 00:36:12,660
So you can see it right there.

686
00:36:12,660 --> 00:36:15,270
So the questions are there.

687
00:36:15,270 --> 00:36:17,110
Between Renato and I, we'll
take a bunch of these

688
00:36:17,110 --> 00:36:20,270
questions and do our best
to answer them for you.

689
00:36:20,270 --> 00:36:24,000
So this first question, I'm
not quite sure what the

690
00:36:24,000 --> 00:36:29,160
question's asking, but "I use
this link as well as a branch,

691
00:36:29,160 --> 00:36:33,620
and Pete set the typed WebView
to load HTML app in Chrome to

692
00:36:33,620 --> 00:36:38,760
insert a DOM node security and
control in the body of your

693
00:36:38,760 --> 00:36:42,570
browser." I'm not quite sure
what you're asking there.

694
00:36:42,570 --> 00:36:45,040
And I apologize, I don't know
how to pronounce your name.

695
00:36:45,040 --> 00:36:48,550
Those are characters that,
unfortunately, I can't read.

696
00:36:48,550 --> 00:36:54,390
So one thing that, if you're
looking to insert HTML into

697
00:36:54,390 --> 00:36:57,110
your app that's created
someplace else, you can do

698
00:36:57,110 --> 00:37:00,560
that via a sandboxed iFrame so
that you can run some code

699
00:37:00,560 --> 00:37:04,290
there and be able to use post
message to transfer

700
00:37:04,290 --> 00:37:05,410
that back and forth.

701
00:37:05,410 --> 00:37:10,700
That's one way that you can get
stuff between your app and

702
00:37:10,700 --> 00:37:11,800
another place.

703
00:37:11,800 --> 00:37:14,450
But it takes a little bit
of work to do that.

704
00:37:14,450 --> 00:37:18,710
If you can, maybe repost your
question, if you wouldn't

705
00:37:18,710 --> 00:37:22,790
mind, and provide a little bit
more detail, and we'll try and

706
00:37:22,790 --> 00:37:25,230
answer that.

707
00:37:25,230 --> 00:37:29,200
So go to the next question, and
I'll pass, Renato, this

708
00:37:29,200 --> 00:37:32,250
one for you from Jarek, who's
always asking us some really

709
00:37:32,250 --> 00:37:33,880
great questions.

710
00:37:33,880 --> 00:37:36,800
"Since iFrames are no longer
allowed in Chrome apps, is

711
00:37:36,800 --> 00:37:41,120
there an alternate API that
would allow me to sandbox SVG

712
00:37:41,120 --> 00:37:46,080
documents with synchronous
one-way access from the

713
00:37:46,080 --> 00:37:49,070
top-level document?"

714
00:37:49,070 --> 00:37:52,110
RENATO MANGINI: Well,
Jarek, it's good

715
00:37:52,110 --> 00:37:54,410
that you coded your--

716
00:37:54,410 --> 00:37:58,730
bolded the "synchronous" here.

717
00:37:58,730 --> 00:38:02,740
If you're sandboxing something,
it's very hard to

718
00:38:02,740 --> 00:38:09,460
keep it synchronous, because
if you're sandboxing

719
00:38:09,460 --> 00:38:13,570
something, it's because you
don't trust that source.

720
00:38:13,570 --> 00:38:16,650
And if you're doing it
synchronous, it means that

721
00:38:16,650 --> 00:38:21,180
that source can hang your whole
application by doing

722
00:38:21,180 --> 00:38:22,630
nasty things.

723
00:38:22,630 --> 00:38:27,990
So all the ideas that come
to my mind involve

724
00:38:27,990 --> 00:38:31,210
asynchronous solutions.

725
00:38:31,210 --> 00:38:33,120
However, you can use
the WebView.

726
00:38:33,120 --> 00:38:36,130

727
00:38:36,130 --> 00:38:39,610
If you really want to sandbox
that, you can use the WebView.

728
00:38:39,610 --> 00:38:46,030
And you can create on your
website a page, a web page.

729
00:38:46,030 --> 00:38:49,810
That web page would run on your
website, so that's not

730
00:38:49,810 --> 00:38:51,950
exactly sandboxing.

731
00:38:51,950 --> 00:38:57,070
That reads SVG, and you present
it on your Chrome

732
00:38:57,070 --> 00:38:57,550
packaged app.

733
00:38:57,550 --> 00:39:01,840
So you point to not to the SVG
directly, but you point to

734
00:39:01,840 --> 00:39:06,520
this web page app.

735
00:39:06,520 --> 00:39:09,780
That web page would
connect to the--

736
00:39:09,780 --> 00:39:12,270
would open the SVG.

737
00:39:12,270 --> 00:39:15,190
And you can use Post Message
to communicate between the

738
00:39:15,190 --> 00:39:18,080
WebView and the embedder.

739
00:39:18,080 --> 00:39:19,260
So you have--

740
00:39:19,260 --> 00:39:20,540
this part is asynchronous.

741
00:39:20,540 --> 00:39:21,990
It's not synchronous anymore.

742
00:39:21,990 --> 00:39:25,880
But if you want to-- if there's
anything that you need

743
00:39:25,880 --> 00:39:29,470
performance, that's probably
the reason why you put

744
00:39:29,470 --> 00:39:31,490
synchronous.

745
00:39:31,490 --> 00:39:34,950
You can do it on your web page,
on your website, and

746
00:39:34,950 --> 00:39:40,750
just communicate with the
Chrome packaged app for

747
00:39:40,750 --> 00:39:44,280
passing regular information,
whatever, status, whatever.

748
00:39:44,280 --> 00:39:44,680
PETE LEPAGE: Awesome.

749
00:39:44,680 --> 00:39:46,360
And so I've just got a--

750
00:39:46,360 --> 00:39:50,000
RENATO MANGINI: So one point, if
it's not sandboxed, if you

751
00:39:50,000 --> 00:39:54,820
don't need to sandbox the SVG,
the Chrome packaged app can

752
00:39:54,820 --> 00:39:56,480
show SVG pretty well.

753
00:39:56,480 --> 00:39:57,180
OK?

754
00:39:57,180 --> 00:39:57,730
PETE LEPAGE: Yeah.

755
00:39:57,730 --> 00:40:00,800
So Paul Kinlan, one of the
other great Developer

756
00:40:00,800 --> 00:40:03,980
Advocates on our team, just
sent me an IM on my phone.

757
00:40:03,980 --> 00:40:10,180
And his comment was, "If you can
cache the SVG in an HTML5

758
00:40:10,180 --> 00:40:12,730
file system, you can load
it into an iFrame.

759
00:40:12,730 --> 00:40:16,390
And Chrome will treat that as
a local resource." So that's

760
00:40:16,390 --> 00:40:19,140
another option that you can
use if you do that.

761
00:40:19,140 --> 00:40:20,310
RENATO MANGINI: That's
awesome.

762
00:40:20,310 --> 00:40:22,710
PETE LEPAGE: There's a question
that came in on

763
00:40:22,710 --> 00:40:24,790
YouTube that I want to address
because I think it's

764
00:40:24,790 --> 00:40:26,530
actually-- it's always
a good question.

765
00:40:26,530 --> 00:40:29,870
We usually get asked it probably
every other Hangout.

766
00:40:29,870 --> 00:40:34,960
"So why are we using a Mac
instead of Chromebooks?" And

767
00:40:34,960 --> 00:40:35,940
I'll answer part of it.

768
00:40:35,940 --> 00:40:38,050
And Renato, I'll let you answer
some of it as well.

769
00:40:38,050 --> 00:40:40,600
For most of our Hangout
equipment that we use here in

770
00:40:40,600 --> 00:40:43,940
the studio, we actually use
Chromebooks and Chromeboxes.

771
00:40:43,940 --> 00:40:47,450
Renato is connected to
me via Chromebox.

772
00:40:47,450 --> 00:40:50,080
But for me and--

773
00:40:50,080 --> 00:40:51,560
RENATO MANGINI: Can
you see it?

774
00:40:51,560 --> 00:40:52,410
PETE LEPAGE: There we
go, so Renato's got

775
00:40:52,410 --> 00:40:55,540
a Chromebook going.

776
00:40:55,540 --> 00:40:59,420
The only challenge that we
face is doing some of the

777
00:40:59,420 --> 00:41:02,190
screen sharing and getting the
screen sharing hooked up to

778
00:41:02,190 --> 00:41:02,840
our studio.

779
00:41:02,840 --> 00:41:05,940
Because Renato's in Brazil,
I'm here in New York, the

780
00:41:05,940 --> 00:41:09,480
software that we use, it's
unfortunately native software,

781
00:41:09,480 --> 00:41:13,720
and I can't do screen sharing

782
00:41:13,720 --> 00:41:15,600
And then the other thing is,
Renato's got that great

783
00:41:15,600 --> 00:41:18,300
Sublime plugin because we know
some of you are using Sublime.

784
00:41:18,300 --> 00:41:22,140
So that's why we're using
Macs here and there.

785
00:41:22,140 --> 00:41:25,570
But we really do try and use
Chromebooks whenever we can.

786
00:41:25,570 --> 00:41:28,860
RENATO MANGINI: And if you
the user who asked it--

787
00:41:28,860 --> 00:41:30,200
I don't know his name.

788
00:41:30,200 --> 00:41:32,050
I don't have YouTube
open here.

789
00:41:32,050 --> 00:41:35,320
But if you haven't tried a
Chromebook, I know I'm

790
00:41:35,320 --> 00:41:38,070
expected to say that,
but it's awesome.

791
00:41:38,070 --> 00:41:40,210
It's incredibly cool.

792
00:41:40,210 --> 00:41:41,600
You should try, at least.

793
00:41:41,600 --> 00:41:43,850
PETE LEPAGE: Yeah, especially
the brand-new ones, the ones

794
00:41:43,850 --> 00:41:46,840
that are $250, $249.

795
00:41:46,840 --> 00:41:50,100
It's a really great machine
to have to be able to--

796
00:41:50,100 --> 00:41:55,200
to do pretty much 99% of the
things I want to, I can do on

797
00:41:55,200 --> 00:41:57,160
my Chromebook.

798
00:41:57,160 --> 00:42:00,400
So our next question again
comes from Jarek.

799
00:42:00,400 --> 00:42:02,750
"Does the WebView tag
respect the XFrame

800
00:42:02,750 --> 00:42:04,660
options HTTP header?

801
00:42:04,660 --> 00:42:09,080
If the page was served with the
XFrame option set to Deny,

802
00:42:09,080 --> 00:42:10,910
would the WebView load
it anyway?" I'm

803
00:42:10,910 --> 00:42:11,500
not sure about that.

804
00:42:11,500 --> 00:42:12,790
Renato, do you know?

805
00:42:12,790 --> 00:42:13,880
RENATO MANGINI: Yes.

806
00:42:13,880 --> 00:42:17,860
It does not support--
it does not respect.

807
00:42:17,860 --> 00:42:24,310
It shows independently of
what XFrame option says.

808
00:42:24,310 --> 00:42:28,520
Because remember that this
is considered a native

809
00:42:28,520 --> 00:42:29,610
application.

810
00:42:29,610 --> 00:42:33,360
The XFrame options
is for saving the

811
00:42:33,360 --> 00:42:35,620
user from click hijacking.

812
00:42:35,620 --> 00:42:38,820
I think it's the most important
use for that.

813
00:42:38,820 --> 00:42:39,110
PETE LEPAGE: Right.

814
00:42:39,110 --> 00:42:39,990
That's a good point.

815
00:42:39,990 --> 00:42:43,490
RENATO MANGINI: But since you're
running it as a native

816
00:42:43,490 --> 00:42:45,460
application, it doesn't
make sense because the

817
00:42:45,460 --> 00:42:46,800
user trusted you.

818
00:42:46,800 --> 00:42:49,080
The user added your
application.

819
00:42:49,080 --> 00:42:51,990
Your application has access to
the hardware of the user.

820
00:42:51,990 --> 00:42:56,390
What's the point of hijacking
the clicks from the user?

821
00:42:56,390 --> 00:42:59,580
And the second point, this
is not the open web.

822
00:42:59,580 --> 00:43:02,630

823
00:43:02,630 --> 00:43:07,560
The Chrome packaged apps are
safe in the sense that they

824
00:43:07,560 --> 00:43:13,090
are distributed in a place
where applications that

825
00:43:13,090 --> 00:43:16,805
doesn't follow the rules of not
stealing information from

826
00:43:16,805 --> 00:43:21,050
the user, not hijacking clicks
from the user, they are

827
00:43:21,050 --> 00:43:23,720
removed from the Web
Store, and the

828
00:43:23,720 --> 00:43:24,810
accounts are suspended.

829
00:43:24,810 --> 00:43:34,170
So if the user trusted you, we
suppose that you don't need to

830
00:43:34,170 --> 00:43:37,050
have those protections
from the open web,

831
00:43:37,050 --> 00:43:39,170
which is more open.

832
00:43:39,170 --> 00:43:39,950
PETE LEPAGE: Cool.

833
00:43:39,950 --> 00:43:40,860
All right.

834
00:43:40,860 --> 00:43:42,120
So, the next question.

835
00:43:42,120 --> 00:43:46,120
"Can use NaCl and pass values
to a web page or a web app

836
00:43:46,120 --> 00:43:48,970
held in WebView?

837
00:43:48,970 --> 00:43:51,160
And can you make two pages
held in two different

838
00:43:51,160 --> 00:43:56,270
instances of WebView interact
by exchanging values?

839
00:43:56,270 --> 00:43:58,750
Can you establish session times
out for the WebView-held

840
00:43:58,750 --> 00:44:00,360
pages?"

841
00:44:00,360 --> 00:44:01,810
RENATO MANGINI: There
are three questions.

842
00:44:01,810 --> 00:44:05,310
Let me try to answer
it one by one.

843
00:44:05,310 --> 00:44:08,570
PETE LEPAGE: So the first one
is, "Can use NaCl to pass

844
00:44:08,570 --> 00:44:11,900
values to the page app
held in WebView?"

845
00:44:11,900 --> 00:44:13,360
RENATO MANGINI: Not directly.

846
00:44:13,360 --> 00:44:17,670
You can communication to NaCl
using Post Message.

847
00:44:17,670 --> 00:44:19,210
It's another process.

848
00:44:19,210 --> 00:44:24,050
But you can use either your
background page or the

849
00:44:24,050 --> 00:44:29,520
embedder of the WebView as
a hub of communication.

850
00:44:29,520 --> 00:44:34,820
So you can use a NaCl module,
communicate through the NaCl

851
00:44:34,820 --> 00:44:39,400
embedder the web page or the
background page and have that

852
00:44:39,400 --> 00:44:41,700
page communicate back
to the WebView.

853
00:44:41,700 --> 00:44:43,170
So yes, you can.

854
00:44:43,170 --> 00:44:48,870
But it's not directly from
NaCl to the WebView.

855
00:44:48,870 --> 00:44:51,400
That's a very good point.

856
00:44:51,400 --> 00:44:55,280
We need one sample use of NaCl
on the GitHub repository.

857
00:44:55,280 --> 00:44:56,340
PETE LEPAGE: Yeah.

858
00:44:56,340 --> 00:44:57,060
We had some questions.

859
00:44:57,060 --> 00:44:59,360
And in fact, we don't--

860
00:44:59,360 --> 00:45:00,410
I'll throw this out there.

861
00:45:00,410 --> 00:45:05,070
It's not confirmed, yet, but our
"Chrome Apps Office Hours"

862
00:45:05,070 --> 00:45:08,690
in two weeks, we're trying to
schedule someone to come in

863
00:45:08,690 --> 00:45:11,550
and talk about using NaCl
within Chrome apps.

864
00:45:11,550 --> 00:45:11,940
RENATO MANGINI: Whoa!

865
00:45:11,940 --> 00:45:12,230
That's cool!

866
00:45:12,230 --> 00:45:17,090
PETE LEPAGE: Haven't locked it
yet, but that's the plan.

867
00:45:17,090 --> 00:45:17,350
RENATO MANGINI: Awesome!

868
00:45:17,350 --> 00:45:17,760
PETE LEPAGE: Awesome.

869
00:45:17,760 --> 00:45:17,980
All right.

870
00:45:17,980 --> 00:45:18,900
Well, let's--

871
00:45:18,900 --> 00:45:21,760
RENATO MANGINI: It's kind of
interesting, because last week

872
00:45:21,760 --> 00:45:27,090
we have this Dart running in
Chrome packaged app sample as

873
00:45:27,090 --> 00:45:29,250
you can see on Git Hub,
and now NaCl.

874
00:45:29,250 --> 00:45:31,060
It's getting quite
interesting.

875
00:45:31,060 --> 00:45:33,740
PETE LEPAGE: We're doing some
cool things, I think.

876
00:45:33,740 --> 00:45:34,230
All right.

877
00:45:34,230 --> 00:45:37,670
Well, let's move on to
the next question.

878
00:45:37,670 --> 00:45:40,080
And actually, there's just about
two questions left, and

879
00:45:40,080 --> 00:45:43,330
I think that's probably the
perfect amount of time.

880
00:45:43,330 --> 00:45:45,985
But "Would it be possible to
implement a mobile browser

881
00:45:45,985 --> 00:45:48,430
emulator using the
WebView tag?

882
00:45:48,430 --> 00:45:50,990
Is there a way to override some
of the device parameters

883
00:45:50,990 --> 00:45:55,790
seen by window.matchMedia or CSS
media queries inside of a

884
00:45:55,790 --> 00:45:57,610
WebView?"

885
00:45:57,610 --> 00:46:02,370
RENATO MANGINI: Jarek,
unfortunately, not now.

886
00:46:02,370 --> 00:46:05,980
But that's one possible idea.

887
00:46:05,980 --> 00:46:09,610
You don't have the access to
the requests, so you cannot

888
00:46:09,610 --> 00:46:13,130
change the HTTP headers yet.

889
00:46:13,130 --> 00:46:15,670
But that's a very
good use case.

890
00:46:15,670 --> 00:46:18,620
I talked yesterday to the
engineering team, and they

891
00:46:18,620 --> 00:46:19,930
will discuss about that.

892
00:46:19,930 --> 00:46:22,200
That is definitely--

893
00:46:22,200 --> 00:46:25,150
I'm not committing that it will
be implemented, but it

894
00:46:25,150 --> 00:46:27,920
certainly will be discussed.

895
00:46:27,920 --> 00:46:28,640
PETE LEPAGE: Yeah.

896
00:46:28,640 --> 00:46:32,080
And in some ways, I--

897
00:46:32,080 --> 00:46:33,320
no, I guess you couldn't
do that.

898
00:46:33,320 --> 00:46:35,240
I was going to say, I wonder
if you could inject some

899
00:46:35,240 --> 00:46:40,720
script as a content script into
the WebView window, where

900
00:46:40,720 --> 00:46:42,550
you could override some
of those things?

901
00:46:42,550 --> 00:46:45,040
But that would be getting pretty
messy and not something

902
00:46:45,040 --> 00:46:46,952
you'd really want to get into.

903
00:46:46,952 --> 00:46:49,120
RENATO MANGINI: No, I think
you cannot do that.

904
00:46:49,120 --> 00:46:53,130
You don't have the web requests
API that is available

905
00:46:53,130 --> 00:46:54,310
to extensions.

906
00:46:54,310 --> 00:46:58,560
So I can't think of a way
to do it, even a hack-y

907
00:46:58,560 --> 00:47:00,280
way to do it now.

908
00:47:00,280 --> 00:47:03,010
But this should be discussed
internally.

909
00:47:03,010 --> 00:47:04,670
And I think it's the
same for the next

910
00:47:04,670 --> 00:47:07,510
question, from Jarek also.

911
00:47:07,510 --> 00:47:14,960
"Override user agent string,
override the cache module, and

912
00:47:14,960 --> 00:47:17,580
define specific user
associates." I think the

913
00:47:17,580 --> 00:47:19,760
answer is the same, OK?

914
00:47:19,760 --> 00:47:21,170
It's a very compelling
use case.

915
00:47:21,170 --> 00:47:22,930
You can emulate--

916
00:47:22,930 --> 00:47:25,870
as you said, you can emulate
mobile browsers.

917
00:47:25,870 --> 00:47:30,320
You can emulate other stuff
inside your Chrome packaged

918
00:47:30,320 --> 00:47:33,160
app if you're doing
like an ID.

919
00:47:33,160 --> 00:47:35,220
So it is a good use case.

920
00:47:35,220 --> 00:47:36,690
I totally understand that.

921
00:47:36,690 --> 00:47:42,820
So I hope that the engineering
team finds that it's possible

922
00:47:42,820 --> 00:47:46,130
and feasible to do in the
foreseeable future.

923
00:47:46,130 --> 00:47:46,610
PETE LEPAGE: Yeah.

924
00:47:46,610 --> 00:47:48,310
Cool!

925
00:47:48,310 --> 00:47:50,240
That's sort of the end of the
questions and the end of the

926
00:47:50,240 --> 00:47:51,620
time we have for today.

927
00:47:51,620 --> 00:47:56,430
I've put the link up to Renato's
Sublime plugin.

928
00:47:56,430 --> 00:47:58,710
You can see it right there.

929
00:47:58,710 --> 00:47:59,910
You can go grab that.

930
00:47:59,910 --> 00:48:00,500
Check it out.

931
00:48:00,500 --> 00:48:04,090
Let us know what you think,
provide your feedback.

932
00:48:04,090 --> 00:48:07,880
Next week, we're going to be
joined by Paul Kinlan, who's

933
00:48:07,880 --> 00:48:10,130
going to be joining
me to talk about--

934
00:48:10,130 --> 00:48:11,880
what are we talking
about next week?

935
00:48:11,880 --> 00:48:14,350
Oh, Third Party Authentication.

936
00:48:14,350 --> 00:48:17,540
So one of the really cool things
about Chrome apps is

937
00:48:17,540 --> 00:48:20,190
that it's really easy to go do
authentication up against the

938
00:48:20,190 --> 00:48:21,150
Google services, right?

939
00:48:21,150 --> 00:48:24,810
So you can go authenticate a
user and be like, yep, this is

940
00:48:24,810 --> 00:48:27,620
Pete, and he's got this
Google account.

941
00:48:27,620 --> 00:48:31,210
But not all services, obviously,
want to use the

942
00:48:31,210 --> 00:48:32,850
Google authentication
providers.

943
00:48:32,850 --> 00:48:34,350
You might want to use
somebody else's

944
00:48:34,350 --> 00:48:35,500
authentication provider.

945
00:48:35,500 --> 00:48:39,350
You may want to authenticate
against maybe Twitter or

946
00:48:39,350 --> 00:48:41,890
foursquare or whatever.

947
00:48:41,890 --> 00:48:44,170
You may want to authenticate
against those so that you can

948
00:48:44,170 --> 00:48:47,120
go and do whatever you want to
do with those particular

949
00:48:47,120 --> 00:48:48,850
service providers.

950
00:48:48,850 --> 00:48:52,220
Now, we've got a set of APIs
that let you go in and

951
00:48:52,220 --> 00:48:54,800
authenticate those, get the
set of cookies, do all the

952
00:48:54,800 --> 00:48:57,770
OAuth stuff, all that
fun connection

953
00:48:57,770 --> 00:48:58,830
that needs to happen.

954
00:48:58,830 --> 00:49:02,070
So Paul and I are going to
dig into that next week.

955
00:49:02,070 --> 00:49:07,110
Renato's actually got a great
post up on our Google+ page on

956
00:49:07,110 --> 00:49:09,550
Chrome Developers that'll walk
you through some of the more

957
00:49:09,550 --> 00:49:12,260
technical aspects and have
some samples and all

958
00:49:12,260 --> 00:49:13,210
that kind of stuff.

959
00:49:13,210 --> 00:49:14,890
So we'd love for you
guys to join us.

960
00:49:14,890 --> 00:49:20,470
Same time next week, 9:00 AM
Pacific, noon Eastern, or

961
00:49:20,470 --> 00:49:23,500
wherever that happens to
be, wherever you are.

962
00:49:23,500 --> 00:49:25,240
With that, I want to
say thanks very

963
00:49:25,240 --> 00:49:26,290
much for joining us.

964
00:49:26,290 --> 00:49:28,230
Hope this was really
useful for you.

965
00:49:28,230 --> 00:49:30,240
And thank you very
much everybody.

966
00:49:30,240 --> 00:49:33,000

967
00:49:33,000 --> 00:49:34,420
All righty, bye, guys.

968
00:49:34,420 --> 00:49:44,920

969
00:49:44,920 --> 00:49:52,067
[MUSIC PLAYING]

