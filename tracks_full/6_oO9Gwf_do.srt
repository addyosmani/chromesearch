1
00:00:00,000 --> 00:00:02,970

2
00:00:02,970 --> 00:00:13,740
[MUSIC PLAYING]

3
00:00:13,740 --> 00:00:14,235
IDO GREEN: OK.

4
00:00:14,235 --> 00:00:15,720
Yeah?

5
00:00:15,720 --> 00:00:18,200
Can you hear me?

6
00:00:18,200 --> 00:00:20,360
This is not working.

7
00:00:20,360 --> 00:00:21,490
Good afternoon.

8
00:00:21,490 --> 00:00:22,970
Thank you very much
for coming.

9
00:00:22,970 --> 00:00:24,240
We're really excited
to be here.

10
00:00:24,240 --> 00:00:26,610
It's always a pleasure to be
in a crowd where people are

11
00:00:26,610 --> 00:00:29,050
passionate about the things that
you are passionate about.

12
00:00:29,050 --> 00:00:31,370
I'm Ido Green, and I'm
Developer Advocate.

13
00:00:31,370 --> 00:00:33,029
DANNY HERMES: I'm
Danny Hermes, a

14
00:00:33,029 --> 00:00:34,390
Developer Programs Engineer.

15
00:00:34,390 --> 00:00:35,930
And I worked on the cloud.

16
00:00:35,930 --> 00:00:36,300
IDO GREEN: Right.

17
00:00:36,300 --> 00:00:37,790
And I'm the client guy
that will speak

18
00:00:37,790 --> 00:00:39,680
about Chrome and HTML5.

19
00:00:39,680 --> 00:00:43,000
Today we're going to talk about
three quite amazing

20
00:00:43,000 --> 00:00:46,010
technologies that keep changing
in a rapid pace.

21
00:00:46,010 --> 00:00:49,030
We'll speak about mobile, about
the web, mobile web, and

22
00:00:49,030 --> 00:00:50,300
about the cloud.

23
00:00:50,300 --> 00:00:52,850
And we thought to tell a story
that will take you through the

24
00:00:52,850 --> 00:00:56,960
process that we went, we're
building a mobile web app, and

25
00:00:56,960 --> 00:01:00,260
utilizing Google Cloud Endpoints
as our backend.

26
00:01:00,260 --> 00:01:04,319
So let's first just start with
a nice little demo that just

27
00:01:04,319 --> 00:01:07,680
will show you a macro
view of what we did.

28
00:01:07,680 --> 00:01:09,330
So you could see this app.

29
00:01:09,330 --> 00:01:12,340
And first and foremost, I'll
just sign in because we do

30
00:01:12,340 --> 00:01:15,740
want to handle our users and
have the amazing photo that I

31
00:01:15,740 --> 00:01:20,760
will save under my user and
Danny's his, et cetera.

32
00:01:20,760 --> 00:01:24,050
We are here on the normal
network, so please, if

33
00:01:24,050 --> 00:01:24,550
you are with us--

34
00:01:24,550 --> 00:01:24,830
DANNY HERMES: Yeah.

35
00:01:24,830 --> 00:01:25,785
Stop using internet.

36
00:01:25,785 --> 00:01:28,310
IDO GREEN: Yeah, it would
help us a lot.

37
00:01:28,310 --> 00:01:29,350
So I'm accepting.

38
00:01:29,350 --> 00:01:32,010
I have this--

39
00:01:32,010 --> 00:01:33,450
when it will finish loading.

40
00:01:33,450 --> 00:01:34,276
DANNY HERMES: It's fine.

41
00:01:34,276 --> 00:01:35,220
Just click Accept.

42
00:01:35,220 --> 00:01:35,660
IDO GREEN: Yeah.

43
00:01:35,660 --> 00:01:38,450
I did.

44
00:01:38,450 --> 00:01:39,610
DANNY HERMES: Demo gods smile.

45
00:01:39,610 --> 00:01:40,880
IDO GREEN: Yeah,
it's demo gods.

46
00:01:40,880 --> 00:01:44,760
So basically, what we're going
here, it's that regular

47
00:01:44,760 --> 00:01:46,690
process of what you do
when you sign in

48
00:01:46,690 --> 00:01:48,220
with Google+ button.

49
00:01:48,220 --> 00:01:50,510
And after we accepting it.

50
00:01:50,510 --> 00:01:53,450
It's need to confirm and send
us the token back, we'll be

51
00:01:53,450 --> 00:01:55,750
able to see the app itself.

52
00:01:55,750 --> 00:01:58,330
And basically what we'll do, it
will fetch all the photos

53
00:01:58,330 --> 00:02:01,770
that we have stored
in our cloud.

54
00:02:01,770 --> 00:02:04,670
Now, the app itself is built
on top of a few layers.

55
00:02:04,670 --> 00:02:07,460
And what we thought would be
wise is just to show you some

56
00:02:07,460 --> 00:02:11,240
of the best practices that we
encapsulate and baked into the

57
00:02:11,240 --> 00:02:12,270
app itself.

58
00:02:12,270 --> 00:02:16,010
So the app itself will work
when finally we'll end

59
00:02:16,010 --> 00:02:17,660
[INAUDIBLE].

60
00:02:17,660 --> 00:02:19,710
It will work offline
completely.

61
00:02:19,710 --> 00:02:23,640
So like any native app that you
are accustomed to, this

62
00:02:23,640 --> 00:02:27,660
app need just the beginning to
do this, call to the server,

63
00:02:27,660 --> 00:02:31,490
get all the assets, get the
skeleton, and let you work

64
00:02:31,490 --> 00:02:33,760
with the app even when you don't
have connection, or when

65
00:02:33,760 --> 00:02:35,530
you have flaky connections.

66
00:02:35,530 --> 00:02:38,420
So one of the most important
features that we are able to

67
00:02:38,420 --> 00:02:40,500
achieve here is that
the performance

68
00:02:40,500 --> 00:02:41,620
will be much better.

69
00:02:41,620 --> 00:02:43,220
We'll have 60 frames
per second.

70
00:02:43,220 --> 00:02:45,160
The app will be really
responsive.

71
00:02:45,160 --> 00:02:47,540
Everything will work fast.

72
00:02:47,540 --> 00:02:50,110
And the user, of course,
satisfaction will be higher.

73
00:02:50,110 --> 00:02:53,150
So apparently our network
here is not allowing

74
00:02:53,150 --> 00:02:55,620
us to do too much.

75
00:02:55,620 --> 00:02:57,780
So basically, I'll try--
maybe we'll--

76
00:02:57,780 --> 00:02:59,595
DANNY HERMES: Let's do
it from the desktop.

77
00:02:59,595 --> 00:03:04,056
Let's just pretend like we're
on mobile, sadly.

78
00:03:04,056 --> 00:03:04,510
IDO GREEN: Yeah.

79
00:03:04,510 --> 00:03:06,040
So this is our app.

80
00:03:06,040 --> 00:03:10,070
And you have your status button
that just will confirm

81
00:03:10,070 --> 00:03:12,550
to us when we are offline and
online, so you'll be able to

82
00:03:12,550 --> 00:03:13,770
see it with us.

83
00:03:13,770 --> 00:03:17,140
And I already signed in, so I
could do it pretty quick again

84
00:03:17,140 --> 00:03:19,680
just to see that all the
process is working.

85
00:03:19,680 --> 00:03:20,410
So I'm accepting.

86
00:03:20,410 --> 00:03:21,580
The sign in button
has vanished.

87
00:03:21,580 --> 00:03:23,160
And now I'm in the app.

88
00:03:23,160 --> 00:03:25,480
I have here my photos.

89
00:03:25,480 --> 00:03:29,560
And of course I can attach
and create new photo.

90
00:03:29,560 --> 00:03:32,700
So one of the beautiful things
here is that when I'm taking a

91
00:03:32,700 --> 00:03:36,520
new photo, here it will just
open the file chooser and will

92
00:03:36,520 --> 00:03:38,000
fetch the photo, as you saw.

93
00:03:38,000 --> 00:03:41,590
But on the mobile device, it
will actually go to the camera

94
00:03:41,590 --> 00:03:43,690
itself and allow me to
capture and speak

95
00:03:43,690 --> 00:03:45,000
with the camera directly.

96
00:03:45,000 --> 00:03:47,310
And we see that we have lots of
device APIs through there

97
00:03:47,310 --> 00:03:50,770
that are baked into the web
platform and allow you to do

98
00:03:50,770 --> 00:03:53,610
quite amazing stuff when being
closer to the metal.

99
00:03:53,610 --> 00:03:55,920
So here I have this photo.

100
00:03:55,920 --> 00:04:01,666
I'll give it a title, a
description, and I'll save it.

101
00:04:01,666 --> 00:04:03,800
One of the things that you saw,
it immediately saved it.

102
00:04:03,800 --> 00:04:05,660
And then we got another
confirmation that it send it

103
00:04:05,660 --> 00:04:06,610
into the cloud.

104
00:04:06,610 --> 00:04:08,810
So basically, we are able here--
and here it was quite

105
00:04:08,810 --> 00:04:11,520
fast, but if this was working,
you could see that

106
00:04:11,520 --> 00:04:12,540
we have some lags.

107
00:04:12,540 --> 00:04:14,960
But the beauty of it is that
we are confirming to the

108
00:04:14,960 --> 00:04:16,850
client that the action
was done.

109
00:04:16,850 --> 00:04:20,339
Our user doesn't really need to
be worry about it, and it

110
00:04:20,339 --> 00:04:21,930
works much faster.

111
00:04:21,930 --> 00:04:24,540
Now, the photo is here.

112
00:04:24,540 --> 00:04:28,960
I'll pull out the
network cable.

113
00:04:28,960 --> 00:04:31,970
And as you saw, it's
becoming offline.

114
00:04:31,970 --> 00:04:34,080
And I could do the same
operation again.

115
00:04:34,080 --> 00:04:37,380
So I'm going, I'm
adding a photo.

116
00:04:37,380 --> 00:04:46,100
Let's add a new one, give
it a name, and save it.

117
00:04:46,100 --> 00:04:48,950
Now we're getting confirmation
just that it saved locally.

118
00:04:48,950 --> 00:04:51,550
And since we don't have any
connection with the cloud,

119
00:04:51,550 --> 00:04:52,380
we'll save it.

120
00:04:52,380 --> 00:04:54,780
We'll put it in a queue, and
later on when we do have

121
00:04:54,780 --> 00:04:57,910
connection, and let's just
hook it up and see what

122
00:04:57,910 --> 00:05:01,270
happened, it will know how to
sync it with the cloud and

123
00:05:01,270 --> 00:05:03,950
actually enable us to see it
from different devices.

124
00:05:03,950 --> 00:05:08,270
So if it was working, we could
have seen it here and here on

125
00:05:08,270 --> 00:05:09,180
different screens.

126
00:05:09,180 --> 00:05:11,460
And actually, you can see that
we're doing the best with the

127
00:05:11,460 --> 00:05:13,650
real estate that the screen
itself is letting us.

128
00:05:13,650 --> 00:05:14,720
So we passed the demo.

129
00:05:14,720 --> 00:05:15,970
Maybe we'll move on.

130
00:05:15,970 --> 00:05:18,560

131
00:05:18,560 --> 00:05:19,810
Yeah.

132
00:05:19,810 --> 00:05:22,060

133
00:05:22,060 --> 00:05:23,770
So cloud and client.

134
00:05:23,770 --> 00:05:27,370
So let's just have a little
role game here.

135
00:05:27,370 --> 00:05:29,350
I'm the client guy, as
you mentioned, so my

136
00:05:29,350 --> 00:05:30,800
answer would be no.

137
00:05:30,800 --> 00:05:32,040
We don't need any server.

138
00:05:32,040 --> 00:05:34,440
We just need it once to get all
the assets, and then we

139
00:05:34,440 --> 00:05:35,650
are happy campers.

140
00:05:35,650 --> 00:05:38,240
But before we do that, let's
just define to ourselves what

141
00:05:38,240 --> 00:05:40,780
we see in a modern
web application.

142
00:05:40,780 --> 00:05:42,690
And it could be web, it
could be mobile, it

143
00:05:42,690 --> 00:05:44,070
could be both of them.

144
00:05:44,070 --> 00:05:47,020
One of the things that we saw,
that all of them got one goal,

145
00:05:47,020 --> 00:05:51,200
and they're trying to get the
user to achieve their goal

146
00:05:51,200 --> 00:05:52,910
with the highest efficiency
as possible.

147
00:05:52,910 --> 00:05:55,290
So they are very focused,
very contained.

148
00:05:55,290 --> 00:05:58,710
We see more and more code that
is flowing to the client side,

149
00:05:58,710 --> 00:06:01,130
and that's why we see it
flourishing in all the MV*

150
00:06:01,130 --> 00:06:01,880
frameworks.

151
00:06:01,880 --> 00:06:04,310
Basically, we're talking about
clear separation between our

152
00:06:04,310 --> 00:06:05,930
data and our views.

153
00:06:05,930 --> 00:06:08,310
We just want to be able to
maintain our apps, especially

154
00:06:08,310 --> 00:06:10,760
when they're growing
quite fast.

155
00:06:10,760 --> 00:06:13,470
Offline first, so like Eric
Schmidt coined the term mobile

156
00:06:13,470 --> 00:06:17,330
first, we'll now try to term
and work with offline first

157
00:06:17,330 --> 00:06:17,940
methodology.

158
00:06:17,940 --> 00:06:21,270
So the app will work everywhere
in any case.

159
00:06:21,270 --> 00:06:24,350
And it's true that we're in a
web browser and we are online

160
00:06:24,350 --> 00:06:27,760
most of the time, but even in
cases where we are on a

161
00:06:27,760 --> 00:06:30,620
submarine or airplane or flaky
connection, we'll still be

162
00:06:30,620 --> 00:06:31,870
able to do the most--

163
00:06:31,870 --> 00:06:34,470
with our app, like you saw, the
most crucial functionality

164
00:06:34,470 --> 00:06:36,740
to take a photo is back there.

165
00:06:36,740 --> 00:06:40,100
Device aware, you know that we
have now browsers as an open

166
00:06:40,100 --> 00:06:43,080
technology on handheld devices,
tablets, laptops,

167
00:06:43,080 --> 00:06:44,430
desktops, and TVs.

168
00:06:44,430 --> 00:06:47,630
So screen size of 2 inch up to,
I don't know, 100 inch,

169
00:06:47,630 --> 00:06:49,580
and you should do the best with
the real estate that the

170
00:06:49,580 --> 00:06:51,380
device itself lets you.

171
00:06:51,380 --> 00:06:54,620
Pref matters, it's a hashtag
that we're using through all

172
00:06:54,620 --> 00:06:55,350
Chrome channels.

173
00:06:55,350 --> 00:06:58,660
And we just want to emphasize
the importance of making the

174
00:06:58,660 --> 00:07:00,260
app work best.

175
00:07:00,260 --> 00:07:04,540
We all know that users love the
app to be responsive and

176
00:07:04,540 --> 00:07:08,650
snappy, and everything should
work as fast as possible.

177
00:07:08,650 --> 00:07:09,710
So cloud and server.

178
00:07:09,710 --> 00:07:12,680
So if I'm playing the role-- and
please take my things with

179
00:07:12,680 --> 00:07:14,060
a grain of salt here--

180
00:07:14,060 --> 00:07:18,520
I could say hey, we have quite
a lot of amazing HTML5 APIs

181
00:07:18,520 --> 00:07:21,060
that allow us to save the
skeleton of the app in the

182
00:07:21,060 --> 00:07:24,790
AppCache to use local storage
or File API or IndexedDB or

183
00:07:24,790 --> 00:07:27,810
any methodology that will let us
save state and data on the

184
00:07:27,810 --> 00:07:28,660
client side.

185
00:07:28,660 --> 00:07:31,920
So basically, we are
quite happy just

186
00:07:31,920 --> 00:07:33,550
to be on the client.

187
00:07:33,550 --> 00:07:35,300
We want to minimize
the interactions.

188
00:07:35,300 --> 00:07:35,580
Why?

189
00:07:35,580 --> 00:07:39,450
Because network is quite slow,
specifically on some networks,

190
00:07:39,450 --> 00:07:41,590
like we have here, a
perfect example.

191
00:07:41,590 --> 00:07:44,470
And we want this one connection
and that's it, so

192
00:07:44,470 --> 00:07:47,030
really to do the most
from any and each

193
00:07:47,030 --> 00:07:49,110
connection that we're making.

194
00:07:49,110 --> 00:07:51,330
The way to do it is just to
pretend that there is no

195
00:07:51,330 --> 00:07:53,310
connection, and then to
build a sync layer.

196
00:07:53,310 --> 00:07:55,830
Because as you saw, to save
things locally, to save things

197
00:07:55,830 --> 00:07:56,960
offline, quite easy.

198
00:07:56,960 --> 00:07:59,750
The logic or the magic is in the
sync layer that does the

199
00:07:59,750 --> 00:08:01,280
right things in the
right moment.

200
00:08:01,280 --> 00:08:04,540
And the code here is just this
really simple API to know

201
00:08:04,540 --> 00:08:08,160
where we are offline or
when we are online.

202
00:08:08,160 --> 00:08:12,340
DANNY HERMES: So when asked the
question to me, are the

203
00:08:12,340 --> 00:08:15,490
cloud and the client friends,
well, of course they are.

204
00:08:15,490 --> 00:08:17,020
Maybe the tablet and
the network in

205
00:08:17,020 --> 00:08:18,420
this room aren't friends.

206
00:08:18,420 --> 00:08:20,340
But the cloud and the client
are definitely friends.

207
00:08:20,340 --> 00:08:22,930
So I'm a resounding
yes on this one.

208
00:08:22,930 --> 00:08:25,230
So when you're building a modern
application, you're

209
00:08:25,230 --> 00:08:27,330
obviously thinking about your
client first, whether it's the

210
00:08:27,330 --> 00:08:29,640
mobile web or a native
application.

211
00:08:29,640 --> 00:08:31,640
But they have to rely
on the cloud.

212
00:08:31,640 --> 00:08:34,970
Users are used to holding a
phone, which they treat as a

213
00:08:34,970 --> 00:08:35,880
data center.

214
00:08:35,880 --> 00:08:39,210
They send off queries to very
large organizations that are

215
00:08:39,210 --> 00:08:43,419
doing very intense things across
the network, and they

216
00:08:43,419 --> 00:08:45,370
actually expect this from
your applications.

217
00:08:45,370 --> 00:08:47,930
So being able to offload
computation is

218
00:08:47,930 --> 00:08:50,190
actually a big deal.

219
00:08:50,190 --> 00:08:53,300
When you have lots of users,
you want a single source of

220
00:08:53,300 --> 00:08:54,050
truth for data.

221
00:08:54,050 --> 00:08:56,230
You want to be able to store
it somewhere other than the

222
00:08:56,230 --> 00:08:57,540
client, right?

223
00:08:57,540 --> 00:09:00,690
And of course, as we saw here,
we have the tablet, which

224
00:09:00,690 --> 00:09:03,770
won't work, and the desktop,
which is connected to ethernet

225
00:09:03,770 --> 00:09:04,710
and just fine.

226
00:09:04,710 --> 00:09:07,590
So you have some users signing
in from more than one place.

227
00:09:07,590 --> 00:09:10,510
So you actually need the cloud,
a server, to have this

228
00:09:10,510 --> 00:09:13,000
one source of truth.

229
00:09:13,000 --> 00:09:15,440
So he's saying we have to
minimize interactions.

230
00:09:15,440 --> 00:09:17,050
We have to be offline.

231
00:09:17,050 --> 00:09:18,890
Well, that's actually
a good thing.

232
00:09:18,890 --> 00:09:20,450
It's not abandoning the cloud.

233
00:09:20,450 --> 00:09:22,080
It's informing the way
that we actually

234
00:09:22,080 --> 00:09:23,650
think about the cloud.

235
00:09:23,650 --> 00:09:27,830
So does anyone remember DRY,
Don't Repeat Yourself?

236
00:09:27,830 --> 00:09:29,150
We hear this all the time.

237
00:09:29,150 --> 00:09:31,790
When we're writing code,
obviously don't write the same

238
00:09:31,790 --> 00:09:32,670
thing twice, right?

239
00:09:32,670 --> 00:09:34,350
Functions, classes, whatever.

240
00:09:34,350 --> 00:09:37,610
But when we're talking about
the network, it's just as

241
00:09:37,610 --> 00:09:39,460
important not to repeat
yourself.

242
00:09:39,460 --> 00:09:41,610
Because in this situation, where
you don't have lots of

243
00:09:41,610 --> 00:09:44,530
network, you can actually rely
on things that you already

244
00:09:44,530 --> 00:09:46,520
know, rely on the conversations
that you've

245
00:09:46,520 --> 00:09:49,810
already had, and use these nice
HTML5 technologies to

246
00:09:49,810 --> 00:09:52,970
actually keep this
data around.

247
00:09:52,970 --> 00:09:55,310
So we have to actually get the
most out of each and every

248
00:09:55,310 --> 00:10:00,230
interaction and lick the bowl
clean like a good boy or girl.

249
00:10:00,230 --> 00:10:03,690
So now I want to talk a bit
about the tools we use to

250
00:10:03,690 --> 00:10:05,430
build this application.

251
00:10:05,430 --> 00:10:08,960
I'd love to demo it
at some point.

252
00:10:08,960 --> 00:10:11,490
So we actually use a good chunk
of the Google Cloud

253
00:10:11,490 --> 00:10:13,730
Platform, which is
what I work on.

254
00:10:13,730 --> 00:10:16,640
And I just want to talk about
some tools that we use to help

255
00:10:16,640 --> 00:10:17,440
our friends.

256
00:10:17,440 --> 00:10:19,670
So if it wasn't already
clear, the cloud

257
00:10:19,670 --> 00:10:21,040
the client are friends.

258
00:10:21,040 --> 00:10:22,500
So we do need a server.

259
00:10:22,500 --> 00:10:24,560
But who wants to run a server?

260
00:10:24,560 --> 00:10:26,080
It's hard, right?

261
00:10:26,080 --> 00:10:27,030
Let's go shopping.

262
00:10:27,030 --> 00:10:28,010
No.

263
00:10:28,010 --> 00:10:30,760
So running a server is hard, and
we want to make it easy.

264
00:10:30,760 --> 00:10:34,330
So some of the things that are
solved problems that are hard

265
00:10:34,330 --> 00:10:38,640
but not worth solving are things
like traffic spikes,

266
00:10:38,640 --> 00:10:42,370
communicating with your client
and your server, actually

267
00:10:42,370 --> 00:10:44,900
doing authentication, trying
to figure out how to make

268
00:10:44,900 --> 00:10:46,100
payloads efficient.

269
00:10:46,100 --> 00:10:48,570
Like I said, these are all
solved problems, and these are

270
00:10:48,570 --> 00:10:50,480
things you shouldn't be thinking
about when building

271
00:10:50,480 --> 00:10:51,470
an application.

272
00:10:51,470 --> 00:10:54,820
So we want to be the easy button
in as many places as we

273
00:10:54,820 --> 00:10:57,750
can, and we want to push
this down extra hard.

274
00:10:57,750 --> 00:11:00,060
So the biggest technology
that we run on

275
00:11:00,060 --> 00:11:01,550
is Google App Engine.

276
00:11:01,550 --> 00:11:04,490
Google App Engine, for those who
don't know, is a platform

277
00:11:04,490 --> 00:11:07,070
as a service, which allows you
to write code in your language

278
00:11:07,070 --> 00:11:07,900
of choice--

279
00:11:07,900 --> 00:11:10,760
here Java, Go, Python,
and as [INAUDIBLE]

280
00:11:10,760 --> 00:11:13,160
earlier today, PHP as well.

281
00:11:13,160 --> 00:11:15,890
But you actually get to use
Google's infrastructure to

282
00:11:15,890 --> 00:11:18,630
scale up and scale down
based on your traffic.

283
00:11:18,630 --> 00:11:22,140
And in addition, you also get to
use App Engine's NoSQL data

284
00:11:22,140 --> 00:11:25,010
store to store and interact with
data the same way Google

285
00:11:25,010 --> 00:11:26,800
services do.

286
00:11:26,800 --> 00:11:29,400
On top of Google App Engine,
we're using Google Cloud

287
00:11:29,400 --> 00:11:33,900
Endpoints, which essentially
allows you to write an API

288
00:11:33,900 --> 00:11:36,430
that looks like a Google API.

289
00:11:36,430 --> 00:11:37,530
More about this later.

290
00:11:37,530 --> 00:11:39,500
What does that mean,
a Google API?

291
00:11:39,500 --> 00:11:42,970
So all modern Google
APIs have something

292
00:11:42,970 --> 00:11:44,590
called a discovery document.

293
00:11:44,590 --> 00:11:46,430
And it's a giant bit of JSON.

294
00:11:46,430 --> 00:11:48,900
You don't have to actually
see what's on this slide.

295
00:11:48,900 --> 00:11:51,420
But what this discovery document
does, it fully

296
00:11:51,420 --> 00:11:53,670
specifies everything
the API can do.

297
00:11:53,670 --> 00:11:57,100
So it's a language to actually
describe what payloads should

298
00:11:57,100 --> 00:11:59,460
look like, what methods are
available, what kind of auth

299
00:11:59,460 --> 00:12:01,000
is needed, you name it.

300
00:12:01,000 --> 00:12:03,880
It describes how the
API behaves.

301
00:12:03,880 --> 00:12:05,000
OK, Danny.

302
00:12:05,000 --> 00:12:05,830
So what?

303
00:12:05,830 --> 00:12:06,650
I don't care.

304
00:12:06,650 --> 00:12:07,730
It's JSON.

305
00:12:07,730 --> 00:12:08,370
Cool.

306
00:12:08,370 --> 00:12:09,640
Well, so what?

307
00:12:09,640 --> 00:12:14,550
By having a single document to
describe all APIs, we have

308
00:12:14,550 --> 00:12:17,870
client libraries in lots and
lots of different languages

309
00:12:17,870 --> 00:12:20,290
that actually understand
discovery no matter

310
00:12:20,290 --> 00:12:21,340
which API it is.

311
00:12:21,340 --> 00:12:24,490
And so if we bring a new API
online, these libraries out of

312
00:12:24,490 --> 00:12:28,230
the box work with that API.

313
00:12:28,230 --> 00:12:28,940
OK, sweet.

314
00:12:28,940 --> 00:12:32,430
So with Google Cloud Endpoints,
you can write your

315
00:12:32,430 --> 00:12:36,590
own API that looks like a Google
API, and this giant

316
00:12:36,590 --> 00:12:38,980
tool chain is already
at your disposal.

317
00:12:38,980 --> 00:12:41,500
So now you can think about
features instead of thinking

318
00:12:41,500 --> 00:12:43,540
about how in the world
am I going to send my

319
00:12:43,540 --> 00:12:46,170
data back and forth.

320
00:12:46,170 --> 00:12:49,760
And the last piece of the puzzle
that we use, it's a

321
00:12:49,760 --> 00:12:52,800
library that I wrote, so it's
definitely my favorite piece.

322
00:12:52,800 --> 00:12:54,610
It's called
endpoints-proto-datastore.

323
00:12:54,610 --> 00:12:57,580
And this is a way for us, on the
Python runtime of Google

324
00:12:57,580 --> 00:13:01,370
App Engine, to have a way for
our data and our interface to

325
00:13:01,370 --> 00:13:02,020
be the same.

326
00:13:02,020 --> 00:13:05,730
So I have this simple class up
here, bank account, which says

327
00:13:05,730 --> 00:13:08,730
OK, we've got an owner, which
is a string, and a balance,

328
00:13:08,730 --> 00:13:09,780
which is a flow property.

329
00:13:09,780 --> 00:13:13,660
So in my bank account, I have
leet dollars, right?

330
00:13:13,660 --> 00:13:17,930
But my data through the client
looks exactly like the

331
00:13:17,930 --> 00:13:20,060
structure that I'm defining
on the server.

332
00:13:20,060 --> 00:13:22,450
And this again, data is the most
important thing in our

333
00:13:22,450 --> 00:13:24,160
application.

334
00:13:24,160 --> 00:13:26,700
I keep saying API, API, API.

335
00:13:26,700 --> 00:13:29,690
Well, that I in API stands
for interface.

336
00:13:29,690 --> 00:13:32,160
And when we're writing
applications, we care about

337
00:13:32,160 --> 00:13:35,300
getting data to the server
and just moving

338
00:13:35,300 --> 00:13:36,570
away from that step.

339
00:13:36,570 --> 00:13:39,780
All we really want to do is
send what we know and just

340
00:13:39,780 --> 00:13:40,800
move on from there.

341
00:13:40,800 --> 00:13:43,160
And so by using this
library, we're

342
00:13:43,160 --> 00:13:44,650
actually able to do that.

343
00:13:44,650 --> 00:13:47,690
So enough about the
tools we did use.

344
00:13:47,690 --> 00:13:51,030
Let's talk about how
we use them.

345
00:13:51,030 --> 00:13:52,890
IDO GREEN: So we take
it from the client.

346
00:13:52,890 --> 00:13:57,130
And as you saw before, and
actually now it's all here,

347
00:13:57,130 --> 00:14:00,260
because some time passed, so
we have it locally here as

348
00:14:00,260 --> 00:14:03,130
well, but here the most
important aspect is when we

349
00:14:03,130 --> 00:14:05,750
open dev tools, we could see
literally that we have all the

350
00:14:05,750 --> 00:14:07,130
metadata under local storage.

351
00:14:07,130 --> 00:14:09,710
So the metadata on each and
every photo is there.

352
00:14:09,710 --> 00:14:12,020
And then we use the application
File API to save

353
00:14:12,020 --> 00:14:14,380
the photos themselves.

354
00:14:14,380 --> 00:14:16,670
When speaking about the
application itself, so we

355
00:14:16,670 --> 00:14:18,980
touched upon it, but we want
the skeleton of the app

356
00:14:18,980 --> 00:14:20,360
already in our disposal.

357
00:14:20,360 --> 00:14:23,200
So one interaction, and we're
getting the HTML, JavaScript,

358
00:14:23,200 --> 00:14:25,370
CSS of our app.

359
00:14:25,370 --> 00:14:29,924
We could download some assets,
like some images and mp3 files

360
00:14:29,924 --> 00:14:31,210
if you want.

361
00:14:31,210 --> 00:14:34,020
And once we do that, the
app is full functional.

362
00:14:34,020 --> 00:14:36,120
And from that moment, basically
we're using the sync

363
00:14:36,120 --> 00:14:38,890
layer to speak with the server
when we want this one source

364
00:14:38,890 --> 00:14:42,200
of truth to broadcast all the
information to all the

365
00:14:42,200 --> 00:14:44,300
different devices that we
consume and use this

366
00:14:44,300 --> 00:14:46,160
application.

367
00:14:46,160 --> 00:14:49,620
Photos, we love photos, and
that's why we shift our app

368
00:14:49,620 --> 00:14:50,475
around them.

369
00:14:50,475 --> 00:14:54,720
For photos, we have quite a lot
of abilities to save them.

370
00:14:54,720 --> 00:14:56,540
In our case, we use files.

371
00:14:56,540 --> 00:14:59,300
So like any other platform,
you could really use files

372
00:14:59,300 --> 00:15:00,510
under the browser.

373
00:15:00,510 --> 00:15:05,260
And in our case, HTML5 File
API is really nice to work

374
00:15:05,260 --> 00:15:07,810
with filer.js, that Eric
Bidelman wrote, and its open

375
00:15:07,810 --> 00:15:08,800
source in GitHub.

376
00:15:08,800 --> 00:15:10,665
And basically, it lets you open
files like you're working

377
00:15:10,665 --> 00:15:12,480
with files in Linux.

378
00:15:12,480 --> 00:15:16,430
One of the things that we did
here that's another tip is

379
00:15:16,430 --> 00:15:18,820
that we choose the right
tool to the job.

380
00:15:18,820 --> 00:15:22,430
So when we want to save
metadata, local storage is

381
00:15:22,430 --> 00:15:23,780
perfect key value.

382
00:15:23,780 --> 00:15:26,410
API, when we want to store the
images, we want to store

383
00:15:26,410 --> 00:15:27,220
binary data.

384
00:15:27,220 --> 00:15:29,080
So it would be much more
efficient to render

385
00:15:29,080 --> 00:15:29,740
the DOM with them.

386
00:15:29,740 --> 00:15:33,080
And we don't need these basics
for in and out each time.

387
00:15:33,080 --> 00:15:36,360
That's why we choose the File
API with the local storage to

388
00:15:36,360 --> 00:15:39,840
do the best in both worlds.

389
00:15:39,840 --> 00:15:42,730
When we're going and speaking
about the world out there,

390
00:15:42,730 --> 00:15:44,490
it's usually not white
and black.

391
00:15:44,490 --> 00:15:46,400
It's usually the golden
path between them.

392
00:15:46,400 --> 00:15:47,510
And it's a complex world.

393
00:15:47,510 --> 00:15:50,390
We have a wide range
of devices with

394
00:15:50,390 --> 00:15:52,000
browsers, with versions.

395
00:15:52,000 --> 00:15:55,380
And we want to support as
much many of course.

396
00:15:55,380 --> 00:15:57,920
In our case, one of the things
that we choose is this

397
00:15:57,920 --> 00:15:58,900
obstruction layer.

398
00:15:58,900 --> 00:15:59,850
In our case, it's launcher.

399
00:15:59,850 --> 00:16:03,000
But there are plenty of other
libraries that are out there

400
00:16:03,000 --> 00:16:04,830
that basically mask the
lower level APIs that

401
00:16:04,830 --> 00:16:05,670
you're going to use.

402
00:16:05,670 --> 00:16:08,990
And it will do the best things
with the capabilities that

403
00:16:08,990 --> 00:16:10,990
your users' browsers
are letting you do.

404
00:16:10,990 --> 00:16:13,540
So if there is quite an old
browser, and it just supports,

405
00:16:13,540 --> 00:16:14,580
let's say, local storage,
it will do

406
00:16:14,580 --> 00:16:16,590
that, or website storage.

407
00:16:16,590 --> 00:16:19,260
If it has NoSQL, the
new IndexedDB

408
00:16:19,260 --> 00:16:20,450
there, it will use it.

409
00:16:20,450 --> 00:16:23,880
If you need WebSQL on another
platform, it will let you do

410
00:16:23,880 --> 00:16:24,780
that as well.

411
00:16:24,780 --> 00:16:27,040
And it's really nice, because in
your data layer, you could

412
00:16:27,040 --> 00:16:29,830
just commit the save method.

413
00:16:29,830 --> 00:16:32,270
And under the seam, it will do
the right things with it.

414
00:16:32,270 --> 00:16:34,800

415
00:16:34,800 --> 00:16:36,630
DANNY HERMES: So we actually
can do this demo because it

416
00:16:36,630 --> 00:16:37,860
doesn't require the network.

417
00:16:37,860 --> 00:16:38,440
IDO GREEN: Right.

418
00:16:38,440 --> 00:16:40,380
So let's switch.

419
00:16:40,380 --> 00:16:42,000
DANNY HERMES: So this is
the mobile device.

420
00:16:42,000 --> 00:16:44,190
IDO GREEN: And you can see now
that we've got all the photos

421
00:16:44,190 --> 00:16:46,700
from before, and even
the one that I took

422
00:16:46,700 --> 00:16:48,620
on the machine itself.

423
00:16:48,620 --> 00:16:49,870
DANNY HERMES: Let me--

424
00:16:49,870 --> 00:16:55,970

425
00:16:55,970 --> 00:16:57,430
there we go.

426
00:16:57,430 --> 00:17:01,970
And I have here the Chrome
Inspector open for this

427
00:17:01,970 --> 00:17:02,800
application.

428
00:17:02,800 --> 00:17:04,950
And we can actually see
all these assets.

429
00:17:04,950 --> 00:17:09,740
So if we blow them away,
goodbye, goodbye, goodbye, and

430
00:17:09,740 --> 00:17:15,810
go back to the application,
force a reload, we still have

431
00:17:15,810 --> 00:17:18,290
the application, but none
of the data is there.

432
00:17:18,290 --> 00:17:20,550
And we really don't
have a connection

433
00:17:20,550 --> 00:17:21,609
to make this happen.

434
00:17:21,609 --> 00:17:23,640
So it's really completely
happening locally.

435
00:17:23,640 --> 00:17:27,359
So it's a wonderful
thing that we

436
00:17:27,359 --> 00:17:30,260
actually get to demo something.

437
00:17:30,260 --> 00:17:32,090
IDO GREEN: Lucky us.

438
00:17:32,090 --> 00:17:35,100
DANNY HERMES: So that was
how it works offline.

439
00:17:35,100 --> 00:17:38,370
And I promise, though that
button was green, that really

440
00:17:38,370 --> 00:17:39,870
was offline.

441
00:17:39,870 --> 00:17:42,730
But let's talk about online, how
we're actually talking to

442
00:17:42,730 --> 00:17:47,000
our server when we are talking
to our server, as infrequently

443
00:17:47,000 --> 00:17:49,380
as that may be.

444
00:17:49,380 --> 00:17:54,150
So first, that red button, which
would have worked great,

445
00:17:54,150 --> 00:17:56,930
is very simple to add if you
want to add authorization to

446
00:17:56,930 --> 00:17:57,700
your application.

447
00:17:57,700 --> 00:18:02,340
It's really a tiny bit of HTML,
just a button with a

448
00:18:02,340 --> 00:18:08,780
sign in call back to actually
respond from the response of

449
00:18:08,780 --> 00:18:12,450
whether or not sign in was
successful or not.

450
00:18:12,450 --> 00:18:14,850
So this is another thing which
we don't have to do.

451
00:18:14,850 --> 00:18:16,740
Easy button.

452
00:18:16,740 --> 00:18:18,420
So how about discovery?

453
00:18:18,420 --> 00:18:22,020
How is discovery helping us with
actually calling our API?

454
00:18:22,020 --> 00:18:26,160
So in this first code snippet
up above, we see gapi dot

455
00:18:26,160 --> 00:18:28,290
client dot load, and
then there's an API

456
00:18:28,290 --> 00:18:29,820
name and an API version.

457
00:18:29,820 --> 00:18:33,920
And this is how we're actually
loading the client library for

458
00:18:33,920 --> 00:18:37,430
a specific API, in this case,
the URL Shortener API.

459
00:18:37,430 --> 00:18:42,380
And once we've done that, the
gapi dot client object now has

460
00:18:42,380 --> 00:18:45,680
a URL shortener object, which it
owns, which knows how to do

461
00:18:45,680 --> 00:18:48,090
everything in calling
that API, which is

462
00:18:48,090 --> 00:18:49,620
specified in discovery.

463
00:18:49,620 --> 00:18:52,750
And through the library, we
just pass in our payload.

464
00:18:52,750 --> 00:18:55,080
And from there, we get an object
which has an execute

465
00:18:55,080 --> 00:18:58,150
method, and that execute method
will take a call back,

466
00:18:58,150 --> 00:18:59,810
and that callback handles
the response.

467
00:18:59,810 --> 00:19:02,180
Very simple, and it's based
on the discovery

468
00:19:02,180 --> 00:19:03,740
document for that API.

469
00:19:03,740 --> 00:19:07,740
So with Google Cloud Endpoints,
this is already at

470
00:19:07,740 --> 00:19:08,580
our disposal.

471
00:19:08,580 --> 00:19:11,970
So in the same fashion, we
specify our API name and

472
00:19:11,970 --> 00:19:15,330
version to gapi dot client dot
load, but we also need to

473
00:19:15,330 --> 00:19:19,670
specify an API route because
we can't host our APIs on

474
00:19:19,670 --> 00:19:22,920
googleapis.com if we're
not Google, right?

475
00:19:22,920 --> 00:19:26,200
And then to actually call the
API, it's the exact same

476
00:19:26,200 --> 00:19:30,520
thing, gapi dot client,
API name, the

477
00:19:30,520 --> 00:19:31,880
resource, then the method.

478
00:19:31,880 --> 00:19:32,680
And you got it.

479
00:19:32,680 --> 00:19:34,720
It's the exact same thing.

480
00:19:34,720 --> 00:19:38,320
So I got this.

481
00:19:38,320 --> 00:19:41,900
So what happened to minimizing
interactions?

482
00:19:41,900 --> 00:19:44,670
So there was actually a bad
thing in there, which goes

483
00:19:44,670 --> 00:19:48,810
against these things we
were saying before.

484
00:19:48,810 --> 00:19:51,770
Gapi dot client dot load
actually uses a network call

485
00:19:51,770 --> 00:19:55,010
every time we want to
talk to a new API.

486
00:19:55,010 --> 00:19:58,620
So if we are in these conditions
where we don't have

487
00:19:58,620 --> 00:20:02,240
a great network connection,
wasting one request could make

488
00:20:02,240 --> 00:20:04,790
a difference between actually
retrieving a photo and making

489
00:20:04,790 --> 00:20:07,490
a user's experience
better or not.

490
00:20:07,490 --> 00:20:10,130
So to get the most out of it, we
have to tweak this a little

491
00:20:10,130 --> 00:20:14,070
bit and get our hands dirty,
but not too dirty.

492
00:20:14,070 --> 00:20:19,430
So if you were to pop open the
Chrome dev tools and check out

493
00:20:19,430 --> 00:20:22,570
the network for a typical
request, you would see a giant

494
00:20:22,570 --> 00:20:25,480
waterfall with a bunch of
RPCs down the left.

495
00:20:25,480 --> 00:20:29,070
And one of those RPCs really
isn't too complex.

496
00:20:29,070 --> 00:20:33,190
It's a standard path based on
where your application lives.

497
00:20:33,190 --> 00:20:36,970
And then the actual payload
takes a method name, so here

498
00:20:36,970 --> 00:20:40,640
picturesque photo list when we
want to list photos, and then

499
00:20:40,640 --> 00:20:42,320
the actual payload as params.

500
00:20:42,320 --> 00:20:45,100
So constructing one of these,
not so difficult.

501
00:20:45,100 --> 00:20:46,900
But we wanted to make things
easier, right?

502
00:20:46,900 --> 00:20:48,890
So never fear.

503
00:20:48,890 --> 00:20:52,290
GAPI actually provides us a way
to do this without wasting

504
00:20:52,290 --> 00:20:54,810
that network request on
GAPI client load.

505
00:20:54,810 --> 00:20:59,420
So we can actually create the
RPC request by hand using

506
00:20:59,420 --> 00:21:03,470
gapi.client and call it in the
exact same fashion by passing

507
00:21:03,470 --> 00:21:04,740
a call back to execute.

508
00:21:04,740 --> 00:21:06,790
So it's OK.

509
00:21:06,790 --> 00:21:08,410
We can still use it.

510
00:21:08,410 --> 00:21:10,150
And this is how we're
calling offline.

511
00:21:10,150 --> 00:21:13,430
So now that we know how to call
offline, let's actually

512
00:21:13,430 --> 00:21:17,050
see how we're doing this, not
in the abstract, but in the

513
00:21:17,050 --> 00:21:18,605
applied sense in our
application.

514
00:21:18,605 --> 00:21:22,390

515
00:21:22,390 --> 00:21:24,980
IDO GREEN: So we all know, and
we spoke about the separation

516
00:21:24,980 --> 00:21:28,110
between our data and the views,
and here when we are

517
00:21:28,110 --> 00:21:31,240
taking a photo, one of the most
important aspect is that

518
00:21:31,240 --> 00:21:33,870
today, modern browsers, you
put in this one line, and

519
00:21:33,870 --> 00:21:36,690
basically you're getting the
ability to go to the camera

520
00:21:36,690 --> 00:21:38,800
itself, and in some cases, to
the file system that you have

521
00:21:38,800 --> 00:21:40,740
on the device, and to
choose the camera.

522
00:21:40,740 --> 00:21:43,320
So you don't need any other apps
or any other libraries in

523
00:21:43,320 --> 00:21:46,950
order to support this close
nature to the methods of the

524
00:21:46,950 --> 00:21:49,090
device itself.

525
00:21:49,090 --> 00:21:52,850
When we come in to do it in our
own application, what we

526
00:21:52,850 --> 00:21:55,180
have here in store is
our own data layer.

527
00:21:55,180 --> 00:21:57,700
And we have the callbacks just
to make sure that we'll be

528
00:21:57,700 --> 00:22:00,450
able to respond to the things
that we make in the

529
00:22:00,450 --> 00:22:01,780
configuration of it.

530
00:22:01,780 --> 00:22:04,320
But then the beauty is that
we have the save click.

531
00:22:04,320 --> 00:22:06,410
And basically, we just need
to focus on that.

532
00:22:06,410 --> 00:22:09,950
Our add photo method is asking
us what we'll do beneath it in

533
00:22:09,950 --> 00:22:10,750
the sync layer.

534
00:22:10,750 --> 00:22:13,240
So for us now as developers that
are using this library,

535
00:22:13,240 --> 00:22:14,370
we just want to save
the photo.

536
00:22:14,370 --> 00:22:16,630
We don't care about if
it's locally, if it's

537
00:22:16,630 --> 00:22:17,760
in the cloud, whatever.

538
00:22:17,760 --> 00:22:19,370
We just know that it
would be saved.

539
00:22:19,370 --> 00:22:22,440
And then the codec will return
and let us know what

540
00:22:22,440 --> 00:22:23,170
happened with it.

541
00:22:23,170 --> 00:22:26,120
So we'll communicate it
to the view itself.

542
00:22:26,120 --> 00:22:29,080
DANNY HERMES: So on the server,
when that add photo

543
00:22:29,080 --> 00:22:31,980
request comes through, in the
same way we defined a bank

544
00:22:31,980 --> 00:22:34,170
account using
endpoints-proto-datastore, we

545
00:22:34,170 --> 00:22:37,750
define a photo with the same
data that we expect to send in

546
00:22:37,750 --> 00:22:39,550
our interface.

547
00:22:39,550 --> 00:22:41,970
And with that, there's
a nice bit of sugar.

548
00:22:41,970 --> 00:22:45,530
There's a decorator provided,
photo dot method, which allows

549
00:22:45,530 --> 00:22:49,440
us to decorate a method, which
will expect to actually

550
00:22:49,440 --> 00:22:51,540
receive a native photo
object based on the

551
00:22:51,540 --> 00:22:53,010
data from the request.

552
00:22:53,010 --> 00:22:56,900
So here, we could do some things
to validate the request

553
00:22:56,900 --> 00:22:59,100
after it comes in, but
essentially, all we really

554
00:22:59,100 --> 00:23:00,020
want to do is store it.

555
00:23:00,020 --> 00:23:04,130
So we call photo dot put to save
that in the App Engine

556
00:23:04,130 --> 00:23:05,380
data store.

557
00:23:05,380 --> 00:23:07,180

558
00:23:07,180 --> 00:23:09,650
IDO GREEN: And in the client,
when we basically use this

559
00:23:09,650 --> 00:23:12,430
separation between our data and
our views, what we did is

560
00:23:12,430 --> 00:23:15,480
just listening to the online
navigator, and you could see

561
00:23:15,480 --> 00:23:17,150
quite nicely here what's
happening.

562
00:23:17,150 --> 00:23:19,740
So let's see this piece of code
and walk you through it.

563
00:23:19,740 --> 00:23:22,490
Basically, we have the task
object that know how to handle

564
00:23:22,490 --> 00:23:26,060
our calls to the API itself, and
we have some payloads and

565
00:23:26,060 --> 00:23:28,490
some metadata on our photos.

566
00:23:28,490 --> 00:23:31,440
And when we go in and we want
to active a new task,

567
00:23:31,440 --> 00:23:34,010
basically we see if our
user is logged in,

568
00:23:34,010 --> 00:23:35,710
and here we'll know.

569
00:23:35,710 --> 00:23:38,700
In case it doesn't login because
we had some problems

570
00:23:38,700 --> 00:23:42,550
like in our demo, we go to this
special queue and just

571
00:23:42,550 --> 00:23:45,540
put it, and we'll wait until it
would be authenticated and

572
00:23:45,540 --> 00:23:47,380
log into our app.

573
00:23:47,380 --> 00:23:50,050
In the case that it is logged
in, we just need to check with

574
00:23:50,050 --> 00:23:53,190
navigator online if we are
online or offline, and that in

575
00:23:53,190 --> 00:23:56,070
case we are online, we just want
to call the task itself

576
00:23:56,070 --> 00:23:59,670
and do the best in terms of
going local storage or moving

577
00:23:59,670 --> 00:24:00,590
it to the cloud.

578
00:24:00,590 --> 00:24:03,040
And if it's not online for some
reason, or we got some

579
00:24:03,040 --> 00:24:06,730
flaky connections, we just add
it to this queue of offline

580
00:24:06,730 --> 00:24:09,710
tasks that we'll run over and
over to make sure when we have

581
00:24:09,710 --> 00:24:12,080
connection, to just take
those tasks and

582
00:24:12,080 --> 00:24:13,430
send them to the server.

583
00:24:13,430 --> 00:24:15,890
The beauty here is that we
always take the photo and

584
00:24:15,890 --> 00:24:18,170
immediately save it locally,
but then when we have

585
00:24:18,170 --> 00:24:20,725
connection, we'll sync it
to the server itself.

586
00:24:20,725 --> 00:24:24,750

587
00:24:24,750 --> 00:24:25,170
DANNY HERMES: All right.

588
00:24:25,170 --> 00:24:26,570
So sorry about that.

589
00:24:26,570 --> 00:24:28,410
We're actually going to
try to demo something.

590
00:24:28,410 --> 00:24:31,510
They've got some hardware which
will let us get ethernet

591
00:24:31,510 --> 00:24:32,920
into that tablet.

592
00:24:32,920 --> 00:24:36,350
So after we create a photo,
there's really only one other

593
00:24:36,350 --> 00:24:38,810
thing we want to do for this
application, which is getting

594
00:24:38,810 --> 00:24:41,730
photos potentially from other
devices that we have saved for

595
00:24:41,730 --> 00:24:43,450
our account.

596
00:24:43,450 --> 00:24:45,080
So we're actually going to--

597
00:24:45,080 --> 00:24:47,330
this is the point where the
server doing the expensive

598
00:24:47,330 --> 00:24:49,410
things comes into place.

599
00:24:49,410 --> 00:24:52,100
But in doing those expensive
things, we have to keep

600
00:24:52,100 --> 00:24:53,580
something in mind.

601
00:24:53,580 --> 00:24:56,500
Minimize interactions, if
it wasn't clear already.

602
00:24:56,500 --> 00:24:59,480
So what are some things
that we're doing?

603
00:24:59,480 --> 00:25:03,110
We're loading photos in the
order that the server learned

604
00:25:03,110 --> 00:25:04,200
about them.

605
00:25:04,200 --> 00:25:07,080
And so by doing this, we
actually have a time stamp,

606
00:25:07,080 --> 00:25:11,160
which is sort of the latest
date that our client knows

607
00:25:11,160 --> 00:25:12,930
that it talked to the server.

608
00:25:12,930 --> 00:25:16,830
And of course, in the same way
we implemented the sync layer

609
00:25:16,830 --> 00:25:20,760
with create, when it's time to
actually talk to the API, if

610
00:25:20,760 --> 00:25:23,320
we're not online, we're not
signed in, we defer it into

611
00:25:23,320 --> 00:25:26,460
some kind of task.

612
00:25:26,460 --> 00:25:28,110
Back to the slides, please.

613
00:25:28,110 --> 00:25:29,360
Yeah.

614
00:25:29,360 --> 00:25:31,410

615
00:25:31,410 --> 00:25:33,730
So on the client--

616
00:25:33,730 --> 00:25:35,250
IDO GREEN: On the client,
what we do here is

617
00:25:35,250 --> 00:25:36,760
basically quite simple.

618
00:25:36,760 --> 00:25:39,180
We're getting the local photos
first and getting

619
00:25:39,180 --> 00:25:40,400
a remote call back.

620
00:25:40,400 --> 00:25:42,840
And now that we got all the
local photos first, we're

621
00:25:42,840 --> 00:25:44,720
getting some metadata with
them, and one of the most

622
00:25:44,720 --> 00:25:46,700
important aspect is
the last update.

623
00:25:46,700 --> 00:25:49,250
So we'll call the server with
this attribute and making sure

624
00:25:49,250 --> 00:25:51,690
that we're just getting the
data of the photos that we

625
00:25:51,690 --> 00:25:52,690
don't have locally.

626
00:25:52,690 --> 00:25:55,130
And that will, of course,
improve the performance, and

627
00:25:55,130 --> 00:25:58,410
basically will reduce the time
and the time around it we are

628
00:25:58,410 --> 00:26:01,300
spending just to get
all the data back.

629
00:26:01,300 --> 00:26:03,320
As you can see, in the client,
it's quite simple.

630
00:26:03,320 --> 00:26:07,160
The not problematic but
challenging aspect is on the

631
00:26:07,160 --> 00:26:07,690
server side.

632
00:26:07,690 --> 00:26:08,920
So let's see how we're
doing there.

633
00:26:08,920 --> 00:26:09,260
DANNY HERMES: Yeah.

634
00:26:09,260 --> 00:26:12,420
So on the server, we're trying
to make our queries more

635
00:26:12,420 --> 00:26:15,220
intelligent and make our server
work harder so that our

636
00:26:15,220 --> 00:26:16,790
clients don't have to.

637
00:26:16,790 --> 00:26:19,390
So what we're actually going
to be doing is creating an

638
00:26:19,390 --> 00:26:22,420
index for sort of more
complex interactions.

639
00:26:22,420 --> 00:26:26,760
So by default, the App Engine
NoSQL Datastore will create an

640
00:26:26,760 --> 00:26:28,920
index for every property
that you have, unless

641
00:26:28,920 --> 00:26:30,170
you tell it not to.

642
00:26:30,170 --> 00:26:33,890
So if you want to know every
photo that I own with title of

643
00:26:33,890 --> 00:26:36,420
fu, it can do it for
you out of the box.

644
00:26:36,420 --> 00:26:38,950
But if you wanted something more
complex, like a composite

645
00:26:38,950 --> 00:26:43,030
of some properties, like here we
see owner and updated, you

646
00:26:43,030 --> 00:26:47,380
would have to specify that
in index.yaml file.

647
00:26:47,380 --> 00:26:50,240
It's just a specification when
you deploy your application.

648
00:26:50,240 --> 00:26:53,990
So this actually makes it
a little more expensive.

649
00:26:53,990 --> 00:26:57,230
Every time we have to write our
entity to the data store

650
00:26:57,230 --> 00:26:59,580
when we're saving the data
that we received from our

651
00:26:59,580 --> 00:27:02,960
clients, we also have to create
a log and an index to

652
00:27:02,960 --> 00:27:05,930
actually reference later when
we're doing these queries.

653
00:27:05,930 --> 00:27:10,130
But the advantage is when our
client makes the request, it's

654
00:27:10,130 --> 00:27:11,780
way faster.

655
00:27:11,780 --> 00:27:15,320
So to actually provide this
through our interface, the

656
00:27:15,320 --> 00:27:17,000
library
endpoints-proto-datastore

657
00:27:17,000 --> 00:27:20,010
actually provides us with
some extra sugar.

658
00:27:20,010 --> 00:27:24,000
Other than properties to be
persisted, we also have a

659
00:27:24,000 --> 00:27:27,080
property called endpoints alias
property, as you see

660
00:27:27,080 --> 00:27:31,160
here, which allows us to have
fields which are only a part

661
00:27:31,160 --> 00:27:33,860
of the interface and never
get stored anywhere.

662
00:27:33,860 --> 00:27:37,700
And so for us to actually let
the client ask us, hey, I know

663
00:27:37,700 --> 00:27:39,930
about everything up until
20 minutes ago.

664
00:27:39,930 --> 00:27:41,910
Can you give me everything
since 20 minutes ago?

665
00:27:41,910 --> 00:27:45,520
We have to give them a way to
send 20 minutes ago, right?

666
00:27:45,520 --> 00:27:47,910
So we have an endpoints
alias property.

667
00:27:47,910 --> 00:27:51,020
And the real work here is
happening in a setter.

668
00:27:51,020 --> 00:27:53,140
So in that setter,
there's really

669
00:27:53,140 --> 00:27:55,020
three things that happen.

670
00:27:55,020 --> 00:27:57,960
So the first thing, we take the
value from the request.

671
00:27:57,960 --> 00:28:00,480
We try to turn it from a string
to a native Python

672
00:28:00,480 --> 00:28:02,090
daytime object.

673
00:28:02,090 --> 00:28:05,740
If we can't do it, we raise
what's called an endpoints dot

674
00:28:05,740 --> 00:28:07,180
bad request exception.

675
00:28:07,180 --> 00:28:10,380
And for those familiar with HTTP
status codes, that tells

676
00:28:10,380 --> 00:28:13,050
the client, hey, here's a 400.

677
00:28:13,050 --> 00:28:14,470
You sent me bad data.

678
00:28:14,470 --> 00:28:16,490
Send me good data or
don't talk to me.

679
00:28:16,490 --> 00:28:20,520
And of course, if we did get
good data, then we take the

680
00:28:20,520 --> 00:28:23,560
query associated with the
request, and we are able to

681
00:28:23,560 --> 00:28:28,300
add a filter, which here says
photo dot updated greater than

682
00:28:28,300 --> 00:28:29,540
or equal to last updated.

683
00:28:29,540 --> 00:28:33,160
So what this does, it takes our
data and says we only want

684
00:28:33,160 --> 00:28:36,390
the things which have been
updated since, for example, 20

685
00:28:36,390 --> 00:28:38,140
minutes ago, whatever
time stamp came

686
00:28:38,140 --> 00:28:40,010
in through the request.

687
00:28:40,010 --> 00:28:45,120
And finally, when we're actually
serving this request,

688
00:28:45,120 --> 00:28:48,480
in the same way we got a photo
dot method decorator, we have

689
00:28:48,480 --> 00:28:51,870
a photo dot query decorator,
which allows us to interact

690
00:28:51,870 --> 00:28:55,380
directly with a data store
query, instead of directly

691
00:28:55,380 --> 00:28:58,640
with the data, the photo
from the request.

692
00:28:58,640 --> 00:29:02,240
And so we want to order that
query by when it was updated.

693
00:29:02,240 --> 00:29:05,300
And by doing this, if a user has
to actually page through a

694
00:29:05,300 --> 00:29:08,960
results set, they will
get them in the order

695
00:29:08,960 --> 00:29:10,130
from oldest to newest.

696
00:29:10,130 --> 00:29:13,110
And so, for example, if you
drop your connection while

697
00:29:13,110 --> 00:29:15,140
you're paging through a results
set, you'll actually

698
00:29:15,140 --> 00:29:17,310
be able to say, well, it used
to be that I knew about

699
00:29:17,310 --> 00:29:19,270
everything up until
20 minutes ago.

700
00:29:19,270 --> 00:29:22,080
Now I know about everything
until 10 minutes ago, and so I

701
00:29:22,080 --> 00:29:26,690
don't have to waste that query
for the time in between.

702
00:29:26,690 --> 00:29:31,750
So that was everything that we
would have showed in the demo,

703
00:29:31,750 --> 00:29:34,820
some other things that we would
have like to have done,

704
00:29:34,820 --> 00:29:38,990
and which we will be adding to
the open source code for this

705
00:29:38,990 --> 00:29:40,950
application.

706
00:29:40,950 --> 00:29:42,500
One would be sharing.

707
00:29:42,500 --> 00:29:47,790
So we actually did implement
this before, and we were able

708
00:29:47,790 --> 00:29:50,730
to create an access control
list, or an apple, for every

709
00:29:50,730 --> 00:29:54,670
photo, and allow users with
Google+ share intents to

710
00:29:54,670 --> 00:29:58,200
actually have a native Google+
share button and share their

711
00:29:58,200 --> 00:30:00,040
photos with other users.

712
00:30:00,040 --> 00:30:04,040
And it would again be based
on auth and fairly easy.

713
00:30:04,040 --> 00:30:06,910
In addition, we were downscoping
the photos,

714
00:30:06,910 --> 00:30:10,080
shrinking them so they would fit
in the Google App Engine

715
00:30:10,080 --> 00:30:10,830
data store.

716
00:30:10,830 --> 00:30:14,290
There are many pieces of the
Google Cloud Platform that

717
00:30:14,290 --> 00:30:15,340
address storage.

718
00:30:15,340 --> 00:30:19,240
And so Google Cloud Storage,
or the Google App Engine

719
00:30:19,240 --> 00:30:22,560
Blobstore, are probably a better
place for large and

720
00:30:22,560 --> 00:30:26,390
high quality photos, rather than
the data store, which in

721
00:30:26,390 --> 00:30:30,230
the same way that local storage
was a good place to

722
00:30:30,230 --> 00:30:34,640
actually store metadata, while
the local file system was a

723
00:30:34,640 --> 00:30:37,700
good place to store photos, we
have the data store as a good

724
00:30:37,700 --> 00:30:43,110
place for metadata and a nice
bucket type system like cloud

725
00:30:43,110 --> 00:30:47,980
storage, which is a good
place for photos.

726
00:30:47,980 --> 00:30:48,780
IDO GREEN: Yeah.

727
00:30:48,780 --> 00:30:51,170
Take a deep breath.

728
00:30:51,170 --> 00:30:54,440
So we tried to tell you a story
and communicate some

729
00:30:54,440 --> 00:30:56,690
important aspect that
we found compelling.

730
00:30:56,690 --> 00:30:59,470
One is that Google App Engine
and specifically Google Cloud

731
00:30:59,470 --> 00:31:01,830
Endpoint is powerful service
that you might want to check

732
00:31:01,830 --> 00:31:05,660
out in your next API service
product that you're building.

733
00:31:05,660 --> 00:31:08,230
Or we think about performance
and try to minimize the

734
00:31:08,230 --> 00:31:10,750
connections and optimize each
and every connection that

735
00:31:10,750 --> 00:31:12,920
you're doing to the server.

736
00:31:12,920 --> 00:31:15,890
Use obstructions layer and do
clear separation between your

737
00:31:15,890 --> 00:31:16,850
data and the views.

738
00:31:16,850 --> 00:31:18,860
It will be much more
maintainable code.

739
00:31:18,860 --> 00:31:20,950
And as you all know, you're
reading code much more than

740
00:31:20,950 --> 00:31:23,980
you're writing it, so you do
want the shortest possible

741
00:31:23,980 --> 00:31:26,510
clear code in your app.

742
00:31:26,510 --> 00:31:27,950
Leverage modern browser
features.

743
00:31:27,950 --> 00:31:31,140
So we have actually on
the mobile browsers

744
00:31:31,140 --> 00:31:32,290
quite a lot of features.

745
00:31:32,290 --> 00:31:35,630
And a site like caniuse.com
could reveal to you all the

746
00:31:35,630 --> 00:31:38,910
new APIs that mobile browser
are supporting, and we have

747
00:31:38,910 --> 00:31:40,720
great adoption in that field.

748
00:31:40,720 --> 00:31:41,520
So just use them.

749
00:31:41,520 --> 00:31:45,300
We have some really nice talks
today, tomorrow, and on Friday

750
00:31:45,300 --> 00:31:47,660
that are addressing it, and
we highly encourage you

751
00:31:47,660 --> 00:31:48,690
to check them out.

752
00:31:48,690 --> 00:31:50,410
There are a few options here.

753
00:31:50,410 --> 00:31:52,110
Danny chose his favorite.

754
00:31:52,110 --> 00:31:53,150
I chose mine.

755
00:31:53,150 --> 00:31:55,040
But feel free to
check them out.

756
00:31:55,040 --> 00:31:57,830
Some compelling stories about
how to do interesting things

757
00:31:57,830 --> 00:32:02,380
in the cloud and on
the mobile web.

758
00:32:02,380 --> 00:32:04,540
Thank you very much
for your time.

759
00:32:04,540 --> 00:32:08,750
We do have seven minutes, and
would be more than happy to

760
00:32:08,750 --> 00:32:10,739
try and answer your questions.

761
00:32:10,739 --> 00:32:13,493
[APPLAUSE]

762
00:32:13,493 --> 00:32:15,100
DANNY HERMES: In theory,
we could do the demo.

763
00:32:15,100 --> 00:32:18,170

764
00:32:18,170 --> 00:32:19,490
IDO GREEN: If you have
any questions, just

765
00:32:19,490 --> 00:32:20,740
please come to the mic.

766
00:32:20,740 --> 00:32:23,630

767
00:32:23,630 --> 00:32:24,450
AUDIENCE: Hi.

768
00:32:24,450 --> 00:32:24,950
IDO GREEN: Hi.

769
00:32:24,950 --> 00:32:25,950
DANNY HERMES: Howdy.

770
00:32:25,950 --> 00:32:28,570
AUDIENCE: I've been using Cloud
Endpoints for some time,

771
00:32:28,570 --> 00:32:30,740
and it's really, really cool.

772
00:32:30,740 --> 00:32:32,660
One of the things that is
probably out of the scope of

773
00:32:32,660 --> 00:32:36,330
this conference,
access control.

774
00:32:36,330 --> 00:32:40,475
I mean, it's kind of a huge
beast to handle sometimes, so

775
00:32:40,475 --> 00:32:43,210
I would love to see
elegant ways of

776
00:32:43,210 --> 00:32:44,530
handling access control.

777
00:32:44,530 --> 00:32:47,400
DANNY HERMES: Sure, sure.

778
00:32:47,400 --> 00:32:48,840
I don't know that there's
a question there.

779
00:32:48,840 --> 00:32:52,960
But I will address sort of
the general concept.

780
00:32:52,960 --> 00:32:55,415
So with access controls,
we're essentially--

781
00:32:55,415 --> 00:32:58,070

782
00:32:58,070 --> 00:33:01,270
every user, especially when
you're doing Google+ sign in,

783
00:33:01,270 --> 00:33:03,950
you get access to their Google+
ID via the scopes that

784
00:33:03,950 --> 00:33:04,710
they allow.

785
00:33:04,710 --> 00:33:08,370
And so there's sort of a
global ID for accounts.

786
00:33:08,370 --> 00:33:12,500
And so what we're using, we're
allowing the data store to

787
00:33:12,500 --> 00:33:16,360
actually have just a list of
account IDs associated with

788
00:33:16,360 --> 00:33:17,310
every photo.

789
00:33:17,310 --> 00:33:20,370
And then, in addition to that,
to make queries for somebody

790
00:33:20,370 --> 00:33:22,870
else's stuff that I was
allowed to see.

791
00:33:22,870 --> 00:33:26,896
We would also, on our user
objects, where we were storing

792
00:33:26,896 --> 00:33:30,650
our created user accounts, we
would keep a list of all the

793
00:33:30,650 --> 00:33:32,390
other users that had shared
stuff with them.

794
00:33:32,390 --> 00:33:38,850
And so by doing so, as sort of
a first order implementation,

795
00:33:38,850 --> 00:33:44,270
we were able to actually to
utilize the data store and

796
00:33:44,270 --> 00:33:47,890
queries from App Engine to
make it appear fast.

797
00:33:47,890 --> 00:33:50,480
But as far as something native,
there's not anything

798
00:33:50,480 --> 00:33:51,730
that I know of.

799
00:33:51,730 --> 00:33:57,786

800
00:33:57,786 --> 00:33:59,262
This mic's not on.

801
00:33:59,262 --> 00:34:07,720

802
00:34:07,720 --> 00:34:10,340
AUDIENCE: Operate on the Google+
sign in plus endpoints

803
00:34:10,340 --> 00:34:11,010
integration.

804
00:34:11,010 --> 00:34:15,179
Because for plus log in, you
need to request a difference

805
00:34:15,179 --> 00:34:17,730
code than for endpoints,
right?

806
00:34:17,730 --> 00:34:21,620
The user emails code versus
that plus [INAUDIBLE].

807
00:34:21,620 --> 00:34:24,060
DANNY HERMES: So the question
was he wanted us to elaborate

808
00:34:24,060 --> 00:34:26,480
on how you can use endpoints
and G+ sign

809
00:34:26,480 --> 00:34:28,230
in at the same time.

810
00:34:28,230 --> 00:34:40,000
So what actually happens with
endpoints for typical OAuth is

811
00:34:40,000 --> 00:34:42,130
you need the email scope and
sort of nothing else.

812
00:34:42,130 --> 00:34:47,500
And G+ sign in requires the
user info profile scope.

813
00:34:47,500 --> 00:34:49,060
But you can actually
combine the two.

814
00:34:49,060 --> 00:34:54,340
So you have a token which has
both scopes on it, and either

815
00:34:54,340 --> 00:34:58,180
ID tokens or bearer tokens can
be used with endpoints.

816
00:34:58,180 --> 00:35:01,750
And so if you actually send a
bearer token, it will still

817
00:35:01,750 --> 00:35:03,900
check out that it has
the email scope.

818
00:35:03,900 --> 00:35:08,120
It's only in the ID token case
where that will fail since you

819
00:35:08,120 --> 00:35:12,140
don't just have the
email scope.

820
00:35:12,140 --> 00:35:13,720
IDO GREEN: Yes, please.

821
00:35:13,720 --> 00:35:16,930
AUDIENCE: On the client side,
in this example, it looked

822
00:35:16,930 --> 00:35:19,870
like all the data was
kind of dynamic.

823
00:35:19,870 --> 00:35:22,550
I was wondering if you have any
guidance around what would

824
00:35:22,550 --> 00:35:26,520
traditionally be the static
part of the pages that are

825
00:35:26,520 --> 00:35:30,330
filled in with the dynamic data
with the idea that I want

826
00:35:30,330 --> 00:35:33,900
to cache this and have it
available somewhat offline.

827
00:35:33,900 --> 00:35:36,396
IDO GREEN: Yeah, so actually
we couldn't show it, but in

828
00:35:36,396 --> 00:35:39,650
our demo, we had the structure
of the app itself, which

829
00:35:39,650 --> 00:35:40,450
wasn't dynamic at all.

830
00:35:40,450 --> 00:35:42,750
So we have all the
assets with us.

831
00:35:42,750 --> 00:35:46,770
All the nice button and the
footer and the header are

832
00:35:46,770 --> 00:35:48,970
actually being fetched
in the first call.

833
00:35:48,970 --> 00:35:51,150
And from that on, once we have
the skeleton of the app, it

834
00:35:51,150 --> 00:35:54,260
could be a background image,
it could be some

835
00:35:54,260 --> 00:35:55,830
music file if you like.

836
00:35:55,830 --> 00:35:57,770
Once we have all that, then
we're fetching everything

837
00:35:57,770 --> 00:35:58,720
dynamically.

838
00:35:58,720 --> 00:36:02,090
And it's actually a phenomenon
that we see in lots of

839
00:36:02,090 --> 00:36:05,200
different apps, native end
mobile webs, where you have

840
00:36:05,200 --> 00:36:06,950
the skeleton, and then the
data itself is being

841
00:36:06,950 --> 00:36:08,010
retrieving.

842
00:36:08,010 --> 00:36:10,120
All the apps containing some
long list of things.

843
00:36:10,120 --> 00:36:11,150
It could be a mail.

844
00:36:11,150 --> 00:36:12,540
It could be a social app.

845
00:36:12,540 --> 00:36:13,540
It could be a photo app.

846
00:36:13,540 --> 00:36:16,040
It's usually the skeleton just
like we did, and then all the

847
00:36:16,040 --> 00:36:17,780
photos there.

848
00:36:17,780 --> 00:36:20,420
I didn't mention it, but the
app itself is live at that

849
00:36:20,420 --> 00:36:23,180
URL, and you're more than happy
to check it when you

850
00:36:23,180 --> 00:36:25,130
have connection and see
that it works for you.

851
00:36:25,130 --> 00:36:28,040

852
00:36:28,040 --> 00:36:28,580
Yes, please.

853
00:36:28,580 --> 00:36:30,870
AUDIENCE: Cool, I maybe have
two questions for you guys.

854
00:36:30,870 --> 00:36:33,800
Is endpoints still considered
experimental?

855
00:36:33,800 --> 00:36:36,230
DANNY HERMES: It's considered
preview.

856
00:36:36,230 --> 00:36:39,700
The language around that
and cloud platform

857
00:36:39,700 --> 00:36:41,340
has recently changed.

858
00:36:41,340 --> 00:36:43,953
We have a product manager here
who could probably talk your

859
00:36:43,953 --> 00:36:46,130
ear off about it, but I
know a fair amount.

860
00:36:46,130 --> 00:36:50,570
So preview essentially is our
way of saying it's not

861
00:36:50,570 --> 00:36:53,460
completely general availability
yet, which is our

862
00:36:53,460 --> 00:36:56,190
generic term for like no labels
at all other than just

863
00:36:56,190 --> 00:36:57,650
use it, right?

864
00:36:57,650 --> 00:36:59,490
But we're committed to it, we're
committed to improving

865
00:36:59,490 --> 00:37:02,890
it, and we're actively working
on it very quickly.

866
00:37:02,890 --> 00:37:04,970
AUDIENCE: So that's my
second question.

867
00:37:04,970 --> 00:37:06,360
I'm the developer at
the Ferris web

868
00:37:06,360 --> 00:37:07,900
framework for App Engine.

869
00:37:07,900 --> 00:37:09,500
And I'm planning on integrating
Cloud and

870
00:37:09,500 --> 00:37:10,870
Endpoints with that
so that Ferris--

871
00:37:10,870 --> 00:37:12,090
DANNY HERMES: Sorry, what
framework did you say?

872
00:37:12,090 --> 00:37:13,220
AUDIENCE: Ferris.

873
00:37:13,220 --> 00:37:14,120
Ferris by--

874
00:37:14,120 --> 00:37:15,610
DANNY HERMES: Ferris,
like Ferris wheel?

875
00:37:15,610 --> 00:37:16,860
AUDIENCE: Like Ferris Bueller.

876
00:37:16,860 --> 00:37:18,320
DANNY HERMES: OK,
that works too.

877
00:37:18,320 --> 00:37:19,540
AUDIENCE: Yeah, it's
to be lazy.

878
00:37:19,540 --> 00:37:22,530
It's kind of similar to Flask
and Django in a way,

879
00:37:22,530 --> 00:37:24,440
specifically for App Engine.

880
00:37:24,440 --> 00:37:26,650
So we're planning on integrating
Cloud Endpoints

881
00:37:26,650 --> 00:37:30,750
into Ferris so you can share the
same code between the two.

882
00:37:30,750 --> 00:37:33,560
So the big question there is,
how much more is the API going

883
00:37:33,560 --> 00:37:36,070
to change from this point.

884
00:37:36,070 --> 00:37:37,470
DANNY HERMES: Yeah, I can't
answer a question like that.

885
00:37:37,470 --> 00:37:40,230
AUDIENCE: You can't answer
a question like that.

886
00:37:40,230 --> 00:37:41,000
OK, cool.

887
00:37:41,000 --> 00:37:44,720
Yeah, so I was just wondering
how much we could expect--

888
00:37:44,720 --> 00:37:46,620
new features is great, but I
mean like just kind of the

889
00:37:46,620 --> 00:37:49,390
core, is the core kind of
solid, do you guys feel?

890
00:37:49,390 --> 00:37:51,000
DANNY HERMES: So Cloud Endpoints
is actually more

891
00:37:51,000 --> 00:37:54,050
than just an App Engine feature
because it uses a

892
00:37:54,050 --> 00:37:58,300
shared infrastructure that all
of Google's APIs use as well.

893
00:37:58,300 --> 00:38:01,220
And so there's a fair amount
of discovery itself is a

894
00:38:01,220 --> 00:38:03,790
specification, and there's also
a back end configuration,

895
00:38:03,790 --> 00:38:07,460
which allows us to register with
that shared API service

896
00:38:07,460 --> 00:38:10,060
and say this is what I look
like, this is the kind of

897
00:38:10,060 --> 00:38:11,940
things that I want you to send
me, this is the kind of things

898
00:38:11,940 --> 00:38:13,930
that I'll give back
to you, and other

899
00:38:13,930 --> 00:38:16,190
related things like auth.

900
00:38:16,190 --> 00:38:17,960
So this is an active
conversation

901
00:38:17,960 --> 00:38:19,940
which we have a lot.

902
00:38:19,940 --> 00:38:23,220
So I I'm happy to talk more
about it after, but.

903
00:38:23,220 --> 00:38:23,600
AUDIENCE: Thanks.

904
00:38:23,600 --> 00:38:24,660
It's great so far.

905
00:38:24,660 --> 00:38:26,360
ProtoRPC and everything
involved in that

906
00:38:26,360 --> 00:38:27,415
looks great so far.

907
00:38:27,415 --> 00:38:27,910
Thank you, guys.

908
00:38:27,910 --> 00:38:29,160
DANNY HERMES: OK, cool.

909
00:38:29,160 --> 00:38:35,335

910
00:38:35,335 --> 00:38:37,800
IDO GREEN: OK, thank
you very much.

911
00:38:37,800 --> 00:38:38,650
Bye bye.

912
00:38:38,650 --> 00:38:41,166
[APPLAUSE]

913
00:38:41,166 --> 00:38:58,388

