1
00:00:00,000 --> 00:00:02,640

2
00:00:02,640 --> 00:00:03,080
Hi.

3
00:00:03,080 --> 00:00:03,840
I'm Phil Quitslund.

4
00:00:03,840 --> 00:00:06,370
And I'm an engineer on Dart
Editor, our lightweight and

5
00:00:06,370 --> 00:00:08,080
powerful editor for Dart.

6
00:00:08,080 --> 00:00:10,470
In this video I'll give you a
tour of Dart Editor and its

7
00:00:10,470 --> 00:00:12,880
many features to help developers
be more productive

8
00:00:12,880 --> 00:00:15,620
for writing larger,
full-featured web apps.

9
00:00:15,620 --> 00:00:18,390
Dart Editor helps you write web
apps with Dart, the new

10
00:00:18,390 --> 00:00:20,710
scalable web programming
language.

11
00:00:20,710 --> 00:00:22,950
The editor and language are part
of the open-source Dart

12
00:00:22,950 --> 00:00:25,880
project, which also includes
libraries, a new virtual

13
00:00:25,880 --> 00:00:28,460
machine, a package manager,
and more.

14
00:00:28,460 --> 00:00:31,520
Dart compiles to JavaScript to
run across the modern web.

15
00:00:31,520 --> 00:00:33,710
Let's see how to use
Dart Editor now.

16
00:00:33,710 --> 00:00:35,840
When you first start the Dart
Editor, you're greeted by the

17
00:00:35,840 --> 00:00:37,160
Welcome screen.

18
00:00:37,160 --> 00:00:39,590
From here, you can create a
new application, read more

19
00:00:39,590 --> 00:00:42,470
about Dart, or run one
of many samples.

20
00:00:42,470 --> 00:00:45,290
For example, let's see what
this Solar app does.

21
00:00:45,290 --> 00:00:47,810
It simulates the planets
orbiting around the sun.

22
00:00:47,810 --> 00:00:48,960
Neat.

23
00:00:48,960 --> 00:00:50,640
Dart Editor isn't a
stock of clips.

24
00:00:50,640 --> 00:00:53,760
It's a completely standalone
editor optimized for Dart.

25
00:00:53,760 --> 00:00:56,420
You'll quickly see that Dart
Editor has clean menus in a

26
00:00:56,420 --> 00:00:59,090
significantly simplified UI.

27
00:00:59,090 --> 00:01:01,290
Even though things look more
simple, we still have powerful

28
00:01:01,290 --> 00:01:04,780
features, such as auto-update
and configurable key bindings.

29
00:01:04,780 --> 00:01:06,530
If you already use Eclipse,
IntelliJ, or

30
00:01:06,530 --> 00:01:07,970
WebStorm, you're in luck.

31
00:01:07,970 --> 00:01:10,630
These IDs also have Dart
plug-ins available.

32
00:01:10,630 --> 00:01:13,240
Dart Editor can help you learn
Dart with code navigation,

33
00:01:13,240 --> 00:01:14,930
code completion, and more.

34
00:01:14,930 --> 00:01:17,260
Let's see these features
in action.

35
00:01:17,260 --> 00:01:19,520
Here we are looking at
some new Dart code.

36
00:01:19,520 --> 00:01:21,620
I'm curious about this method
here, and I wonder how it's

37
00:01:21,620 --> 00:01:22,660
implemented.

38
00:01:22,660 --> 00:01:26,070
I can simply right-click on it
and choose Open Declaration.

39
00:01:26,070 --> 00:01:29,550
Dart Editor jumps me directly
to the methods definition.

40
00:01:29,550 --> 00:01:32,070
Dart Editor indexes all the
names in your project, making

41
00:01:32,070 --> 00:01:33,670
it easier to find code.

42
00:01:33,670 --> 00:01:36,400
Once you find the code, you can
also easily find out where

43
00:01:36,400 --> 00:01:37,670
else it's used.

44
00:01:37,670 --> 00:01:40,390
For example, I'm not sure
who uses this code.

45
00:01:40,390 --> 00:01:41,790
I can right-click on
the method name

46
00:01:41,790 --> 00:01:43,570
and choose Find Callers.

47
00:01:43,570 --> 00:01:46,095
The Editor finds all the code
that uses the method so you

48
00:01:46,095 --> 00:01:48,150
know where and how it's used.

49
00:01:48,150 --> 00:01:50,880
You can use this functionality
to help clean up your code.

50
00:01:50,880 --> 00:01:53,290
For example, it looks like
no-one else is using this

51
00:01:53,290 --> 00:01:54,080
particular method.

52
00:01:54,080 --> 00:01:56,650
So I can delete it.

53
00:01:56,650 --> 00:01:59,010
Dart Editor also makes it easy
to find a name if you know

54
00:01:59,010 --> 00:01:59,880
what it is.

55
00:01:59,880 --> 00:02:02,560
You can search across the
project for classes, methods,

56
00:02:02,560 --> 00:02:04,070
variable names, and more.

57
00:02:04,070 --> 00:02:06,450
For example, the other day my
buddy told me about some

58
00:02:06,450 --> 00:02:08,250
reconnect logic she wrote.

59
00:02:08,250 --> 00:02:09,289
I searched for reconnect.

60
00:02:09,289 --> 00:02:11,750
And, sure enough, Dart Editor
finds a method called

61
00:02:11,750 --> 00:02:14,210
scheduleReconnect.

62
00:02:14,210 --> 00:02:16,670
Along with navigating the code,
Dart Editor also makes

63
00:02:16,670 --> 00:02:18,650
it easy to explore new APIs.

64
00:02:18,650 --> 00:02:21,830
Because Dart is structured and
has optional static types, the

65
00:02:21,830 --> 00:02:24,290
Editor can provide useful
code completion.

66
00:02:24,290 --> 00:02:26,400
Here I am working with an object
that I'm not familiar

67
00:02:26,400 --> 00:02:29,480
with, and I'm not sure what
methods I can call.

68
00:02:29,480 --> 00:02:32,160
Dart Editor knows what type the
object is and can provide

69
00:02:32,160 --> 00:02:35,310
me with a list of options
specific to this variable.

70
00:02:35,310 --> 00:02:37,640
Even if you don't use type
annotations, the Editor can

71
00:02:37,640 --> 00:02:40,930
often infer types, and code
completion still works.

72
00:02:40,930 --> 00:02:43,860
In this example I used var for
my simple variable that holds

73
00:02:43,860 --> 00:02:44,790
an integer.

74
00:02:44,790 --> 00:02:46,860
Notice how the Editor still
gives me useful code

75
00:02:46,860 --> 00:02:49,130
completion proposals.

76
00:02:49,130 --> 00:02:51,970
Dart Editor can help you fix a
simple problem with a quick

77
00:02:51,970 --> 00:02:53,310
keyboard shortcut.

78
00:02:53,310 --> 00:02:56,210
For example, the Editor can
apply various quick fixes for

79
00:02:56,210 --> 00:02:58,780
missing methods or
missing classes.

80
00:02:58,780 --> 00:03:01,060
Here I've written some code that
uses a method that is not

81
00:03:01,060 --> 00:03:02,070
yet defined.

82
00:03:02,070 --> 00:03:05,070
I clearly got ahead of myself,
but we can fix it.

83
00:03:05,070 --> 00:03:07,790
Simply use Control-1 to bring
up the Quick Fix menu, and

84
00:03:07,790 --> 00:03:09,910
you'll see a Create Method
option complete with

85
00:03:09,910 --> 00:03:11,330
parameters and types.

86
00:03:11,330 --> 00:03:14,290
Once the method is created,
the error goes away.

87
00:03:14,290 --> 00:03:16,830
Other quick fixes include
Create Class, Import

88
00:03:16,830 --> 00:03:18,930
Library, and more.

89
00:03:18,930 --> 00:03:21,630
Writing code is easy, but
maintaining it as requirements

90
00:03:21,630 --> 00:03:23,430
change can be challenging.

91
00:03:23,430 --> 00:03:26,110
Dart Editor has built-in
refactoring support to help

92
00:03:26,110 --> 00:03:28,820
you update the code as
the design evolves.

93
00:03:28,820 --> 00:03:30,140
The name I originally
picked for this

94
00:03:30,140 --> 00:03:31,880
method can be more clear.

95
00:03:31,880 --> 00:03:33,930
I want to rename it, but I
also want to rename all

96
00:03:33,930 --> 00:03:36,160
references across the project.

97
00:03:36,160 --> 00:03:37,970
Right-click on the method
and choose Rename

98
00:03:37,970 --> 00:03:39,860
from the Context menu.

99
00:03:39,860 --> 00:03:41,440
After I choose a new
name, it's changed

100
00:03:41,440 --> 00:03:43,680
all over the project.

101
00:03:43,680 --> 00:03:45,470
Repeating the same
code isn't ideal.

102
00:03:45,470 --> 00:03:48,060
So if you notice the same code
used more than once, you can

103
00:03:48,060 --> 00:03:50,410
apply the Extract Method
refactoring.

104
00:03:50,410 --> 00:03:53,170
Here's code I've repeated
twice in the same file.

105
00:03:53,170 --> 00:03:55,370
It's a great candidate
for extract method.

106
00:03:55,370 --> 00:03:57,750
Highlight the code, right-click,
choose Extract

107
00:03:57,750 --> 00:03:59,370
Method, and choose a name
for the new method.

108
00:03:59,370 --> 00:04:02,700

109
00:04:02,700 --> 00:04:05,080
Notice how the original code is
replaced by a call to the

110
00:04:05,080 --> 00:04:06,910
new method.

111
00:04:06,910 --> 00:04:09,800
Quick fixes and refactorings are
helpful features to keep

112
00:04:09,800 --> 00:04:10,770
you more productive.

113
00:04:10,770 --> 00:04:13,240
But what if you run into
a bug in your code?

114
00:04:13,240 --> 00:04:15,440
Dart Editor has a rich Debugger
to help you find and

115
00:04:15,440 --> 00:04:17,220
fix bugs quickly.

116
00:04:17,220 --> 00:04:19,220
The Debugger connects to
Dartium, our build of

117
00:04:19,220 --> 00:04:21,640
Chromium, with an embedded
Dart VM.

118
00:04:21,640 --> 00:04:23,770
You can set breakpoints,
step your code, inspect

119
00:04:23,770 --> 00:04:25,630
variables, and more.

120
00:04:25,630 --> 00:04:29,250
Here's a sample Dart app,
which clearly has a bug.

121
00:04:29,250 --> 00:04:31,600
We can use the Debugger
to find the error.

122
00:04:31,600 --> 00:04:33,390
I start by checking if
this is a problem

123
00:04:33,390 --> 00:04:35,290
with drawing the planet.

124
00:04:35,290 --> 00:04:37,520
I set a breakpoint inside
the drawSelf method of

125
00:04:37,520 --> 00:04:38,550
PlanetaryBody.

126
00:04:38,550 --> 00:04:41,380
The program stops when the
breakpoint is hit.

127
00:04:41,380 --> 00:04:43,630
Since the positions are wrong,
I'm curious about the point

128
00:04:43,630 --> 00:04:45,570
values of x and y.

129
00:04:45,570 --> 00:04:48,060
Using the Debugger, I can
inspect variable values and

130
00:04:48,060 --> 00:04:49,800
set watched expressions.

131
00:04:49,800 --> 00:04:52,170
I'm looking for anything
out of the ordinary.

132
00:04:52,170 --> 00:04:54,310
Here, I'm comparing x and
y with the previous

133
00:04:54,310 --> 00:04:56,130
frames x and y.

134
00:04:56,130 --> 00:04:57,380
They're reversed.

135
00:04:57,380 --> 00:04:59,800
Sure enough, the bug
is in the code.

136
00:04:59,800 --> 00:05:02,580
It's a simple fix, and
I rerun the program.

137
00:05:02,580 --> 00:05:04,590
It works.

138
00:05:04,590 --> 00:05:06,710
You can avoid adding Debug.Print
statements to all

139
00:05:06,710 --> 00:05:09,380
of your code by using the
Editor's built-in Debugger and

140
00:05:09,380 --> 00:05:11,470
tight integration
with Dart VM.

141
00:05:11,470 --> 00:05:14,030
Dart Editor is open-source, and
we like to hear from our

142
00:05:14,030 --> 00:05:15,440
developers.

143
00:05:15,440 --> 00:05:18,260
If you ever have an idea for a
feature or run into a problem,

144
00:05:18,260 --> 00:05:19,850
click the Send Feedback
button.

145
00:05:19,850 --> 00:05:22,400
Simply tell us what you're
trying to do, click Send, and

146
00:05:22,400 --> 00:05:24,730
the Editor team will
receive your note.

147
00:05:24,730 --> 00:05:26,960
We just scratched the surface
of Dart Editor.

148
00:05:26,960 --> 00:05:28,570
We look forward to hearing
your feedback.

149
00:05:28,570 --> 00:05:30,540
Please download it today
and give it a try.

150
00:05:30,540 --> 00:05:33,708

