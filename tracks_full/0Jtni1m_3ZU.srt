1
00:00:00,000 --> 00:00:02,640

2
00:00:02,640 --> 00:00:03,850
CHRISTIAN KURZKE: All right.

3
00:00:03,850 --> 00:00:05,430
Thanks for coming, everyone.

4
00:00:05,430 --> 00:00:07,430
It's a packed room.

5
00:00:07,430 --> 00:00:11,000
So today, what I'm going to
talk about is Android on

6
00:00:11,000 --> 00:00:12,390
Television.

7
00:00:12,390 --> 00:00:15,400
And I don't know how many of you
have actually ever been on

8
00:00:15,400 --> 00:00:17,900
television.

9
00:00:17,900 --> 00:00:19,050
There's a few.

10
00:00:19,050 --> 00:00:20,030
Great.

11
00:00:20,030 --> 00:00:22,070
I mean, people do some really
amazing stuff to get on

12
00:00:22,070 --> 00:00:22,830
television.

13
00:00:22,830 --> 00:00:23,780
And as--

14
00:00:23,780 --> 00:00:25,970
who knows Jeff Foxworthy?

15
00:00:25,970 --> 00:00:26,900
My favorite guys.

16
00:00:26,900 --> 00:00:30,760
Eh, it's not the southern
crowd here.

17
00:00:30,760 --> 00:00:34,270
As he said, you might be a
redneck if you've been on TV

18
00:00:34,270 --> 00:00:36,420
more than five times describing
the sound of a

19
00:00:36,420 --> 00:00:40,440
tornado going over your
neighbor's barn.

20
00:00:40,440 --> 00:00:41,060
Great.

21
00:00:41,060 --> 00:00:45,690
So, fortunately you guys don't
have to describe the sound of

22
00:00:45,690 --> 00:00:48,540
a tornado to get on national
television.

23
00:00:48,540 --> 00:00:49,320
You're developers.

24
00:00:49,320 --> 00:00:51,660
You have much better ways
to get on television.

25
00:00:51,660 --> 00:00:55,660
So let's see how we can get
your apps on television.

26
00:00:55,660 --> 00:00:59,490
So most people, when they hear
about Android, what they think

27
00:00:59,490 --> 00:01:00,930
about is phones.

28
00:01:00,930 --> 00:01:02,410
And I don't know if people--

29
00:01:02,410 --> 00:01:05,190
I don't know, anybody here has
developed apps for phones

30
00:01:05,190 --> 00:01:07,650
before we called them
smartphones?

31
00:01:07,650 --> 00:01:10,320
Back in the days-- yeah,
you remember.

32
00:01:10,320 --> 00:01:11,830
That was not a fun time.

33
00:01:11,830 --> 00:01:14,230
You had a lot of different
operating systems.

34
00:01:14,230 --> 00:01:16,220
You have different programming
languages.

35
00:01:16,220 --> 00:01:18,760
You had different app stores.

36
00:01:18,760 --> 00:01:19,960
I mean just the hassle.

37
00:01:19,960 --> 00:01:23,400
If you had a tic-tac-toe game,
and you wanted to create a

38
00:01:23,400 --> 00:01:26,730
game that runs across all the
different OEMs and all the

39
00:01:26,730 --> 00:01:29,280
different carriers, it
was a nightmare.

40
00:01:29,280 --> 00:01:30,740
You have to write it in Java.

41
00:01:30,740 --> 00:01:32,890
You had to write
it in Symbian.

42
00:01:32,890 --> 00:01:36,700
You had to make deals with all
the different partners.

43
00:01:36,700 --> 00:01:39,490
And believe it or not,
it's the same way

44
00:01:39,490 --> 00:01:42,580
still for set-top boxes.

45
00:01:42,580 --> 00:01:46,870
So if any of you wants to
develop an app today that runs

46
00:01:46,870 --> 00:01:52,050
on TVs, and you target
conventional set-top boxes,

47
00:01:52,050 --> 00:01:54,170
there's a lot of different
frameworks.

48
00:01:54,170 --> 00:01:57,300
There's a lot of different
programming languages.

49
00:01:57,300 --> 00:02:01,230
It's really difficult to get an
app out that just runs on

50
00:02:01,230 --> 00:02:04,590
everybody's television
in the living room.

51
00:02:04,590 --> 00:02:08,750
And smart TVs were really a big
thing this year, if you

52
00:02:08,750 --> 00:02:11,890
have been at the Consumer
Electronics Show in Las Vegas.

53
00:02:11,890 --> 00:02:14,400
Last year everybody was
talking about 3D.

54
00:02:14,400 --> 00:02:17,930
This year, it's like every
manufacturer, you walk into

55
00:02:17,930 --> 00:02:20,580
their booth, they all talk about
their smart television,

56
00:02:20,580 --> 00:02:23,130
and how they are
smart TVs now.

57
00:02:23,130 --> 00:02:25,600
So smart TVs are
really coming.

58
00:02:25,600 --> 00:02:29,170
And I don't know how many of you
actually watch television,

59
00:02:29,170 --> 00:02:31,900
but I just want to remind
you TV is this thing

60
00:02:31,900 --> 00:02:33,150
in the living room.

61
00:02:33,150 --> 00:02:35,310

62
00:02:35,310 --> 00:02:37,360
I know a lot of you have
a TV on the desk.

63
00:02:37,360 --> 00:02:38,710
I mean, I have--

64
00:02:38,710 --> 00:02:41,070
on my desk, I have
four or five TVs.

65
00:02:41,070 --> 00:02:43,690
One of my guys from Canada,
it's his tanning booth.

66
00:02:43,690 --> 00:02:46,290

67
00:02:46,290 --> 00:02:47,730
That's Chris B. For you.

68
00:02:47,730 --> 00:02:51,050
But yeah, I mean, if you think
about it, normal people who

69
00:02:51,050 --> 00:02:53,560
don't come to Google I/O,
they watch television

70
00:02:53,560 --> 00:02:55,570
five hours a day.

71
00:02:55,570 --> 00:02:58,290
And that's a lot
of TV watched.

72
00:02:58,290 --> 00:03:00,940
And the other-- on the flip
side, they don't watch

73
00:03:00,940 --> 00:03:02,880
television for 19 hours a day.

74
00:03:02,880 --> 00:03:05,240
So there's still a lot
of time you can fill

75
00:03:05,240 --> 00:03:08,600
with intelligent apps.

76
00:03:08,600 --> 00:03:12,930
So the goal is to just don't
turn the TV off anymore.

77
00:03:12,930 --> 00:03:18,440
So the good news is we are now
really very successful in

78
00:03:18,440 --> 00:03:24,140
making Android scale from very
small screens from anywhere

79
00:03:24,140 --> 00:03:28,330
from two-inch or three-inch
phones, over tablets, all the

80
00:03:28,330 --> 00:03:30,590
way to the biggest screen
in the house.

81
00:03:30,590 --> 00:03:35,380
So we have launched Google TV
two years ago with an open app

82
00:03:35,380 --> 00:03:39,140
ecosystem, and we've added a
lot of new devices over the

83
00:03:39,140 --> 00:03:40,750
last two years.

84
00:03:40,750 --> 00:03:44,150
And it really gives developers
a platform to create Android

85
00:03:44,150 --> 00:03:48,840
applications that run on
different manufacturer TVs

86
00:03:48,840 --> 00:03:52,630
around the world, and it's easy
to distribute through the

87
00:03:52,630 --> 00:03:55,740
Google Play store.

88
00:03:55,740 --> 00:03:58,440
So I assume you're
all developers.

89
00:03:58,440 --> 00:04:00,340
You know how to create apps.

90
00:04:00,340 --> 00:04:03,800
That is the easiest way for you
to get your apps onto the

91
00:04:03,800 --> 00:04:05,430
television.

92
00:04:05,430 --> 00:04:08,040
Just want to give you a couple
highlights of the

93
00:04:08,040 --> 00:04:09,390
accomplishment.

94
00:04:09,390 --> 00:04:13,260
You probably know
this guy here.

95
00:04:13,260 --> 00:04:13,870
Google TV--

96
00:04:13,870 --> 00:04:17,110
I mean, first of all, Android
is really big in Korea.

97
00:04:17,110 --> 00:04:21,730
And Google TV is very big
in Korea, as well.

98
00:04:21,730 --> 00:04:24,880
So, as a developer, keep
that audience in mind.

99
00:04:24,880 --> 00:04:27,365
We have a deal with the--

100
00:04:27,365 --> 00:04:30,370
I think it's the largest
Korean cable operator.

101
00:04:30,370 --> 00:04:32,920
It's LG Uplus.

102
00:04:32,920 --> 00:04:38,490
And every LG Uplus cable box
rolled out has the Google TV

103
00:04:38,490 --> 00:04:40,510
Android framework on it.

104
00:04:40,510 --> 00:04:43,960
So there's a lot of new
devices coming online.

105
00:04:43,960 --> 00:04:47,760
And around the world, we also
have launched a lot of retail

106
00:04:47,760 --> 00:04:50,500
devices together with
our partners.

107
00:04:50,500 --> 00:04:53,070
So here is just a very
small sampling.

108
00:04:53,070 --> 00:04:56,250
I couldn't really fit all
of them onto the slides.

109
00:04:56,250 --> 00:05:00,110
But on the third floor, you
can have a look at the LG

110
00:05:00,110 --> 00:05:01,230
televisions.

111
00:05:01,230 --> 00:05:05,520
So we have now two generations
of LG televisions, which

112
00:05:05,520 --> 00:05:08,870
integrate the Android
Google TV stack.

113
00:05:08,870 --> 00:05:11,370
We have what we call
buddy boxes.

114
00:05:11,370 --> 00:05:14,410
You connect them to your
existing TVs to turn them into

115
00:05:14,410 --> 00:05:16,240
smart Android TVs.

116
00:05:16,240 --> 00:05:19,130
And so we have launched
a series of

117
00:05:19,130 --> 00:05:21,800
partners with ARM chipsets.

118
00:05:21,800 --> 00:05:22,870
So we have Sony.

119
00:05:22,870 --> 00:05:23,540
We have VIZIO.

120
00:05:23,540 --> 00:05:24,050
We have [? High ?]

121
00:05:24,050 --> 00:05:24,920
Sense.

122
00:05:24,920 --> 00:05:28,400
We have over 10 manufacturers
worldwide who are currently

123
00:05:28,400 --> 00:05:31,100
building Android devices
with Google TV.

124
00:05:31,100 --> 00:05:35,370

125
00:05:35,370 --> 00:05:38,290
So how do you create apps?

126
00:05:38,290 --> 00:05:40,830
And how do you distribute
them?

127
00:05:40,830 --> 00:05:42,150
Let me recap a little bit.

128
00:05:42,150 --> 00:05:46,000
When we talk about TV apps,
we're really looking for

129
00:05:46,000 --> 00:05:49,210
applications that are optimized
for the living room

130
00:05:49,210 --> 00:05:50,850
experience.

131
00:05:50,850 --> 00:05:54,540
A lot of people think about how
can I bring my existing

132
00:05:54,540 --> 00:05:56,430
mobile app to TV?

133
00:05:56,430 --> 00:06:00,710
And it's really about the user
experience, how you make the

134
00:06:00,710 --> 00:06:03,850
user interface intuitive
to be used on a TV.

135
00:06:03,850 --> 00:06:07,690
So this is what a great app
looks like, for example, from

136
00:06:07,690 --> 00:06:08,930
Redbox-Verizon.

137
00:06:08,930 --> 00:06:10,670
It's video on demand.

138
00:06:10,670 --> 00:06:13,810
Everybody likes video
on their television.

139
00:06:13,810 --> 00:06:16,600
So this gives them a great way
to distribute high-quality

140
00:06:16,600 --> 00:06:19,630
video to Google TV users.

141
00:06:19,630 --> 00:06:23,120
And they actually started with
their tablet application.

142
00:06:23,120 --> 00:06:26,630
And they were already very
close to a TV app.

143
00:06:26,630 --> 00:06:29,420
They just added some support
for remote controls.

144
00:06:29,420 --> 00:06:33,490
And I'll explain a little bit
about this more later.

145
00:06:33,490 --> 00:06:37,400
So the first good news for
everyone is sometimes I talk

146
00:06:37,400 --> 00:06:41,740
with people who think that they
need a special SDK for

147
00:06:41,740 --> 00:06:43,500
developing for television.

148
00:06:43,500 --> 00:06:45,470
The good news is really
don't need

149
00:06:45,470 --> 00:06:47,670
anything special or different.

150
00:06:47,670 --> 00:06:51,200
You can use the standard
Android SDK.

151
00:06:51,200 --> 00:06:54,610
And you can just download the
Android eclipse plug-ins.

152
00:06:54,610 --> 00:06:56,610
And you can get started
developing

153
00:06:56,610 --> 00:06:59,280
for Google TV today.

154
00:06:59,280 --> 00:07:00,940
There is a little
bit confusion.

155
00:07:00,940 --> 00:07:04,970
There is an SDK add-on that's
currently in the Google and

156
00:07:04,970 --> 00:07:07,340
the Android SDK servers.

157
00:07:07,340 --> 00:07:08,860
It's really just an emulator.

158
00:07:08,860 --> 00:07:10,810
But I would recommend--

159
00:07:10,810 --> 00:07:13,870
The television is such a
different experience.

160
00:07:13,870 --> 00:07:16,870
The television is very different
use case, compared

161
00:07:16,870 --> 00:07:19,120
to your mobile phone
or your tablet.

162
00:07:19,120 --> 00:07:22,410
You should really experience
the hardware, and have the

163
00:07:22,410 --> 00:07:25,480
hardware in your living
room, and use it.

164
00:07:25,480 --> 00:07:28,970
That's the best way to really
figure out how people interact

165
00:07:28,970 --> 00:07:29,870
with your app.

166
00:07:29,870 --> 00:07:34,350
So if you are serious about
developing for television, by

167
00:07:34,350 --> 00:07:39,680
all means, have the hardware
that you develop on and get a

168
00:07:39,680 --> 00:07:42,790
small set-top box or
a small buddy box.

169
00:07:42,790 --> 00:07:45,280
It's actually the cheapest
Android device

170
00:07:45,280 --> 00:07:46,720
you can buy out there.

171
00:07:46,720 --> 00:07:49,180
It's much less money
than you would have

172
00:07:49,180 --> 00:07:52,040
to spend on a telephone.

173
00:07:52,040 --> 00:07:56,320
So if everything is just
Android, why am I actually up

174
00:07:56,320 --> 00:07:57,110
here on stage?

175
00:07:57,110 --> 00:07:59,050
What are we talking about?

176
00:07:59,050 --> 00:08:02,610
Well, it's the Android SDK,
but there is a small

177
00:08:02,610 --> 00:08:06,520
difference between
a phone and a TV.

178
00:08:06,520 --> 00:08:11,040
And you may remember, the remote
control of your TV is

179
00:08:11,040 --> 00:08:13,620
sort of the most important
thing in the living room.

180
00:08:13,620 --> 00:08:15,850
When you lose your remote
control, you basically have

181
00:08:15,850 --> 00:08:18,120
broken your TV.

182
00:08:18,120 --> 00:08:20,080
I remember when I was growing
up, my parents

183
00:08:20,080 --> 00:08:21,230
didn't have a remote.

184
00:08:21,230 --> 00:08:24,030
I usually have to get off the
couch and walk across the room

185
00:08:24,030 --> 00:08:25,680
and change channels.

186
00:08:25,680 --> 00:08:29,070
So fortunately we've had remotes
for TVs for a very

187
00:08:29,070 --> 00:08:31,960
long time, and they have
come a very long way.

188
00:08:31,960 --> 00:08:34,830
But they're still different
from actually

189
00:08:34,830 --> 00:08:35,900
touching the screen.

190
00:08:35,900 --> 00:08:38,700
And it's subtle things in the
user experience that you

191
00:08:38,700 --> 00:08:42,010
really have to try
out for your app.

192
00:08:42,010 --> 00:08:45,050
The good news is, if you
remember some of the early

193
00:08:45,050 --> 00:08:46,580
Android devices--

194
00:08:46,580 --> 00:08:50,880
so this is the original
Motorola Droid.

195
00:08:50,880 --> 00:08:52,730
They already had a DPAD.

196
00:08:52,730 --> 00:08:57,530
So Android has had support for
DPAD since, I think it was

197
00:08:57,530 --> 00:08:59,810
Version 2, Eclair.

198
00:08:59,810 --> 00:09:04,610
And there has always been ways
to implement focusable

199
00:09:04,610 --> 00:09:07,910
elements and DPAD focus
in Android.

200
00:09:07,910 --> 00:09:10,270
It's just something that a lot
of developers, when they

201
00:09:10,270 --> 00:09:14,090
develop for tablets or touch
devices, they don't spend a

202
00:09:14,090 --> 00:09:17,230
lot of time testing
and optimizing.

203
00:09:17,230 --> 00:09:20,850
So if you develop for TV, keep
in mind the remote control is

204
00:09:20,850 --> 00:09:25,980
really the primary input
mechanism for your users.

205
00:09:25,980 --> 00:09:30,840
Now that you've developed an
app, how do you make sure it

206
00:09:30,840 --> 00:09:32,520
actually shows up in
the Play store?

207
00:09:32,520 --> 00:09:35,240
And there is a lot of,
sometimes, frustration where

208
00:09:35,240 --> 00:09:37,370
people develop an app that
they have tested.

209
00:09:37,370 --> 00:09:39,030
And they have sideloaded
on their

210
00:09:39,030 --> 00:09:40,580
television, and it works.

211
00:09:40,580 --> 00:09:42,490
And then they upload it to Play
Store, and it doesn't

212
00:09:42,490 --> 00:09:44,280
show up on Play Store.

213
00:09:44,280 --> 00:09:49,400
So what you have to keep in
mind is, by default, the

214
00:09:49,400 --> 00:09:53,160
Android Play Store assumes that
your application requires

215
00:09:53,160 --> 00:09:58,180
a touchscreen, simply because
most Android devices up to

216
00:09:58,180 --> 00:10:01,120
today have already
touchscreens.

217
00:10:01,120 --> 00:10:03,320
So you have to-- as a developer,
you know about

218
00:10:03,320 --> 00:10:04,960
features and manifests.

219
00:10:04,960 --> 00:10:08,370
So you have to add a very simple
tag to your manifest to

220
00:10:08,370 --> 00:10:10,800
declare that you have tested
your app without a

221
00:10:10,800 --> 00:10:13,920
touchscreen, and your app is
ready to run on a device that

222
00:10:13,920 --> 00:10:15,860
does not have a touchscreen.

223
00:10:15,860 --> 00:10:18,280
And it's a simple
manifest tag.

224
00:10:18,280 --> 00:10:19,790
You just to declare
the feature

225
00:10:19,790 --> 00:10:23,710
"android.hardware.touchscreen"
is not required.

226
00:10:23,710 --> 00:10:25,770
And if you do that,
your app will show

227
00:10:25,770 --> 00:10:26,830
up in the Play store.

228
00:10:26,830 --> 00:10:28,810
And it will show up
when somebody goes

229
00:10:28,810 --> 00:10:32,010
in from Google TV.

230
00:10:32,010 --> 00:10:35,740
If you don't want to mess with
the XML, it's very simple.

231
00:10:35,740 --> 00:10:39,130
In the editor-- in the manifest
editor-- you can just

232
00:10:39,130 --> 00:10:44,280
select the touchscreen property,
and set it to false.

233
00:10:44,280 --> 00:10:48,000
You can also create applications
that run on touch

234
00:10:48,000 --> 00:10:50,280
and no-touch devices.

235
00:10:50,280 --> 00:10:52,040
I just want to highlight this.

236
00:10:52,040 --> 00:10:56,840
If you declare that you do not
need a touchscreen, that means

237
00:10:56,840 --> 00:10:59,830
you will still work on
a touchscreen device.

238
00:10:59,830 --> 00:11:02,190
So if you want to create
different layouts.

239
00:11:02,190 --> 00:11:06,100
For example, you have a
gesture-based, swipe-based

240
00:11:06,100 --> 00:11:10,190
layout for your application when
it runs on a touchscreen,

241
00:11:10,190 --> 00:11:15,680
then you can have a simplified
and maybe DPAD-navigable UI

242
00:11:15,680 --> 00:11:18,150
for non-touchscreen devices.

243
00:11:18,150 --> 00:11:21,130
And Android gives you mechanisms
to declare layout

244
00:11:21,130 --> 00:11:24,270
files based on different
device capabilities.

245
00:11:24,270 --> 00:11:27,490
And one of them is to
touchscreen property.

246
00:11:27,490 --> 00:11:29,350
So you can declare a
no-touch layout.

247
00:11:29,350 --> 00:11:32,080

248
00:11:32,080 --> 00:11:33,520
So here's an example.

249
00:11:33,520 --> 00:11:37,800
You guys have all use the I/O
Scheduler app all week long.

250
00:11:37,800 --> 00:11:40,470
What we've done is, just for
testing, we loaded it

251
00:11:40,470 --> 00:11:42,090
onto a Google TV.

252
00:11:42,090 --> 00:11:46,980
And you can actually sideload
it to a Google TV, and it

253
00:11:46,980 --> 00:11:49,020
works reasonably well.

254
00:11:49,020 --> 00:11:53,430
This is because the guys who
wrote the I/O Scheduler app

255
00:11:53,430 --> 00:11:57,610
took all the necessary Android
best practices to heart, and

256
00:11:57,610 --> 00:12:00,560
they designed the application
to scale to all different

257
00:12:00,560 --> 00:12:01,970
screen sizes.

258
00:12:01,970 --> 00:12:05,680
And so it scales not only from
a phone to a tablet, it also

259
00:12:05,680 --> 00:12:09,400
scales all the way to
a television size.

260
00:12:09,400 --> 00:12:12,790
So this is an example of an app
that runs, really, on all

261
00:12:12,790 --> 00:12:15,690
Android devices out there.

262
00:12:15,690 --> 00:12:17,045
So let's look at some
of the basics.

263
00:12:17,045 --> 00:12:19,830

264
00:12:19,830 --> 00:12:22,470
So here is a user interface.

265
00:12:22,470 --> 00:12:25,400
You can actually see this
application being demoed out

266
00:12:25,400 --> 00:12:28,510
in our sandbox upstairs
on the third floor.

267
00:12:28,510 --> 00:12:29,680
This is a music app.

268
00:12:29,680 --> 00:12:31,470
It's by Tunein.

269
00:12:31,470 --> 00:12:34,070
They have worked with me over
the last couple of months to

270
00:12:34,070 --> 00:12:37,130
create a really amazing
experience on our new Google

271
00:12:37,130 --> 00:12:38,160
TV devices.

272
00:12:38,160 --> 00:12:40,640
And so this is what
their main--

273
00:12:40,640 --> 00:12:43,090
I want to call it the "hero"
screen-- looks like.

274
00:12:43,090 --> 00:12:45,740
This is cover art for all
the different artists

275
00:12:45,740 --> 00:12:47,400
you can listen to.

276
00:12:47,400 --> 00:12:50,920
And effectively, if you look at
it from a developer's point

277
00:12:50,920 --> 00:12:52,660
of view, there is a number
of focusable

278
00:12:52,660 --> 00:12:54,460
elements on the screen.

279
00:12:54,460 --> 00:12:57,260
If this was a touchscreen, the
interface was very simple.

280
00:12:57,260 --> 00:13:01,190
People would just randomly touch
things on the screen.

281
00:13:01,190 --> 00:13:04,850
Now let's look when you
use this with a DPAD.

282
00:13:04,850 --> 00:13:10,520
Let's assume the focus is on
this blue rectangle element.

283
00:13:10,520 --> 00:13:15,860
And the user presses the DPAD
down key, so the question is

284
00:13:15,860 --> 00:13:18,110
what should happen?

285
00:13:18,110 --> 00:13:22,830
Well, normal users would expect
that the focus just

286
00:13:22,830 --> 00:13:26,340
goes one row down and highlights
this element.

287
00:13:26,340 --> 00:13:29,730
Sometimes, when you didn't test
that, depending on how

288
00:13:29,730 --> 00:13:31,180
you defined the layouts--

289
00:13:31,180 --> 00:13:35,860
how you boxed the XML layouts
inside of each other-- is it

290
00:13:35,860 --> 00:13:39,680
horizontal list views, is it
gallery views, and so on?

291
00:13:39,680 --> 00:13:42,860
You may sometimes end up with
the focus jumping across the

292
00:13:42,860 --> 00:13:45,950
screen to the first element
in the next row down.

293
00:13:45,950 --> 00:13:49,240
Or sometimes the focus may just
go to the next element

294
00:13:49,240 --> 00:13:52,760
down, which literally is all
the way off to the side.

295
00:13:52,760 --> 00:13:56,110
So those are not good
user experiences.

296
00:13:56,110 --> 00:14:02,080
And Android has very simple
mechanisms for you to declare

297
00:14:02,080 --> 00:14:05,940
what is the proper and what
is the expected behavior.

298
00:14:05,940 --> 00:14:09,930
So you can-- this is, again,
standard APIs.

299
00:14:09,930 --> 00:14:13,550
You can use Android
nextFocusDown, nextFocusLeft,

300
00:14:13,550 --> 00:14:17,630
Right, and so on, to explicitly
declare which

301
00:14:17,630 --> 00:14:20,320
elements should get focused
for key down, for

302
00:14:20,320 --> 00:14:22,450
key left, key right.

303
00:14:22,450 --> 00:14:25,190
A lot of developers, when you
just develop for touchscreen

304
00:14:25,190 --> 00:14:28,640
devices, don't necessarily
test this, or don't

305
00:14:28,640 --> 00:14:30,910
necessarily think about
adding this.

306
00:14:30,910 --> 00:14:34,400
And so the Android default focus
handling, it works most

307
00:14:34,400 --> 00:14:35,530
of the time.

308
00:14:35,530 --> 00:14:39,450
But if you want to have a very
high quality application, you

309
00:14:39,450 --> 00:14:41,050
should at least test it.

310
00:14:41,050 --> 00:14:43,960
And whenever Android default
focus handling does not do

311
00:14:43,960 --> 00:14:47,920
what you want it to do, you can
explicitly override the

312
00:14:47,920 --> 00:14:52,440
defaults, and you can declare
it in your files.

313
00:14:52,440 --> 00:14:56,820
Needless to say, things like
swipe gestures, they

314
00:14:56,820 --> 00:15:00,460
theoretically work on TV, but
they're very hard to discover.

315
00:15:00,460 --> 00:15:03,760
And they are sometimes not very
user friendly to use.

316
00:15:03,760 --> 00:15:07,510
So you may want to replace those
with either additional

317
00:15:07,510 --> 00:15:11,110
elements on the screen for next
or previous screen, or

318
00:15:11,110 --> 00:15:15,550
you can also just simplify
your UI.

319
00:15:15,550 --> 00:15:19,260
Most of the time, people try
to put too many things on a

320
00:15:19,260 --> 00:15:20,220
single screen.

321
00:15:20,220 --> 00:15:23,790
And just because you have 60
inches or 80 inches of TV

322
00:15:23,790 --> 00:15:28,140
screen doesn't mean you can put
a whole lot more content

323
00:15:28,140 --> 00:15:29,910
on it than you would
put on a phone.

324
00:15:29,910 --> 00:15:35,280
People sit much further back
from a TV screen, as well.

325
00:15:35,280 --> 00:15:40,900
Another frequently encountered
problem that I would like to

326
00:15:40,900 --> 00:15:42,290
highlight to you--

327
00:15:42,290 --> 00:15:45,060
So if you create an application
that uses the

328
00:15:45,060 --> 00:15:49,660
network, I know a lot of
developers, they check for the

329
00:15:49,660 --> 00:15:53,450
Wi-Fi network being enabled on
the phone, and make decisions

330
00:15:53,450 --> 00:15:57,070
if, for example, high-quality
video streaming is available

331
00:15:57,070 --> 00:15:58,220
only on Wi-Fi.

332
00:15:58,220 --> 00:16:01,490
It's not available when you're
on a data network.

333
00:16:01,490 --> 00:16:04,820
So if you only check for Wi-Fi,
you will see that on

334
00:16:04,820 --> 00:16:09,230
Google TV, where we also have
an ethernet connector, you

335
00:16:09,230 --> 00:16:11,260
will get an error message
that says, oh, there

336
00:16:11,260 --> 00:16:12,980
is no network available.

337
00:16:12,980 --> 00:16:17,380
So you have to make sure to
check connectivity manager not

338
00:16:17,380 --> 00:16:22,940
only TYPE_WIFI, but also
TYPE_ETHERNET.

339
00:16:22,940 --> 00:16:26,050
I forgot to put that
on the slides.

340
00:16:26,050 --> 00:16:26,660
It slipped.

341
00:16:26,660 --> 00:16:28,530
OK, that slipped to
the next line.

342
00:16:28,530 --> 00:16:29,780
So there is a ConnectivityMana
ger.TYPE_ETHERNET.

343
00:16:29,780 --> 00:16:34,130

344
00:16:34,130 --> 00:16:37,090
So you want to check that.

345
00:16:37,090 --> 00:16:40,800
So how do we get our apps
into the Play Store?

346
00:16:40,800 --> 00:16:43,185
So this is just a screenshot
of the current Play

347
00:16:43,185 --> 00:16:45,730
Store on Google TV.

348
00:16:45,730 --> 00:16:51,930
And, as I said earlier, I
frequently see people posting

349
00:16:51,930 --> 00:16:55,080
about, I uploaded my
app to Google Play.

350
00:16:55,080 --> 00:16:56,600
I can't see it in
the Play Store.

351
00:16:56,600 --> 00:16:57,920
What's going on?

352
00:16:57,920 --> 00:17:01,060
Is Google filtering the
apps for television?

353
00:17:01,060 --> 00:17:04,119
Or how can I upload my
app for television?

354
00:17:04,119 --> 00:17:05,569
And, as I explained earlier.

355
00:17:05,569 --> 00:17:08,790
It's filtering based
on features.

356
00:17:08,790 --> 00:17:12,369
So you are familiar with the
Android features in the

357
00:17:12,369 --> 00:17:13,849
manifest file.

358
00:17:13,849 --> 00:17:19,060
If your application requires,
for example, a GPS in order to

359
00:17:19,060 --> 00:17:22,589
work, well, Google TV
does not have a GPS.

360
00:17:22,589 --> 00:17:23,819
So it would not show up.

361
00:17:23,819 --> 00:17:28,770
If you require things like a
camera, again, your app would

362
00:17:28,770 --> 00:17:30,190
not show up.

363
00:17:30,190 --> 00:17:35,120
So make sure you know which
features your application

364
00:17:35,120 --> 00:17:37,730
requires and compare them
with the available

365
00:17:37,730 --> 00:17:40,980
features for Google TV.

366
00:17:40,980 --> 00:17:44,080
The easiest way for you as
a developer to see this--

367
00:17:44,080 --> 00:17:47,790
there is a tool that people
frequently don't know about,

368
00:17:47,790 --> 00:17:48,940
so I want to highlight.

369
00:17:48,940 --> 00:17:53,990
It's the Android Application
Packaging Tool, or AAPT.

370
00:17:53,990 --> 00:17:58,610
And you can use that tool,
simply say "apk dump badging"

371
00:17:58,610 --> 00:18:00,480
and then your APK.

372
00:18:00,480 --> 00:18:02,480
And it will parse
your manifest.

373
00:18:02,480 --> 00:18:07,270
And it will find default
features that your application

374
00:18:07,270 --> 00:18:09,460
uses that maybe you
haven't known.

375
00:18:09,460 --> 00:18:14,540
So one example is if, for
example, your application asks

376
00:18:14,540 --> 00:18:18,170
for the camera permission, we
automatically assume that it

377
00:18:18,170 --> 00:18:21,305
also wants the camera feature.

378
00:18:21,305 --> 00:18:23,930

379
00:18:23,930 --> 00:18:27,950
So once you have verified you
can upload to Play Store,

380
00:18:27,950 --> 00:18:32,100
please include a 16 by
9 feature graphic.

381
00:18:32,100 --> 00:18:33,840
Include a real email address.

382
00:18:33,840 --> 00:18:35,620
Sometimes I go through
the Play Store.

383
00:18:35,620 --> 00:18:39,340
I see people uploading cool
apps, but then I send out an

384
00:18:39,340 --> 00:18:42,390
email to their email address,
and they never answer.

385
00:18:42,390 --> 00:18:45,290
Then I can't give
you feedback.

386
00:18:45,290 --> 00:18:47,920
And let us know on
our Google+ page.

387
00:18:47,920 --> 00:18:51,850
Literally me and my team, we
are always looking for the

388
00:18:51,850 --> 00:18:55,910
next great application that we
can highlight on our Google

389
00:18:55,910 --> 00:18:56,560
Play store.

390
00:18:56,560 --> 00:18:58,250
And we just want to
know about it.

391
00:18:58,250 --> 00:19:03,870
So let us know on Google+
or any of the forums.

392
00:19:03,870 --> 00:19:07,300
It would be nice to find your
application and really give

393
00:19:07,300 --> 00:19:10,270
you some featuring when
your application

394
00:19:10,270 --> 00:19:13,150
meets all the criteria.

395
00:19:13,150 --> 00:19:16,410
So this is how you do basic
applications for Google TV.

396
00:19:16,410 --> 00:19:17,630
Now, let's see what's new.

397
00:19:17,630 --> 00:19:20,140
And how do you really
create awesome apps?

398
00:19:20,140 --> 00:19:24,350
So you may have already seen
the news that we posted, I

399
00:19:24,350 --> 00:19:26,240
think, two days ago.

400
00:19:26,240 --> 00:19:30,840
So as of now, we are really
bringing actively Android

401
00:19:30,840 --> 00:19:33,830
Jelly Bean to Google TV.

402
00:19:33,830 --> 00:19:36,430
I know developers have been
asking about this for a long

403
00:19:36,430 --> 00:19:38,810
time, and it's finally here.

404
00:19:38,810 --> 00:19:43,520
You can see the Android Jelly
Bean prototype TVs upstairs on

405
00:19:43,520 --> 00:19:44,620
the third floor.

406
00:19:44,620 --> 00:19:48,160
We have several new apps that
we're showing that run on

407
00:19:48,160 --> 00:19:50,140
Jelly Bean now.

408
00:19:50,140 --> 00:19:54,010
And let's see what this really
means for developers.

409
00:19:54,010 --> 00:19:58,010
So the first advance is
really the API level.

410
00:19:58,010 --> 00:20:01,892
So we went from Android
Honeycomb, API level 13, to

411
00:20:01,892 --> 00:20:04,840
Android Jelly Bean,
API level 17.

412
00:20:04,840 --> 00:20:07,140
So we have now fully caught
up with the rest

413
00:20:07,140 --> 00:20:09,250
of the Android ecosystem.

414
00:20:09,250 --> 00:20:13,310
And as a developer, you have the
same platform across all

415
00:20:13,310 --> 00:20:16,400
devices now.

416
00:20:16,400 --> 00:20:19,810
We still have the same
high-quality

417
00:20:19,810 --> 00:20:21,700
media delivery APIs.

418
00:20:21,700 --> 00:20:26,160
I will talk about this in just
a second, but we kept all the

419
00:20:26,160 --> 00:20:30,820
different media codecs and all
the streaming technologies

420
00:20:30,820 --> 00:20:33,190
that you're already familiar
with, if you have developed

421
00:20:33,190 --> 00:20:36,340
applications for Google
TV earlier.

422
00:20:36,340 --> 00:20:38,710
We have updated the
Chrome browser.

423
00:20:38,710 --> 00:20:43,650
So we updated the Chrome browser
from Chrome 11 to be

424
00:20:43,650 --> 00:20:48,000
on par with the Google Android
Chrome browser that you know

425
00:20:48,000 --> 00:20:50,620
from your tablets and
from your mobiles.

426
00:20:50,620 --> 00:20:53,580
And right now, it's
running Chrome 28.

427
00:20:53,580 --> 00:20:58,190
And we also have the encrypted
media extensions, and we have

428
00:20:58,190 --> 00:21:00,660
the media streaming
extensions.

429
00:21:00,660 --> 00:21:04,070
I'll explain more about this
in a second, as well.

430
00:21:04,070 --> 00:21:07,590
And we've gotten a lot of
requests, and I'm really

431
00:21:07,590 --> 00:21:12,650
excited to tell you, we now
have NDK for Google TV.

432
00:21:12,650 --> 00:21:15,940
This will hopefully open up
a lot of really cool apps.

433
00:21:15,940 --> 00:21:19,620

434
00:21:19,620 --> 00:21:22,790
So here is one example of
an application that now

435
00:21:22,790 --> 00:21:24,970
runs on Google TV.

436
00:21:24,970 --> 00:21:27,150
And I brought a quick
video clip.

437
00:21:27,150 --> 00:21:31,280
And this is running on our
Google TV in the office.

438
00:21:31,280 --> 00:21:33,550
And we worked with going
with Gameloft.

439
00:21:33,550 --> 00:21:39,490
And it's really beautiful to
see this on a 1080p screen.

440
00:21:39,490 --> 00:21:43,300
So when the Google TV update
rolls out, you will have

441
00:21:43,300 --> 00:21:46,000
access to a lot of new
applications, lot of cool

442
00:21:46,000 --> 00:21:47,250
applications.

443
00:21:47,250 --> 00:21:49,490

444
00:21:49,490 --> 00:21:53,570
So this is just your standard
Asphalt 7 game as you know it

445
00:21:53,570 --> 00:21:58,830
from all your other Android
devices as well.

446
00:21:58,830 --> 00:22:01,070
So what else have we done?

447
00:22:01,070 --> 00:22:04,510
So it's not just standard
Android Jelly Bean.

448
00:22:04,510 --> 00:22:07,480
We have a couple more APIs
that we think are really

449
00:22:07,480 --> 00:22:11,250
useful for people who create
high-quality applications for

450
00:22:11,250 --> 00:22:13,400
the television.

451
00:22:13,400 --> 00:22:16,210
So I just want to highlight
a few of the APIs.

452
00:22:16,210 --> 00:22:17,630
There will be more.

453
00:22:17,630 --> 00:22:19,980
And we will roll out
documentation over the next

454
00:22:19,980 --> 00:22:21,340
couple months.

455
00:22:21,340 --> 00:22:24,780
But of course we have updated
the Android API level, as I

456
00:22:24,780 --> 00:22:27,730
said, the media player,
Chrome, and so on.

457
00:22:27,730 --> 00:22:28,330
So, let's see.

458
00:22:28,330 --> 00:22:29,950
Android APIs.

459
00:22:29,950 --> 00:22:34,820
So a few developers who have
created apps for the current

460
00:22:34,820 --> 00:22:38,460
generation Google TV have
noticed that, with the update

461
00:22:38,460 --> 00:22:43,370
to Jelly Bean, some of the
fundamental Android

462
00:22:43,370 --> 00:22:45,330
permissions, for example,
have changed.

463
00:22:45,330 --> 00:22:49,770
So Android introduced the
additional permissions to, for

464
00:22:49,770 --> 00:22:52,560
example, access your
APN settings.

465
00:22:52,560 --> 00:22:55,730
So we also have a new version
of the Google TV

466
00:22:55,730 --> 00:22:57,610
specific API library.

467
00:22:57,610 --> 00:23:01,000
So if you have an app that runs
on Google TV Honeycomb,

468
00:23:01,000 --> 00:23:04,220
and you want to bring it to
Google TV Jelly Bean, pay

469
00:23:04,220 --> 00:23:06,560
attention to some of
the differences

470
00:23:06,560 --> 00:23:07,900
in the Android platform.

471
00:23:07,900 --> 00:23:11,800
We have skipped from 13 to
17, so it was a big jump.

472
00:23:11,800 --> 00:23:16,410
And we've also updated
the TV libraries.

473
00:23:16,410 --> 00:23:19,730
So when you include the TV
library, what do you get?

474
00:23:19,730 --> 00:23:22,520
You get, for example,
an improved version

475
00:23:22,520 --> 00:23:24,740
of the media player.

476
00:23:24,740 --> 00:23:28,930
So you're hopefully familiar
with the Android media player.

477
00:23:28,930 --> 00:23:32,020
It allows you to play back a
lot of different streaming

478
00:23:32,020 --> 00:23:35,580
formats and a lot of different
video formats.

479
00:23:35,580 --> 00:23:39,570
We have extended the standard
Android media player.

480
00:23:39,570 --> 00:23:42,810
And we have added support,
for example, for

481
00:23:42,810 --> 00:23:44,920
adaptive bitrate playing.

482
00:23:44,920 --> 00:23:49,820
So you can play back adaptive
bitrate streams, which on a TV

483
00:23:49,820 --> 00:23:51,330
is really--

484
00:23:51,330 --> 00:23:54,000
I think it's one of the
core features for TV.

485
00:23:54,000 --> 00:23:57,530
For mobile phones, people tried
to always compress the

486
00:23:57,530 --> 00:24:00,290
video stream as small
as possible.

487
00:24:00,290 --> 00:24:05,480
Playing back a low-resolution
video clip on a 60-inch TV

488
00:24:05,480 --> 00:24:08,870
really looks very not good.

489
00:24:08,870 --> 00:24:13,030
So if you have higher bandwidth,
and people have 10,

490
00:24:13,030 --> 00:24:16,770
20 megabits to their living
room, try to deliver Blu-Ray

491
00:24:16,770 --> 00:24:19,960
quality or as high quality
media as possible.

492
00:24:19,960 --> 00:24:23,220
So with adaptive bitrate
streaming you can do that.

493
00:24:23,220 --> 00:24:26,070
You can also set a
minimum bitrate.

494
00:24:26,070 --> 00:24:29,620
Sometimes it's better to just
show the user no video at all

495
00:24:29,620 --> 00:24:32,700
instead of a pixeled
100 to 200 [?  ?]

496
00:24:32,700 --> 00:24:35,390
[? pixel ?] video.

497
00:24:35,390 --> 00:24:39,300
We introduced what we call
the low-latency mode.

498
00:24:39,300 --> 00:24:43,780
So normal video streaming, it
builds up a buffer in memory

499
00:24:43,780 --> 00:24:46,320
first, for the first 5
or 10 seconds, and

500
00:24:46,320 --> 00:24:47,820
then it starts playback.

501
00:24:47,820 --> 00:24:51,280
With low-latency mode, we start
playback immediately.

502
00:24:51,280 --> 00:24:54,620
And this lets you do things
like cloud gaming.

503
00:24:54,620 --> 00:24:58,055
We are showing upstairs
a sample cloud game.

504
00:24:58,055 --> 00:24:59,770
It's from Ubitus.

505
00:24:59,770 --> 00:25:03,410
And they can play back video
streams and send controller

506
00:25:03,410 --> 00:25:07,330
input back to the backend
in real time.

507
00:25:07,330 --> 00:25:10,660
We also have closed captioning
support.

508
00:25:10,660 --> 00:25:13,900
So as you may be familiar, if
you're in the TV space, it's

509
00:25:13,900 --> 00:25:19,510
very important to enable close
captioning for your viewers.

510
00:25:19,510 --> 00:25:22,690
And we also have quality
of service.

511
00:25:22,690 --> 00:25:27,430
What this means is, it's an
API that allows you to, in

512
00:25:27,430 --> 00:25:30,520
your application, monitor
the streaming quality

513
00:25:30,520 --> 00:25:32,210
at any given time.

514
00:25:32,210 --> 00:25:36,500
So if you are a high-quality
video on demand provider, you

515
00:25:36,500 --> 00:25:40,180
want to make sure you have
analytics in your app to get

516
00:25:40,180 --> 00:25:40,960
information--

517
00:25:40,960 --> 00:25:44,740
what bitrate people can stream,
how many drop frames

518
00:25:44,740 --> 00:25:45,800
there are, and so on.

519
00:25:45,800 --> 00:25:48,690
So with the quality of service
APIs you can do that.

520
00:25:48,690 --> 00:25:53,020
Your app can, at any given time,
monitor the status of

521
00:25:53,020 --> 00:25:54,270
the video stream.

522
00:25:54,270 --> 00:25:56,610

523
00:25:56,610 --> 00:25:59,640
So TV specific APIs.

524
00:25:59,640 --> 00:26:03,240
We think for television it's
very important to support a

525
00:26:03,240 --> 00:26:06,240
large number of streaming
protocols.

526
00:26:06,240 --> 00:26:09,730
We know you have existing
backends.

527
00:26:09,730 --> 00:26:13,570
And it's always a very high
investment for somebody who

528
00:26:13,570 --> 00:26:16,190
has the video backends
and has encoded a

529
00:26:16,190 --> 00:26:18,070
large number of videos.

530
00:26:18,070 --> 00:26:21,280
They don't really want to
re-encode to a new format.

531
00:26:21,280 --> 00:26:25,350
So we make sure we support
a wide range of different

532
00:26:25,350 --> 00:26:28,910
streaming protocols and
media encodings.

533
00:26:28,910 --> 00:26:32,370
We also support virtually all

534
00:26:32,370 --> 00:26:35,320
industry leading DRM solutions.

535
00:26:35,320 --> 00:26:39,350
We know users want the latest
and greatest content on their

536
00:26:39,350 --> 00:26:40,150
television.

537
00:26:40,150 --> 00:26:43,050
We get a lot of requests from
users who want to have

538
00:26:43,050 --> 00:26:46,370
streaming video content of all
their favorite shows and all

539
00:26:46,370 --> 00:26:48,000
their favorite channels.

540
00:26:48,000 --> 00:26:51,560
With Google TV, we have
a trusted video path.

541
00:26:51,560 --> 00:26:56,000
So if you are a content owner,
and you have all those video

542
00:26:56,000 --> 00:26:59,510
assets, you can feel secure
that, when you distribute them

543
00:26:59,510 --> 00:27:04,060
to Google TV, they will be
DRM-protected by our DRM

544
00:27:04,060 --> 00:27:07,000
trusted video path.

545
00:27:07,000 --> 00:27:09,850
We support Widevine and
PlayReady formats.

546
00:27:09,850 --> 00:27:13,320
So if you have existing
backends, so you can just use

547
00:27:13,320 --> 00:27:15,310
those backends.

548
00:27:15,310 --> 00:27:17,600
We also support now--

549
00:27:17,600 --> 00:27:19,360
with the new Chrome browser--

550
00:27:19,360 --> 00:27:22,650
we support HTML5 Encrypted
Media Extensions.

551
00:27:22,650 --> 00:27:27,320
So if you choose to have a HTML
application, and you play

552
00:27:27,320 --> 00:27:31,870
back your video streams through
your Chrome browser,

553
00:27:31,870 --> 00:27:35,760
you can now also-- with the
Encrypted Media Extensions--

554
00:27:35,760 --> 00:27:39,350
you can use DRM in the
Chrome browser.

555
00:27:39,350 --> 00:27:45,100
That opens up a whole new set of
applications for browsers.

556
00:27:45,100 --> 00:27:49,670
So we also have ways to
integrate with your in living

557
00:27:49,670 --> 00:27:51,230
room devices.

558
00:27:51,230 --> 00:27:56,230
And we will publish APIs for
developers to create what we

559
00:27:56,230 --> 00:27:57,720
call media devices.

560
00:27:57,720 --> 00:28:01,680
Just imagine it like a driver
for your other devices in the

561
00:28:01,680 --> 00:28:02,700
living room.

562
00:28:02,700 --> 00:28:06,890
You may have already DVR devices
that currently Google

563
00:28:06,890 --> 00:28:09,470
TV does not fully
integrate with.

564
00:28:09,470 --> 00:28:12,450
If you, as a developer, want
to create drivers for those

565
00:28:12,450 --> 00:28:16,330
devices, we will give you APIs
so that those drivers can be

566
00:28:16,330 --> 00:28:19,270
distributed as Android
APKs and just plug

567
00:28:19,270 --> 00:28:21,880
into the Google TV.

568
00:28:21,880 --> 00:28:24,240
And another exciting
technology.

569
00:28:24,240 --> 00:28:28,910
It's not directly related to our
team here, but the YouTube

570
00:28:28,910 --> 00:28:33,820
team has released Android APIs
for streaming YouTube videos

571
00:28:33,820 --> 00:28:36,750
directly inside of your
Android applications.

572
00:28:36,750 --> 00:28:39,560
And if you're interested in
this, there's actually a code

573
00:28:39,560 --> 00:28:41,880
lab right after this.

574
00:28:41,880 --> 00:28:46,300
It's by my colleague, Chris
B. So you can look for the

575
00:28:46,300 --> 00:28:48,520
YouTube streaming code lab.

576
00:28:48,520 --> 00:28:53,800
He explains how to use the
YouTube APIs to embed YouTube

577
00:28:53,800 --> 00:28:56,960
videos directly in your
Android application.

578
00:28:56,960 --> 00:29:00,270
And that means you don't have
to launch the YouTube player

579
00:29:00,270 --> 00:29:03,650
to play back your app and
effectively lose control of

580
00:29:03,650 --> 00:29:05,280
the user experience.

581
00:29:05,280 --> 00:29:09,660
You can embed it directly
in your application.

582
00:29:09,660 --> 00:29:11,850
And we've worked with some
of the partners.

583
00:29:11,850 --> 00:29:15,420
And they have created some
really amazing applications

584
00:29:15,420 --> 00:29:17,440
that provide a customized user

585
00:29:17,440 --> 00:29:19,320
experience for YouTube content.

586
00:29:19,320 --> 00:29:22,830

587
00:29:22,830 --> 00:29:26,520
So let's look at the Chrome
enhancements in a little bit

588
00:29:26,520 --> 00:29:28,010
more detail.

589
00:29:28,010 --> 00:29:31,360
So we have upgraded to the
latest version of Chrome.

590
00:29:31,360 --> 00:29:34,180
And it's the same Chrome browser
that is available for

591
00:29:34,180 --> 00:29:36,160
all other Android devices.

592
00:29:36,160 --> 00:29:37,710
So, for developers,
this should be a

593
00:29:37,710 --> 00:29:40,220
very familiar platform.

594
00:29:40,220 --> 00:29:44,890
We have also introduced what
we call a Full Screen mode.

595
00:29:44,890 --> 00:29:50,230
When people watch, or interact
with, content on the TV, they

596
00:29:50,230 --> 00:29:53,250
really want to have edge-to-edge
content.

597
00:29:53,250 --> 00:29:55,610
They don't want a browser
status bar

598
00:29:55,610 --> 00:29:57,360
or any of the "Chrome"--

599
00:29:57,360 --> 00:29:58,320
in quotes--

600
00:29:58,320 --> 00:29:59,990
around their application.

601
00:29:59,990 --> 00:30:04,140
So we have this Chromeless
Full Screen mode.

602
00:30:04,140 --> 00:30:07,850
As I mentioned earlier, we
support the Encrypted Media

603
00:30:07,850 --> 00:30:08,540
Extensions.

604
00:30:08,540 --> 00:30:13,080
So that means you can play
back high-quality secure

605
00:30:13,080 --> 00:30:15,930
content using our trusted
video path.

606
00:30:15,930 --> 00:30:21,850
And the media extension
is actually an

607
00:30:21,850 --> 00:30:23,450
interesting use case.

608
00:30:23,450 --> 00:30:27,740
So a lot of people have custom
streaming solutions,

609
00:30:27,740 --> 00:30:31,210
especially if you deliver a
lot of high-quality video.

610
00:30:31,210 --> 00:30:34,410
You want to have control over
your streaming experience.

611
00:30:34,410 --> 00:30:37,000
And we allow you to
customize the

612
00:30:37,000 --> 00:30:38,920
network protocol streaming.

613
00:30:38,920 --> 00:30:43,410
And when you play back a media
from the browser, it will

614
00:30:43,410 --> 00:30:45,130
actually call back
into Android.

615
00:30:45,130 --> 00:30:48,290
And you can implement an entire
protocol handler on the

616
00:30:48,290 --> 00:30:50,630
Android level.

617
00:30:50,630 --> 00:30:52,100
So one example--

618
00:30:52,100 --> 00:30:53,460
what this opens up.

619
00:30:53,460 --> 00:30:57,810
And this is really just to
inspire you to create similar

620
00:30:57,810 --> 00:30:59,890
amazing experiences.

621
00:30:59,890 --> 00:31:04,050
We have worked with Netflix,
and they have brought their

622
00:31:04,050 --> 00:31:07,830
HTML5 experience over
to Google TV.

623
00:31:07,830 --> 00:31:12,480
And this looks just like Netflix
running on any other

624
00:31:12,480 --> 00:31:14,380
living room device.

625
00:31:14,380 --> 00:31:16,280
And that's exactly the point.

626
00:31:16,280 --> 00:31:19,650
For Netflix, it was very easy
to take their existing

627
00:31:19,650 --> 00:31:26,190
HTML-based application and run
it on our Google TV device.

628
00:31:26,190 --> 00:31:30,320
So what we've talked about is
how to bring basic Android

629
00:31:30,320 --> 00:31:32,600
applications to TV.

630
00:31:32,600 --> 00:31:36,750
And then we've talked about how
to bring your TV-optimized

631
00:31:36,750 --> 00:31:38,740
applications to TV.

632
00:31:38,740 --> 00:31:43,210
So hopefully you will be able to
create some really amazing

633
00:31:43,210 --> 00:31:44,950
TV experiences.

634
00:31:44,950 --> 00:31:48,690
And you will be able to bring
your application onto TV.

635
00:31:48,690 --> 00:31:53,960
So I'm really looking forward
to a lot of new apps, and

636
00:31:53,960 --> 00:31:56,840
looking forward to
your apps on TV.

637
00:31:56,840 --> 00:32:00,830
So with that, can I ask my
colleague Andrew-- he is

638
00:32:00,830 --> 00:32:04,080
actually in charge of the
engineering effort for this.

639
00:32:04,080 --> 00:32:05,960
And if you have any questions,
we're taking

640
00:32:05,960 --> 00:32:08,760
questions on stage.

641
00:32:08,760 --> 00:32:09,440
Thank you very much.

642
00:32:09,440 --> 00:32:16,020
[APPLAUSE]

643
00:32:16,020 --> 00:32:17,910
CHRISTIAN KURZKE: So there is
microphones in the aisle.

644
00:32:17,910 --> 00:32:21,320
Feel free to ask questions
there.

645
00:32:21,320 --> 00:32:21,980
AUDIENCE: Hi.

646
00:32:21,980 --> 00:32:22,700
CHRISTIAN KURZKE: Yes.

647
00:32:22,700 --> 00:32:26,360
AUDIENCE: Sacha Golden
in Sync Media.

648
00:32:26,360 --> 00:32:31,630
How do you distribute media
steaming extensions on the

649
00:32:31,630 --> 00:32:34,260
Google TV platform?

650
00:32:34,260 --> 00:32:37,650
ANDREW JEON: Your question is
about Android API or web API?

651
00:32:37,650 --> 00:32:41,650
We have two APIs,
both [INAUDIBLE]

652
00:32:41,650 --> 00:32:44,490
AUDIENCE: But I understand
that you can deploy your

653
00:32:44,490 --> 00:32:46,460
application, but it's
not application.

654
00:32:46,460 --> 00:32:47,360
Right?

655
00:32:47,360 --> 00:32:48,470
How you publish it?

656
00:32:48,470 --> 00:32:50,202
ANDREW JEON: Well, if you're
talking about Android APIs--

657
00:32:50,202 --> 00:32:52,585
APIs--

658
00:32:52,585 --> 00:32:55,110
CHRISTIAN KURZKE: So I think
that the question is, if you

659
00:32:55,110 --> 00:32:59,990
create an application that
uses Encrypted Media

660
00:32:59,990 --> 00:33:04,640
Extensions, how do you bring
those media extensions with

661
00:33:04,640 --> 00:33:05,230
your application?

662
00:33:05,230 --> 00:33:06,240
AUDIENCE: Yes, exactly.

663
00:33:06,240 --> 00:33:08,590
ANDREW JEON: So if you create
a web app which uses a

664
00:33:08,590 --> 00:33:11,600
[INAUDIBLE] extension or
encrypted video extension,

665
00:33:11,600 --> 00:33:13,570
[INAUDIBLE] webpage,
basically.

666
00:33:13,570 --> 00:33:18,320
So people, if you don't know the
URL, you can then directly

667
00:33:18,320 --> 00:33:18,755
go to the webpage.

668
00:33:18,755 --> 00:33:20,750
That's one way [INAUDIBLE]

669
00:33:20,750 --> 00:33:22,190
to discover.

670
00:33:22,190 --> 00:33:25,444
Second way is you can create
a very simple Android

671
00:33:25,444 --> 00:33:29,332
application, which is just
[? a ?] icon or a shortcut.

672
00:33:29,332 --> 00:33:31,280
And then you can [? own ?]
it to market.

673
00:33:31,280 --> 00:33:33,950
And then, once user download it,
and installs the shortcut

674
00:33:33,950 --> 00:33:38,002
app, it's going to be placed
on the All Apps panel, and

675
00:33:38,002 --> 00:33:40,189
user can actually even
move that to a bottom

676
00:33:40,189 --> 00:33:41,890
section, to a highlight.

677
00:33:41,890 --> 00:33:45,778
And when user clicks it, it
is an Android application.

678
00:33:45,778 --> 00:33:50,410
But you can actually send a
URL intent, which will be

679
00:33:50,410 --> 00:33:53,310
grabbed by Chrome browser,
and then direct

680
00:33:53,310 --> 00:33:55,300
user to your web app.

681
00:33:55,300 --> 00:33:56,020
AUDIENCE: OK.

682
00:33:56,020 --> 00:33:58,420
Thank you.

683
00:33:58,420 --> 00:34:00,740
AUDIENCE: Would you consider
bringing Google TV

684
00:34:00,740 --> 00:34:03,540
to the Nexus Q?

685
00:34:03,540 --> 00:34:04,800
ANDREW JEON: We don't
have a Nexus--

686
00:34:04,800 --> 00:34:10,070
I mean, Nexus was withdrawn last
year, so I don't really

687
00:34:10,070 --> 00:34:13,675
have a comment to make for
that, at this time.

688
00:34:13,675 --> 00:34:15,310
AUDIENCE: I'll keep using
it as a doorstop.

689
00:34:15,310 --> 00:34:20,020

690
00:34:20,020 --> 00:34:21,480
CHRISTIAN KURZKE: OK, we have
another question here.

691
00:34:21,480 --> 00:34:23,370
AUDIENCE: Yeah, I'm delighted
to see that you're moving up

692
00:34:23,370 --> 00:34:24,590
to Jelly Bean.

693
00:34:24,590 --> 00:34:26,350
On the other hand, I'd really
like to see what the

694
00:34:26,350 --> 00:34:28,889
distribution in the marketplace
looks like and

695
00:34:28,889 --> 00:34:31,790
what your predictions are for
what it will look like over

696
00:34:31,790 --> 00:34:34,159
the next year.

697
00:34:34,159 --> 00:34:36,340
ANDREW JEON: So I think we
have a slide earlier in

698
00:34:36,340 --> 00:34:37,880
[? this ?] presentation.

699
00:34:37,880 --> 00:34:41,500
We have our device partners
planning on learning how many

700
00:34:41,500 --> 00:34:44,877
type of devices which
[INAUDIBLE]

701
00:34:44,877 --> 00:34:46,360
version four, this year.

702
00:34:46,360 --> 00:34:47,810
AUDIENCE: What do I actually
have to design

703
00:34:47,810 --> 00:34:49,909
for right now, though?

704
00:34:49,909 --> 00:34:51,779
ANDREW JEON: Design your app?

705
00:34:51,779 --> 00:34:53,239
AUDIENCE: Yeah.

706
00:34:53,239 --> 00:34:54,280
Honeycomb right now.

707
00:34:54,280 --> 00:34:57,881
ANDREW JEON: So this summer,
we will have a [INAUDIBLE]

708
00:34:57,881 --> 00:35:01,665
device available in the market,
including the updates

709
00:35:01,665 --> 00:35:02,655
[INAUDIBLE]

710
00:35:02,655 --> 00:35:03,645
devices.

711
00:35:03,645 --> 00:35:07,233
So once [INAUDIBLE] four device
access from the market

712
00:35:07,233 --> 00:35:07,605
can use it.

713
00:35:07,605 --> 00:35:11,070
But if but if you have a serious
plan to develop app

714
00:35:11,070 --> 00:35:14,040
[INAUDIBLE] actually
[INAUDIBLE]

715
00:35:14,040 --> 00:35:15,860
development device.

716
00:35:15,860 --> 00:35:17,290
CHRISTIAN KURZKE: We want
to make sure that the

717
00:35:17,290 --> 00:35:20,960
applications are ready when
the devices get updated.

718
00:35:20,960 --> 00:35:24,080
And as Andrew said, we work very
closely with our hardware

719
00:35:24,080 --> 00:35:27,740
partners to make sure the
updates roll out.

720
00:35:27,740 --> 00:35:29,960
AUDIENCE: Hi, I'm
John Blossom.

721
00:35:29,960 --> 00:35:31,830
I'm a Google TV ambassador.

722
00:35:31,830 --> 00:35:34,740
I'm one of the co-leads,
along with Derek Ross.

723
00:35:34,740 --> 00:35:37,440
And we're trying to channel the
right information over to

724
00:35:37,440 --> 00:35:41,210
Google TV enthusiasts, as well
as trying to interface with

725
00:35:41,210 --> 00:35:42,970
the developer community.

726
00:35:42,970 --> 00:35:46,290
One thing that I'm not 100%
clear, in terms of the API

727
00:35:46,290 --> 00:35:49,700
toolkit for Google TV that gets
dropped on top of Jelly

728
00:35:49,700 --> 00:35:52,890
Bean, if you are going--

729
00:35:52,890 --> 00:35:56,380
Is it the case that this kit
will drop on top of any

730
00:35:56,380 --> 00:35:58,810
subsequent Android release?

731
00:35:58,810 --> 00:36:01,910
In other words, is there still a
situation where you have the

732
00:36:01,910 --> 00:36:04,440
kernel bundled with
the Google TV?

733
00:36:04,440 --> 00:36:06,650
Or could you do it separately?

734
00:36:06,650 --> 00:36:09,110
And the second question that
came in from the ambassadors

735
00:36:09,110 --> 00:36:12,438
is where are you on
4K video support?

736
00:36:12,438 --> 00:36:12,906
ANDREW JEON: OK.

737
00:36:12,906 --> 00:36:15,720
Let me try to answer
both of them.

738
00:36:15,720 --> 00:36:20,150
So right now Google TV uses
Android's 10. platform as is.

739
00:36:20,150 --> 00:36:23,179
But, in order to make sure it's
actually working, all the

740
00:36:23,179 --> 00:36:26,700
APIs on the [INAUDIBLE] in line,
whenever new Android

741
00:36:26,700 --> 00:36:29,000
versions on the [? land ?] base
platform comes out, there

742
00:36:29,000 --> 00:36:32,390
will be a release of Google TV
libraries [? config ?] works

743
00:36:32,390 --> 00:36:34,810
with it, always.

744
00:36:34,810 --> 00:36:35,860
AUDIENCE: Right.

745
00:36:35,860 --> 00:36:40,900
So what I hear you saying
there, it's somewhat

746
00:36:40,900 --> 00:36:42,160
decoupled, but not really.

747
00:36:42,160 --> 00:36:45,150
It's really a matter of you
maintaining the libraries now,

748
00:36:45,150 --> 00:36:48,220
in parallel with all the current
Android releases.

749
00:36:48,220 --> 00:36:49,470
Is that the case?

750
00:36:49,470 --> 00:36:49,945
ANDREW JEON: No.

751
00:36:49,945 --> 00:36:54,250
Depends on, let's say our
libraries are using Android

752
00:36:54,250 --> 00:36:57,310
APIs, so it depends
somewhat on APIs.

753
00:36:57,310 --> 00:36:59,380
Between the Android releases,
if there's absolutely no

754
00:36:59,380 --> 00:37:02,613
changes that impacts our
library, there is a chance

755
00:37:02,613 --> 00:37:04,110
that we don't have to update.

756
00:37:04,110 --> 00:37:04,395
AUDIENCE: Correct.

757
00:37:04,395 --> 00:37:06,010
ANDREW JEON: But if there are
changes, so let's say some of

758
00:37:06,010 --> 00:37:09,264
the APIs are deprecated, and
change the packaging from one

759
00:37:09,264 --> 00:37:12,150
to the other, then we have to
update, just to make sure it

760
00:37:12,150 --> 00:37:12,760
compiles correctly.

761
00:37:12,760 --> 00:37:13,010
AUDIENCE: Correct.

762
00:37:13,010 --> 00:37:15,320
So manufacturers and developers
can keep on

763
00:37:15,320 --> 00:37:19,870
overlaying kernel updates, and
just keep on progressing and

764
00:37:19,870 --> 00:37:21,710
not worry about any--

765
00:37:21,710 --> 00:37:24,560
having to synchronize with
toolkit, until it's affected

766
00:37:24,560 --> 00:37:26,080
by underlying changes.

767
00:37:26,080 --> 00:37:28,500
Would there be any reverse
engineering to bring it into

768
00:37:28,500 --> 00:37:31,780
previous Android releases, or is
it strictly moving forward?

769
00:37:31,780 --> 00:37:34,380
ANDREW JEON: It is safe to say
that we always go forward, but

770
00:37:34,380 --> 00:37:37,005
it doesn't mean that we have
to change the API version

771
00:37:37,005 --> 00:37:37,940
every time.

772
00:37:37,940 --> 00:37:41,520
Let's say, for example, an
Android K release comes

773
00:37:41,520 --> 00:37:44,592
online, and we have our API
set, and we don't have any

774
00:37:44,592 --> 00:37:46,180
extra API at the moment.

775
00:37:46,180 --> 00:37:49,450
We could keep the existing APIs,
so the libraries may

776
00:37:49,450 --> 00:37:52,985
have to be re-released,
but the version

777
00:37:52,985 --> 00:37:54,646
same as version two.

778
00:37:54,646 --> 00:37:56,220
There are multiple
cases possible.

779
00:37:56,220 --> 00:37:58,325
We will always minimize
the impact.

780
00:37:58,325 --> 00:38:00,800
AUDIENCE: Do we have any
hardware manufacturers that

781
00:38:00,800 --> 00:38:03,390
are lining up to drop this kit
on top of the tablet as

782
00:38:03,390 --> 00:38:05,280
opposed to a big screen?

783
00:38:05,280 --> 00:38:09,700
ANDREW JEON: We discussed some
of them, but at that moment,

784
00:38:09,700 --> 00:38:12,600
there's no [? accommodate?] to
make her who want to bring

785
00:38:12,600 --> 00:38:13,820
that to tablet--

786
00:38:13,820 --> 00:38:14,480
at the moment.

787
00:38:14,480 --> 00:38:17,890
But I wouldn't say that it will
be impossible [INAUDIBLE]

788
00:38:17,890 --> 00:38:20,484
AUDIENCE: Thank you.

789
00:38:20,484 --> 00:38:22,480
ANDREW JEON: The second
question was 4K video.

790
00:38:22,480 --> 00:38:25,190

791
00:38:25,190 --> 00:38:31,000
So 4K support, in terms of the
video playback, 4K support is

792
00:38:31,000 --> 00:38:36,912
completely relying on the
decoder capability, so some of

793
00:38:36,912 --> 00:38:40,570
the SoC partners we are working
with, there are SoCs

794
00:38:40,570 --> 00:38:42,972
capable of playing 4K
video, as you can

795
00:38:42,972 --> 00:38:45,380
see in the TCL case.

796
00:38:45,380 --> 00:38:48,670
So some devices in the market
will be able to, but the

797
00:38:48,670 --> 00:38:52,130
problem is then the display
also needs to be 4K.

798
00:38:52,130 --> 00:38:54,580
It's going to be [INAUDIBLE]
device port device and

799
00:38:54,580 --> 00:38:56,132
actually the SoC [INAUDIBLE]

800
00:38:56,132 --> 00:38:57,672
AUDIENCE: [INAUDIBLE]
kit's ready and

801
00:38:57,672 --> 00:38:58,976
then you have to use.

802
00:38:58,976 --> 00:38:59,450
ANDREW JEON: Right.

803
00:38:59,450 --> 00:39:03,650
For example, our video framework
is independent of

804
00:39:03,650 --> 00:39:06,870
whether the developer tried
to play 4K or not.

805
00:39:06,870 --> 00:39:07,990
For example--

806
00:39:07,990 --> 00:39:09,890
CHRISTIAN KURZKE: Andrew,
I think maybe if you're

807
00:39:09,890 --> 00:39:13,320
interested, you can stop by
offline at the sandbox and

808
00:39:13,320 --> 00:39:15,900
check out the TCL 4K TV.

809
00:39:15,900 --> 00:39:16,820
Let's take more questions.

810
00:39:16,820 --> 00:39:18,390
AUDIENCE: Just a
quick question.

811
00:39:18,390 --> 00:39:20,890
You mentioned all the extensions
being available in

812
00:39:20,890 --> 00:39:22,960
Chrome on Google TV.

813
00:39:22,960 --> 00:39:26,216
Are they also available
in web views?

814
00:39:26,216 --> 00:39:29,540
ANDREW JEON: Current version of
the Jelly Bean web view is

815
00:39:29,540 --> 00:39:31,360
different implementation
of a project.

816
00:39:31,360 --> 00:39:33,876

817
00:39:33,876 --> 00:39:37,160
We have a plan, but I can not
actually share any timeline.

818
00:39:37,160 --> 00:39:40,520
CHRISTIAN KURZKE: So we'll have
to punt over to Chrome.

819
00:39:40,520 --> 00:39:42,750
AUDIENCE: Thank you.

820
00:39:42,750 --> 00:39:43,065
AUDIENCE: Hi.

821
00:39:43,065 --> 00:39:44,070
Two quick questions.

822
00:39:44,070 --> 00:39:47,750
So the first one is, is there
any progress with playing with

823
00:39:47,750 --> 00:39:50,060
the actual cable feed, like
overlaying on top of it, or

824
00:39:50,060 --> 00:39:53,390
getting it inside your app on
a different level as a view?

825
00:39:53,390 --> 00:39:56,340
And the second one is are we
going to see any higher-end

826
00:39:56,340 --> 00:39:59,120
devices come out for Google
TV in the near future?

827
00:39:59,120 --> 00:40:00,240
Or are they still going
to stay on the

828
00:40:00,240 --> 00:40:01,970
lower end of the market?

829
00:40:01,970 --> 00:40:04,230
ANDREW JEON: So embedding the
video in your application is

830
00:40:04,230 --> 00:40:08,000
possible today with the version
4, so their TV player

831
00:40:08,000 --> 00:40:10,866
is one of the offering
as a [? probable ?]

832
00:40:10,866 --> 00:40:14,570
TV tool kit, add-on libraries
[? in ?] our application.

833
00:40:14,570 --> 00:40:17,786
And then finally, there's
application which represent

834
00:40:17,786 --> 00:40:21,528
live TV feed, has an API
to resize [INAUDIBLE]

835
00:40:21,528 --> 00:40:25,550
certain size and location, so
that you can place on top.

836
00:40:25,550 --> 00:40:26,690
That's one option.

837
00:40:26,690 --> 00:40:30,900
And in our APIs, lot of APIs but
we don't talk about all of

838
00:40:30,900 --> 00:40:33,570
it, here but once the device
rolled out and

839
00:40:33,570 --> 00:40:35,910
we publish the API.

840
00:40:35,910 --> 00:40:38,580
There's a API called
Media Device View.

841
00:40:38,580 --> 00:40:42,019
And once you instantiate Video
Device View, you can actually

842
00:40:42,019 --> 00:40:46,798
give a TV URL to that, and embed
Video Device View inside

843
00:40:46,798 --> 00:40:49,570
of your location, then you can
actually play live TV video

844
00:40:49,570 --> 00:40:50,908
inside of your application.

845
00:40:50,908 --> 00:40:52,150
That is possible.

846
00:40:52,150 --> 00:40:54,200
The second one was--

847
00:40:54,200 --> 00:40:55,440
AUDIENCE: Higher end devices?

848
00:40:55,440 --> 00:40:56,110
ANDREW JEON: Oh.

849
00:40:56,110 --> 00:40:58,907
Yes, there will be
high-end devices.

850
00:40:58,907 --> 00:41:03,677

851
00:41:03,677 --> 00:41:05,780
AUDIENCE: You mentioned
three new features

852
00:41:05,780 --> 00:41:06,790
I'm trying to reconcile.

853
00:41:06,790 --> 00:41:10,010
One was NDK access, but
unfortunately, I think that

854
00:41:10,010 --> 00:41:13,050
that means we'll see an
increase in malicious

855
00:41:13,050 --> 00:41:15,200
applications that might
be able to get

856
00:41:15,200 --> 00:41:16,720
kernel-level access.

857
00:41:16,720 --> 00:41:20,890
And then, two, you have closed
caption support, which I'm

858
00:41:20,890 --> 00:41:23,440
assuming it's going to mean
I've got to do graphic

859
00:41:23,440 --> 00:41:27,380
overlays from say, a GPU on
top of the video stream.

860
00:41:27,380 --> 00:41:27,570
All right?

861
00:41:27,570 --> 00:41:31,970
And then, three, was the
trusted video path.

862
00:41:31,970 --> 00:41:34,850
How exactly are you going to
maintain a trusted video path

863
00:41:34,850 --> 00:41:36,360
in that type of environment?

864
00:41:36,360 --> 00:41:38,780
ANDREW JEON: So in order to
understand this security risk,

865
00:41:38,780 --> 00:41:41,352
you have to understand how
trusted video path is

866
00:41:41,352 --> 00:41:42,410
implemented.

867
00:41:42,410 --> 00:41:45,870
We are actually using hardware
features to protect any

868
00:41:45,870 --> 00:41:49,892
process running on the main
memory and main CPU to be able

869
00:41:49,892 --> 00:41:52,352
to access certain memory zone.

870
00:41:52,352 --> 00:41:55,304
So no matter where the device
is rooted, we don't

871
00:41:55,304 --> 00:41:55,796
[INAUDIBLE].

872
00:41:55,796 --> 00:41:59,295
But even in the case of rooting,
or in any malicious

873
00:41:59,295 --> 00:42:04,145
code, taking over root access,
those projects will not have

874
00:42:04,145 --> 00:42:07,340
access to video data.

875
00:42:07,340 --> 00:42:09,360
AUDIENCE: So you're working
with the chip-level

876
00:42:09,360 --> 00:42:13,160
manufactures in order
to implement that?

877
00:42:13,160 --> 00:42:20,180
We had was quite tough
or basis thank you

878
00:42:20,180 --> 00:42:21,700
CHRISTIAN KURZKE: So I think
we're actually running a

879
00:42:21,700 --> 00:42:23,740
little bit over our time, but

880
00:42:23,740 --> 00:42:25,516
ANDREW JEON: Two
more questions?

881
00:42:25,516 --> 00:42:26,404
[INAUDIBLE]

882
00:42:26,404 --> 00:42:26,850
outside.

883
00:42:26,850 --> 00:42:28,870
CHRISTIAN KURZKE: Well, I think
it's best is if we take

884
00:42:28,870 --> 00:42:29,910
questions outside.

885
00:42:29,910 --> 00:42:32,110
Just find us outside.

886
00:42:32,110 --> 00:42:34,700
We need to clear the room for
the next presentation.

887
00:42:34,700 --> 00:42:34,760
ANDREW JEON: Thanks a lot.

888
00:42:34,760 --> 00:42:36,270
CHRISTIAN KURZKE: Thank
you very much.

889
00:42:36,270 --> 00:42:43,970

