1
00:00:00,000 --> 00:00:21,580

2
00:00:21,580 --> 00:00:24,200
PAUL IRISH: Hi, and welcome
to the next episode of The

3
00:00:24,200 --> 00:00:25,940
Breakpoint, Breakpoint
number four.

4
00:00:25,940 --> 00:00:27,190
I'm Paul Irish.

5
00:00:27,190 --> 00:00:29,570

6
00:00:29,570 --> 00:00:31,710
Addy Osmani is joining
us in London.

7
00:00:31,710 --> 00:00:35,410
And we will be doing a
Tour of the Timeline.

8
00:00:35,410 --> 00:00:38,580
The Timeline is part of the
Chrome Dev Tools to help give

9
00:00:38,580 --> 00:00:42,250
you a great view of the overall
performance of the

10
00:00:42,250 --> 00:00:44,660
application from start
to finish,

11
00:00:44,660 --> 00:00:46,500
including all the parts.

12
00:00:46,500 --> 00:00:50,510
And so it really gives you this
really nice, holistic

13
00:00:50,510 --> 00:00:53,490
view of how your application is
performing so you can dig

14
00:00:53,490 --> 00:00:56,510
into the pieces that are
giving you bottlenecks,

15
00:00:56,510 --> 00:01:00,240
whether they're JavaScript,
paint times, reflows, or

16
00:01:00,240 --> 00:01:00,780
anything else.

17
00:01:00,780 --> 00:01:03,690
And we can help identify what
is exactly slowing our app

18
00:01:03,690 --> 00:01:06,310
down and fix it.

19
00:01:06,310 --> 00:01:09,910
So we're going to dive into how
to use it, and the kinds

20
00:01:09,910 --> 00:01:13,150
of insights that it shows.

21
00:01:13,150 --> 00:01:15,890
And generally, you should be
able to walk away from this

22
00:01:15,890 --> 00:01:18,370
with a much better understanding
of how browser

23
00:01:18,370 --> 00:01:21,240
internals work, how it
interprets your page, and what

24
00:01:21,240 --> 00:01:25,470
you can do to make sure your
app loads and interacts as

25
00:01:25,470 --> 00:01:27,320
fast as possible.

26
00:01:27,320 --> 00:01:28,290
All Right.

27
00:01:28,290 --> 00:01:33,280
So first things first,
let me bring this up.

28
00:01:33,280 --> 00:01:36,970
So inside the Chrome DevTools
we have the Timeline.

29
00:01:36,970 --> 00:01:39,050
It's about a fifth tab over.

30
00:01:39,050 --> 00:01:42,250
And it's giving you
this overall view.

31
00:01:42,250 --> 00:01:49,030
One of the things that we have
in there is a Events View.

32
00:01:49,030 --> 00:01:50,390
And this is something that
has been in there

33
00:01:50,390 --> 00:01:51,220
for quite some time.

34
00:01:51,220 --> 00:01:55,170
So I'm going to do a small
little demo on the how this

35
00:01:55,170 --> 00:01:56,950
comes into practice.

36
00:01:56,950 --> 00:01:58,950
I have up here The New
York Times Skimmer.

37
00:01:58,950 --> 00:02:01,490
A really well-done web
application done by The New

38
00:02:01,490 --> 00:02:05,870
York Times to show today's
news and such.

39
00:02:05,870 --> 00:02:08,520
So I'm going to bring
up the Timeline.

40
00:02:08,520 --> 00:02:11,540
And it looks like I've got to
wait for the page to kind of

41
00:02:11,540 --> 00:02:12,790
refresh here.

42
00:02:12,790 --> 00:02:15,510

43
00:02:15,510 --> 00:02:17,630
There we go, that looks good.

44
00:02:17,630 --> 00:02:22,210
Now I want to record
a new session.

45
00:02:22,210 --> 00:02:23,750
So I can hit this
Record button.

46
00:02:23,750 --> 00:02:26,830
I can also hit Command-E.
It's a lot easier.

47
00:02:26,830 --> 00:02:29,000
I'm just going to refresh
the page first.

48
00:02:29,000 --> 00:02:34,080
And now I'm going to scroll
to some other sections.

49
00:02:34,080 --> 00:02:38,100
Hit Go, and I'll Open this story
and Close the story.

50
00:02:38,100 --> 00:02:38,900
So that's pretty good.

51
00:02:38,900 --> 00:02:42,160
I'll stop this with Command-E.

52
00:02:42,160 --> 00:02:46,120
And so down here, this
is the full Timeline.

53
00:02:46,120 --> 00:02:48,760

54
00:02:48,760 --> 00:02:52,270
We can drill into a certain
area up at the top by just

55
00:02:52,270 --> 00:02:55,330
clicking and scrolling.

56
00:02:55,330 --> 00:02:57,900
We can also, with the trackpad,
do a few little

57
00:02:57,900 --> 00:02:59,770
gestures to zoom
in on the area.

58
00:02:59,770 --> 00:03:03,010
So we can go up by
scrolling up.

59
00:03:03,010 --> 00:03:05,630
And we can narrow
our focus here.

60
00:03:05,630 --> 00:03:09,300
We can also scroll to the side
and pan between them.

61
00:03:09,300 --> 00:03:13,920
And you see all the events are
updating on the bottom.

62
00:03:13,920 --> 00:03:17,580
The other thing to orient
yourself is very small here,

63
00:03:17,580 --> 00:03:19,870
but we have a small blue line
and a red line, and these

64
00:03:19,870 --> 00:03:27,600
refer to DOM content loaded
and the window.load event.

65
00:03:27,600 --> 00:03:32,580
So let's take a look and
see what's going on.

66
00:03:32,580 --> 00:03:35,940
The first thing that we have up
here is the blue level, and

67
00:03:35,940 --> 00:03:37,290
so this is all network
activity.

68
00:03:37,290 --> 00:03:41,280
Underneath this is yellow
JavaScript execution.

69
00:03:41,280 --> 00:03:43,040
It's happening all the time.

70
00:03:43,040 --> 00:03:46,360
And then the last is kind of
rendering and screen layer.

71
00:03:46,360 --> 00:03:49,260
So paint and rendering.

72
00:03:49,260 --> 00:03:53,950
Purple and green share this
third thing here.

73
00:03:53,950 --> 00:03:58,190
And so I think I refreshed the
page right around this area

74
00:03:58,190 --> 00:04:00,130
and things were happening.

75
00:04:00,130 --> 00:04:04,100
But while this does tell me the
interaction between the

76
00:04:04,100 --> 00:04:06,270
layers or the browser as it
loads the page, it doesn't

77
00:04:06,270 --> 00:04:09,340
really give me a good view of
what was slow about anything.

78
00:04:09,340 --> 00:04:11,380
It doesn't give me any
good recommendations.

79
00:04:11,380 --> 00:04:15,730
And I can look down and see for
all these events how long

80
00:04:15,730 --> 00:04:19,779
they took and see the general
waterfall events as they

81
00:04:19,779 --> 00:04:22,830
trickle over.

82
00:04:22,830 --> 00:04:27,120
But over this course of a 10
second recording, I don't have

83
00:04:27,120 --> 00:04:28,970
a good idea about
where to target.

84
00:04:28,970 --> 00:04:30,730
So to do that, I'm going
to switch over to

85
00:04:30,730 --> 00:04:32,280
the new Frames mode.

86
00:04:32,280 --> 00:04:34,010
So I can switch over
to Frames mode.

87
00:04:34,010 --> 00:04:38,920
Now this gives me a little
bit different of a view.

88
00:04:38,920 --> 00:04:41,690
One of the things in Frames
View is over here on the

89
00:04:41,690 --> 00:04:45,780
right-hand side, we have
these measures.

90
00:04:45,780 --> 00:04:49,270
So the height of each bar in
Frames View refers to the

91
00:04:49,270 --> 00:04:53,820
length of time that it took to
complete that frame and send

92
00:04:53,820 --> 00:04:55,710
it up to the screen.

93
00:04:55,710 --> 00:04:58,800
And so something that takes a
short amount of time we could

94
00:04:58,800 --> 00:05:00,220
send up to GPU really quickly.

95
00:05:00,220 --> 00:05:02,580
And this means that we can keep
the refresh rate as fast

96
00:05:02,580 --> 00:05:03,220
as possible.

97
00:05:03,220 --> 00:05:07,910
In most cases you want a target
of 60 FPS frame rate.

98
00:05:07,910 --> 00:05:13,090
But some high-end monitors run
at 120 Hertz, and so the

99
00:05:13,090 --> 00:05:16,490
browser will actually be trying
to send 120 updates per

100
00:05:16,490 --> 00:05:18,680
second to those monitors.

101
00:05:18,680 --> 00:05:24,290
Phones might have a 55
Hertz refresh rate.

102
00:05:24,290 --> 00:05:27,480
So 60 is a general guideline.

103
00:05:27,480 --> 00:05:31,870
Most machines and devices
refresh at that rate.

104
00:05:31,870 --> 00:05:34,110
So you could target that.

105
00:05:34,110 --> 00:05:37,960
But once we have these very long
bars, and that means that

106
00:05:37,960 --> 00:05:44,580
a frame rate is dipping below
30 FPS, and that's not good.

107
00:05:44,580 --> 00:05:48,320
So we want to identify what we
can do to make that faster.

108
00:05:48,320 --> 00:05:51,495
So let's see, we're going
to take a look in here.

109
00:05:51,495 --> 00:05:55,710

110
00:05:55,710 --> 00:05:58,270
It looks like I might
have found a small

111
00:05:58,270 --> 00:06:01,640
bug in Canary today.

112
00:06:01,640 --> 00:06:07,050
I'm going to try refreshing
this page and restarting a

113
00:06:07,050 --> 00:06:08,300
Timeline recording.

114
00:06:08,300 --> 00:06:12,090

115
00:06:12,090 --> 00:06:13,475
Oh, this doesn't look good.

116
00:06:13,475 --> 00:06:19,430

117
00:06:19,430 --> 00:06:20,680
There we go.

118
00:06:20,680 --> 00:06:28,010

119
00:06:28,010 --> 00:06:29,260
What do you think, Addy?

120
00:06:29,260 --> 00:06:32,830

121
00:06:32,830 --> 00:06:34,080
ADDY OSMANI: Oh, what's that?

122
00:06:34,080 --> 00:06:38,760

123
00:06:38,760 --> 00:06:43,240
This is one of those very few
times that using Canary might

124
00:06:43,240 --> 00:06:44,690
go a little south.

125
00:06:44,690 --> 00:06:46,600
PAUL IRISH: As you can see, I do
have a Canary update that's

126
00:06:46,600 --> 00:06:47,850
waiting for me here.

127
00:06:47,850 --> 00:06:52,780

128
00:06:52,780 --> 00:06:54,470
This is fine.

129
00:06:54,470 --> 00:06:57,080
We can adapt to this
situation here.

130
00:06:57,080 --> 00:07:00,230

131
00:07:00,230 --> 00:07:03,270
OK, I'm going to jump over
to a fresh Chromium

132
00:07:03,270 --> 00:07:04,520
Build that I have.

133
00:07:04,520 --> 00:07:08,695

134
00:07:08,695 --> 00:07:11,600
That's good.

135
00:07:11,600 --> 00:07:14,750
ADDY OSMANI: Paul, this is The
Breakpoint, so things break in

136
00:07:14,750 --> 00:07:15,420
real time, right?

137
00:07:15,420 --> 00:07:16,570
PAUL IRISH: That's Exactly
what happens.

138
00:07:16,570 --> 00:07:18,345
ADDY OSMANI: So I think
the viewers get it.

139
00:07:18,345 --> 00:07:19,090
PAUL IRISH: All right, good.

140
00:07:19,090 --> 00:07:20,340
I'm glad.

141
00:07:20,340 --> 00:07:26,040

142
00:07:26,040 --> 00:07:28,560
Now we should be good here.

143
00:07:28,560 --> 00:07:29,930
Yeah, this is looking
pretty sharp.

144
00:07:29,930 --> 00:07:32,650

145
00:07:32,650 --> 00:07:33,830
Nice.

146
00:07:33,830 --> 00:07:36,220
We're going to scroll
up to this page.

147
00:07:36,220 --> 00:07:37,620
Oh, I have not saved anything.

148
00:07:37,620 --> 00:07:38,430
OK, good.

149
00:07:38,430 --> 00:07:44,330
And I'll open up this
story, or not.

150
00:07:44,330 --> 00:07:45,870
All right.

151
00:07:45,870 --> 00:07:48,290
So now we've navigated around.

152
00:07:48,290 --> 00:07:49,505
We've recorded a timeline.

153
00:07:49,505 --> 00:07:53,020
If I Zoom in on the DevTools,
you can just Command-Plus to

154
00:07:53,020 --> 00:07:55,410
always do that.

155
00:07:55,410 --> 00:07:56,090
We have a look.

156
00:07:56,090 --> 00:07:59,610
And like I said, any tall bar
gives an indication that

157
00:07:59,610 --> 00:08:01,190
things are not running as
smooth as possible.

158
00:08:01,190 --> 00:08:04,190

159
00:08:04,190 --> 00:08:06,010
Especially, when I was
navigating between these

160
00:08:06,010 --> 00:08:09,160
sections over here on the
right-hand side, it took a

161
00:08:09,160 --> 00:08:12,930
little time for that transition
to visually happen

162
00:08:12,930 --> 00:08:14,240
and for it just to complete.

163
00:08:14,240 --> 00:08:18,010
So I was sitting there
waiting a little bit.

164
00:08:18,010 --> 00:08:21,920
So I want to find out
what's going on.

165
00:08:21,920 --> 00:08:23,870
my tab did cash.

166
00:08:23,870 --> 00:08:26,660
And that's OK, because right now
I'm just really interested

167
00:08:26,660 --> 00:08:28,880
in what's going on down
at the bottom here.

168
00:08:28,880 --> 00:08:30,430
So if I scroll down
a little bit--

169
00:08:30,430 --> 00:08:35,470

170
00:08:35,470 --> 00:08:42,690
ah, my crash tab broke
more things.

171
00:08:42,690 --> 00:08:45,480
Oh, this is trouble.

172
00:08:45,480 --> 00:08:52,770

173
00:08:52,770 --> 00:08:54,020
OK.

174
00:08:54,020 --> 00:08:56,580

175
00:08:56,580 --> 00:08:57,510
All right.

176
00:08:57,510 --> 00:08:58,995
I think we're good now.

177
00:08:58,995 --> 00:09:00,980
Let's hope.

178
00:09:00,980 --> 00:09:04,520
All right, so now we have
a Timeline trace.

179
00:09:04,520 --> 00:09:07,610
The colors that I mentioned
before still apply here.

180
00:09:07,610 --> 00:09:10,580
And so this frame, for
instance, took 88

181
00:09:10,580 --> 00:09:12,100
milliseconds.

182
00:09:12,100 --> 00:09:15,150
88 milliseconds is a long
time for a frame.

183
00:09:15,150 --> 00:09:21,580
If we're keeping with 60 FPS,
then each frame is a short

184
00:09:21,580 --> 00:09:24,360
16.6 milliseconds.

185
00:09:24,360 --> 00:09:25,580
That's our target.

186
00:09:25,580 --> 00:09:28,830
And when we take longer than
that, then we're holding up

187
00:09:28,830 --> 00:09:31,340
the user from seeing that
content quickly.

188
00:09:31,340 --> 00:09:34,210
So inside this 80 milliseconds
frame, we have this long

189
00:09:34,210 --> 00:09:38,050
function call coming
from SoloSource.

190
00:09:38,050 --> 00:09:43,380
And let's look into what's
going on inside that.

191
00:09:43,380 --> 00:09:48,280
So it looks like there's all
these small parse events, and

192
00:09:48,280 --> 00:09:50,135
there's a big, big waterfall
of parsing.

193
00:09:50,135 --> 00:09:53,990
Now parsing here in Thailand
is just parsing HTML.

194
00:09:53,990 --> 00:09:58,400
Let me show exactly what's
going on here.

195
00:09:58,400 --> 00:10:02,520
Now, I can hover over this and
see actually a trace of why

196
00:10:02,520 --> 00:10:05,250
we're now parsing.

197
00:10:05,250 --> 00:10:08,210
And it looks like we're inside
of extend HTML5.

198
00:10:08,210 --> 00:10:12,800
So this is probably the HTML
method inside jQuery.

199
00:10:12,800 --> 00:10:15,530
But it was initially called
somewhere in the application

200
00:10:15,530 --> 00:10:18,330
source called Section
Layout Markup, Cash

201
00:10:18,330 --> 00:10:19,910
Callback Kindle Response.

202
00:10:19,910 --> 00:10:23,620
So you see the traversal
from New York Times

203
00:10:23,620 --> 00:10:25,290
Skimmer calling jQuery.

204
00:10:25,290 --> 00:10:29,410
Now the cool thing is I can
click into here and OK, yeah,

205
00:10:29,410 --> 00:10:35,110
it's going to lend 17 of jQuery,
minify jQuery, not

206
00:10:35,110 --> 00:10:36,580
very useful to me

207
00:10:36,580 --> 00:10:40,810
Now, if I click the Pretty Print
to get a Pretty Print

208
00:10:40,810 --> 00:10:45,510
jQuery, and i can hum back the
timeline, you see that my line

209
00:10:45,510 --> 00:10:47,200
number here is now updated.

210
00:10:47,200 --> 00:10:52,610
So now I can actually click on
line 2185, go to the new

211
00:10:52,610 --> 00:10:54,390
pretty printed line.

212
00:10:54,390 --> 00:10:56,710
If I scroll over a little bit,
you're going to see this

213
00:10:56,710 --> 00:10:58,280
innerHTML setting.

214
00:10:58,280 --> 00:11:01,530
So here's exactly where the
innerHTML on this element is

215
00:11:01,530 --> 00:11:05,140
being set, and that's why
we're calling a parse.

216
00:11:05,140 --> 00:11:08,030
And it looks like what
happened is we had a

217
00:11:08,030 --> 00:11:18,080
succession of about 60 or so
sequential instantiations of

218
00:11:18,080 --> 00:11:21,040
the HTML5 parsing algorithm.

219
00:11:21,040 --> 00:11:29,830
In total, it adds up to about 62
milliseconds, which took a

220
00:11:29,830 --> 00:11:31,620
decent amount of time.

221
00:11:31,620 --> 00:11:34,930
Now, let me see, I want to
see if we can have-- yes.

222
00:11:34,930 --> 00:11:38,030
So there was a small little
hiccup here that we probably

223
00:11:38,030 --> 00:11:39,280
could have avoided.

224
00:11:39,280 --> 00:11:41,520

225
00:11:41,520 --> 00:11:46,250
So we're parsing HTML, then
we recalc style here.

226
00:11:46,250 --> 00:11:47,780
And then we parse some more.

227
00:11:47,780 --> 00:11:50,910
We recalc style, we layout,
and we paint.

228
00:11:50,910 --> 00:11:55,390
And so recalculation of styles
is taking all the styles in

229
00:11:55,390 --> 00:11:58,420
style sheets, in the browser's
user agent style sheet, any

230
00:11:58,420 --> 00:12:02,980
inland styles, figuring out
what the computed style of

231
00:12:02,980 --> 00:12:06,470
every DOM element on the
page is against what

232
00:12:06,470 --> 00:12:07,960
the current DOM is.

233
00:12:07,960 --> 00:12:11,600
And now, it looks like we
have to do that twice.

234
00:12:11,600 --> 00:12:14,740
Go back to parsing HTML, and
then do that all over again.

235
00:12:14,740 --> 00:12:18,990
So it's probably likely that
we actually did not need to

236
00:12:18,990 --> 00:12:20,560
force this recalc style.

237
00:12:20,560 --> 00:12:23,230
The cool thing now is that we
can just hover on recalc style

238
00:12:23,230 --> 00:12:28,010
and see exactly why these
styles were necessary.

239
00:12:28,010 --> 00:12:32,040
So it looks like the cells
were both invalidated and

240
00:12:32,040 --> 00:12:33,460
every calculation was forced.

241
00:12:33,460 --> 00:12:36,570
And we can see why exactly
this is happening now.

242
00:12:36,570 --> 00:12:44,610
So the styles were invalidated
because on line 846 a class

243
00:12:44,610 --> 00:12:45,400
name was set.

244
00:12:45,400 --> 00:12:50,100
And any time a DOM
changes, then the

245
00:12:50,100 --> 00:12:51,650
current DOM is discarded.

246
00:12:51,650 --> 00:12:55,080
We need to find out new
styles for that.

247
00:12:55,080 --> 00:12:58,300
The other one is the style
recalculation was forced.

248
00:12:58,300 --> 00:13:06,070
Here inside line 655, we asked
for offset height.

249
00:13:06,070 --> 00:13:08,820
And asking for offset height
basically says hold up

250
00:13:08,820 --> 00:13:14,010
browser, I know you're busy, but
I need this number, and it

251
00:13:14,010 --> 00:13:15,210
needs to be correct.

252
00:13:15,210 --> 00:13:18,790
So anything that you're doing,
you need to pause and give me

253
00:13:18,790 --> 00:13:20,640
this number and make sure
that it's correct.

254
00:13:20,640 --> 00:13:23,230
So even if you're asking for
offset height and then the

255
00:13:23,230 --> 00:13:26,370
second after you're setting some
HTML it's going to like

256
00:13:26,370 --> 00:13:30,090
freeze everything, recalculate
all the styles, which is going

257
00:13:30,090 --> 00:13:32,380
to pause the browser for a
little bit, give you this

258
00:13:32,380 --> 00:13:34,620
number, and then it can continue
on with the amount of

259
00:13:34,620 --> 00:13:37,160
work that it was doing.

260
00:13:37,160 --> 00:13:40,970
So there's a few properties
that do this.

261
00:13:40,970 --> 00:13:42,965
The other place you
can go to is Tony

262
00:13:42,965 --> 00:13:47,560
Gentilcore, trigger, layout.

263
00:13:47,560 --> 00:13:50,620
Tony Gentilcore is an engineer
on the Chrome team.

264
00:13:50,620 --> 00:13:54,755
And he has a great blog post on
this where he just searched

265
00:13:54,755 --> 00:13:59,170
the web kit source for all the
properties and methods that

266
00:13:59,170 --> 00:14:04,350
will force a reflow or a layout,
which in turn forces

267
00:14:04,350 --> 00:14:05,750
styles to be recalced.

268
00:14:05,750 --> 00:14:11,330
So inside here is all of them,
and offset height and offset

269
00:14:11,330 --> 00:14:13,890
width are in here as well.

270
00:14:13,890 --> 00:14:16,440
Addy, is this making
sense so far?

271
00:14:16,440 --> 00:14:16,760
ADDY OSMANI: Yeah.

272
00:14:16,760 --> 00:14:18,130
It looks good so far.

273
00:14:18,130 --> 00:14:18,810
PAUL IRISH: All right.

274
00:14:18,810 --> 00:14:20,060
We're going to keep going.

275
00:14:20,060 --> 00:14:23,100

276
00:14:23,100 --> 00:14:26,580
So what happened here is we ask
for these offset heights,

277
00:14:26,580 --> 00:14:31,420
and then we went right back
into parsing our HTML.

278
00:14:31,420 --> 00:14:35,980
We probably could have avoided
these two pauses and just

279
00:14:35,980 --> 00:14:36,870
continued on.

280
00:14:36,870 --> 00:14:40,240
A lot of times there'll be a
sequence of things where we're

281
00:14:40,240 --> 00:14:44,330
setting into the DOM and then
you're requesting things like

282
00:14:44,330 --> 00:14:48,040
offset height, offset
width, and then

283
00:14:48,040 --> 00:14:49,210
you go back to setting.

284
00:14:49,210 --> 00:14:52,920
And a good way to speed up the
page is to make sure you do

285
00:14:52,920 --> 00:14:56,990
sets in a row and then
gets in a row.

286
00:14:56,990 --> 00:15:00,340
So eventually, when we finish
this big sequence, we recalc

287
00:15:00,340 --> 00:15:02,130
style again.

288
00:15:02,130 --> 00:15:02,930
We lay it out.

289
00:15:02,930 --> 00:15:05,760
So we lay out the geometry of
the page and how actually all

290
00:15:05,760 --> 00:15:07,280
the boxes are going
to lay out.

291
00:15:07,280 --> 00:15:08,920
And then we paint.

292
00:15:08,920 --> 00:15:12,250
And here, we can actually just
see a little overlay of the

293
00:15:12,250 --> 00:15:14,310
area that was painted.

294
00:15:14,310 --> 00:15:15,520
And it's a little bit
off because I

295
00:15:15,520 --> 00:15:17,740
was resizing my DevTools.

296
00:15:17,740 --> 00:15:22,750
But the main content section I
got painted followed by the

297
00:15:22,750 --> 00:15:25,540
right navigation.

298
00:15:25,540 --> 00:15:30,240
And so that's just the story
of that single frame being

299
00:15:30,240 --> 00:15:31,990
computed and being sent
up to the GPU.

300
00:15:31,990 --> 00:15:34,790

301
00:15:34,790 --> 00:15:35,950
But this thing can
happen a lot.

302
00:15:35,950 --> 00:15:38,660
So I'm going to look
for something else.

303
00:15:38,660 --> 00:15:42,750
Here's another big frame
at 60 milliseconds.

304
00:15:42,750 --> 00:15:46,710
And here, instead of a lot of
HTML parsing cost, we actually

305
00:15:46,710 --> 00:15:48,870
had a good amount
of paint cost.

306
00:15:48,870 --> 00:15:51,960
And paint cost can be a little
tricky to debug.

307
00:15:51,960 --> 00:15:53,670
So here we're just going
to open up this guy

308
00:15:53,670 --> 00:15:54,920
and see what we have.

309
00:15:54,920 --> 00:15:57,600

310
00:15:57,600 --> 00:15:59,180
That's pretty interesting.

311
00:15:59,180 --> 00:16:01,580
This top area got painted.

312
00:16:01,580 --> 00:16:05,790
And inside here, we have
an image decode.

313
00:16:05,790 --> 00:16:07,870
So these image decodes we're
actually added somewhat

314
00:16:07,870 --> 00:16:10,180
recently to the Chrome
DevTools.

315
00:16:10,180 --> 00:16:11,380
I don't think you'll see
them in Stable, but

316
00:16:11,380 --> 00:16:13,730
you see them in Canary.

317
00:16:13,730 --> 00:16:20,040
In this case we were just taking
a JPEG and decoding it

318
00:16:20,040 --> 00:16:21,350
from JPEG into bitmap.

319
00:16:21,350 --> 00:16:25,420
And it took a good 20
milliseconds to do that, which

320
00:16:25,420 --> 00:16:29,260
is a surprisingly long time.

321
00:16:29,260 --> 00:16:31,520
Another thing that is
essentially captured inside

322
00:16:31,520 --> 00:16:36,310
this paint, and right now it's a
small bug that we're fixing,

323
00:16:36,310 --> 00:16:38,530
is imagery sizing.

324
00:16:38,530 --> 00:16:45,343
So in this case, we had a lot
of images that came in like,

325
00:16:45,343 --> 00:16:48,240
let's say this one.

326
00:16:48,240 --> 00:16:50,020
A lot of the source images
that were used in this

327
00:16:50,020 --> 00:16:53,990
application came in at their
native size of 1024 pixels

328
00:16:53,990 --> 00:16:57,470
wide or 600 pixels wide, and
they're just scaled to fit in

329
00:16:57,470 --> 00:17:00,030
the area where they
should fit.

330
00:17:00,030 --> 00:17:01,390
A lot of times this
is necessary.

331
00:17:01,390 --> 00:17:03,110
And there's not much way
you can get around it.

332
00:17:03,110 --> 00:17:05,869
But the actual cost of doing
that resizing is something

333
00:17:05,869 --> 00:17:09,260
that we're now able to see.

334
00:17:09,260 --> 00:17:12,839
So typically, an image decode
is always followed by an

335
00:17:12,839 --> 00:17:15,451
imagery size.

336
00:17:15,451 --> 00:17:17,619
ADDY OSMANI: Suppose the
suggestion there that people

337
00:17:17,619 --> 00:17:18,780
use prescaled images.

338
00:17:18,780 --> 00:17:19,599
PAUL IRISH: Yeah.

339
00:17:19,599 --> 00:17:22,650
That is pretty much
the suggestion.

340
00:17:22,650 --> 00:17:26,609
If you can definitely serve up
images that are scaled to the

341
00:17:26,609 --> 00:17:29,710
correct resolution, the page is
going to load a lot faster,

342
00:17:29,710 --> 00:17:32,980
and scrolling speed is also
going to be a lot faster

343
00:17:32,980 --> 00:17:36,990
because images are decoded
lazily based on when the user

344
00:17:36,990 --> 00:17:37,720
needs to see them.

345
00:17:37,720 --> 00:17:40,590
So we're not going to decode the
entire page worth even if

346
00:17:40,590 --> 00:17:41,700
none of it's visible.

347
00:17:41,700 --> 00:17:44,650
So it's going to really speed up
scrolling and also speed up

348
00:17:44,650 --> 00:17:47,230
something like this.

349
00:17:47,230 --> 00:17:49,760
The other thing I should mention
is that in Chrome,

350
00:17:49,760 --> 00:17:53,130
image decoding right now does
operate on the main thread.

351
00:17:53,130 --> 00:17:56,480
So we have to wait for this
image to decode before we can

352
00:17:56,480 --> 00:17:58,860
run any JavaScript
for instance.

353
00:17:58,860 --> 00:18:00,050
That's the current
state of things.

354
00:18:00,050 --> 00:18:01,260
Although, that's improving.

355
00:18:01,260 --> 00:18:04,250
And we actually expect industry
codes to have an off

356
00:18:04,250 --> 00:18:07,290
thread very soon, which is going
to speed up things quite

357
00:18:07,290 --> 00:18:08,730
considerably.

358
00:18:08,730 --> 00:18:14,140
So serve images scaled to the
resolution that you need them

359
00:18:14,140 --> 00:18:19,240
at, and watch this area.

360
00:18:19,240 --> 00:18:24,710
Now, it looks like, yeah, we
painted this area up top.

361
00:18:24,710 --> 00:18:30,690
And sometimes with a view that
is not changing so much, we

362
00:18:30,690 --> 00:18:33,500
can actually keep track and
identify which image it is and

363
00:18:33,500 --> 00:18:35,930
where it was located.

364
00:18:35,930 --> 00:18:38,750
But in this case, because the
app has been moved around a

365
00:18:38,750 --> 00:18:40,890
bit, it's a bit trickier.

366
00:18:40,890 --> 00:18:46,780
So overall, this is the way that
we can diagnose what's

367
00:18:46,780 --> 00:18:49,310
going on with the application
from a performance perspective

368
00:18:49,310 --> 00:18:50,030
and figure it out.

369
00:18:50,030 --> 00:18:52,900
And the thing that I also want
to point out here is that in

370
00:18:52,900 --> 00:18:58,170
the past when something operates
pretty slow, people

371
00:18:58,170 --> 00:19:01,630
normally dive into fiber of
the profiler or the CPU

372
00:19:01,630 --> 00:19:05,010
profiler over here, and just
start recording and

373
00:19:05,010 --> 00:19:08,450
identifying JavaScript that
is taking a long time.

374
00:19:08,450 --> 00:19:13,390
But what we end up seeing in
this timeline trace is that

375
00:19:13,390 --> 00:19:16,250
actually there's
a lot of cost.

376
00:19:16,250 --> 00:19:21,590
A lot of the time that's taking
the browser a little

377
00:19:21,590 --> 00:19:24,540
bit of pause in delivering this
content to the user is

378
00:19:24,540 --> 00:19:25,870
not JavaScript.

379
00:19:25,870 --> 00:19:29,920
And so I recommend to use the
timeline to record a session

380
00:19:29,920 --> 00:19:31,110
of any slow interaction.

381
00:19:31,110 --> 00:19:33,100
Then identify what's going
on inside there.

382
00:19:33,100 --> 00:19:38,570
Maybe you do have really big
yellow spikes, but those

383
00:19:38,570 --> 00:19:41,830
yellow spikes might just be a
bunch of HTML settings or

384
00:19:41,830 --> 00:19:42,480
something else.

385
00:19:42,480 --> 00:19:45,500
So this is a good way to
identify where exactly your

386
00:19:45,500 --> 00:19:46,310
bottleneck is.

387
00:19:46,310 --> 00:19:52,290
Is it in script or is it just
completely in rendering costs.

388
00:19:52,290 --> 00:19:57,030
So this is a good way to
prioritize exactly what your

389
00:19:57,030 --> 00:20:00,270
performance costs are.

390
00:20:00,270 --> 00:20:03,850
I think I got a pretty decent
coverage on that.

391
00:20:03,850 --> 00:20:04,650
ADDY OSMANI: I think
you've got some

392
00:20:04,650 --> 00:20:06,210
great coverage in there.

393
00:20:06,210 --> 00:20:08,000
PAUL IRISH: All right.

394
00:20:08,000 --> 00:20:10,270
I wanted to see if there's
anything else

395
00:20:10,270 --> 00:20:10,910
that I should mention.

396
00:20:10,910 --> 00:20:13,480
No, I think that's good.

397
00:20:13,480 --> 00:20:16,680
One thing I did want to show
real quickly is a new

398
00:20:16,680 --> 00:20:21,970
experimental part that we're
playing with inside Chrome.

399
00:20:21,970 --> 00:20:25,220
And this is not yet available
for everyone, but we want to

400
00:20:25,220 --> 00:20:26,620
see what you guys think of it.

401
00:20:26,620 --> 00:20:29,470

402
00:20:29,470 --> 00:20:31,850
I went through and looked at
some of the properties that

403
00:20:31,850 --> 00:20:33,830
are normally a little
bit slow.

404
00:20:33,830 --> 00:20:36,060
They can be slow in CSS.

405
00:20:36,060 --> 00:20:41,450
And I present this list with
a lot of hesitation.

406
00:20:41,450 --> 00:20:44,900
Things that are slow now may
not be the things that are

407
00:20:44,900 --> 00:20:45,800
still in the future.

408
00:20:45,800 --> 00:20:50,300
So do not take these as
guidelines or advice on what

409
00:20:50,300 --> 00:20:54,570
to avoid, more just like this
is a snapshot of the current

410
00:20:54,570 --> 00:20:55,620
present state.

411
00:20:55,620 --> 00:20:58,460
But the key here is to always
test for yourself because my

412
00:20:58,460 --> 00:21:01,420
bottlenecks are not
your bottlenecks.

413
00:21:01,420 --> 00:21:06,290
For instance, Box Shadow is
kind of known as something

414
00:21:06,290 --> 00:21:09,000
that's quite slow, at desktop
and on mobile.

415
00:21:09,000 --> 00:21:10,740
And I'm going to show you a
little bit about how to

416
00:21:10,740 --> 00:21:14,310
actually see that now with
this experimental future.

417
00:21:14,310 --> 00:21:20,840
So I'm going to come over
to this little demo.

418
00:21:20,840 --> 00:21:26,650
And in this demo, as I scroll
the page, I have a few dancing

419
00:21:26,650 --> 00:21:28,140
Chrome logos.

420
00:21:28,140 --> 00:21:31,950
But I can also add this check
box, which adds in some CSS

421
00:21:31,950 --> 00:21:36,220
gradients in there and
some box shadow.

422
00:21:36,220 --> 00:21:43,170
Now, if I record a timeline of
this section, this page, and I

423
00:21:43,170 --> 00:21:48,865
make it dance a little bit,
you can see that--

424
00:21:48,865 --> 00:21:51,580
I'm narrowing that focus
a little bit.

425
00:21:51,580 --> 00:21:54,900
You can see that I just have
really long pain times, 25

426
00:21:54,900 --> 00:21:56,150
milliseconds just to paint.

427
00:21:56,150 --> 00:21:58,710

428
00:21:58,710 --> 00:21:59,980
Those are considerable.

429
00:21:59,980 --> 00:22:05,660
And I don't really have a good
idea on what is involved here.

430
00:22:05,660 --> 00:22:11,090
So what we can do actually
to identify exactly what

431
00:22:11,090 --> 00:22:15,270
components are contributing to
this longer paint time is we

432
00:22:15,270 --> 00:22:22,450
can turn on this new feature
called force repainting.

433
00:22:22,450 --> 00:22:26,090

434
00:22:26,090 --> 00:22:28,940
So now it might be a little
tough to see, but in the top

435
00:22:28,940 --> 00:22:32,430
right corner, I have both a
meter that represents my

436
00:22:32,430 --> 00:22:38,960
current frames per second and
also a rate of the paint rate.

437
00:22:38,960 --> 00:22:41,700
And what this mode is actually
doing is force

438
00:22:41,700 --> 00:22:43,490
repainting all the time.

439
00:22:43,490 --> 00:22:47,050
Normally, the browser only
paints when it has to, but

440
00:22:47,050 --> 00:22:49,790
this mode just says just keep
painting, just keep painting,

441
00:22:49,790 --> 00:22:51,840
because we want to be able to
measure things and we're going

442
00:22:51,840 --> 00:22:55,250
to change this situation.

443
00:22:55,250 --> 00:22:58,040
ADDY OSMANI: Paul, if you're
constantly repeating, is that

444
00:22:58,040 --> 00:23:00,702
something that's reflected in
the DevTools as well, like in

445
00:23:00,702 --> 00:23:01,270
the timeline.

446
00:23:01,270 --> 00:23:02,260
PAUL IRISH: Yeah, exactly.

447
00:23:02,260 --> 00:23:05,276
So if I just turn this on, I'm
not touching anything, it's

448
00:23:05,276 --> 00:23:06,110
just like--

449
00:23:06,110 --> 00:23:06,610
ADDY OSMANI: Wow!

450
00:23:06,610 --> 00:23:08,650
PAUL IRISH: --paint, paint,
paint, paint paint, paint.

451
00:23:08,650 --> 00:23:10,130
So there's no reason
that you'd need

452
00:23:10,130 --> 00:23:12,870
this as a user certainly.

453
00:23:12,870 --> 00:23:17,930
But as a developer, you're able
to just replicate heavy

454
00:23:17,930 --> 00:23:19,990
painting situations
repeatedly.

455
00:23:19,990 --> 00:23:22,080
And this enables you to
try some things out.

456
00:23:22,080 --> 00:23:26,495
So I'll actually, you know what,
I'll try and keep this

457
00:23:26,495 --> 00:23:27,750
timeline on.

458
00:23:27,750 --> 00:23:30,350
And I'm going to come
over to Elements.

459
00:23:30,350 --> 00:23:32,470
I'm going to Select
this image.

460
00:23:32,470 --> 00:23:36,880
And I'm going to turn off
this CSS gradient.

461
00:23:36,880 --> 00:23:40,280
And I'm going to turn up
this background size,

462
00:23:40,280 --> 00:23:43,490
and this box shadow.

463
00:23:43,490 --> 00:23:45,800
Now I'm going to come
back to timeline.

464
00:23:45,800 --> 00:23:48,520
Yeah, that should be a big,
dramatic difference.

465
00:23:48,520 --> 00:23:49,230
Nice.

466
00:23:49,230 --> 00:23:54,630
So we go from pretty long
paint sizes down

467
00:23:54,630 --> 00:23:58,510
to very short ones.

468
00:23:58,510 --> 00:24:01,640
And over in the top right we
have this paint rate meter,

469
00:24:01,640 --> 00:24:05,200
which is telling me
the million--

470
00:24:05,200 --> 00:24:09,035
right now I'm painting about 220
million pixels per second.

471
00:24:09,035 --> 00:24:11,540

472
00:24:11,540 --> 00:24:17,500
But when I have, let's see,
all the costly effects on,

473
00:24:17,500 --> 00:24:22,910
that dives down to about 35.

474
00:24:22,910 --> 00:24:28,760
So this is a pretty big
jump from 35 to 220.

475
00:24:28,760 --> 00:24:31,500
So we're able to identify
exactly just by toggling

476
00:24:31,500 --> 00:24:34,760
things on and off what's
contributing to paint times.

477
00:24:34,760 --> 00:24:38,120
Maybe it's individuals styles.

478
00:24:38,120 --> 00:24:41,310
In a lot of websites, there's
a very large div with a box

479
00:24:41,310 --> 00:24:42,445
shadow around it.

480
00:24:42,445 --> 00:24:45,980
And you can toggle things off,
apply display, none, or

481
00:24:45,980 --> 00:24:48,180
visibility hidden to them.

482
00:24:48,180 --> 00:24:52,090
See what the result is in
this mode or over in

483
00:24:52,090 --> 00:24:54,070
timeline paint length.

484
00:24:54,070 --> 00:24:58,140
And then identify where
this is going.

485
00:24:58,140 --> 00:25:00,390
In the future that might be
something like a report, a

486
00:25:00,390 --> 00:25:03,810
profiling report, where we can
identify by element, by style

487
00:25:03,810 --> 00:25:05,230
what's contributing to paint.

488
00:25:05,230 --> 00:25:07,760
It's a little tricky because
these things are additive, but

489
00:25:07,760 --> 00:25:14,980
for now, this is a great tool to
identify what is going on.

490
00:25:14,980 --> 00:25:16,580
How that's sound?

491
00:25:16,580 --> 00:25:18,110
ADDY OSMANI: That sounds
pretty cool.

492
00:25:18,110 --> 00:25:19,460
PAUL IRISH: Cool.

493
00:25:19,460 --> 00:25:22,470
ADDY OSMANI: So do you see when
people are developing

494
00:25:22,470 --> 00:25:25,470
applications that are complex
and have rich animations, do

495
00:25:25,470 --> 00:25:30,150
you see them actually making
perhaps design decisions based

496
00:25:30,150 --> 00:25:33,270
on what some of this
is reporting back?

497
00:25:33,270 --> 00:25:33,610
PAUL IRISH: Yeah.

498
00:25:33,610 --> 00:25:37,030
So it's a little trickier.

499
00:25:37,030 --> 00:25:41,670
So clearly, the fastest
situation here is just get rid

500
00:25:41,670 --> 00:25:46,650
box shadow, get rid of CSS
gradients and box background

501
00:25:46,650 --> 00:25:49,462
size et cetera.

502
00:25:49,462 --> 00:25:54,150
If you don't have any CSS, it's
going to be really fast.

503
00:25:54,150 --> 00:25:56,080
But that's not feasible.

504
00:25:56,080 --> 00:26:00,090
So there's a few ways
to deal with this.

505
00:26:00,090 --> 00:26:02,560
In diagnosing long paints,
like I said, we can just

506
00:26:02,560 --> 00:26:05,900
Display-None to remove it out
of the geometry of the page,

507
00:26:05,900 --> 00:26:08,090
and it won't contribute
to layout at all.

508
00:26:08,090 --> 00:26:10,040
With Visibility-hidden, it won't
contribute to paint.

509
00:26:10,040 --> 00:26:13,830
So we can just toggle entire
elements off and on like this.

510
00:26:13,830 --> 00:26:16,780
We measure it with either a
timeline recording like I

511
00:26:16,780 --> 00:26:19,750
showed or this new experimental
mode, which we

512
00:26:19,750 --> 00:26:23,120
hope to be able to share
in a public build soon.

513
00:26:23,120 --> 00:26:25,070
And then just identify
and iterate.

514
00:26:25,070 --> 00:26:28,900
Now if there is a situation like
you're asking about where

515
00:26:28,900 --> 00:26:32,780
it is bad, what do you do, you
can Remove Styles, you can try

516
00:26:32,780 --> 00:26:35,960
and simplify some of the styles
maybe you don't need a

517
00:26:35,960 --> 00:26:40,920
60 pixel blur on your box shadow
with like 0.2 alpha and

518
00:26:40,920 --> 00:26:43,410
you could actually just change
it to be able to smaller and

519
00:26:43,410 --> 00:26:45,730
harder alpha.

520
00:26:45,730 --> 00:26:50,390
Talk with your designer and
identify a different sort of

521
00:26:50,390 --> 00:26:51,550
interaction frame.

522
00:26:51,550 --> 00:26:55,250
Let's say we had a modal alert
coming up, now I can't imagine

523
00:26:55,250 --> 00:26:58,650
the situation where you would
animate a box shadow from

524
00:26:58,650 --> 00:27:01,710
being really big into small.

525
00:27:01,710 --> 00:27:03,980
And that would look cool.

526
00:27:03,980 --> 00:27:09,170
But a much faster way of doing
this is doing a 2D transform

527
00:27:09,170 --> 00:27:14,780
with translate just to scale it
in from the top right and

528
00:27:14,780 --> 00:27:16,840
have a little bit of bounce.

529
00:27:16,840 --> 00:27:18,210
That's going to sit
on the GPU.

530
00:27:18,210 --> 00:27:19,500
Be really, really fast.

531
00:27:19,500 --> 00:27:21,910
So there's some situations where
you can kind of work

532
00:27:21,910 --> 00:27:24,220
with your designer to find a new
style of interaction that

533
00:27:24,220 --> 00:27:26,290
works a lot better.

534
00:27:26,290 --> 00:27:31,140
And lastly, I know this is not
cool at all to say, but you

535
00:27:31,140 --> 00:27:34,293
can use images instead
of using CSS.

536
00:27:34,293 --> 00:27:35,160
ADDY OSMANI: Oh my god.

537
00:27:35,160 --> 00:27:36,170
PAUL IRISH: I said it.

538
00:27:36,170 --> 00:27:38,150
That was terrible.

539
00:27:38,150 --> 00:27:48,030
So gradients or box shadow,
border image can work.

540
00:27:48,030 --> 00:27:50,600
So look into it.

541
00:27:50,600 --> 00:27:53,100
This is not like a guarantee
that images are

542
00:27:53,100 --> 00:27:54,490
always faster than CSS.

543
00:27:54,490 --> 00:27:56,200
But it's something that you want
to try out especially, if

544
00:27:56,200 --> 00:27:58,175
you're measuring things and
identifying that these are

545
00:27:58,175 --> 00:28:02,030
your bottlenecks and this is
possibly something to fix.

546
00:28:02,030 --> 00:28:04,530
You always want to measure
before and after to identify

547
00:28:04,530 --> 00:28:08,830
is this really worth
it, maybe not.

548
00:28:08,830 --> 00:28:12,960
So that's essentially
what we can do.

549
00:28:12,960 --> 00:28:18,420
Addy, can you talk a little bit
about another part of the

550
00:28:18,420 --> 00:28:20,890
timeline that I didn't get to?

551
00:28:20,890 --> 00:28:21,300
ADDY OSMANI: Sure.

552
00:28:21,300 --> 00:28:24,450
So we're going to be talking
about Memory mode.

553
00:28:24,450 --> 00:28:27,700
Paul talked about Events and
he talked about Frames.

554
00:28:27,700 --> 00:28:30,010
But Memory mode is really cool
because it gives you an

555
00:28:30,010 --> 00:28:34,250
overview of your application's
memory usage over time.

556
00:28:34,250 --> 00:28:37,610
It can help you diagnose whether
some of the initial

557
00:28:37,610 --> 00:28:40,420
symptoms about whether you
might have a memory link.

558
00:28:40,420 --> 00:28:42,480
So Paul has just opened
up a little demo

559
00:28:42,480 --> 00:28:44,160
application we have.

560
00:28:44,160 --> 00:28:49,040
And we're going to switch over
to the Memory Paint.

561
00:28:49,040 --> 00:28:51,260
Now this application
is quite simple.

562
00:28:51,260 --> 00:28:54,970
The Idea is that you scroll
through it, and it will keep

563
00:28:54,970 --> 00:28:56,560
displaying new images.

564
00:28:56,560 --> 00:28:59,320
And when you click on an image,
it will display a

565
00:28:59,320 --> 00:29:00,570
larger version of it.

566
00:29:00,570 --> 00:29:02,650

567
00:29:02,650 --> 00:29:05,980
We've got a clear timeline,
let's record a new session and

568
00:29:05,980 --> 00:29:07,230
perform some actions.

569
00:29:07,230 --> 00:29:11,010

570
00:29:11,010 --> 00:29:12,745
So as you can see, our timeline
is populating.

571
00:29:12,745 --> 00:29:15,350
Can we click on some of those
images just to see

572
00:29:15,350 --> 00:29:16,600
what impact that has?

573
00:29:16,600 --> 00:29:19,600

574
00:29:19,600 --> 00:29:20,320
Awesome.

575
00:29:20,320 --> 00:29:23,730
Let's stop that.

576
00:29:23,730 --> 00:29:25,080
So cool.

577
00:29:25,080 --> 00:29:26,910
Again, in the top view, you've
got your Summary view.

578
00:29:26,910 --> 00:29:29,190
And in the bottom, you've
got a Details view.

579
00:29:29,190 --> 00:29:32,480
And in the Summary view, you'll
notice the memory usage

580
00:29:32,480 --> 00:29:35,220
increasing as you move between
the different parts of your

581
00:29:35,220 --> 00:29:36,570
applications.

582
00:29:36,570 --> 00:29:39,560
The light-blue area represents
the amount of memory being

583
00:29:39,560 --> 00:29:42,180
used by your app at
a particular time.

584
00:29:42,180 --> 00:29:45,110
And the remaining white area
represents the total amount of

585
00:29:45,110 --> 00:29:47,470
allocated memory that
you've got.

586
00:29:47,470 --> 00:29:48,450
And this is quite normal.

587
00:29:48,450 --> 00:29:51,140
This type of a curve is actually
quite normal because

588
00:29:51,140 --> 00:29:53,300
garbage collection is going to
be happening during the course

589
00:29:53,300 --> 00:29:54,750
of all the interactions.

590
00:29:54,750 --> 00:29:58,783
And v8, the JavaScript engine
being used by Chrome, is going

591
00:29:58,783 --> 00:30:00,810
to be running rounds of garbage
collection when your

592
00:30:00,810 --> 00:30:02,320
app is idle.

593
00:30:02,320 --> 00:30:05,860
Now, taking a look at the
Details view, which is one at

594
00:30:05,860 --> 00:30:08,970
the very bottom, you can see
we've got some sort of curve.

595
00:30:08,970 --> 00:30:13,340
Now a few cycles after garbage
collection, ideally your

596
00:30:13,340 --> 00:30:16,770
memory profile, so that
curve, should be going

597
00:30:16,770 --> 00:30:18,040
a little bit flat.

598
00:30:18,040 --> 00:30:20,650
And if it's constantly going up
between different garbage

599
00:30:20,650 --> 00:30:25,060
collection cycles, you might
have a memory leak.

600
00:30:25,060 --> 00:30:27,300
That's a problem.

601
00:30:27,300 --> 00:30:30,550
Now going back to the Summary
view at the very top, another

602
00:30:30,550 --> 00:30:33,370
way that you can tell that there
might be a problem is if

603
00:30:33,370 --> 00:30:35,690
you see a sawtooth.

604
00:30:35,690 --> 00:30:38,060
Now, that basically represents
the cost of doing

605
00:30:38,060 --> 00:30:38,890
business in your app.

606
00:30:38,890 --> 00:30:43,350
So let's say that you were using
RequestAnimationFrame,

607
00:30:43,350 --> 00:30:45,110
that might give you a little
bit of garbage.

608
00:30:45,110 --> 00:30:47,890
But it's the steepness of your
curve that you need to keep an

609
00:30:47,890 --> 00:30:51,390
eye on, because if that curve is
really steep, it means that

610
00:30:51,390 --> 00:30:53,720
you're generating a
lot of garbage.

611
00:30:53,720 --> 00:30:57,100
Similarly, in the Details view,
if you've got a STUFF

612
00:30:57,100 --> 00:30:59,730
function, that is also
a sign that you might

613
00:30:59,730 --> 00:31:00,980
have a memory leak.

614
00:31:00,980 --> 00:31:03,760

615
00:31:03,760 --> 00:31:06,620
On the next episode, we're
going to be talking you

616
00:31:06,620 --> 00:31:08,600
through a tool called
the Heap Profiler.

617
00:31:08,600 --> 00:31:12,930
It will actually help you use
some of this information to go

618
00:31:12,930 --> 00:31:15,910
and dig down and find out
exactly what is causing the

619
00:31:15,910 --> 00:31:20,280
memory leak and how you can
go and you can fix it.

620
00:31:20,280 --> 00:31:23,220
Now, one thing that I missed
out on, if we go back to

621
00:31:23,220 --> 00:31:26,910
Timeline very quickly and take
a look at the left, is there

622
00:31:26,910 --> 00:31:29,330
are three pieces of information
on the left.

623
00:31:29,330 --> 00:31:32,780
We've got the Document Count,
the Dome Node account, and the

624
00:31:32,780 --> 00:31:34,140
Event Listener account.

625
00:31:34,140 --> 00:31:36,890
Now, the DOM Node count shows
the number of created DOM

626
00:31:36,890 --> 00:31:40,380
nodes that are still being
held in memory.

627
00:31:40,380 --> 00:31:43,020
And the others represent the
same for your Event Listeners

628
00:31:43,020 --> 00:31:46,610
and your Document instances,
like your IFrames.

629
00:31:46,610 --> 00:31:49,500
And the Timeline view allows you
to filter down on these.

630
00:31:49,500 --> 00:31:52,297
So if you wanted to, for
example, just display the DOM

631
00:31:52,297 --> 00:31:55,420
Node counts, you could just
deselect the other options as

632
00:31:55,420 --> 00:31:56,670
Paul has just shown you.

633
00:31:56,670 --> 00:32:01,580

634
00:32:01,580 --> 00:32:04,940
Just like any of the other
panels, you can select a range

635
00:32:04,940 --> 00:32:08,240
in your Summary view and drill
down to more specific pieces

636
00:32:08,240 --> 00:32:09,700
of information.

637
00:32:09,700 --> 00:32:12,830
And hopefully, on the next
episode, we're going to show

638
00:32:12,830 --> 00:32:15,800
you how you can take this
information that might suggest

639
00:32:15,800 --> 00:32:18,916
you have a memory leak and
actually help you fix it.

640
00:32:18,916 --> 00:32:19,820
PAUL IRISH: Nice.

641
00:32:19,820 --> 00:32:20,780
OK.

642
00:32:20,780 --> 00:32:24,250
So one last thing I just want
to show real quick, which is

643
00:32:24,250 --> 00:32:28,640
that for all these things we
can improve the situation,

644
00:32:28,640 --> 00:32:30,180
especially on this machine.

645
00:32:30,180 --> 00:32:32,350
This is a very recent machine.

646
00:32:32,350 --> 00:32:36,540
And I can get 60 FPS or I could
kill my memory leaks,

647
00:32:36,540 --> 00:32:39,780
but what about on a
mobile situation.

648
00:32:39,780 --> 00:32:42,980
Now let's handle that.

649
00:32:42,980 --> 00:32:46,020
So I want to show
this real quick.

650
00:32:46,020 --> 00:32:49,970
So what I have on my phone
right here is I have an

651
00:32:49,970 --> 00:32:54,960
instance of New York Times
Skimmer running

652
00:32:54,960 --> 00:32:56,840
on Carbon on Android.

653
00:32:56,840 --> 00:33:03,710
And I also have my Chrome
here connected to

654
00:33:03,710 --> 00:33:07,070
remote debug that instance.

655
00:33:07,070 --> 00:33:11,153
It looks like I need
to refresh this.

656
00:33:11,153 --> 00:33:14,360

657
00:33:14,360 --> 00:33:15,610
Come back.

658
00:33:15,610 --> 00:33:19,130

659
00:33:19,130 --> 00:33:20,380
There we go.

660
00:33:20,380 --> 00:33:22,860

661
00:33:22,860 --> 00:33:24,700
Nice.

662
00:33:24,700 --> 00:33:25,070
All right.

663
00:33:25,070 --> 00:33:28,890
So now I'm remote debugging
my Chrome on Android.

664
00:33:28,890 --> 00:33:35,776
And what I'm going to do is
very similar to before.

665
00:33:35,776 --> 00:33:37,325
Oh, it's this guy.

666
00:33:37,325 --> 00:33:40,170

667
00:33:40,170 --> 00:33:42,330
You might not be able to get
to see this unfortunately.

668
00:33:42,330 --> 00:33:45,580

669
00:33:45,580 --> 00:33:47,220
ADDY OSMANI: I imagine
it looks very cool.

670
00:33:47,220 --> 00:33:50,650
PAUL IRISH: It looks so cool.

671
00:33:50,650 --> 00:33:53,110
Oh.

672
00:33:53,110 --> 00:33:54,790
All right, here we go.

673
00:33:54,790 --> 00:33:58,440
Great, so it's a little hard
to see in this situation.

674
00:33:58,440 --> 00:34:01,500
But I'm just navigating the
sections up and down before

675
00:34:01,500 --> 00:34:04,440
like I was on the desktop.

676
00:34:04,440 --> 00:34:09,659
And we're able to see down
here a similar situation.

677
00:34:09,659 --> 00:34:15,500
But the difference is that what
the events actually show

678
00:34:15,500 --> 00:34:20,060
is that whereas before, remember
I had that very long

679
00:34:20,060 --> 00:34:23,370
sequence of parse events
that took about 60

680
00:34:23,370 --> 00:34:25,980
milliseconds on desktop.

681
00:34:25,980 --> 00:34:28,360
On the mobile situation, that
exact same sequences taken

682
00:34:28,360 --> 00:34:30,520
around 250 milliseconds.

683
00:34:30,520 --> 00:34:34,560
So it gives you a little bit
of context as far as even

684
00:34:34,560 --> 00:34:37,340
though you take care of an
optimization on desktop, you

685
00:34:37,340 --> 00:34:38,639
really have to think
about what the

686
00:34:38,639 --> 00:34:40,350
cost is here on mobile.

687
00:34:40,350 --> 00:34:43,580
And I'm really excited about
these tools telling a much

688
00:34:43,580 --> 00:34:50,659
richer story about how exactly
things are taking what are

689
00:34:50,659 --> 00:34:54,219
your costs and expense of
operations on a mobile device

690
00:34:54,219 --> 00:34:56,600
where the story is much more
different than what you're

691
00:34:56,600 --> 00:34:58,870
used to on desktop.

692
00:34:58,870 --> 00:35:02,950
So I guess, again, to wrap up,
Timeline gives a great overall

693
00:35:02,950 --> 00:35:05,280
view of the picture and allows
you to dive into exactly what

694
00:35:05,280 --> 00:35:07,840
is causing you costs.

695
00:35:07,840 --> 00:35:10,940
A lot of these features that I
showed and that Addy showed

696
00:35:10,940 --> 00:35:13,790
are in the Canary version
of Chrome that can run

697
00:35:13,790 --> 00:35:14,990
side-by-side with Stable.

698
00:35:14,990 --> 00:35:16,710
We recommend trying that out.

699
00:35:16,710 --> 00:35:19,700

700
00:35:19,700 --> 00:35:22,880
But they're making their way
to Stable very quickly.

701
00:35:22,880 --> 00:35:26,480
And so that's about it.

702
00:35:26,480 --> 00:35:27,820
ADDY OSMANI: Awesome.

703
00:35:27,820 --> 00:35:29,540
So just take a look
at the questions

704
00:35:29,540 --> 00:35:31,740
we've got real quick.

705
00:35:31,740 --> 00:35:32,700
[? Tinta Suresh ?]

706
00:35:32,700 --> 00:35:36,310
from New Delhi asks, "some
features in CSS3 are still

707
00:35:36,310 --> 00:35:38,470
developing, and they're slow.

708
00:35:38,470 --> 00:35:41,520
If RequestAnimationFrame is
used, will it affect the

709
00:35:41,520 --> 00:35:43,830
performance of map?"

710
00:35:43,830 --> 00:35:46,745
PAUL IRISH: What was the
last part of that?

711
00:35:46,745 --> 00:35:48,970
ADDY OSMANI: If
RequestAnimationFrame is used

712
00:35:48,970 --> 00:35:51,860
instead, will it affect the
performance of map?

713
00:35:51,860 --> 00:35:54,100
PAUL IRISH: Yes.

714
00:35:54,100 --> 00:35:55,350
Good question.

715
00:35:55,350 --> 00:36:00,600

716
00:36:00,600 --> 00:36:02,080
Yeah, there's a great
answer to this.

717
00:36:02,080 --> 00:36:06,180

718
00:36:06,180 --> 00:36:10,480
You're probably used to doing
something like animating with

719
00:36:10,480 --> 00:36:13,130
jQuery an element from
left to right.

720
00:36:13,130 --> 00:36:15,420
And so you'll grab the Element
in jQuery and you'll say

721
00:36:15,420 --> 00:36:19,530
animate and give it a pixel
offset and give it a speed.

722
00:36:19,530 --> 00:36:21,940
And so what that is actually
doing is just running a set

723
00:36:21,940 --> 00:36:30,780
timeout loop to operate about
every 10 milliseconds to

724
00:36:30,780 --> 00:36:32,350
change the inline style.

725
00:36:32,350 --> 00:36:37,810
Now instead, you can use
something like the jQuery

726
00:36:37,810 --> 00:36:39,940
RequestAnimationFrame plug-in
that just swaps in the

727
00:36:39,940 --> 00:36:40,920
animation internals.

728
00:36:40,920 --> 00:36:45,570
It was written by a jQuery Core
Development team member.

729
00:36:45,570 --> 00:36:48,260
It swaps in the animation
internals to use

730
00:36:48,260 --> 00:36:50,950
RequestAnimationFrame instead.

731
00:36:50,950 --> 00:36:53,960
The impact that this has
is pretty significant.

732
00:36:53,960 --> 00:36:56,790
With a 10 milliseconds set
timeout, which is how jQuery

733
00:36:56,790 --> 00:37:01,950
normally does it, you end
up missing frames.

734
00:37:01,950 --> 00:37:06,140
So if we're shooting to have a
new frame available to the GPU

735
00:37:06,140 --> 00:37:12,670
60 times a second, giving the
browser something new every 10

736
00:37:12,670 --> 00:37:16,640
milliseconds does not
synchronize up well with

737
00:37:16,640 --> 00:37:18,390
[INAUDIBLE], the screen
expecting

738
00:37:18,390 --> 00:37:20,300
60 changes per second.

739
00:37:20,300 --> 00:37:24,510
And so about half of the
frames that jQuery is

740
00:37:24,510 --> 00:37:27,590
generating by way of setting
an inline style never even

741
00:37:27,590 --> 00:37:31,210
make it to the screen,
which is bad.

742
00:37:31,210 --> 00:37:32,870
You're doing all the work
and the users is

743
00:37:32,870 --> 00:37:35,130
not getting the payoff.

744
00:37:35,130 --> 00:37:38,240
And so things can be
a lot less smooth.

745
00:37:38,240 --> 00:37:41,580
So always use
RequestAnimationFrame,

746
00:37:41,580 --> 00:37:43,830
certainly if you're doing Canvas
or WebGL, but if you're

747
00:37:43,830 --> 00:37:46,700
doing any sort of DOM animation,
like changing

748
00:37:46,700 --> 00:37:48,380
inline styles.

749
00:37:48,380 --> 00:37:51,420
And if you're doing any
scrolling parallax situations

750
00:37:51,420 --> 00:37:55,520
where as you scroll positions
are kind of

751
00:37:55,520 --> 00:37:56,780
changing and things--

752
00:37:56,780 --> 00:37:58,130
popular these days--

753
00:37:58,130 --> 00:38:01,740
this is also another
great case to use

754
00:38:01,740 --> 00:38:04,950
RequestAnimationFrame to send
up new updates to the screen

755
00:38:04,950 --> 00:38:07,360
rather than putting
it all inside a

756
00:38:07,360 --> 00:38:10,610
single on scroll handler.

757
00:38:10,610 --> 00:38:12,250
And so that's basically
the best way

758
00:38:12,250 --> 00:38:15,470
to handle that situation.

759
00:38:15,470 --> 00:38:16,150
ADDY OSMANI: Cool.

760
00:38:16,150 --> 00:38:18,840
And we'll be sure to show
the link to jQuery

761
00:38:18,840 --> 00:38:20,850
RequestAnimationFrame at the
show frameworks, check it out.

762
00:38:20,850 --> 00:38:23,060
PAUL IRISH: Yeah, absolutely.

763
00:38:23,060 --> 00:38:24,490
Thank you everyone
for joining, and

764
00:38:24,490 --> 00:38:26,530
see you next time.

765
00:38:26,530 --> 00:38:27,580
ADDY OSMANI: See
you next time.

766
00:38:27,580 --> 00:38:28,830
Bye.

767
00:38:28,830 --> 00:38:55,000

