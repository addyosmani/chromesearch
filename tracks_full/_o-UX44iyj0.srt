1
00:00:00,000 --> 00:00:10,059

2
00:00:10,059 --> 00:00:13,620
PETE LEPAGE: Well, welcome
everybody to another addition

3
00:00:13,620 --> 00:00:17,670
"Chrome Apps Office Hours."
Today we've got Joe Marini,

4
00:00:17,670 --> 00:00:19,440
who is joining us from Mountain
View and is going to

5
00:00:19,440 --> 00:00:24,020
be talking about the new Synced
File System APIs.

6
00:00:24,020 --> 00:00:26,590
Joe, why don't I pass it over
to you and you can give it a

7
00:00:26,590 --> 00:00:28,150
little introduction?

8
00:00:28,150 --> 00:00:28,930
JOE MARINI: All right,
I appreciate that

9
00:00:28,930 --> 00:00:29,620
Pete, thanks very much.

10
00:00:29,620 --> 00:00:31,160
Hi everyone, I am Joe Marini.

11
00:00:31,160 --> 00:00:34,690
I am a developer advocate here
on the Chrome team and I work

12
00:00:34,690 --> 00:00:38,150
on Chrome Apps, Chrome
Extensions, Chrome Web Store,

13
00:00:38,150 --> 00:00:39,170
all things Chrome.

14
00:00:39,170 --> 00:00:40,720
Chrome all the time,
Chrome everywhere.

15
00:00:40,720 --> 00:00:43,275
And yes, today I'm going to be
talking about the Sync File

16
00:00:43,275 --> 00:00:47,230
System The Sync File System
API is a new feature.

17
00:00:47,230 --> 00:00:48,240
It's on the bleeding edge.

18
00:00:48,240 --> 00:00:51,980
It's right now only in M27
Canary, so if you're going to

19
00:00:51,980 --> 00:00:55,870
follow along with me here or
work on this on your own later

20
00:00:55,870 --> 00:00:58,630
you want to make sure that you
have the version of M27 Canary

21
00:00:58,630 --> 00:01:00,350
build on your computer.

22
00:01:00,350 --> 00:01:04,450
So the Synchronized File System
is our API addition

23
00:01:04,450 --> 00:01:08,550
that's layered on top of the
existing HTML5 File System for

24
00:01:08,550 --> 00:01:10,010
Chrome Apps and Extensions.

25
00:01:10,010 --> 00:01:13,480
And it basically allows you to
build apps and extensions that

26
00:01:13,480 --> 00:01:21,250
synchronize data via files
using a cloud back end.

27
00:01:21,250 --> 00:01:24,210
Now we architected it so it
can work with a variety of

28
00:01:24,210 --> 00:01:24,890
cloud back ends.

29
00:01:24,890 --> 00:01:27,070
Right now the one we
ship with is Drive.

30
00:01:27,070 --> 00:01:28,995
So if you're using
Google Drive--

31
00:01:28,995 --> 00:01:31,870
I'm assuming most of you are
familiar with Google Drive--

32
00:01:31,870 --> 00:01:33,920
you can build applications
that sync files with each

33
00:01:33,920 --> 00:01:36,530
other via the Google
Drive back end.

34
00:01:36,530 --> 00:01:39,110
Now you might be thinking to
yourself, well, wait a second

35
00:01:39,110 --> 00:01:42,380
the Chrome API already has a
synchronization method for

36
00:01:42,380 --> 00:01:44,880
data, it's called Chrome
storage.sync.

37
00:01:44,880 --> 00:01:46,230
How is this different
than that?

38
00:01:46,230 --> 00:01:50,400
So look at it this way, Chrome
storage.sync is sort of our

39
00:01:50,400 --> 00:01:53,630
synchronized analog to the
existing local storage

40
00:01:53,630 --> 00:01:55,870
mechanism that you have
in HTML5, right?

41
00:01:55,870 --> 00:01:58,950
You can store individual
objects, pieces of data, and

42
00:01:58,950 --> 00:02:00,660
then using Chrome storage.sync,
you get the same

43
00:02:00,660 --> 00:02:04,280
kind of functionality but it
gets synced between your app

44
00:02:04,280 --> 00:02:07,100
or extension via the
network back end.

45
00:02:07,100 --> 00:02:09,479
And those are for small
individual pieces of data.

46
00:02:09,479 --> 00:02:15,580
So the Sync File System API is
different in that it's the

47
00:02:15,580 --> 00:02:19,420
synced analog to the
HTML5 File System.

48
00:02:19,420 --> 00:02:22,670
So for larger pieces of data,
especially those exceeding

49
00:02:22,670 --> 00:02:26,350
several megabytes file size, you
can have the same feature

50
00:02:26,350 --> 00:02:29,980
of syncing via files in addition
to the ability to

51
00:02:29,980 --> 00:02:32,560
sync individual pieces
of data.

52
00:02:32,560 --> 00:02:35,370
So with that, if you take a look
at the screen over here,

53
00:02:35,370 --> 00:02:38,070
I've got the Sync File
System API up.

54
00:02:38,070 --> 00:02:41,380
Now again, I want to emphasize
that this is still in

55
00:02:41,380 --> 00:02:42,220
development.

56
00:02:42,220 --> 00:02:44,970
It's in the Canary, so this
API might change slightly

57
00:02:44,970 --> 00:02:47,560
between now and when you
use it in the future.

58
00:02:47,560 --> 00:02:50,790
So at the moment we have a
couple of additions to the

59
00:02:50,790 --> 00:02:51,760
File System API.

60
00:02:51,760 --> 00:02:53,480
And it's important to point
out that when you use this

61
00:02:53,480 --> 00:02:56,930
API, the objects you'll be
working with are pretty much

62
00:02:56,930 --> 00:02:59,510
HTML5 File System Objects.

63
00:02:59,510 --> 00:03:02,070
So for example, you see the
first API call there,

64
00:03:02,070 --> 00:03:05,730
requestFileSystem, that takes
a call back just like the

65
00:03:05,730 --> 00:03:08,040
regular HTML5 File
System one does.

66
00:03:08,040 --> 00:03:10,850
And it gives you a File System
Object that you can use in

67
00:03:10,850 --> 00:03:12,905
your callback to work
with files.

68
00:03:12,905 --> 00:03:15,550
So that's how you request
the Sync File System--

69
00:03:15,550 --> 00:03:18,400
is the requestFileSystem
API call.

70
00:03:18,400 --> 00:03:22,070
You can also see what the
current usage and quota of the

71
00:03:22,070 --> 00:03:24,240
Sync File System is
by using the Get

72
00:03:24,240 --> 00:03:26,210
Usage and Quota function.

73
00:03:26,210 --> 00:03:29,210
Just a bit of a caveat, right
now for the cloud side of

74
00:03:29,210 --> 00:03:33,380
things, this function probably
isn't going to return the

75
00:03:33,380 --> 00:03:33,820
right information.

76
00:03:33,820 --> 00:03:36,330
We're working on that, but just
be aware of that if you

77
00:03:36,330 --> 00:03:38,350
try this demo later on.

78
00:03:38,350 --> 00:03:40,730
So that returns an object
called Storage Info.

79
00:03:40,730 --> 00:03:42,290
And there's a couple properties
you can look at to

80
00:03:42,290 --> 00:03:45,340
see how much storage you're
using versus how

81
00:03:45,340 --> 00:03:46,770
much your quota is.

82
00:03:46,770 --> 00:03:49,800
And there's a couple of other
API functions that have to do

83
00:03:49,800 --> 00:03:51,800
with the status of files.

84
00:03:51,800 --> 00:03:53,430
Because obviously, when you're
working with synchronized

85
00:03:53,430 --> 00:03:57,230
files, there's going to be time
periods when a file is

86
00:03:57,230 --> 00:03:59,250
going from one destination to
another, or it might have

87
00:03:59,250 --> 00:04:01,520
changed and that change
needs to propagate

88
00:04:01,520 --> 00:04:03,060
across all the instances.

89
00:04:03,060 --> 00:04:04,800
So one of these is an
API call, one of

90
00:04:04,800 --> 00:04:06,060
these is an event listener.

91
00:04:06,060 --> 00:04:08,430
So let's go to the event
listener first, that's the

92
00:04:08,430 --> 00:04:10,880
fourth API down there, and
that's the on-file status

93
00:04:10,880 --> 00:04:11,980
changed event.

94
00:04:11,980 --> 00:04:13,220
And you use this like
you use any other

95
00:04:13,220 --> 00:04:14,760
Chrome API event listener.

96
00:04:14,760 --> 00:04:16,720
We have an Add Listener call.

97
00:04:16,720 --> 00:04:21,269
And the callback that will get
called when the file status

98
00:04:21,269 --> 00:04:23,960
changed event fires is going
to give you a piece of

99
00:04:23,960 --> 00:04:26,280
information about what
it was that changed.

100
00:04:26,280 --> 00:04:28,860
So for example, it'll tell you
the file entry object of the

101
00:04:28,860 --> 00:04:30,010
file that changed.

102
00:04:30,010 --> 00:04:32,080
It will give you a status
of what the change was.

103
00:04:32,080 --> 00:04:35,890
And right now the status can be
either synced, pending, or

104
00:04:35,890 --> 00:04:37,160
conflicting.

105
00:04:37,160 --> 00:04:41,090
The action is the sync action
that's going to take and it

106
00:04:41,090 --> 00:04:43,260
could be either added,
updated, or deleted.

107
00:04:43,260 --> 00:04:45,440
So it tells you what happened
to the file.

108
00:04:45,440 --> 00:04:48,280
And the direction is the sync
direction for the event.

109
00:04:48,280 --> 00:04:50,490
So these directions either could
be going from local to

110
00:04:50,490 --> 00:04:52,410
remote or remote to local.

111
00:04:52,410 --> 00:04:58,030
So the event tells you about
the file change event.

112
00:04:58,030 --> 00:05:00,820
So going back a little bit,
we have the file status.

113
00:05:00,820 --> 00:05:03,730
You can actually call this
function at any time on a file

114
00:05:03,730 --> 00:05:05,470
entry that you have and it will
tell you what the status

115
00:05:05,470 --> 00:05:06,100
of the file is.

116
00:05:06,100 --> 00:05:07,840
Again, it's going to be
synced, pending, or

117
00:05:07,840 --> 00:05:09,050
conflicting.

118
00:05:09,050 --> 00:05:12,620
Currently, we don't have
an API to help you

119
00:05:12,620 --> 00:05:14,360
with resolving conflicts.

120
00:05:14,360 --> 00:05:16,680
We are actually considering
working on that.

121
00:05:16,680 --> 00:05:19,450
So I figure that might come up
in the questions later, but

122
00:05:19,450 --> 00:05:21,030
let me just get that out
of the way right now.

123
00:05:21,030 --> 00:05:24,610
There's no dedicated API right
now to resolve conflicts, but

124
00:05:24,610 --> 00:05:27,170
that is something that we're
looking very seriously at.

125
00:05:27,170 --> 00:05:29,580
OK, so that's the API.

126
00:05:29,580 --> 00:05:33,160
Let me take a look over here in
the Google Chrome GitHub.

127
00:05:33,160 --> 00:05:35,680
So the sample app I'm going to
be showing you today is called

128
00:05:35,680 --> 00:05:38,480
the syncfs-editor project.

129
00:05:38,480 --> 00:05:42,000
And if you go to GitHub under
the Google Chrome category,

130
00:05:42,000 --> 00:05:44,120
you scroll down here, you'll see
it's this guy right here,

131
00:05:44,120 --> 00:05:45,590
syncfs-editor.

132
00:05:45,590 --> 00:05:45,900
PETE LEPAGE: Cool.

133
00:05:45,900 --> 00:05:48,490
And the link for that is
up on screen for those

134
00:05:48,490 --> 00:05:49,210
folks who are watching.

135
00:05:49,210 --> 00:05:50,000
JOE MARINI: OK, great.

136
00:05:50,000 --> 00:05:51,720
So that link right there.

137
00:05:51,720 --> 00:05:54,025
So when I click on it, you can
see this is the code I'm going

138
00:05:54,025 --> 00:05:54,700
to be working with.

139
00:05:54,700 --> 00:05:57,540
So if you want to follow along
or download it for later, this

140
00:05:57,540 --> 00:05:58,800
is where you go to get it.

141
00:05:58,800 --> 00:06:01,340
All right, let me jump over to
my Extensions tab because I've

142
00:06:01,340 --> 00:06:03,120
now got this loaded
as an unpacked

143
00:06:03,120 --> 00:06:04,830
extension in my Canary.

144
00:06:04,830 --> 00:06:07,550
And I'm going to go ahead
and launch it.

145
00:06:07,550 --> 00:06:11,026
And let me bring it down
so we can all see it.

146
00:06:11,026 --> 00:06:12,010
OK.

147
00:06:12,010 --> 00:06:12,970
So this is the app.

148
00:06:12,970 --> 00:06:14,780
Now it's pretty straightforward,
basic

149
00:06:14,780 --> 00:06:15,770
application.

150
00:06:15,770 --> 00:06:18,500
On the right-hand side there,
you see an editing area.

151
00:06:18,500 --> 00:06:21,590
On the left-hand side, there's
an area where file information

152
00:06:21,590 --> 00:06:22,640
is going to show up.

153
00:06:22,640 --> 00:06:24,340
And I've got two buttons
on the top there.

154
00:06:24,340 --> 00:06:26,790
One is called Syncable, one
is called Temporary.

155
00:06:26,790 --> 00:06:30,194
This particular sample app
uses both the HTML5 File

156
00:06:30,194 --> 00:06:32,850
System's temporary storage so
that you can contrast its

157
00:06:32,850 --> 00:06:35,870
usage with the Syncable
File System.

158
00:06:35,870 --> 00:06:37,310
So let's just go ahead
and create a file.

159
00:06:37,310 --> 00:06:40,610
I'm going to go to my text area
and I'm just going to

160
00:06:40,610 --> 00:06:43,020
type, you know, this
is a file.

161
00:06:43,020 --> 00:06:46,010
And I'm going to click
the Save As button.

162
00:06:46,010 --> 00:06:48,510
And I'll save it as, let's
see, testfile1.txt.

163
00:06:48,510 --> 00:06:51,580

164
00:06:51,580 --> 00:06:52,350
I'll click Save.

165
00:06:52,350 --> 00:06:55,020
Now watch the left-hand column
over there underneath where it

166
00:06:55,020 --> 00:06:57,050
says Usage and Reload.

167
00:06:57,050 --> 00:06:58,750
I'm going to click Save.

168
00:06:58,750 --> 00:07:01,330
So you can see now that it's--
there's that little icon

169
00:07:01,330 --> 00:07:02,570
showing that it's syncing.

170
00:07:02,570 --> 00:07:04,440
And you could see-- oh, in this
case, it looks like have

171
00:07:04,440 --> 00:07:05,730
a little bit of an error.

172
00:07:05,730 --> 00:07:08,190
So I'm wondering if it's because
my authentication in

173
00:07:08,190 --> 00:07:10,110
my Google Drive ran out.

174
00:07:10,110 --> 00:07:12,850
But in any case, you can see
that we're taking advantage of

175
00:07:12,850 --> 00:07:16,440
the status changed events there
to update the icon that

176
00:07:16,440 --> 00:07:17,800
goes with the file.

177
00:07:17,800 --> 00:07:20,560
So in this case, it looks
like the sync broke.

178
00:07:20,560 --> 00:07:22,960
Let me just make
a change to it.

179
00:07:22,960 --> 00:07:25,180
Click Save.

180
00:07:25,180 --> 00:07:27,510
And it's applying the
local change.

181
00:07:27,510 --> 00:07:30,560
Yeah, I think my authentication
probably timed

182
00:07:30,560 --> 00:07:32,610
out on me in Google Drive.

183
00:07:32,610 --> 00:07:33,920
But anyway, that's not
why we're here.

184
00:07:33,920 --> 00:07:35,120
We're not here to--

185
00:07:35,120 --> 00:07:38,580
let's just go over to the code
and see what's going on.

186
00:07:38,580 --> 00:07:40,320
All right.

187
00:07:40,320 --> 00:07:43,280
So this is the code for the
sample and let me start off by

188
00:07:43,280 --> 00:07:46,320
taking a look at
the HTML file.

189
00:07:46,320 --> 00:07:49,330
So this is the user interface
for the sample.

190
00:07:49,330 --> 00:07:50,595
You can see that it's
an HTML file.

191
00:07:50,595 --> 00:07:53,520
It's pretty simple, basically
just a bunch of divs that hold

192
00:07:53,520 --> 00:07:56,910
the editor and the area where
we see file information,

193
00:07:56,910 --> 00:07:58,490
that's pretty much about it.

194
00:07:58,490 --> 00:08:00,960
There's also a couple of classes
that we build, one is

195
00:08:00,960 --> 00:08:02,620
called the Editor class.

196
00:08:02,620 --> 00:08:05,550
This basically handles all the
text editing for the sample.

197
00:08:05,550 --> 00:08:07,960
So if you want to look in here
to see how we're doing, for

198
00:08:07,960 --> 00:08:11,340
example, showing the dialogue
or building the editor,

199
00:08:11,340 --> 00:08:12,520
that's up to you.

200
00:08:12,520 --> 00:08:15,860
So there's another class we
have called the Filer.

201
00:08:15,860 --> 00:08:19,100
This class, again, just a
bunch of utilities for

202
00:08:19,100 --> 00:08:22,160
wrapping various file operations
that we have to do.

203
00:08:22,160 --> 00:08:24,750
So let me show you first
the Manifest.

204
00:08:24,750 --> 00:08:27,570
Again, all applications and
extensions for Chrome have a

205
00:08:27,570 --> 00:08:28,570
Manifest file.

206
00:08:28,570 --> 00:08:30,670
And to use the Sync File System,
I simply need to

207
00:08:30,670 --> 00:08:34,460
specify the Sync File System
permission here in my

208
00:08:34,460 --> 00:08:37,990
Manifest, and nothing
special beyond that.

209
00:08:37,990 --> 00:08:40,980
So once I've got the permission
specified, I can

210
00:08:40,980 --> 00:08:42,720
start using the API.

211
00:08:42,720 --> 00:08:47,940
Now this here, the main .js
file, this is where we set up

212
00:08:47,940 --> 00:08:50,590
the Synchronized File
System for use.

213
00:08:50,590 --> 00:08:53,780
So here at the top we have an
event listener for when the

214
00:08:53,780 --> 00:08:55,410
DOM content loads.

215
00:08:55,410 --> 00:08:59,490
And what we're doing is seeing
if we support the Synchronized

216
00:08:59,490 --> 00:09:00,350
File System.

217
00:09:00,350 --> 00:09:03,130
So the support Sync File System
Boolean right here is

218
00:09:03,130 --> 00:09:05,070
set by seeing if we're
in Chrome.

219
00:09:05,070 --> 00:09:07,320
And if we've got the Chrome
Sync File System Object,

220
00:09:07,320 --> 00:09:08,290
that's great.

221
00:09:08,290 --> 00:09:09,950
And if we support it, then
we're going to call this

222
00:09:09,950 --> 00:09:13,350
function here called Open the
Syncable File System.

223
00:09:13,350 --> 00:09:15,794
So let's scroll down.

224
00:09:15,794 --> 00:09:16,770
All right.

225
00:09:16,770 --> 00:09:20,800
The function for opening the
Syncable File System

226
00:09:20,800 --> 00:09:23,420
essentially checks to see that
we're in Chrome and then calls

227
00:09:23,420 --> 00:09:26,310
the requestFileSystem function
that I talked about

228
00:09:26,310 --> 00:09:28,100
earlier in the API.

229
00:09:28,100 --> 00:09:30,780
Check to see if we got
any kind of error.

230
00:09:30,780 --> 00:09:34,310
And assuming everything is OK,
we have this function here

231
00:09:34,310 --> 00:09:36,390
called onFileSystemOpened.

232
00:09:36,390 --> 00:09:40,240
And in onFileSystemOpened, we
just blog a message out to the

233
00:09:40,240 --> 00:09:43,220
console saying, hey, we got the
file system, everything

234
00:09:43,220 --> 00:09:44,380
seems to be OK.

235
00:09:44,380 --> 00:09:46,900
We create a new editor, we
create a new file to go with

236
00:09:46,900 --> 00:09:48,970
it, and then we're
off and running.

237
00:09:48,970 --> 00:09:52,050
So let's go over to
the filer class.

238
00:09:52,050 --> 00:09:52,650
And let's--

239
00:09:52,650 --> 00:09:58,920
I'm just going to do a quick
search for the usage.

240
00:09:58,920 --> 00:10:01,330
Show Usage, there it is.

241
00:10:01,330 --> 00:10:05,600
And here in the Show Usage
function, this is where we're

242
00:10:05,600 --> 00:10:09,430
calling the Sync File System's
Get Usage and Quota function

243
00:10:09,430 --> 00:10:13,180
to see how much of our quota
we have and how much of it

244
00:10:13,180 --> 00:10:14,940
that we are using.

245
00:10:14,940 --> 00:10:18,690
And then let's go ahead and
take a look at the status

246
00:10:18,690 --> 00:10:20,720
changed message.

247
00:10:20,720 --> 00:10:27,640
So down here in this function
where we create the filer we

248
00:10:27,640 --> 00:10:30,980
set up, assuming that we're
using the Syncable File System

249
00:10:30,980 --> 00:10:33,530
instead of the temporary one,
we're setting up our event

250
00:10:33,530 --> 00:10:37,270
listener to see if the file
status has changed.

251
00:10:37,270 --> 00:10:40,070
And then if the service status
has changed, we have those two

252
00:10:40,070 --> 00:10:41,210
event handlers.

253
00:10:41,210 --> 00:10:43,850
And that's what's going to get
triggered when-- so, for

254
00:10:43,850 --> 00:10:46,420
example, if I make a change to
the file on this side or if I

255
00:10:46,420 --> 00:10:48,460
go to another instance of my
app running on another

256
00:10:48,460 --> 00:10:51,490
computer and I make a change
on that side, this is the

257
00:10:51,490 --> 00:10:53,460
event that will get triggered.

258
00:10:53,460 --> 00:10:56,830
So pretty straightforward,
simple API.

259
00:10:56,830 --> 00:11:00,330
From here on out it's just
HTML5 File System calls.

260
00:11:00,330 --> 00:11:03,740
So, for example, if
we scroll down--

261
00:11:03,740 --> 00:11:08,320
I'll just do a search for
the getRoot, fs.root.

262
00:11:08,320 --> 00:11:11,480

263
00:11:11,480 --> 00:11:13,520
And that is in--

264
00:11:13,520 --> 00:11:14,906
hang on a second.

265
00:11:14,906 --> 00:11:17,582
There we go.

266
00:11:17,582 --> 00:11:18,850
Let me find the Save.

267
00:11:18,850 --> 00:11:20,100
Where's the Save?

268
00:11:20,100 --> 00:11:22,715

269
00:11:22,715 --> 00:11:24,940
Oh, it's in the-- sorry,
it's in the utilities.

270
00:11:24,940 --> 00:11:28,740
There's a utilities
thing in here.

271
00:11:28,740 --> 00:11:29,760
And it's--

272
00:11:29,760 --> 00:11:32,810
oh no, sorry, it's
in the editor.

273
00:11:32,810 --> 00:11:34,770
There we go, there's the Save.

274
00:11:34,770 --> 00:11:39,070
So here we have the methods
that are going to handle

275
00:11:39,070 --> 00:11:41,910
things like opening, loading,
and saving files.

276
00:11:41,910 --> 00:11:44,650
And you can see that from here
on out, it's just using

277
00:11:44,650 --> 00:11:48,030
regular old HTML5 File
System APIs.

278
00:11:48,030 --> 00:11:50,800
So here's the File System
root, getFile.

279
00:11:50,800 --> 00:11:53,720
If you've done any work with
the HTML5 File System, this

280
00:11:53,720 --> 00:11:54,966
will probably look
familiar to you.

281
00:11:54,966 --> 00:11:58,630
It's creating blobs, saving
blob URLs out to the file.

282
00:11:58,630 --> 00:12:01,200
So what we've done here
essentially, just to sum up,

283
00:12:01,200 --> 00:12:04,540
is we've taken the HTML5 File
System and we've layered our

284
00:12:04,540 --> 00:12:06,860
syncing architecture on top of
it so that you can build

285
00:12:06,860 --> 00:12:10,730
applications that sync
files to and from a

286
00:12:10,730 --> 00:12:12,020
remote cloud service.

287
00:12:12,020 --> 00:12:13,060
This case, Google Drive.

288
00:12:13,060 --> 00:12:14,370
In the future, who knows?

289
00:12:14,370 --> 00:12:17,100
But using this API, once it goes
into Stable, you'll be

290
00:12:17,100 --> 00:12:22,860
able to build extensions and
apps that built synced files.

291
00:12:22,860 --> 00:12:23,770
PETE LEPAGE: Sweet.

292
00:12:23,770 --> 00:12:24,450
Very cool.

293
00:12:24,450 --> 00:12:24,730
JOE MARINI: Yeah.

294
00:12:24,730 --> 00:12:26,210
Yeah, it is very cool.

295
00:12:26,210 --> 00:12:29,100
I've been playing around with
it and seems to work pretty

296
00:12:29,100 --> 00:12:32,680
well, assuming that you're
authenticated properly.

297
00:12:32,680 --> 00:12:35,800
So I think now might be a good
moment to check to see if we

298
00:12:35,800 --> 00:12:37,180
have any questions.

299
00:12:37,180 --> 00:12:38,730
PETE LEPAGE: Yeah, I think
there are a couple of

300
00:12:38,730 --> 00:12:39,590
questions up there.

301
00:12:39,590 --> 00:12:39,870
JOE MARINI: OK, great.

302
00:12:39,870 --> 00:12:44,470
PETE LEPAGE: So I'm looking at
one from Brian Tredaway in

303
00:12:44,470 --> 00:12:45,290
Washington--

304
00:12:45,290 --> 00:12:49,100
wants to know, can I read any
files from the user's Google

305
00:12:49,100 --> 00:12:52,910
Drive with these APIs, or
am I limited to only

306
00:12:52,910 --> 00:12:54,410
stuff I've put up there?

307
00:12:54,410 --> 00:12:56,130
JOE MARINI: Yup, that's
a great question.

308
00:12:56,130 --> 00:12:56,580
Yeah.

309
00:12:56,580 --> 00:12:58,070
Yeah, that's a great
question, Brian.

310
00:12:58,070 --> 00:13:00,780
So right now, and I think for
the foreseeable future, the

311
00:13:00,780 --> 00:13:01,930
way that it works is--

312
00:13:01,930 --> 00:13:05,660
again, this works the same way
as the HTML5 File System does,

313
00:13:05,660 --> 00:13:11,240
so each app gets its own per-app
sandboxed File System

314
00:13:11,240 --> 00:13:14,270
that just happens to be on
the user's Google Drive.

315
00:13:14,270 --> 00:13:17,640
And it's important to point
out that the user doesn't

316
00:13:17,640 --> 00:13:22,240
actually see the folder where
these files go by default in

317
00:13:22,240 --> 00:13:23,780
their Google Drive interface.

318
00:13:23,780 --> 00:13:24,130
PETE LEPAGE: Interesting, OK.

319
00:13:24,130 --> 00:13:26,860
JOE MARINI: A power user can
search for the file and it'll

320
00:13:26,860 --> 00:13:29,610
show up in the All Items view
and then they can see the name

321
00:13:29,610 --> 00:13:30,430
of the folder.

322
00:13:30,430 --> 00:13:33,290
Essentially, the name of the
folder is the same ID as the

323
00:13:33,290 --> 00:13:35,010
app or the extension that's
creating the file.

324
00:13:35,010 --> 00:13:35,830
PETE LEPAGE: OK.

325
00:13:35,830 --> 00:13:37,480
JOE MARINI: So that's how we
keep track of the instances.

326
00:13:37,480 --> 00:13:40,760
But no, you only have access to
your Sandbox, which is the

327
00:13:40,760 --> 00:13:44,087
same way that the existing
HTML5 File

328
00:13:44,087 --> 00:13:45,600
System API works today.

329
00:13:45,600 --> 00:13:47,350
PETE LEPAGE: Cool, OK.

330
00:13:47,350 --> 00:13:52,560
So in that same way, then, if
the user wants to delete stuff

331
00:13:52,560 --> 00:13:55,480
after they've installed the
directory, does it get deleted

332
00:13:55,480 --> 00:13:57,480
automatically or do they
have to go find it

333
00:13:57,480 --> 00:13:58,160
and then delete it?

334
00:13:58,160 --> 00:13:59,970
JOE MARINI: Yeah, so what's
going to happen is--

335
00:13:59,970 --> 00:14:03,980
so file management is done
either through your app or, if

336
00:14:03,980 --> 00:14:07,550
you're app gets blown away, then
your data will get blown

337
00:14:07,550 --> 00:14:08,800
away as well.

338
00:14:08,800 --> 00:14:10,720

339
00:14:10,720 --> 00:14:12,240
PETE LEPAGE: That's an
interesting scenario.

340
00:14:12,240 --> 00:14:14,920
That's something that I think
we'd probably like to hear

341
00:14:14,920 --> 00:14:17,180
feedback from you guys who are
watching today about this.

342
00:14:17,180 --> 00:14:18,180
JOE MARINI: Yes, exactly.

343
00:14:18,180 --> 00:14:22,390
And again, just to emphasize
that point even further, we're

344
00:14:22,390 --> 00:14:23,210
still in Canary on this.

345
00:14:23,210 --> 00:14:25,570
There's plenty of time for
you to give us feedback.

346
00:14:25,570 --> 00:14:27,950
We'd love to hear from you on
our forums and on our D+ page.

347
00:14:27,950 --> 00:14:32,890
So anything that you'd like to
see the API do or not do, or

348
00:14:32,890 --> 00:14:35,810
do differently, please, please
speak up, let us know.

349
00:14:35,810 --> 00:14:38,570
We want to make this useful for
all of you in your apps.

350
00:14:38,570 --> 00:14:40,070
PETE LEPAGE: Cool.

351
00:14:40,070 --> 00:14:44,460
So this is my question, this is
not one from our list, but

352
00:14:44,460 --> 00:14:46,980
you were talking about your
authentication expired.

353
00:14:46,980 --> 00:14:51,160
How does authentication
work for this?

354
00:14:51,160 --> 00:14:54,100
How does it know where
to go and what to do?

355
00:14:54,100 --> 00:14:55,170
JOE MARINI: Great question.

356
00:14:55,170 --> 00:15:00,240
Yeah, so by default, the Sync
File System works by using

357
00:15:00,240 --> 00:15:04,310
whatever the signed-in
profile of Chrome is.

358
00:15:04,310 --> 00:15:08,100
So if you're signed into a
specific profile in your

359
00:15:08,100 --> 00:15:12,420
Chrome Runtime, that's the
profile it's going to use for

360
00:15:12,420 --> 00:15:13,970
the Google Drive
authentication.

361
00:15:13,970 --> 00:15:16,590
So assuming that you're
authenticated into Google

362
00:15:16,590 --> 00:15:19,020
Drive and you've got everything
set up properly

363
00:15:19,020 --> 00:15:22,150
that you normally would anyway,
which if you've got

364
00:15:22,150 --> 00:15:24,750
Google Drive installed on your
machine, you've got your

365
00:15:24,750 --> 00:15:28,620
credentials stored in Google
Drive, it's going to use

366
00:15:28,620 --> 00:15:30,560
whatever the profile is that's
currently signed in.

367
00:15:30,560 --> 00:15:31,540
PETE LEPAGE: OK, yeah.

368
00:15:31,540 --> 00:15:33,580
That makes perfect sense.

369
00:15:33,580 --> 00:15:33,810
JOE MARINI: Yes, exactly.

370
00:15:33,810 --> 00:15:34,660
PETE LEPAGE: Cool.

371
00:15:34,660 --> 00:15:38,420
So A.A. from somewhere here in
the US wants to know are the

372
00:15:38,420 --> 00:15:42,700
files synced in chunks
or as full files?

373
00:15:42,700 --> 00:15:43,840
JOE MARINI: That's
a good question.

374
00:15:43,840 --> 00:15:47,050
I'm not deeply familiar
with exactly how

375
00:15:47,050 --> 00:15:49,090
the files are synced.

376
00:15:49,090 --> 00:15:53,060
It's whatever the Google Drive
back end is using.

377
00:15:53,060 --> 00:15:56,080
I believe they're synced
as chunks, but I'm

378
00:15:56,080 --> 00:15:58,540
not entirely sure.

379
00:15:58,540 --> 00:16:01,770
What I'll do is I'll
go check on that.

380
00:16:01,770 --> 00:16:04,400
Do me a favor, just post that
question in our forum so that

381
00:16:04,400 --> 00:16:06,770
way I have a marker for it
and I can respond so that

382
00:16:06,770 --> 00:16:07,860
everybody can see the answer.

383
00:16:07,860 --> 00:16:08,686
PETE LEPAGE: Cool.

384
00:16:08,686 --> 00:16:12,420
So here's another question
from me.

385
00:16:12,420 --> 00:16:16,480
So if I go on one computer and
I create a whole bunch of

386
00:16:16,480 --> 00:16:19,490
files and they get pushed up
to Drive and then I go to a

387
00:16:19,490 --> 00:16:23,060
different computer, are those
files pulled down and sitting

388
00:16:23,060 --> 00:16:27,520
locally on my other computer, or
are they only grabbed from

389
00:16:27,520 --> 00:16:31,620
Google Drive when my app
goes and asks for them?

390
00:16:31,620 --> 00:16:34,240
JOE MARINI: So no, they are
synced the same way that

391
00:16:34,240 --> 00:16:36,390
Google Drive syncs
other files.

392
00:16:36,390 --> 00:16:37,400
PETE LEPAGE: OK.

393
00:16:37,400 --> 00:16:40,980
JOE MARINI: So the cloud service
back end-- in this

394
00:16:40,980 --> 00:16:42,130
case, Google Drive--

395
00:16:42,130 --> 00:16:45,080
just syncs files
automatically.

396
00:16:45,080 --> 00:16:48,350
It uses that feature to sync
the files, that way it

397
00:16:48,350 --> 00:16:50,670
abstracts that notion away
from your app, right?

398
00:16:50,670 --> 00:16:50,860
PETE LEPAGE: Right.

399
00:16:50,860 --> 00:16:52,200
JOE MARINI: Your app doesn't
have to worry about, well,

400
00:16:52,200 --> 00:16:56,180
when do I ask for
a file and did I

401
00:16:56,180 --> 00:16:57,410
remember to ask this file?

402
00:16:57,410 --> 00:16:58,940
And when did I last
ask for this file?

403
00:16:58,940 --> 00:17:02,350
And so it lets Google Drive do
what Google Drive does best,

404
00:17:02,350 --> 00:17:05,006
which is handle the mechanics
and the timing of syncing.

405
00:17:05,006 --> 00:17:05,680
PETE LEPAGE: Yeah.

406
00:17:05,680 --> 00:17:08,349
JOE MARINI: And that's why that
event for handling the

407
00:17:08,349 --> 00:17:10,200
status change is so important.

408
00:17:10,200 --> 00:17:13,330
So that way it abstracts away
when things happen to you and

409
00:17:13,330 --> 00:17:16,250
just lets you know hey,
this file changed.

410
00:17:16,250 --> 00:17:18,725
Or when you change the file, you
don't have to remember it

411
00:17:18,725 --> 00:17:20,780
to push things up,
it just happens.

412
00:17:20,780 --> 00:17:23,630
So it's all handled in the
background for you by Drive.

413
00:17:23,630 --> 00:17:24,310
PETE LEPAGE: Cool.

414
00:17:24,310 --> 00:17:25,510
Awesome.

415
00:17:25,510 --> 00:17:28,569
Well, I think that's all
the time we have--

416
00:17:28,569 --> 00:17:30,270
well, actually it's not all the
time, but those are all

417
00:17:30,270 --> 00:17:32,140
the questions that
we have today.

418
00:17:32,140 --> 00:17:36,610
So I want to say thanks Joe
for joining us and talking

419
00:17:36,610 --> 00:17:39,650
about this and giving us a good
overview and a little bit

420
00:17:39,650 --> 00:17:41,070
of a deep dive.

421
00:17:41,070 --> 00:17:43,060
You're going to be
back next week.

422
00:17:43,060 --> 00:17:46,280
We're going to be
talking about--

423
00:17:46,280 --> 00:17:48,750
I keep forgetting this and
it's, like, we've been

424
00:17:48,750 --> 00:17:49,000
talking about it.

425
00:17:49,000 --> 00:17:49,765
JOE MARINI: It's the
interapp messaging.

426
00:17:49,765 --> 00:17:50,370
PETE LEPAGE: That's what
it is, thank you.

427
00:17:50,370 --> 00:17:53,240
JOE MARINI: So I'll be showing
you how to send messages from

428
00:17:53,240 --> 00:17:57,460
one app to another, even to an
extension running inside

429
00:17:57,460 --> 00:17:58,250
Chrome proper.

430
00:17:58,250 --> 00:17:59,520
PETE LEPAGE: That's
a good one, yeah.

431
00:17:59,520 --> 00:18:01,560
JOE MARINI: Yeah, so next week
should be interesting, we've

432
00:18:01,560 --> 00:18:03,440
had lots of requests for this.

433
00:18:03,440 --> 00:18:06,320
And we now have an API that lets
you message between apps

434
00:18:06,320 --> 00:18:06,920
and extensions.

435
00:18:06,920 --> 00:18:08,420
It's actually really
pretty cool.

436
00:18:08,420 --> 00:18:10,010
So yeah, come back next week.

437
00:18:10,010 --> 00:18:11,010
PETE LEPAGE: Awesome,
so that's next week.

438
00:18:11,010 --> 00:18:12,200
JOE MARINI: Thanks again,
for anybody who--

439
00:18:12,200 --> 00:18:12,840
Yeah.

440
00:18:12,840 --> 00:18:13,520
I'm sorry, what?

441
00:18:13,520 --> 00:18:16,180
PETE LEPAGE: That's next week
4 o'clock Eastern, 1 o'clock

442
00:18:16,180 --> 00:18:20,000
Pacific, and adjust time
zones for wherever else

443
00:18:20,000 --> 00:18:21,730
you happen to be.

444
00:18:21,730 --> 00:18:22,240
JOE MARINI: Exactly.

445
00:18:22,240 --> 00:18:25,610
And thanks everybody for showing
up today to see the

446
00:18:25,610 --> 00:18:26,860
Synchronized File System API.

447
00:18:26,860 --> 00:18:29,430
Remember to go to the Google
Chrome GitHub.

448
00:18:29,430 --> 00:18:31,590
Take a look at the Chrome
app samples repository.

449
00:18:31,590 --> 00:18:33,730
Pull it down, start playing
with it, start hacking.

450
00:18:33,730 --> 00:18:35,540
And we're excited to see
what you guys come up

451
00:18:35,540 --> 00:18:36,620
with using our APIs.

452
00:18:36,620 --> 00:18:37,520
PETE LEPAGE: Absolutely.

453
00:18:37,520 --> 00:18:40,100
All right, well thanks for
joining, everybody, and we'll

454
00:18:40,100 --> 00:18:41,290
see you all soon.

455
00:18:41,290 --> 00:18:41,890
Bye-bye.

456
00:18:41,890 --> 00:18:43,140
JOE MARINI: Thanks.

457
00:18:43,140 --> 00:18:50,277

