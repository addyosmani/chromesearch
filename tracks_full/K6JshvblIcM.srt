1
00:00:00,000 --> 00:00:00,550

2
00:00:00,550 --> 00:00:03,780
MATT FROST: Welcome to the first
session on WebM and the

3
00:00:03,780 --> 00:00:06,230
New VP9 Open Video Codec.

4
00:00:06,230 --> 00:00:08,890
We figured that there's no way
to really add a little

5
00:00:08,890 --> 00:00:11,380
excitement to a presentation
than to change it at the last

6
00:00:11,380 --> 00:00:15,720
minute, and so what we've spent
this morning doing is

7
00:00:15,720 --> 00:00:19,970
encoding some VP9 video and
H.264 video and putting

8
00:00:19,970 --> 00:00:22,650
together a side by side
demonstration just to give you

9
00:00:22,650 --> 00:00:26,920
a taste of what we're
working on.

10
00:00:26,920 --> 00:00:29,690
So what you're going
to see is a video.

11
00:00:29,690 --> 00:00:31,820
The video is going to be the
same on either side.

12
00:00:31,820 --> 00:00:35,280
It's going to be VP9, the
new codec on the left,

13
00:00:35,280 --> 00:00:37,310
H.264 on the right.

14
00:00:37,310 --> 00:00:45,270
And H.264, we used the X264 open
video encoder, which is

15
00:00:45,270 --> 00:00:47,780
commonly regarded as the
best encoder out there.

16
00:00:47,780 --> 00:00:49,420
We used the highest
possible settings.

17
00:00:49,420 --> 00:00:55,900
So we've done everything we
can to favor H.264 here.

18
00:00:55,900 --> 00:00:58,560
All of this is at the same
data rate, so both of the

19
00:00:58,560 --> 00:01:00,390
videos are going to be at
the same data rate.

20
00:01:00,390 --> 00:01:02,410
And the bit rate varies.

21
00:01:02,410 --> 00:01:04,900
In some cases, we're
using 500K.

22
00:01:04,900 --> 00:01:08,300
In other cases, we've dropped
the bit rate down to bit rates

23
00:01:08,300 --> 00:01:11,760
that are actually banned by
certain UN conventions for the

24
00:01:11,760 --> 00:01:14,480
compression of HD video.

25
00:01:14,480 --> 00:01:18,300
And so with that, I think that's
everything, Ronald?

26
00:01:18,300 --> 00:01:20,070
RONALD BULTJE: Yes.

27
00:01:20,070 --> 00:01:23,230
So like Matt said, what you're
looking at here is shots that

28
00:01:23,230 --> 00:01:25,080
we just took this morning.

29
00:01:25,080 --> 00:01:30,870
We've encoded those in just a
couple of hours and basically,

30
00:01:30,870 --> 00:01:33,580
what you're looking at here,
on the left, VP9 and on the

31
00:01:33,580 --> 00:01:38,380
right, H.264, is what an amazing
job we can actually do

32
00:01:38,380 --> 00:01:41,220
at video compression if we're
using the very latest

33
00:01:41,220 --> 00:01:42,470
technologies.

34
00:01:42,470 --> 00:01:50,410

35
00:01:50,410 --> 00:01:52,150
MATT FROST: So you can see the
blockiness on the right.

36
00:01:52,150 --> 00:01:55,740
On some of this, it's a lot more
evident than others, and

37
00:01:55,740 --> 00:01:57,950
especially evident, if you want
afterwards to come up and

38
00:01:57,950 --> 00:02:00,470
take a look at this running
on the screen,

39
00:02:00,470 --> 00:02:01,460
we can freeze frames.

40
00:02:01,460 --> 00:02:03,970
But you see there on the right
especially, all this

41
00:02:03,970 --> 00:02:06,910
blockiness and how much
it clears up as it

42
00:02:06,910 --> 00:02:08,664
moves into VP9 territory.

43
00:02:08,664 --> 00:02:13,810

44
00:02:13,810 --> 00:02:16,300
RONALD BULTJE: And a point here
really is that for high

45
00:02:16,300 --> 00:02:21,650
definition video, H.264 can do
a reasonable job, but we can

46
00:02:21,650 --> 00:02:23,370
do a lot better than that.

47
00:02:23,370 --> 00:02:25,910
And so having said that, let's
actually get started on the

48
00:02:25,910 --> 00:02:27,160
presentation.

49
00:02:27,160 --> 00:02:32,450

50
00:02:32,450 --> 00:02:36,270
MATT FROST: So the way that
we're going to handle this

51
00:02:36,270 --> 00:02:40,420
presentation is I'm going to do
a quick introduction on why

52
00:02:40,420 --> 00:02:44,380
we care about open video,
both why does Google--

53
00:02:44,380 --> 00:02:47,690
which has historically been
involved with developing

54
00:02:47,690 --> 00:02:49,240
applications around video--

55
00:02:49,240 --> 00:02:53,360
has gotten down deeply into
actually helping work on these

56
00:02:53,360 --> 00:02:57,720
next generation compression
technologies.

57
00:02:57,720 --> 00:03:01,270
After we talk about that and
why, in general, improving

58
00:03:01,270 --> 00:03:03,720
video compression is good for
everybody, I'm going to turn

59
00:03:03,720 --> 00:03:06,890
it over to Ronald for really the
meat of this presentation,

60
00:03:06,890 --> 00:03:10,220
which will be to show you some
more demonstrations, to talk a

61
00:03:10,220 --> 00:03:13,410
little bit about how we measure
video quality, talk

62
00:03:13,410 --> 00:03:15,710
about some of the techniques
that we're exploiting to

63
00:03:15,710 --> 00:03:20,470
really make this dramatic
improvement in compression.

64
00:03:20,470 --> 00:03:23,920
And then finally, after you've
seen this, and I hope that

65
00:03:23,920 --> 00:03:26,200
you've started to get a little
excited about what this

66
00:03:26,200 --> 00:03:29,210
technology can do for you, we'll
go and talk about the

67
00:03:29,210 --> 00:03:31,910
last stages, how we're going
to wrap up this project and

68
00:03:31,910 --> 00:03:35,460
how we're going to get these
tools into your hands as

69
00:03:35,460 --> 00:03:36,870
quickly as possible.

70
00:03:36,870 --> 00:03:40,600
So to start off with, just
taking a quick look at how

71
00:03:40,600 --> 00:03:43,160
Google got into video.

72
00:03:43,160 --> 00:03:45,430
Video at Google started in the
same way that so many big

73
00:03:45,430 --> 00:03:47,940
projects at Google start,
as an experiment.

74
00:03:47,940 --> 00:03:52,390
And we launched these efforts
with just a single full time

75
00:03:52,390 --> 00:03:55,520
engineer and a number of
engineers working 20% of their

76
00:03:55,520 --> 00:03:59,320
time on video, really focusing
on video-related data.

77
00:03:59,320 --> 00:04:02,420
And then over the last 10 years,
obviously, video at

78
00:04:02,420 --> 00:04:06,140
Google has exploded, not only
with YouTube but with Google

79
00:04:06,140 --> 00:04:09,090
Talk, Hangouts, lots of
applications where you

80
00:04:09,090 --> 00:04:11,960
wouldn't necessarily think of
video as playing a core role,

81
00:04:11,960 --> 00:04:15,690
like Chromoting, which is Chrome
Remote Desktopping.

82
00:04:15,690 --> 00:04:20,110
But if you look at the really
motivating factors for getting

83
00:04:20,110 --> 00:04:23,950
into video compression, there
are a couple that

84
00:04:23,950 --> 00:04:25,010
are really of note.

85
00:04:25,010 --> 00:04:27,570
One, of course, is the
acquisition of YouTube.

86
00:04:27,570 --> 00:04:30,090
And with the acquisition of
YouTube, we all of a sudden

87
00:04:30,090 --> 00:04:33,560
started to focus very heavily
on both improving the

88
00:04:33,560 --> 00:04:36,610
experience for users, improving
video quality, but

89
00:04:36,610 --> 00:04:40,110
also about the costs associated
with all aspects of

90
00:04:40,110 --> 00:04:41,740
running a service
like YouTube.

91
00:04:41,740 --> 00:04:45,090
There are costs associated
with ingest, transcode of

92
00:04:45,090 --> 00:04:49,360
video formats, storage of
multiple different formats,

93
00:04:49,360 --> 00:04:52,450
and then distribution of the
video, both to caches and to

94
00:04:52,450 --> 00:04:55,170
the edge, and ultimately
to users.

95
00:04:55,170 --> 00:05:01,080
The second was the move from
HTML4 to HTML5, which came at

96
00:05:01,080 --> 00:05:04,410
the same time, pretty much,
as our launch of Chrome.

97
00:05:04,410 --> 00:05:07,800
And of course, in HTML4,
although to the user, it

98
00:05:07,800 --> 00:05:10,530
appeared that video could be
supported in a browser, in

99
00:05:10,530 --> 00:05:14,310
fact, video was supported
through runtimes and plug-ins.

100
00:05:14,310 --> 00:05:19,220
With HTML5, video becomes a
native part of the browser.

101
00:05:19,220 --> 00:05:24,470
And so with the move towards
HTML5, we see it filtering

102
00:05:24,470 --> 00:05:28,400
through the addition of the
video tag in Chrome and the

103
00:05:28,400 --> 00:05:31,070
launch of HTML5 video
for YouTube.

104
00:05:31,070 --> 00:05:34,620
So these are the two factors--

105
00:05:34,620 --> 00:05:38,200
the focus on quality and
reducing cost with YouTube,

106
00:05:38,200 --> 00:05:42,470
the need to build a high quality
codec into Chrome and

107
00:05:42,470 --> 00:05:45,010
other browsers for
the video tag--

108
00:05:45,010 --> 00:05:50,320
that sparked the acquisition in
2010 of On2 Technologies,

109
00:05:50,320 --> 00:05:53,250
the company that I came from and
many members of the WebM

110
00:05:53,250 --> 00:05:57,075
team came from, and the launch
of the WebM project.

111
00:05:57,075 --> 00:05:59,900

112
00:05:59,900 --> 00:06:04,780
The WebM project is an effort
to develop a high quality,

113
00:06:04,780 --> 00:06:06,810
open alternative
for web video.

114
00:06:06,810 --> 00:06:09,550
We're very focused on web
video, not on video for

115
00:06:09,550 --> 00:06:13,190
Blu-ray discs, not on video
for cable television, but

116
00:06:13,190 --> 00:06:18,080
about solving the problems that
we find in web video.

117
00:06:18,080 --> 00:06:20,600
In addition, we're very focused
on having an open

118
00:06:20,600 --> 00:06:25,050
standard because we believe that
the web has evolved as

119
00:06:25,050 --> 00:06:28,690
quickly is it has because it is
based on open technologies.

120
00:06:28,690 --> 00:06:32,240
And clearly, multimedia
communication has become such

121
00:06:32,240 --> 00:06:35,910
a core part of how we
communicate on the web that we

122
00:06:35,910 --> 00:06:39,380
need open technologies that are
rapidly evolving to allow

123
00:06:39,380 --> 00:06:42,250
us to keep pace and to make sure
that we can develop the

124
00:06:42,250 --> 00:06:45,470
next generation of killer
video applications.

125
00:06:45,470 --> 00:06:47,240
We wanted something
simple as well.

126
00:06:47,240 --> 00:06:53,180
So we used the VP8 Open Codec,
the Vorbis Open Audio Codec,

127
00:06:53,180 --> 00:06:57,850
which was a long existing open
audio codec, and then them the

128
00:06:57,850 --> 00:06:59,960
Matroska File Wrapper.

129
00:06:59,960 --> 00:07:03,400
With the launch of VP9 in a
matter of months, we're going

130
00:07:03,400 --> 00:07:07,080
to be adding the VP9 Video Codec
as well as the brand new

131
00:07:07,080 --> 00:07:12,190
Opus Audio Codec, which is
another open audio codec, very

132
00:07:12,190 --> 00:07:14,690
performant and high quality.

133
00:07:14,690 --> 00:07:18,220
So since our launch, obviously,
web video has

134
00:07:18,220 --> 00:07:19,410
continued to grow.

135
00:07:19,410 --> 00:07:22,500
And if we just look at what we
know very well, which is

136
00:07:22,500 --> 00:07:26,600
YouTube, YouTube has grown to
be a global scale video

137
00:07:26,600 --> 00:07:30,470
platform capable of serving
video across the globe to

138
00:07:30,470 --> 00:07:33,470
these myriad connected
video enabled devices

139
00:07:33,470 --> 00:07:35,030
that we're all using.

140
00:07:35,030 --> 00:07:39,150
It supports a billion monthly
users, and those users are

141
00:07:39,150 --> 00:07:42,890
looking at video four billion
times a day for a total of six

142
00:07:42,890 --> 00:07:46,830
billion plus hours of video
viewed monthly.

143
00:07:46,830 --> 00:07:50,060
Just to think about that number,
that is an hour of

144
00:07:50,060 --> 00:07:53,780
video for every person on the
planet consumed on YouTube.

145
00:07:53,780 --> 00:07:55,920
And on the creation
side, we're seeing

146
00:07:55,920 --> 00:07:57,880
exactly the same trends.

147
00:07:57,880 --> 00:08:01,870
72 hours of video is uploaded
per minute, and that video is

148
00:08:01,870 --> 00:08:04,270
increasingly becoming
HD video.

149
00:08:04,270 --> 00:08:08,930
So if you look at the graph
on the right, blue is 360p

150
00:08:08,930 --> 00:08:12,750
standard definition video, which
is slowly declining, but

151
00:08:12,750 --> 00:08:16,080
quickly being matched by
uploads of HD video.

152
00:08:16,080 --> 00:08:20,990
And the key here of great
importance is that HD video is

153
00:08:20,990 --> 00:08:22,650
obviously more complex.

154
00:08:22,650 --> 00:08:25,990
There's more data for a given
HD video than there is for--

155
00:08:25,990 --> 00:08:28,150
unless, of course, you're
encoding it in VP9--

156
00:08:28,150 --> 00:08:33,700
than there is for a standard
resolution video.

157
00:08:33,700 --> 00:08:37,690
In addition, I think we can all
agree that the better the

158
00:08:37,690 --> 00:08:39,480
video is, the higher the
resolution, the more

159
00:08:39,480 --> 00:08:41,020
watchable it is.

160
00:08:41,020 --> 00:08:43,740
And then finally, the other
trend that's driving both

161
00:08:43,740 --> 00:08:48,120
creation and consumption is the
increase in mobile devices

162
00:08:48,120 --> 00:08:50,410
and the move towards
4G networks.

163
00:08:50,410 --> 00:08:53,470
So even this morning, there was
an article when I woke up

164
00:08:53,470 --> 00:08:57,610
and was checking my email saying
that YouTube video

165
00:08:57,610 --> 00:09:04,470
accounts for 25% of
all downstream

166
00:09:04,470 --> 00:09:08,360
web traffic in Europe.

167
00:09:08,360 --> 00:09:11,130
And I think BitTorrent
accounted for 13%.

168
00:09:11,130 --> 00:09:17,500
So there alone, between just two
web video services, we're

169
00:09:17,500 --> 00:09:23,070
looking at close to 40% of all
web data in Europe being video

170
00:09:23,070 --> 00:09:24,140
related data.

171
00:09:24,140 --> 00:09:28,800
And that accords with what we
see from the latest Cisco

172
00:09:28,800 --> 00:09:33,990
forecasts, for instance, which
is that consumer web video is

173
00:09:33,990 --> 00:09:38,210
going to be close to 90% of all
consumer data on the web

174
00:09:38,210 --> 00:09:40,080
within the next three years.

175
00:09:40,080 --> 00:09:44,130
So it's remarkably encouraging
to see the growth in video,

176
00:09:44,130 --> 00:09:46,690
but it also represents
a real challenge.

177
00:09:46,690 --> 00:09:51,530
Of course, the good news is that
we have a technology that

178
00:09:51,530 --> 00:09:54,290
is up to this challenge,
and that is VP9.

179
00:09:54,290 --> 00:09:56,910
With next generation video
codecs, with the codecs as

180
00:09:56,910 --> 00:10:00,140
good as VP9, we can effectively
significantly

181
00:10:00,140 --> 00:10:03,400
increase the size of the
internet and we can

182
00:10:03,400 --> 00:10:05,230
significantly increase the
speed of the internet.

183
00:10:05,230 --> 00:10:08,060
So obviously, if you're
taking VP9--

184
00:10:08,060 --> 00:10:11,900
which, as Ronald will say,
halves the bit rate you need

185
00:10:11,900 --> 00:10:14,560
for the very best H.264
to deliver a

186
00:10:14,560 --> 00:10:16,200
given quality video--

187
00:10:16,200 --> 00:10:19,510
you're going to be able to
speed the downloaded of a

188
00:10:19,510 --> 00:10:21,650
download and play a video,
you're going to be able to

189
00:10:21,650 --> 00:10:25,410
speed, obviously, the buffering
of these videos.

190
00:10:25,410 --> 00:10:31,590
So we have the tools to
effectively dramatically

191
00:10:31,590 --> 00:10:33,470
increase the size
of the internet.

192
00:10:33,470 --> 00:10:36,250
But of course in doing that,
in improving the video

193
00:10:36,250 --> 00:10:38,860
experience, in improving the
ability to upload video

194
00:10:38,860 --> 00:10:44,170
quickly, we're going to just
create the conditions for even

195
00:10:44,170 --> 00:10:45,740
more consumption of video.

196
00:10:45,740 --> 00:10:47,700
And so it's not going to be
enough for us to rest on our

197
00:10:47,700 --> 00:10:49,170
laurels with VP9.

198
00:10:49,170 --> 00:10:52,190
We're going to have to turn to
VP9 and keep on doing it, keep

199
00:10:52,190 --> 00:10:56,300
on pushing the boundaries of
what we're capable of with

200
00:10:56,300 --> 00:10:57,770
video compression.

201
00:10:57,770 --> 00:10:59,740
So with that, I'm going to turn
it over to Ronald to show

202
00:10:59,740 --> 00:11:02,720
you some really remarkable
demonstrations of this new

203
00:11:02,720 --> 00:11:05,350
technology.

204
00:11:05,350 --> 00:11:06,600
RONALD BULTJE: Thank you.

205
00:11:06,600 --> 00:11:11,290

206
00:11:11,290 --> 00:11:15,410
So to get started, I just
briefly want to say some words

207
00:11:15,410 --> 00:11:16,660
about video quality.

208
00:11:16,660 --> 00:11:21,000

209
00:11:21,000 --> 00:11:23,940
So how do we measure quality?

210
00:11:23,940 --> 00:11:27,470
Well, the most typical way to
measure quality is to just

211
00:11:27,470 --> 00:11:30,090
look at it, because at the end
of the day, the only thing

212
00:11:30,090 --> 00:11:33,440
that we care about is that the
video that you're looking at

213
00:11:33,440 --> 00:11:36,060
looks great to your eyes.

214
00:11:36,060 --> 00:11:40,650
But that's, of course, not all
there is to it because as

215
00:11:40,650 --> 00:11:43,450
we're developing a new video
codec, we cannot spend our

216
00:11:43,450 --> 00:11:46,450
whole day just watching YouTube
videos over and over

217
00:11:46,450 --> 00:11:48,190
and over again.

218
00:11:48,190 --> 00:11:50,250
That would be fun, though.

219
00:11:50,250 --> 00:11:54,210
So in addition to visually
analyzing and inspecting

220
00:11:54,210 --> 00:11:56,770
video, we're also
using metrics.

221
00:11:56,770 --> 00:11:59,950
The most popular metric in the
field for measuring video

222
00:11:59,950 --> 00:12:02,110
quality is called PSNR.

223
00:12:02,110 --> 00:12:05,390
It stands for Peak Square
Noise Ratio.

224
00:12:05,390 --> 00:12:08,860
And the graph that you're
looking at here on the left is

225
00:12:08,860 --> 00:12:13,540
a typical representation of PSNR
on the vertical axis and

226
00:12:13,540 --> 00:12:16,410
video bit rate on the horizontal
axis to give you

227
00:12:16,410 --> 00:12:20,430
some sort of a feeling of
how those two relate.

228
00:12:20,430 --> 00:12:24,530
So the obvious thing to note
here is that as you increase

229
00:12:24,530 --> 00:12:28,530
the bit rate, the video quality,
as measured by this

230
00:12:28,530 --> 00:12:30,730
metric, increases.

231
00:12:30,730 --> 00:12:33,410
So at the end of the day what
that means is that it doesn't

232
00:12:33,410 --> 00:12:36,280
really matter what code you
use, as long as you've

233
00:12:36,280 --> 00:12:39,860
infinite bandwidth, you can
accomplish any quality.

234
00:12:39,860 --> 00:12:42,860
However, our goal is to make
it easier and faster and

235
00:12:42,860 --> 00:12:44,560
simpler to stream video.

236
00:12:44,560 --> 00:12:49,220
So how does PSNR actually
compare to visual quality?

237
00:12:49,220 --> 00:12:53,260
So for that, there's
a sample clip.

238
00:12:53,260 --> 00:12:57,130
So what you're looking here is
a very high penalty shot of

239
00:12:57,130 --> 00:12:58,550
the New York skyline.

240
00:12:58,550 --> 00:13:02,410
I believe that this is the
Empire State Building.

241
00:13:02,410 --> 00:13:07,410
And this clip has a lot of
detailed textures all across.

242
00:13:07,410 --> 00:13:10,340
So what we've done here is
that we've encoded it at

243
00:13:10,340 --> 00:13:13,750
various bit rates, and then
every couple of seconds, we're

244
00:13:13,750 --> 00:13:16,500
dropping the bit rate and the
metric quality of the video

245
00:13:16,500 --> 00:13:17,870
will slowly decrease.

246
00:13:17,870 --> 00:13:21,880
So this is 45 dB, and what
you're seeing slowly at 30 dB

247
00:13:21,880 --> 00:13:26,460
is that some of the detail, or
actually a lot of the detail,

248
00:13:26,460 --> 00:13:29,910
in the backgrounds of the
buildings just completely

249
00:13:29,910 --> 00:13:31,100
disappears.

250
00:13:31,100 --> 00:13:34,270
And that was the case at
35 dB already also.

251
00:13:34,270 --> 00:13:37,430
As you go to 25 dB, you can
see-- we can go really low in

252
00:13:37,430 --> 00:13:40,390
quality, but you do not
want to watch this.

253
00:13:40,390 --> 00:13:41,740
Here's a different scene.

254
00:13:41,740 --> 00:13:44,280
Same thing, we start with
the original 45 dB.

255
00:13:44,280 --> 00:13:46,010
40 dB looks pretty good.

256
00:13:46,010 --> 00:13:50,570
35 dB starts having a lot of
artifacts, and then 30 and 25

257
00:13:50,570 --> 00:13:51,880
are essentially unwatchable.

258
00:13:51,880 --> 00:13:55,180

259
00:13:55,180 --> 00:13:57,180
So what does that mean
for video quality?

260
00:13:57,180 --> 00:14:03,510
Well, the typical target quality
for high definition

261
00:14:03,510 --> 00:14:07,910
video on the internet
lies rounds 40 dB.

262
00:14:07,910 --> 00:14:10,150
You were just looking at the
video, and a 40 dB looked

263
00:14:10,150 --> 00:14:11,480
really quite good.

264
00:14:11,480 --> 00:14:16,130
So if you go to YouTube and
you try to stream a 720p

265
00:14:16,130 --> 00:14:19,460
video, that's actually about the
quality that you will get.

266
00:14:19,460 --> 00:14:22,570
In terms of bit rate, what you
should expect to get is a

267
00:14:22,570 --> 00:14:23,850
couple of megabits a second.

268
00:14:23,850 --> 00:14:26,100
For this particular clip, that's
one to two megabits a

269
00:14:26,100 --> 00:14:29,010
second, but that's very source
material dependent.

270
00:14:29,010 --> 00:14:32,300

271
00:14:32,300 --> 00:14:38,740
So what we've done, then, is we
have taken, I think, about

272
00:14:38,740 --> 00:14:44,200
1,000 YouTube CCL licensed
uploads, just randomly

273
00:14:44,200 --> 00:14:50,410
selected from whatever users
give us, and we've then taken

274
00:14:50,410 --> 00:14:53,460
out particular material that
we're not really interested

275
00:14:53,460 --> 00:14:57,200
in, such as stills or video
clips that contain garbage

276
00:14:57,200 --> 00:14:58,560
video content.

277
00:14:58,560 --> 00:15:02,410
And then we were left with, I
think, about 700 CCL licensed

278
00:15:02,410 --> 00:15:05,170
YouTube uploads, and we've
encoded those at various bit

279
00:15:05,170 --> 00:15:07,680
rates-- so at various
quality settings--

280
00:15:07,680 --> 00:15:11,710
with our VP9 Video Codec or
with H.264 using the X264

281
00:15:11,710 --> 00:15:18,020
encoder at the very best
settings that we are aware of.

282
00:15:18,020 --> 00:15:25,130
Then for each of these clips,
we've taken the left half of

283
00:15:25,130 --> 00:15:29,380
the resulting compressed file
and the right half of the 264

284
00:15:29,380 --> 00:15:32,130
one and we've stitched those
back together, and then you

285
00:15:32,130 --> 00:15:34,150
essentially get what you're
looking at here.

286
00:15:34,150 --> 00:15:39,030
So left here is VP9, right is
264, and those are at about

287
00:15:39,030 --> 00:15:41,310
the same bit rate.

288
00:15:41,310 --> 00:15:44,180
You will see graphs here on the
left and on the right, and

289
00:15:44,180 --> 00:15:46,320
those are actually the effective
bit rate for this

290
00:15:46,320 --> 00:15:48,370
particular video clip.

291
00:15:48,370 --> 00:15:50,820
And as you can see, it starts
being about equal.

292
00:15:50,820 --> 00:15:53,590
Now, you saw it just jumping up,
and that's because we're

293
00:15:53,590 --> 00:15:57,010
gradually increasing the bit
rate to allow the 264 encoder

294
00:15:57,010 --> 00:15:58,810
to catch up in quality.

295
00:15:58,810 --> 00:16:02,590
And as you can see, it slowly,
slowly starts looking a little

296
00:16:02,590 --> 00:16:03,500
bit better.

297
00:16:03,500 --> 00:16:05,980
And at this point, I would say
that it looks about equal on

298
00:16:05,980 --> 00:16:07,260
the left and on the right.

299
00:16:07,260 --> 00:16:09,310
But if you look at the bit rate
graphs, you can basically

300
00:16:09,310 --> 00:16:11,760
see that we're spending about
two and a half times the bit

301
00:16:11,760 --> 00:16:16,170
rate on a 264 file versus
the VP9 file.

302
00:16:16,170 --> 00:16:19,690
So those are the compression
savings that you can get if

303
00:16:19,690 --> 00:16:21,810
you do same quality encodings
but you use

304
00:16:21,810 --> 00:16:28,430
VP9 instead of 264.

305
00:16:28,430 --> 00:16:33,990
So what you're looking at here
is a comparative graph for the

306
00:16:33,990 --> 00:16:35,690
clip that you were
just looking at.

307
00:16:35,690 --> 00:16:38,770
The blue line is the 264 encoded
version and the red

308
00:16:38,770 --> 00:16:41,420
line is the VP9 encoded
version.

309
00:16:41,420 --> 00:16:43,440
And as I said in the beginning,
vertical axis is

310
00:16:43,440 --> 00:16:45,540
PSNR as a metric of
quality, and the

311
00:16:45,540 --> 00:16:47,490
horizontal axis is bit rate.

312
00:16:47,490 --> 00:16:51,500
So the way that you compare
these is that you can pick any

313
00:16:51,500 --> 00:16:53,840
point from the red line--

314
00:16:53,840 --> 00:16:55,920
or from the blue line,
for that matter--

315
00:16:55,920 --> 00:16:57,090
and then you can
do two things.

316
00:16:57,090 --> 00:17:02,340
Either you can draw a vertical
line and find the matching

317
00:17:02,340 --> 00:17:05,130
point on a blue line that
matches the points on the red

318
00:17:05,130 --> 00:17:07,010
line that you're looking for
and look at what the

319
00:17:07,010 --> 00:17:08,520
difference in quality is.

320
00:17:08,520 --> 00:17:11,859
But what we usually do is we
do it the other way around.

321
00:17:11,859 --> 00:17:15,970
So we're drawing a horizontal
line for the point on the red

322
00:17:15,970 --> 00:17:18,640
graph, and we're finding the
point that matches the

323
00:17:18,640 --> 00:17:20,290
horizontal line on the blue.

324
00:17:20,290 --> 00:17:22,900
And what you're looking at here
is that for the point

325
00:17:22,900 --> 00:17:26,710
that we were just looking at,
that is, a quality metric

326
00:17:26,710 --> 00:17:32,050
point of about 37.1 dB, the VP9
version takes an average

327
00:17:32,050 --> 00:17:36,050
of 328 kilobits a second to
reach that quality, and for

328
00:17:36,050 --> 00:17:38,970
H.264, you need to go up to
essentially 800 kilobits a

329
00:17:38,970 --> 00:17:42,820
second to get exactly
the same quality.

330
00:17:42,820 --> 00:17:48,620
So what that means is, again,
the metrics tell us you can

331
00:17:48,620 --> 00:17:51,780
get a two and a half times lower
bit rate and effectively

332
00:17:51,780 --> 00:17:55,290
get the same quality by using
VP9 instead of 264.

333
00:17:55,290 --> 00:17:57,510
If you look to the higher end
of the graph, you will see

334
00:17:57,510 --> 00:18:01,570
that the differences in quality
for the same bit rates

335
00:18:01,570 --> 00:18:04,800
might go slightly down, but
that's basically just because

336
00:18:04,800 --> 00:18:06,460
at the higher end, there's
a diminishing

337
00:18:06,460 --> 00:18:07,650
returns for bit rate.

338
00:18:07,650 --> 00:18:11,440
So if you look at the high ends
of both of those graphs

339
00:18:11,440 --> 00:18:14,980
and you do the horizontal line
comparison, so what is the

340
00:18:14,980 --> 00:18:17,960
different bit rate that
accomplishes the same quality?

341
00:18:17,960 --> 00:18:21,610
You will see that it about
comes down to 2x over the

342
00:18:21,610 --> 00:18:22,860
whole graph.

343
00:18:22,860 --> 00:18:25,140

344
00:18:25,140 --> 00:18:28,040
So let's look at the difference
video because I

345
00:18:28,040 --> 00:18:30,470
could just be cheating you with
this one video and we

346
00:18:30,470 --> 00:18:34,610
could have optimized our codec
for this one video.

347
00:18:34,610 --> 00:18:38,930
So what you're looking at here
is, again, the same thing, VP9

348
00:18:38,930 --> 00:18:42,650
on the left, 264 on the right,
live bit rate graphs and we

349
00:18:42,650 --> 00:18:44,360
start at the same bit rate.

350
00:18:44,360 --> 00:18:47,130
Then as we do that, we're slowly
increasing the bit rate

351
00:18:47,130 --> 00:18:51,740
for the 264 portion video so
that it can actually catch up

352
00:18:51,740 --> 00:18:52,930
in quality.

353
00:18:52,930 --> 00:18:56,410
And what you're looking at is
that on the right, the floor

354
00:18:56,410 --> 00:18:57,430
is pulsing a lot.

355
00:18:57,430 --> 00:18:59,690
You can actually see, if you
focus on the pants of little

356
00:18:59,690 --> 00:19:03,710
boy here or on the plastic box,
that it's very noisy.

357
00:19:03,710 --> 00:19:06,340
But eventually, it catches
up in quality.

358
00:19:06,340 --> 00:19:08,050
Guess what happened
to the bit rate?

359
00:19:08,050 --> 00:19:11,330
It's almost 3x for this
particular video.

360
00:19:11,330 --> 00:19:17,600

361
00:19:17,600 --> 00:19:20,000
So here is the [INAUDIBLE] graph
for the material that we

362
00:19:20,000 --> 00:19:21,240
were just looking at.

363
00:19:21,240 --> 00:19:25,240
The red line is VP9, the
blue line is H.264.

364
00:19:25,240 --> 00:19:30,320
And if we do the same quality
different bit rate comparison

365
00:19:30,320 --> 00:19:32,300
at the point that we were just
looking at, which is about

366
00:19:32,300 --> 00:19:37,950
38.6 dB, for VP9, you arrive
at about 200 kilobits a

367
00:19:37,950 --> 00:19:42,160
second, and for H.264, you need
to interpolate between

368
00:19:42,160 --> 00:19:45,340
two points because we don't have
an exact match, and it

369
00:19:45,340 --> 00:19:48,430
ends up being around 550
kilobits a second.

370
00:19:48,430 --> 00:19:54,660
So almost 3x more bit rates to
accomplish the same quality,

371
00:19:54,660 --> 00:19:58,240
just because you can use
VP9 to save this.

372
00:19:58,240 --> 00:20:01,250
So we've done this over
many, many clips.

373
00:20:01,250 --> 00:20:04,010
I told you we had about 700
clips that we tested this on

374
00:20:04,010 --> 00:20:07,440
at various bit rates and various
quality settings, and

375
00:20:07,440 --> 00:20:10,800
overall, you can save 50%
bandwidth by encoding your

376
00:20:10,800 --> 00:20:16,100
videos in VP9 instead of H.264
at the very best settings that

377
00:20:16,100 --> 00:20:17,350
we are aware of.

378
00:20:17,350 --> 00:20:21,690

379
00:20:21,690 --> 00:20:24,450
So how did we do this?

380
00:20:24,450 --> 00:20:26,710
So let's look a little bit at
the techniques that we're

381
00:20:26,710 --> 00:20:29,250
using to actually get to this
kind of compression

382
00:20:29,250 --> 00:20:30,230
efficiency.

383
00:20:30,230 --> 00:20:33,500
So a typical video sequence
consists of a series of video

384
00:20:33,500 --> 00:20:36,150
frames, and then each of
these video frames

385
00:20:36,150 --> 00:20:38,610
consist of square blocks.

386
00:20:38,610 --> 00:20:42,650
So for current generation video
codecs, like H.264,

387
00:20:42,650 --> 00:20:46,960
these blocks have a size of
a maximum 16 by 16 pixels.

388
00:20:46,960 --> 00:20:48,860
We've blown this up a lot.

389
00:20:48,860 --> 00:20:52,830
We have currently gone up to
64 by 64 pixels for each

390
00:20:52,830 --> 00:20:56,990
block, and then at that
point, we introduce a

391
00:20:56,990 --> 00:20:58,360
partitioning step.

392
00:20:58,360 --> 00:21:01,610
And in this partitioning step,
we allow you to do a vertical

393
00:21:01,610 --> 00:21:04,360
or horizontal partitioning,
a four-way split, or no

394
00:21:04,360 --> 00:21:08,190
partitioning at all, resulting
in different size sub-blocks.

395
00:21:08,190 --> 00:21:13,380
If you do a four-way split and
you have four 32 by 32 blocks,

396
00:21:13,380 --> 00:21:16,000
then for each of these blocks,
you go through the same

397
00:21:16,000 --> 00:21:18,860
process again of horizontal,
vertical split, four-way

398
00:21:18,860 --> 00:21:21,300
split, or no split at all.

399
00:21:21,300 --> 00:21:24,300
If you do the four-way split,
you get down to 16 by 16

400
00:21:24,300 --> 00:21:27,200
pixels, do the same thing
again to get to eight by

401
00:21:27,200 --> 00:21:29,950
eight, and eventually
four by four pixels.

402
00:21:29,950 --> 00:21:33,880
So what this partitioning step
allows you to do is to break

403
00:21:33,880 --> 00:21:38,250
up the video in such a way that
it's optimized for your

404
00:21:38,250 --> 00:21:39,660
particular content.

405
00:21:39,660 --> 00:21:42,270
Stuff that has a very stable
motion field can use very

406
00:21:42,270 --> 00:21:45,470
large blocks, whereas video
content where things are

407
00:21:45,470 --> 00:21:48,480
moving all across all the time,
you can go to very small

408
00:21:48,480 --> 00:21:51,560
video blocks.

409
00:21:51,560 --> 00:21:53,130
So what do we you
do after that?

410
00:21:53,130 --> 00:21:58,240
So after this partitioning
step, we're usually doing

411
00:21:58,240 --> 00:22:01,190
motion vector coding, and
basically what that does is

412
00:22:01,190 --> 00:22:04,260
that you pick a reference frame,
and you pick a motion

413
00:22:04,260 --> 00:22:07,110
vector, and then the block of
that particular size that you

414
00:22:07,110 --> 00:22:10,990
selected in your partitioning
step will be coded using a

415
00:22:10,990 --> 00:22:13,580
motion vector pointing in one
of the previously coded

416
00:22:13,580 --> 00:22:15,020
reference frames.

417
00:22:15,020 --> 00:22:19,550
These reference frames in VP8
were usually frames that had

418
00:22:19,550 --> 00:22:22,950
previously been encoded, and
were therefore temporarily

419
00:22:22,950 --> 00:22:25,290
before the current frame.

420
00:22:25,290 --> 00:22:28,670
What we've added in VP9 is that
we have multi-level alt

421
00:22:28,670 --> 00:22:31,800
reference frames, and what
that allows you to do is

422
00:22:31,800 --> 00:22:37,510
encode the video sequence in any
frame order, and then you

423
00:22:37,510 --> 00:22:41,490
can use any future frame as a
reference frame for a frame

424
00:22:41,490 --> 00:22:44,700
that you encode in order, decide
to encode after that.

425
00:22:44,700 --> 00:22:46,650
So for this series
of frames in the

426
00:22:46,650 --> 00:22:48,990
left, this is six frames.

427
00:22:48,990 --> 00:22:51,390
I could, for example, choose the
first thing encode frame

428
00:22:51,390 --> 00:22:58,250
one, then frame six, and then
frame three using both a

429
00:22:58,250 --> 00:23:00,830
future as well as a
past reference.

430
00:23:00,830 --> 00:23:03,350
And then, now that I have
encoded three, I can encode

431
00:23:03,350 --> 00:23:06,060
one and two really efficiently
because they have a very

432
00:23:06,060 --> 00:23:09,010
proximate future and
past reference.

433
00:23:09,010 --> 00:23:11,800
After I've encoded two and
three, I go to five, which has

434
00:23:11,800 --> 00:23:13,900
four and six as close
neighbors.

435
00:23:13,900 --> 00:23:18,750
And so that allows for very
temporally close reference

436
00:23:18,750 --> 00:23:22,160
frames to be used as a predictor
of contents in the

437
00:23:22,160 --> 00:23:25,230
current block.

438
00:23:25,230 --> 00:23:30,280
So once you have a motion
vector, you can use subpixel

439
00:23:30,280 --> 00:23:32,800
filtering, and subpixel
filtering allows you to

440
00:23:32,800 --> 00:23:37,560
basically pick a point in
between two full pixels and

441
00:23:37,560 --> 00:23:40,580
this point in between is then
interpolated using a subpixel

442
00:23:40,580 --> 00:23:43,050
interpolation filter.

443
00:23:43,050 --> 00:23:46,430
In VP8, we had only a single
subpixel interpolation filter.

444
00:23:46,430 --> 00:23:49,520
Most codecs use just a single
subpixel interpolation filter.

445
00:23:49,520 --> 00:23:53,190
We've actually added three in
VP9, and those are optimized

446
00:23:53,190 --> 00:23:54,780
for different types
of material.

447
00:23:54,780 --> 00:23:58,320
We have a sharp subpixel
interpolation filter, which is

448
00:23:58,320 --> 00:24:00,890
really great for material where
there's a very sharp

449
00:24:00,890 --> 00:24:02,590
edge somewhere in the middle.

450
00:24:02,590 --> 00:24:05,490
For example, that city clip that
we were looking at in the

451
00:24:05,490 --> 00:24:08,090
beginning, if you're thinking of
a block that happens to be

452
00:24:08,090 --> 00:24:10,250
somewhere on the border
between the sky and a

453
00:24:10,250 --> 00:24:13,800
building, we consider that a
sharp edge, and so using an

454
00:24:13,800 --> 00:24:17,330
optimized filter for sharp edges
actually maintains a lot

455
00:24:17,330 --> 00:24:18,950
of that detail.

456
00:24:18,950 --> 00:24:24,500
On the other hand, sometimes
there's very sharp edges but

457
00:24:24,500 --> 00:24:28,350
those are not consistent across
video frames across

458
00:24:28,350 --> 00:24:31,040
different temporal points in
the sequence that you're

459
00:24:31,040 --> 00:24:32,080
looking at.

460
00:24:32,080 --> 00:24:35,240
And that point, this will cause
a very high frequency

461
00:24:35,240 --> 00:24:37,930
residual artifact, and
so for those, we've

462
00:24:37,930 --> 00:24:39,240
added a low pass filter.

463
00:24:39,240 --> 00:24:41,780
And what the low pass filter
does is that it basically

464
00:24:41,780 --> 00:24:44,760
removes sharp edges, and it does
exactly the opposite as a

465
00:24:44,760 --> 00:24:45,970
sharp filter.

466
00:24:45,970 --> 00:24:48,250
Lastly, we have a regular
filter, which is similar to

467
00:24:48,250 --> 00:24:50,270
the one that VP8 had.

468
00:24:50,270 --> 00:24:53,240
After this prediction step,
you have predicted block

469
00:24:53,240 --> 00:24:56,100
contents and you have the
actual block that you're

470
00:24:56,100 --> 00:25:00,150
trying to get as close as
possible to, and then the

471
00:25:00,150 --> 00:25:02,520
difference between these two
is the residual signal that

472
00:25:02,520 --> 00:25:03,820
you're going to encode.

473
00:25:03,820 --> 00:25:08,480
So in current generation video
codecs, we usually use four by

474
00:25:08,480 --> 00:25:12,980
four or eight by eight cosine
based transforms called DCTs

475
00:25:12,980 --> 00:25:15,340
to encode this residual
signal.

476
00:25:15,340 --> 00:25:19,020
What we've added in VP9 is much
higher resolution DCT

477
00:25:19,020 --> 00:25:22,730
transforms all the way up to
32 by 32 pixels, and in

478
00:25:22,730 --> 00:25:26,710
addition to using the DCT, we've
also added an asymmetric

479
00:25:26,710 --> 00:25:29,450
sine based transform
called ADST.

480
00:25:29,450 --> 00:25:32,480
And the sine based transform is
optimized for a signal that

481
00:25:32,480 --> 00:25:36,700
has a near zero value at the
edge of the predicted region,

482
00:25:36,700 --> 00:25:39,770
whereas the cosine is optimized
for a residual

483
00:25:39,770 --> 00:25:42,190
signal that has a zero signal
in the middle of

484
00:25:42,190 --> 00:25:43,620
the predicted signal.

485
00:25:43,620 --> 00:25:46,730
So those are optimized for
different conditions, and

486
00:25:46,730 --> 00:25:51,680
together, they give good gains
when used properly.

487
00:25:51,680 --> 00:25:54,250
Basically, the take home message
from all of this is

488
00:25:54,250 --> 00:25:59,930
that we've added big resolution
increments to our

489
00:25:59,930 --> 00:26:03,940
video codecs, and what that
leads to is a codec that is

490
00:26:03,940 --> 00:26:07,060
highly, highly optimized for
high definition video coding.

491
00:26:07,060 --> 00:26:10,460
But at the same time, because
it is very configurable, it

492
00:26:10,460 --> 00:26:14,220
still performs really well at
low resolution content, for

493
00:26:14,220 --> 00:26:19,320
example, SIF-based 320
by 240 video as well.

494
00:26:19,320 --> 00:26:25,410
So I'll hand it back to Matt
now, who will take over.

495
00:26:25,410 --> 00:26:28,070
MATT FROST: Thanks, Ronald.

496
00:26:28,070 --> 00:26:32,280
So I just want to give you a
quick recap of what we've

497
00:26:32,280 --> 00:26:34,710
discussed and sort of the
highlights of this technology,

498
00:26:34,710 --> 00:26:37,520
and then to tell you about the
last steps that we're going

499
00:26:37,520 --> 00:26:41,650
through to get VP9
in your hands.

500
00:26:41,650 --> 00:26:45,300
As Ronald said, we're talking
about technology here that is

501
00:26:45,300 --> 00:26:48,550
50% better than literally
everything that everybody else

502
00:26:48,550 --> 00:26:49,270
out there is using.

503
00:26:49,270 --> 00:26:54,410
And actually, we made a point to
say we were using the very

504
00:26:54,410 --> 00:26:58,930
best encoder out there at the
very best settings, settings

505
00:26:58,930 --> 00:27:01,670
which I really think you're not
seeing very often in the

506
00:27:01,670 --> 00:27:06,490
real world because they're very
difficult to use in a

507
00:27:06,490 --> 00:27:08,540
real world encoding
environment.

508
00:27:08,540 --> 00:27:11,620
So I hope that there are a
number of people in this

509
00:27:11,620 --> 00:27:14,470
audience now who are out there,
either with existing

510
00:27:14,470 --> 00:27:17,040
products with video or products
to which you're

511
00:27:17,040 --> 00:27:21,070
looking to add video, or just
you're thinking about how you

512
00:27:21,070 --> 00:27:24,580
can use these tools to launch a
new product and to come out

513
00:27:24,580 --> 00:27:25,640
with a start-up.

514
00:27:25,640 --> 00:27:29,650
This technology has not been
used by anyone right now.

515
00:27:29,650 --> 00:27:31,880
YouTube is testing it and we'll
talk about that in a

516
00:27:31,880 --> 00:27:36,140
little bit, but if you adopt
VP9, as you can very quickly,

517
00:27:36,140 --> 00:27:38,550
you will have a tremendous
advantage over anybody out

518
00:27:38,550 --> 00:27:40,820
there with their current
offering based

519
00:27:40,820 --> 00:27:44,580
on 264 or even VP8.

520
00:27:44,580 --> 00:27:49,710
It's currently available in
Chrome, and the libvpx library

521
00:27:49,710 --> 00:27:52,190
on the WebM project is out there
for you to download,

522
00:27:52,190 --> 00:27:54,740
compile, and test.

523
00:27:54,740 --> 00:27:56,630
It's open source.

524
00:27:56,630 --> 00:27:59,430
You will have access
to source code.

525
00:27:59,430 --> 00:28:02,310
The terms of the open source
license are incredibly liberal

526
00:28:02,310 --> 00:28:07,560
so that you can take the code,
improve it, optimize it,

527
00:28:07,560 --> 00:28:12,340
modify it, integrate it with
your proprietary technology,

528
00:28:12,340 --> 00:28:15,760
and you're not going to have to
give back a line of code to

529
00:28:15,760 --> 00:28:16,330
the project.

530
00:28:16,330 --> 00:28:18,620
You're not going to have to
be concerned that you will

531
00:28:18,620 --> 00:28:22,060
inadvertently open source your
own proprietary code.

532
00:28:22,060 --> 00:28:24,140
And then finally, it's
royalty free.

533
00:28:24,140 --> 00:28:27,360
And obviously, this is something
that was of great

534
00:28:27,360 --> 00:28:30,950
importance to us as we sought
to open source a video

535
00:28:30,950 --> 00:28:34,600
technology for use in HTML5
and the video tag.

536
00:28:34,600 --> 00:28:38,490
We believe that the best is
still to come in terms of

537
00:28:38,490 --> 00:28:41,660
video products on the web, and
that in order to make sure

538
00:28:41,660 --> 00:28:43,690
that people are free to innovate
and that start-ups

539
00:28:43,690 --> 00:28:46,820
are free to launch great new
video products, we have to

540
00:28:46,820 --> 00:28:49,940
make sure that they're not
writing $5 or $6 million

541
00:28:49,940 --> 00:28:52,000
checks a year to standards
bodies.

542
00:28:52,000 --> 00:28:54,780

543
00:28:54,780 --> 00:28:58,290
We're working very hard on
putting this technology into

544
00:28:58,290 --> 00:29:00,380
your hands as soon
as possible.

545
00:29:00,380 --> 00:29:05,650
We did a semi freeze of the bit
stream just a couple of

546
00:29:05,650 --> 00:29:10,810
weeks ago, and at that time,
we said that we were taking

547
00:29:10,810 --> 00:29:14,670
comments on the bit stream
for 45 more days.

548
00:29:14,670 --> 00:29:17,860
Specifically, we're looking for
comments from a lot of our

549
00:29:17,860 --> 00:29:20,990
hardware partners to some of the
software techniques that

550
00:29:20,990 --> 00:29:23,550
we're using just to make sure
that we're not doing anything

551
00:29:23,550 --> 00:29:27,250
that's incredibly difficult
to implement in hardware.

552
00:29:27,250 --> 00:29:30,860
At the end of the 45 day period
on June 17, we're going

553
00:29:30,860 --> 00:29:36,840
to be bit stream frozen, which
means that after June 17, any

554
00:29:36,840 --> 00:29:40,920
VP9 encoder that you use is
going to be compliant with any

555
00:29:40,920 --> 00:29:44,310
VP9 decoder, and that if you're
encoding content with

556
00:29:44,310 --> 00:29:48,000
an encoder that's out after June
17, it's going to be able

557
00:29:48,000 --> 00:29:52,500
to play back in a decoder after
the bit stream freeze.

558
00:29:52,500 --> 00:29:55,360
Obviously, getting VP9
in Chrome is very

559
00:29:55,360 --> 00:29:56,470
important to us.

560
00:29:56,470 --> 00:29:59,690
The beta VP9 which you've
been seeing today

561
00:29:59,690 --> 00:30:01,430
is already in Chrome.

562
00:30:01,430 --> 00:30:05,240
If you download the latest
development version of Chrome

563
00:30:05,240 --> 00:30:08,430
and enable the VP9 experiment,
you'll be able to play back

564
00:30:08,430 --> 00:30:11,150
VP9 content immediately.

565
00:30:11,150 --> 00:30:15,520
As soon as we've frozen the
bit stream as of June 17,

566
00:30:15,520 --> 00:30:18,010
we're going to roll it into the
Dev Channel of Chrome as

567
00:30:18,010 --> 00:30:21,120
well with this final version of
VP9, and then that's going

568
00:30:21,120 --> 00:30:22,620
to work through the
beta channel and

569
00:30:22,620 --> 00:30:24,340
through the stable channel.

570
00:30:24,340 --> 00:30:28,600
And by the end of the summer,
we are going to have VP9 in

571
00:30:28,600 --> 00:30:33,120
stable version of Chrome rolling
out to the hundreds of

572
00:30:33,120 --> 00:30:33,990
millions of users.

573
00:30:33,990 --> 00:30:34,630
I think [INAUDIBLE]

574
00:30:34,630 --> 00:30:37,670
today said that there are
750 million users of

575
00:30:37,670 --> 00:30:38,730
Chrome right now.

576
00:30:38,730 --> 00:30:41,980
VP9 is going to be deployed
on a massive scale

577
00:30:41,980 --> 00:30:44,810
by the end of summer.

578
00:30:44,810 --> 00:30:47,160
In terms of final development
activities that we're going to

579
00:30:47,160 --> 00:30:51,340
be working on, after the bit
stream is finalized in the

580
00:30:51,340 --> 00:30:54,850
middle of June, we're going to
be focusing on optimizations

581
00:30:54,850 --> 00:30:57,190
both for performance
and for platform.

582
00:30:57,190 --> 00:30:59,930
So what that means is we'll be
working on making sure that

583
00:30:59,930 --> 00:31:04,920
they encoder is optimized for
a production environment.

584
00:31:04,920 --> 00:31:07,170
Obviously, something that's very
important to YouTube as

585
00:31:07,170 --> 00:31:11,960
YouTube moves to supporting
VP9, that the decoder is

586
00:31:11,960 --> 00:31:16,360
sufficiently fast to play
back on many of the PCs

587
00:31:16,360 --> 00:31:17,990
that are out there.

588
00:31:17,990 --> 00:31:20,710
We're also going to be working
on platform optimizations that

589
00:31:20,710 --> 00:31:23,000
will be important to Android
developers, for instance, and

590
00:31:23,000 --> 00:31:26,740
to people who want to support
VP9 on embedded devices.

591
00:31:26,740 --> 00:31:28,750
These are ARM optimizations and

592
00:31:28,750 --> 00:31:32,880
optimizations for other DSPs.

593
00:31:32,880 --> 00:31:34,860
We have hardware designs
coming out.

594
00:31:34,860 --> 00:31:38,840
For those of you who may work
with semiconductor companies

595
00:31:38,840 --> 00:31:42,250
or are thinking about a
technology like this for use

596
00:31:42,250 --> 00:31:45,800
in something like an action
camera, these are hardware

597
00:31:45,800 --> 00:31:49,360
designs that get integrated
into a larger design for a

598
00:31:49,360 --> 00:31:52,750
semiconductor and allow for
a fully accelerated VP9

599
00:31:52,750 --> 00:31:54,800
experience.

600
00:31:54,800 --> 00:31:57,620
Real time optimizations are
obviously incredibly important

601
00:31:57,620 --> 00:32:01,870
for video conferencing, Skype
style applications, and also

602
00:32:01,870 --> 00:32:05,630
for new applications that are
coming out like screencasting

603
00:32:05,630 --> 00:32:07,680
and screen sharing.

604
00:32:07,680 --> 00:32:11,170
By the end of Q3, we should have
real time optimizations

605
00:32:11,170 --> 00:32:15,190
which allow for a very good
real time performance.

606
00:32:15,190 --> 00:32:17,940
Those optimizations should
then allow VP9 to be

607
00:32:17,940 --> 00:32:21,200
integrated into the WebRTC
project, which is a sister

608
00:32:21,200 --> 00:32:25,120
project to the WebM project and
basically takes the entire

609
00:32:25,120 --> 00:32:29,170
real time communication stack
and builds it into Chrome, and

610
00:32:29,170 --> 00:32:32,280
more broadly into HTML5
capable browsers.

611
00:32:32,280 --> 00:32:36,180
And so what this means is that
when VP9 is integrated into

612
00:32:36,180 --> 00:32:40,640
WebRTC, you will have tools that
are open source, free for

613
00:32:40,640 --> 00:32:45,470
implementation that used to,
even four years ago, require

614
00:32:45,470 --> 00:32:49,400
license fees of hundreds of
thousands of dollars.

615
00:32:49,400 --> 00:32:53,730
And you, with a few hundred
lines of JavaScript, should be

616
00:32:53,730 --> 00:32:58,080
able to build the same sort of
rich video conferencing style

617
00:32:58,080 --> 00:33:01,780
applications and screencasting
applications that you're

618
00:33:01,780 --> 00:33:04,400
seeing with products
like Hangouts.

619
00:33:04,400 --> 00:33:08,890
And finally, in the end of this
year moving into Q1 2014,

620
00:33:08,890 --> 00:33:10,570
we're going to see,
again, hardware

621
00:33:10,570 --> 00:33:13,050
designs for the encoder.

622
00:33:13,050 --> 00:33:16,920
So just to give you an idea of
how usable these technologies

623
00:33:16,920 --> 00:33:27,270
are, we have a VP9 demonstration
in YouTube.

624
00:33:27,270 --> 00:33:32,630
If you download the Development
Version of Chrome

625
00:33:32,630 --> 00:33:37,140
and flip the VP9 tag, you can
play back YouTube VP9 videos.

626
00:33:37,140 --> 00:33:41,280
And one thing this should
drive home is this was a

627
00:33:41,280 --> 00:33:45,260
project that was done over the
course of two weeks, that VP9

628
00:33:45,260 --> 00:33:47,060
was built into YouTube.

629
00:33:47,060 --> 00:33:48,810
Obviously, we have very
capable teams.

630
00:33:48,810 --> 00:33:51,500
Obviously we have people on the
WebM team and people on

631
00:33:51,500 --> 00:33:54,900
the YouTube team who know a
lot about these tools, but

632
00:33:54,900 --> 00:33:59,060
this demonstration is VP9
in the YouTube operating

633
00:33:59,060 --> 00:33:59,900
environment.

634
00:33:59,900 --> 00:34:01,310
There's nothing canned here.

635
00:34:01,310 --> 00:34:05,170
This is VP9 being encoded and
transmitted in the same way

636
00:34:05,170 --> 00:34:07,620
that any other video is.

637
00:34:07,620 --> 00:34:12,010
So this, I hope, again, will
give you guys pause to say,

638
00:34:12,010 --> 00:34:13,230
god, we could do this as well.

639
00:34:13,230 --> 00:34:18,790
We could come out very quickly
with a VP9 based service that

640
00:34:18,790 --> 00:34:21,120
will be remarkably better
than anything that's

641
00:34:21,120 --> 00:34:22,820
out there right now.

642
00:34:22,820 --> 00:34:26,219
So I just want to leave you with
some thoughts about what

643
00:34:26,219 --> 00:34:28,239
I hope that you're thinking
about coming away from this

644
00:34:28,239 --> 00:34:30,270
presentation.

645
00:34:30,270 --> 00:34:35,760
The WebM project is a true
community-based open source

646
00:34:35,760 --> 00:34:40,210
project, and obviously, these
sorts of projects thrive on

647
00:34:40,210 --> 00:34:42,580
contributions from
the community.

648
00:34:42,580 --> 00:34:45,120
We are coming out of a period
where we've been very

649
00:34:45,120 --> 00:34:48,070
intensively focused on algorithm
development.

650
00:34:48,070 --> 00:34:50,920
Some of this work is certainly
very complicated stuff that

651
00:34:50,920 --> 00:34:51,860
not every--

652
00:34:51,860 --> 00:34:54,130
even incredibly seasoned--

653
00:34:54,130 --> 00:34:56,340
software engineer can work on.

654
00:34:56,340 --> 00:34:58,640
But we're moving into a point
where we're focusing on

655
00:34:58,640 --> 00:35:01,460
application development, we're
focusing on optimization,

656
00:35:01,460 --> 00:35:04,840
we're focusing on bug fixes and
patches, and that's the

657
00:35:04,840 --> 00:35:07,070
sort of thing that people in
this room certainly can do.

658
00:35:07,070 --> 00:35:10,180
So we encourage you to
contribute and we encourage

659
00:35:10,180 --> 00:35:13,170
you to advocate for use
of these technologies.

660
00:35:13,170 --> 00:35:16,520
We build open source
technologies, and yet simply

661
00:35:16,520 --> 00:35:17,920
because we build them, that
doesn't mean that

662
00:35:17,920 --> 00:35:19,090
people adopt them.

663
00:35:19,090 --> 00:35:23,060
It takes work to get communities
to focus on

664
00:35:23,060 --> 00:35:25,520
adopting these sorts of
open technologies.

665
00:35:25,520 --> 00:35:29,980
So advocate within your project
in your company,

666
00:35:29,980 --> 00:35:33,070
advocate within your company for
use of open technologies,

667
00:35:33,070 --> 00:35:36,970
and advocate within the web
community as a whole.

668
00:35:36,970 --> 00:35:41,920
We think that with VP9, we've
shown the power of a rapidly

669
00:35:41,920 --> 00:35:46,030
developing, open technology, and
we hope that people are as

670
00:35:46,030 --> 00:35:48,630
excited about this as we are and
that you go out and help

671
00:35:48,630 --> 00:35:51,050
spread the word about
this technology.

672
00:35:51,050 --> 00:35:54,210
But most important, we'd like
you to use the technology.

673
00:35:54,210 --> 00:35:57,390
We're building this with a
purpose, and that is for

674
00:35:57,390 --> 00:36:00,270
people to go out, take advantage
of these dramatic

675
00:36:00,270 --> 00:36:02,700
steps forward that we've
made with VP9.

676
00:36:02,700 --> 00:36:05,760
And so we hope you will go out,
that you'll be charged up

677
00:36:05,760 --> 00:36:09,900
from this presentation, and
that you'll immediately

678
00:36:09,900 --> 00:36:13,950
download the Development Version
of Chrome and start

679
00:36:13,950 --> 00:36:16,050
playing around with this and
start seeing what you can do

680
00:36:16,050 --> 00:36:19,540
with this tool that we've
been building for you.

681
00:36:19,540 --> 00:36:22,320
So there are just a couple of
other things I'd like to say.

682
00:36:22,320 --> 00:36:24,080
There are a couple of
other presentations

683
00:36:24,080 --> 00:36:26,040
related to this project.

684
00:36:26,040 --> 00:36:30,850
There's a presentation on
Demystifying Video Encoding,

685
00:36:30,850 --> 00:36:32,630
Encoding for WebM VP8--

686
00:36:32,630 --> 00:36:36,350
and this is certainly
relevant to VP9--

687
00:36:36,350 --> 00:36:39,740
and then another on the
WebRTC project.

688
00:36:39,740 --> 00:36:43,050
And again, if you're
considering a video

689
00:36:43,050 --> 00:36:45,720
conferencing style application,
screensharing,

690
00:36:45,720 --> 00:36:48,890
remote desktopping, this is
something that you should be

691
00:36:48,890 --> 00:36:50,140
very interested in.

692
00:36:50,140 --> 00:36:54,890

693
00:36:54,890 --> 00:36:56,140
Sorry.

694
00:36:56,140 --> 00:36:58,000

695
00:36:58,000 --> 00:36:59,250
I shouldn't be using
PowerPoint.

696
00:36:59,250 --> 00:37:01,890

697
00:37:01,890 --> 00:37:04,330
So with that, we can open
it up to questions.

698
00:37:04,330 --> 00:37:13,874

699
00:37:13,874 --> 00:37:16,840
Can we switch to just the
Developers Screen, guys?

700
00:37:16,840 --> 00:37:18,796
Do I do that?

701
00:37:18,796 --> 00:37:20,170
AUDIENCE: Hey there.

702
00:37:20,170 --> 00:37:25,290
VP8, VP9 on mobile, do you have
any plans releasing for

703
00:37:25,290 --> 00:37:29,870
iOS and integrating with
my iOS applications--

704
00:37:29,870 --> 00:37:33,770
Native, Objective
C, and stuff?

705
00:37:33,770 --> 00:37:35,480
Do you have any plans
for that?

706
00:37:35,480 --> 00:37:38,030
MATT FROST: He's asking
if VP8 is in iOS?

707
00:37:38,030 --> 00:37:43,700
AUDIENCE: VP9 on iOS running
on top of Objective C.

708
00:37:43,700 --> 00:37:48,590
RONALD BULTJE: So I think as
for Android, it's obvious

709
00:37:48,590 --> 00:37:51,230
Android supports VP8 and
Android will eventually

710
00:37:51,230 --> 00:37:52,110
support VP9 as well.

711
00:37:52,110 --> 00:37:53,360
For iOS--

712
00:37:53,360 --> 00:37:55,840

713
00:37:55,840 --> 00:37:57,920
MATT FROST: When I was talking
about optimizations, platform

714
00:37:57,920 --> 00:38:02,040
optimizations, talking about
VP9, that's the sort of work

715
00:38:02,040 --> 00:38:04,850
we're focusing on, ARM
optimizations that should

716
00:38:04,850 --> 00:38:09,570
apply across all of these ARM
SOCs that are prevalent in

717
00:38:09,570 --> 00:38:12,250
Android devices and
iOS devices.

718
00:38:12,250 --> 00:38:17,060
There aren't hardware
accelerators and iOS

719
00:38:17,060 --> 00:38:18,040
platforms right now.

720
00:38:18,040 --> 00:38:20,680
Obviously, that's something
we'd like to change, but

721
00:38:20,680 --> 00:38:24,600
presently, if you're going to
try to support VP8 in iOS,

722
00:38:24,600 --> 00:38:26,735
you're going to have to do
it through software.

723
00:38:26,735 --> 00:38:28,160
AUDIENCE: Thank you.

724
00:38:28,160 --> 00:38:29,140
RONALD BULTJE: Yep?

725
00:38:29,140 --> 00:38:30,410
AUDIENCE: Bruce Lawson
from Opera.

726
00:38:30,410 --> 00:38:34,100
I've been advocating WebM
for a couple of years.

727
00:38:34,100 --> 00:38:34,690
One question.

728
00:38:34,690 --> 00:38:36,440
I expect your answer is yes.

729
00:38:36,440 --> 00:38:39,880
Is it your assumption that the
agreement that you came to

730
00:38:39,880 --> 00:38:44,010
with MPEG LA about VP8 equally
applies to VP9?

731
00:38:44,010 --> 00:38:46,490
MATT FROST: It does apply to
VP9 in a slightly different

732
00:38:46,490 --> 00:38:48,660
way than it does with VP8.

733
00:38:48,660 --> 00:38:52,830
The agreement with MPEG LA and
the 11 licensors with respect

734
00:38:52,830 --> 00:38:56,200
to VP9 covers techniques that
are common with VP8.

735
00:38:56,200 --> 00:39:01,060
So obviously, we've added back
some techniques we were using

736
00:39:01,060 --> 00:39:03,890
in earlier versions, we've added
in some new techniques,

737
00:39:03,890 --> 00:39:06,660
so there are some techniques
that aren't subject to the

738
00:39:06,660 --> 00:39:07,840
license in VP9.

739
00:39:07,840 --> 00:39:11,880
But yes, the core techniques
which are used in VP8 are

740
00:39:11,880 --> 00:39:15,310
covered by the MPEG LA license,
and there will be a

741
00:39:15,310 --> 00:39:18,990
VP9 license that will be
available for developers and

742
00:39:18,990 --> 00:39:20,880
manufacturers to take
advantage of.

743
00:39:20,880 --> 00:39:21,340
AUDIENCE: Super.

744
00:39:21,340 --> 00:39:22,300
Follow up question.

745
00:39:22,300 --> 00:39:24,720
About 18 months ago, the Chrome
team announced they

746
00:39:24,720 --> 00:39:30,080
were going to drop H.264 being
bundled in the browser, and

747
00:39:30,080 --> 00:39:31,770
that subsequently
didn't happen.

748
00:39:31,770 --> 00:39:35,070
Can you comment further on
whether Chrome will drop H.264

749
00:39:35,070 --> 00:39:37,320
and concentrate only on VP9?

750
00:39:37,320 --> 00:39:41,770

751
00:39:41,770 --> 00:39:42,820
MATT FROST: I can't
really comment

752
00:39:42,820 --> 00:39:43,580
on plans going forward.

753
00:39:43,580 --> 00:39:46,840
What I can say is that having
built H.264 in, it's very

754
00:39:46,840 --> 00:39:48,750
difficult to remove
a technology.

755
00:39:48,750 --> 00:39:53,100
I think when you look at the
difference between VP9 and

756
00:39:53,100 --> 00:39:56,820
H.264, there's not
going to be any

757
00:39:56,820 --> 00:39:58,340
competition between the two.

758
00:39:58,340 --> 00:40:03,840
So I think with respect to VP9,
H.264 is slightly less

759
00:40:03,840 --> 00:40:06,710
relevant because there
was nothing--

760
00:40:06,710 --> 00:40:08,630
we didn't have our finger
on the scale for this

761
00:40:08,630 --> 00:40:09,300
presentation.

762
00:40:09,300 --> 00:40:12,430
And especially, we were hoping
to drive home with that

763
00:40:12,430 --> 00:40:16,800
initial demonstration which we
put together over the last few

764
00:40:16,800 --> 00:40:20,280
hours that we're not looking
for the best videos.

765
00:40:20,280 --> 00:40:22,010
We're just out there
recording stuff.

766
00:40:22,010 --> 00:40:26,140
So even if 264 remains
in Chrome--

767
00:40:26,140 --> 00:40:28,230
which I think is probably
likely--

768
00:40:28,230 --> 00:40:30,790
I don't think it's going to be
relevant for a next gen codec

769
00:40:30,790 --> 00:40:33,090
because there's just such
a difference in quality.

770
00:40:33,090 --> 00:40:36,062
AUDIENCE: Thanks for
your answers.

771
00:40:36,062 --> 00:40:36,840
AUDIENCE: Hi there.

772
00:40:36,840 --> 00:40:38,920
I have a question about
performance.

773
00:40:38,920 --> 00:40:42,160
Besides the obvious difference
in royalty and licensing and

774
00:40:42,160 --> 00:40:46,630
all that, can you comment on
VP9 versus HEVC, and do you

775
00:40:46,630 --> 00:40:48,870
hope to achieve the same
performance or proof of

776
00:40:48,870 --> 00:40:49,210
[INAUDIBLE]?

777
00:40:49,210 --> 00:40:52,560
RONALD BULTJE: So the question
is in terms of quality, how do

778
00:40:52,560 --> 00:40:53,970
VP9 and HEVC compare?

779
00:40:53,970 --> 00:40:55,710
AUDIENCE: Yeah, and bit rate
performance, yeah.

780
00:40:55,710 --> 00:40:57,360
RONALD BULTJE: Right.

781
00:40:57,360 --> 00:41:00,830
So testing HEVC is difficult.

782
00:41:00,830 --> 00:41:02,160
I'll answer your question
in a second.

783
00:41:02,160 --> 00:41:06,050
Testing HEVC is difficult
because there's currently no

784
00:41:06,050 --> 00:41:09,380
either open source software or
commercial software available

785
00:41:09,380 --> 00:41:12,970
that can actually encode
HEVC unless it's highly

786
00:41:12,970 --> 00:41:16,320
developmental in nature or it
is the development model.

787
00:41:16,320 --> 00:41:19,150
The problem with the alpha and
beta versions that are

788
00:41:19,150 --> 00:41:22,590
currently on the market for
commercial products is that

789
00:41:22,590 --> 00:41:24,830
we're not allowed to use them
in comparative settings like

790
00:41:24,830 --> 00:41:25,950
we're doing.

791
00:41:25,950 --> 00:41:28,260
Their license doesn't
allow us to do that.

792
00:41:28,260 --> 00:41:30,560
Then the problem with the
reference model is it is a

793
00:41:30,560 --> 00:41:33,570
really good encoder, it gives
good quality, but it is so

794
00:41:33,570 --> 00:41:35,500
enormously slow.

795
00:41:35,500 --> 00:41:37,560
It can do about 10 frames
an hour for a

796
00:41:37,560 --> 00:41:38,990
high definition video.

797
00:41:38,990 --> 00:41:44,290
That's just not something that
we can really use in YouTube.

798
00:41:44,290 --> 00:41:46,190
But yes, we've done
those tests.

799
00:41:46,190 --> 00:41:50,310
In terms of quality, they're
currently about equal.

800
00:41:50,310 --> 00:41:53,180
There's some videos where HEVC,
the reference model, is

801
00:41:53,180 --> 00:41:55,720
actually about 10%,
20% better.

802
00:41:55,720 --> 00:41:58,160
There's also a couple of videos
where VP9 is about 10%,

803
00:41:58,160 --> 00:41:58,900
20% better.

804
00:41:58,900 --> 00:42:02,000
If you take the average over,
for example, all of those CCL

805
00:42:02,000 --> 00:42:05,850
licensed YouTube clips that we
looked at, it's about a 1%

806
00:42:05,850 --> 00:42:06,340
difference.

807
00:42:06,340 --> 00:42:10,935
I think that 1% is in favor of
HEVC if you so wish, but 1% is

808
00:42:10,935 --> 00:42:14,730
so small that really, we don't
think that plays a role.

809
00:42:14,730 --> 00:42:16,260
What does that mean
going forward?

810
00:42:16,260 --> 00:42:18,900
Well, we're really more
interested in commercial

811
00:42:18,900 --> 00:42:21,900
software that will be out there
that actually encodes

812
00:42:21,900 --> 00:42:25,060
HEVC at reasonable
speed settings.

813
00:42:25,060 --> 00:42:27,270
And like I said, there's
currently nothing on the

814
00:42:27,270 --> 00:42:29,760
market but we're really
interested in such products,

815
00:42:29,760 --> 00:42:31,960
so once they are on the market
and we can use them, we

816
00:42:31,960 --> 00:42:33,270
certainly will.

817
00:42:33,270 --> 00:42:35,030
AUDIENCE: Follow-up question
about the performance.

818
00:42:35,030 --> 00:42:38,840
Is this any reason to not expect
this to scale up to 4K

819
00:42:38,840 --> 00:42:41,380
video or [INAUDIBLE]?

820
00:42:41,380 --> 00:42:44,990
RONALD BULTJE: We think that
the current high definition

821
00:42:44,990 --> 00:42:48,200
trend is mostly going towards
720p and 1080p.

822
00:42:48,200 --> 00:42:51,505
So if you look at YouTube
uploads, there is basically no

823
00:42:51,505 --> 00:42:54,180
4K material there, so it's
just really hard to find

824
00:42:54,180 --> 00:42:56,740
testing materials, and that's
why we mostly use 720p and

825
00:42:56,740 --> 00:42:58,560
1080p material.

826
00:42:58,560 --> 00:43:02,080
MATT FROST: But certainly when
we designed the codec, we

827
00:43:02,080 --> 00:43:03,380
designed it with 4K in mind.

828
00:43:03,380 --> 00:43:05,690
There aren't any limitations
which are going to prevent it

829
00:43:05,690 --> 00:43:05,960
from doing 4K.

830
00:43:05,960 --> 00:43:06,150
RONALD BULTJE: Right.

831
00:43:06,150 --> 00:43:10,370
You can use this all the way up
to 16K video if that's what

832
00:43:10,370 --> 00:43:12,585
you were asking.

833
00:43:12,585 --> 00:43:13,300
MATT FROST: Sir?

834
00:43:13,300 --> 00:43:13,683
AUDIENCE: Yeah.

835
00:43:13,683 --> 00:43:16,160
Have you been talking to the
WebRTC team, and do you know

836
00:43:16,160 --> 00:43:18,030
when they're going to integrate
VP9 into their

837
00:43:18,030 --> 00:43:20,280
current products?

838
00:43:20,280 --> 00:43:23,200
MATT FROST: We talk with the
WebRTC team regularly.

839
00:43:23,200 --> 00:43:28,470
As I said, we've got to finish
our real time enhancements in

840
00:43:28,470 --> 00:43:30,820
order to actually have a codec
that works well in a real time

841
00:43:30,820 --> 00:43:33,450
environment before we can expect
it to be integrated

842
00:43:33,450 --> 00:43:34,310
into WebRTC.

843
00:43:34,310 --> 00:43:40,256
But I think we're looking
at Q4 2013.

844
00:43:40,256 --> 00:43:41,320
AUDIENCE: Great, thanks.

845
00:43:41,320 --> 00:43:42,200
MATT FROST: We're
in 2013, right?

846
00:43:42,200 --> 00:43:44,180
RONALD BULTJE: Yeah.

847
00:43:44,180 --> 00:43:44,670
AUDIENCE: Hi.

848
00:43:44,670 --> 00:43:46,680
I just wanted to talk
about the rate of

849
00:43:46,680 --> 00:43:48,040
change in video codecs.

850
00:43:48,040 --> 00:43:50,880
I think maybe we can see like
VP8, VP9, we're talking about

851
00:43:50,880 --> 00:43:52,820
an accelerating rate
of change.

852
00:43:52,820 --> 00:43:55,070
And that's great, and I really
wanted to applaud the efforts

853
00:43:55,070 --> 00:43:57,295
to getting this out in Chrome
Dev quickly, or

854
00:43:57,295 --> 00:43:58,810
Chrome Stable quickly.

855
00:43:58,810 --> 00:44:01,130
I just wanted to ask about
maybe some of your

856
00:44:01,130 --> 00:44:03,520
relationships with other
software vendors that are

857
00:44:03,520 --> 00:44:06,840
going to be relevant, like we're
talking Mozilla, IE, iOS

858
00:44:06,840 --> 00:44:08,510
was, I think, previously
mentioned.

859
00:44:08,510 --> 00:44:13,540
As this kind of rate of
innovation in codecs

860
00:44:13,540 --> 00:44:17,480
increases, how are we going to
make sure that we can have as

861
00:44:17,480 --> 00:44:19,760
few transcode targets
as possible?

862
00:44:19,760 --> 00:44:21,810
My company is working
on a video product.

863
00:44:21,810 --> 00:44:23,810
We don't want to have eight
different codecs.

864
00:44:23,810 --> 00:44:29,250
And if we can imagine, let's
say, that Version 10 comes out

865
00:44:29,250 --> 00:44:30,640
relatively soon, sometime
down the road.

866
00:44:30,640 --> 00:44:33,620
How can we make sure that
devices stick with a

867
00:44:33,620 --> 00:44:38,790
relatively small subset of
compatible decodings?

868
00:44:38,790 --> 00:44:40,230
MATT FROST: I guess I'm
a little unsure

869
00:44:40,230 --> 00:44:40,680
of what you're asking.

870
00:44:40,680 --> 00:44:43,820
In terms of how we get support
on devices as quickly as

871
00:44:43,820 --> 00:44:47,000
possible, or how we solve
the transcoding problem?

872
00:44:47,000 --> 00:44:51,700
AUDIENCE: And just keeping the
number of transcoded formats

873
00:44:51,700 --> 00:44:52,830
as small as possible.

874
00:44:52,830 --> 00:44:55,420
If IE only supports
H.264, I have to

875
00:44:55,420 --> 00:44:57,730
have an H.264 encoding.

876
00:44:57,730 --> 00:44:59,980
So I was just wondering what
kind of relationships you guys

877
00:44:59,980 --> 00:45:03,440
are working on to make sure
that as many devices and

878
00:45:03,440 --> 00:45:07,510
platforms as possible can
support something like VP9.

879
00:45:07,510 --> 00:45:09,990
MATT FROST: We're certainly
working very hard on that, and

880
00:45:09,990 --> 00:45:16,230
as I said in the slide on next
steps showing the timeline,

881
00:45:16,230 --> 00:45:18,900
our focus on having hardware
designs out there as quickly

882
00:45:18,900 --> 00:45:22,820
as possible is an effort to try
to make sure that there's

883
00:45:22,820 --> 00:45:26,650
hardware that supports VP9 more
rapidly than hardware has

884
00:45:26,650 --> 00:45:28,850
ever been out to support
a new format.

885
00:45:28,850 --> 00:45:33,140
We had a VP9 summit two weeks
ago, which was largely

886
00:45:33,140 --> 00:45:36,280
attended by semiconductor
companies.

887
00:45:36,280 --> 00:45:42,240
Actually, some other very
encouraging companies were

888
00:45:42,240 --> 00:45:45,730
there with great interest in
these new technologies.

889
00:45:45,730 --> 00:45:49,310
But we're working very hard with
our hardware partners and

890
00:45:49,310 --> 00:45:52,610
with OEMs to make sure that this
is supported as quickly

891
00:45:52,610 --> 00:45:53,470
as possible.

892
00:45:53,470 --> 00:45:57,440
I think internally, what we're
looking at is probably relying

893
00:45:57,440 --> 00:46:02,410
on VP8 to the extent that we
need hardware now and we don't

894
00:46:02,410 --> 00:46:03,470
have it in VP9.

895
00:46:03,470 --> 00:46:06,670
So I think what we've talked
about is always falling back

896
00:46:06,670 --> 00:46:10,500
to an earlier version of an open
technology that has very

897
00:46:10,500 --> 00:46:13,130
broad hardware support.

898
00:46:13,130 --> 00:46:16,160
But we're trying to think very
creatively about things like

899
00:46:16,160 --> 00:46:22,270
transcoding and things that we
can do to ensure backwards

900
00:46:22,270 --> 00:46:24,340
compatibility or enhancement
layers.

901
00:46:24,340 --> 00:46:29,750
So part of the focus of this
open development cycle and

902
00:46:29,750 --> 00:46:32,770
process that we have is to
really try to think in very

903
00:46:32,770 --> 00:46:36,310
new ways about how we support
new technologies while

904
00:46:36,310 --> 00:46:39,250
maintaining the benefits of
hardware support or device

905
00:46:39,250 --> 00:46:41,240
support for older
technologies.

906
00:46:41,240 --> 00:46:41,590
AUDIENCE: Excellent.

907
00:46:41,590 --> 00:46:43,720
Thank you.

908
00:46:43,720 --> 00:46:45,500
AUDIENCE: So a key point in any
solution is going to be

909
00:46:45,500 --> 00:46:46,610
performance.

910
00:46:46,610 --> 00:46:48,450
Hardware acceleration really
solves that, and that was one

911
00:46:48,450 --> 00:46:51,270
of the challenges with the
adoption of VP8 in timing

912
00:46:51,270 --> 00:46:54,420
versus H.264, which has broad
spectrum hardware

913
00:46:54,420 --> 00:46:55,050
acceleration.

914
00:46:55,050 --> 00:46:57,880
I understand the timing, the
delays, and the efforts you

915
00:46:57,880 --> 00:47:00,220
guys are doing to really
achieve that hardware

916
00:47:00,220 --> 00:47:01,420
accelerated support for VP9.

917
00:47:01,420 --> 00:47:03,730
But until then, what's the
software performance in

918
00:47:03,730 --> 00:47:07,020
comparison to H.264, for
either both software,

919
00:47:07,020 --> 00:47:08,840
software, or software,
hardware?

920
00:47:08,840 --> 00:47:10,400
RONALD BULTJE: So we've only
done software, software

921
00:47:10,400 --> 00:47:13,650
comparisons for that.

922
00:47:13,650 --> 00:47:15,360
Let me start VP8 264.

923
00:47:15,360 --> 00:47:19,000
Currently, VP8 decoding is about
twice as fast as 264

924
00:47:19,000 --> 00:47:22,350
decoding using fully
optimized decoders.

925
00:47:22,350 --> 00:47:26,920
VP9 is about twice as slow
currently as VP8, decoding,

926
00:47:26,920 --> 00:47:29,900
and that basically means that
it's exactly at the same speed

927
00:47:29,900 --> 00:47:31,470
as H.264 decoding.

928
00:47:31,470 --> 00:47:34,330
That's not what we're targeting
as a final product.

929
00:47:34,330 --> 00:47:36,970
We haven't finished fully
optimizing the decoder.

930
00:47:36,970 --> 00:47:41,470
Eventually, what we hope to get
is about a 40% slowdown

931
00:47:41,470 --> 00:47:44,330
from VP8 decoding, and that will
put it well ahead of the

932
00:47:44,330 --> 00:47:48,310
fastest 264 decoders that are
out there in software.

933
00:47:48,310 --> 00:47:48,370
AUDIENCE: Great.

934
00:47:48,370 --> 00:47:50,282
Thank you.

935
00:47:50,282 --> 00:47:50,760
AUDIENCE: Hello.

936
00:47:50,760 --> 00:47:54,990
I was just wanting to get some
background on the comparison

937
00:47:54,990 --> 00:47:58,210
between H.264 and VP9.

938
00:47:58,210 --> 00:48:01,060
For H.264, what were
you using--

939
00:48:01,060 --> 00:48:05,590
CVR, BVR, and what QP values?

940
00:48:05,590 --> 00:48:07,260
RONALD BULTJE: This is
two path encoding at

941
00:48:07,260 --> 00:48:08,310
the target bit rate.

942
00:48:08,310 --> 00:48:11,960
So it's preset very slow.

943
00:48:11,960 --> 00:48:13,780
Since we're doing visual
comparison,

944
00:48:13,780 --> 00:48:15,750
there is no tune set.

945
00:48:15,750 --> 00:48:19,200
It's paths one or two, and then
just a target bit rate.

946
00:48:19,200 --> 00:48:22,460
We tend to choose target bit
rates that are somewhere

947
00:48:22,460 --> 00:48:27,760
between 100 and 1,000 kilobits
a second, and then we just

948
00:48:27,760 --> 00:48:32,050
pick the same point for the VP9
one as well to start with.

949
00:48:32,050 --> 00:48:34,410
AUDIENCE: So in both of the
comparisons, you were trying

950
00:48:34,410 --> 00:48:38,280
to be very generic so you
weren't tuning the encoder in

951
00:48:38,280 --> 00:48:42,320
any way to make it a better
quality at that bit rate.

952
00:48:42,320 --> 00:48:46,240
You were just giving it two
paths to try to figure it out.

953
00:48:46,240 --> 00:48:48,980
RONALD BULTJE: So you mean
visual quality, or--

954
00:48:48,980 --> 00:48:50,550
AUDIENCE: Yes.

955
00:48:50,550 --> 00:48:53,020
RONALD BULTJE: So we haven't
tuned either one of them for

956
00:48:53,020 --> 00:48:54,020
any specific setting.

957
00:48:54,020 --> 00:48:57,430
For 264, the default is that
it optimizes for visual

958
00:48:57,430 --> 00:49:01,140
experience, and so that's why
we optimized it to 6414.

959
00:49:01,140 --> 00:49:04,580
So it's not optimized for SSIM
or PSNR in the visual displace

960
00:49:04,580 --> 00:49:05,720
that we did here.

961
00:49:05,720 --> 00:49:10,200
VP9 encoding does not have any
such tunes, so we're not

962
00:49:10,200 --> 00:49:11,990
setting any item, of course.

963
00:49:11,990 --> 00:49:13,490
AUDIENCE: So you just used
the default settings of

964
00:49:13,490 --> 00:49:13,760
[INAUDIBLE]?

965
00:49:13,760 --> 00:49:15,500
RONALD BULTJE: We're using the
default settings, and we've

966
00:49:15,500 --> 00:49:18,450
actually discussed this
extensively with the 264

967
00:49:18,450 --> 00:49:19,700
developers.

968
00:49:19,700 --> 00:49:20,260
They agree.

969
00:49:20,260 --> 00:49:23,390
They support this kind of
testing methodology, and as

970
00:49:23,390 --> 00:49:25,350
far as I'm aware, they
agree with it.

971
00:49:25,350 --> 00:49:28,620
They fully expect the
kind of results that

972
00:49:28,620 --> 00:49:29,750
we're getting here.

973
00:49:29,750 --> 00:49:30,220
AUDIENCE: Right.

974
00:49:30,220 --> 00:49:32,570
OK, thanks.

975
00:49:32,570 --> 00:49:33,040
AUDIENCE: Hi.

976
00:49:33,040 --> 00:49:35,030
One more question about
performance.

977
00:49:35,030 --> 00:49:38,150
I think you mentioned a little
bit about the real time.

978
00:49:38,150 --> 00:49:44,420
So do you think in the future,
you can manage to bring an

979
00:49:44,420 --> 00:49:48,120
application like application
desktop into the web?

980
00:49:48,120 --> 00:49:51,760
I mean like putting three,
four windows in the same

981
00:49:51,760 --> 00:49:56,710
browser, high definition,
things like that?

982
00:49:56,710 --> 00:49:59,940
RONALD BULTJE: In terms of
decoding or encoding?

983
00:49:59,940 --> 00:50:01,730
AUDIENCE: Both.

984
00:50:01,730 --> 00:50:04,170
RONALD BULTJE: So for
encoding, yes.

985
00:50:04,170 --> 00:50:07,080
So there will be real time
settings for this codec

986
00:50:07,080 --> 00:50:09,660
eventually.

987
00:50:09,660 --> 00:50:14,280
For no codec will that get you
exactly the types of bit rate

988
00:50:14,280 --> 00:50:16,790
quality ratios that you're
seeing here.

989
00:50:16,790 --> 00:50:19,550
These are really using very slow
settings, and that is by

990
00:50:19,550 --> 00:50:21,090
far not real time.

991
00:50:21,090 --> 00:50:25,000
But if you set the VP9 codec
to real time settings, then

992
00:50:25,000 --> 00:50:26,950
yes, eventually it will
encode in real time.

993
00:50:26,950 --> 00:50:30,100
It will be able to do four full
desktops all at once, and

994
00:50:30,100 --> 00:50:32,030
it will be able to decode
all of those also.

995
00:50:32,030 --> 00:50:34,540
You'll probably need a multicore
machine for this,

996
00:50:34,540 --> 00:50:36,770
obviously, but it will be
able to do it, yes.

997
00:50:36,770 --> 00:50:39,980
AUDIENCE: And you're using
the graphics card and

998
00:50:39,980 --> 00:50:41,035
other things like that.

999
00:50:41,035 --> 00:50:46,950
You didn't mention about the
hardware, OpenGL or--

1000
00:50:46,950 --> 00:50:48,280
RONALD BULTJE: It's
future software.

1001
00:50:48,280 --> 00:50:49,230
There's no hardware involved.

1002
00:50:49,230 --> 00:50:52,310
AUDIENCE: No using the hardware,
the card hardware.

1003
00:50:52,310 --> 00:50:54,810
RONALD BULTJE: We're not using
GPU or anything like that at

1004
00:50:54,810 --> 00:50:56,040
this point.

1005
00:50:56,040 --> 00:50:57,290
AUDIENCE: Thank you.

1006
00:50:57,290 --> 00:50:59,520

1007
00:50:59,520 --> 00:51:00,320
AUDIENCE: Hi.

1008
00:51:00,320 --> 00:51:03,840
I just want to know, how does
a VP9, now or later, compare

1009
00:51:03,840 --> 00:51:09,540
to VP8 and H.264 when we're
talking about single task CBR,

1010
00:51:09,540 --> 00:51:12,140
low bitrate, real
time encoding?

1011
00:51:12,140 --> 00:51:14,120
Little background is we are
part of the screen sharing

1012
00:51:14,120 --> 00:51:16,260
utility that currently uses
VP8, and we've been

1013
00:51:16,260 --> 00:51:19,360
successfully using it for a
year, but the biggest gripe

1014
00:51:19,360 --> 00:51:23,080
with VP8 is that it doesn't
respect bit rate, especially

1015
00:51:23,080 --> 00:51:25,490
on low bit rates, unless you
enable frame dropping, which

1016
00:51:25,490 --> 00:51:27,190
is unacceptable.

1017
00:51:27,190 --> 00:51:29,150
So we have to do a bunch of
hacks to actually produce

1018
00:51:29,150 --> 00:51:32,200
quality and it doesn't
behave like H.264

1019
00:51:32,200 --> 00:51:34,970
would in that situation.

1020
00:51:34,970 --> 00:51:37,590
So how will VP9 address that
problem, or is that even on

1021
00:51:37,590 --> 00:51:39,480
the roadmap?

1022
00:51:39,480 --> 00:51:41,620
RONALD BULTJE: So in general,
desktop sharing and

1023
00:51:41,620 --> 00:51:44,410
applications like this, also
real time communications, yes,

1024
00:51:44,410 --> 00:51:46,060
they're on the roadmap,
and yes,

1025
00:51:46,060 --> 00:51:47,720
they will all be supported.

1026
00:51:47,720 --> 00:51:50,090
In terms of your specific
problem, I guess the best

1027
00:51:50,090 --> 00:51:51,963
thing to do is why don't you
come and see us afterwards in

1028
00:51:51,963 --> 00:51:54,060
the Chrome [INAUDIBLE], and we
can actually look at that.

1029
00:51:54,060 --> 00:51:55,150
AUDIENCE: OK, awesome.

1030
00:51:55,150 --> 00:51:57,870
RONALD BULTJE: As for VP9,
VP9 currently does not

1031
00:51:57,870 --> 00:51:58,715
have a one pass mode.

1032
00:51:58,715 --> 00:52:01,370
We've removed that to just speed
up development, but it

1033
00:52:01,370 --> 00:52:04,300
will eventually be re-added, and
it will be as fast as the

1034
00:52:04,300 --> 00:52:08,020
VP8 one but with a 50% reduction
in bit rate.

1035
00:52:08,020 --> 00:52:09,505
AUDIENCE: Do you have
a timeline for that?

1036
00:52:09,505 --> 00:52:11,115
Is it going to this year,
or next year?

1037
00:52:11,115 --> 00:52:13,550
RONALD BULTJE: Like Matt said,
that will happen--

1038
00:52:13,550 --> 00:52:15,010
MATT FROST: Late Q3.

1039
00:52:15,010 --> 00:52:17,900
RONALD BULTJE: Q3 2013,
around then.

1040
00:52:17,900 --> 00:52:20,940
We're currently focusing on
YouTube, and those kind of

1041
00:52:20,940 --> 00:52:22,266
things will come after that.

1042
00:52:22,266 --> 00:52:22,940
AUDIENCE: Awesome.

1043
00:52:22,940 --> 00:52:25,490
Thank you.

1044
00:52:25,490 --> 00:52:27,430
AUDIENCE: I have two questions,
unrelated

1045
00:52:27,430 --> 00:52:29,500
questions to that.

1046
00:52:29,500 --> 00:52:33,190
What is the latency performance
of VP8 compared to

1047
00:52:33,190 --> 00:52:36,300
VP9 in terms of decoding
and encoding?

1048
00:52:36,300 --> 00:52:42,820
And the second question is, how
does VP9 compare to H.265?

1049
00:52:42,820 --> 00:52:45,820
RONALD BULTJE: So I think H.265,
I addressed earlier.

1050
00:52:45,820 --> 00:52:50,690
So do you want me to go into
that further, or was that OK?

1051
00:52:50,690 --> 00:52:53,550
AUDIENCE: More in terms of the
real time performance.

1052
00:52:53,550 --> 00:52:55,730
RONALD BULTJE: So in terms of
real time performance, I think

1053
00:52:55,730 --> 00:52:58,740
for both, that's really, really
hard to say because

1054
00:52:58,740 --> 00:53:01,380
there is no real time HEVC
encoder and there is no real

1055
00:53:01,380 --> 00:53:02,650
time VP9 encoder.

1056
00:53:02,650 --> 00:53:05,560
So I can sort of guess, but
this is something that the

1057
00:53:05,560 --> 00:53:06,720
future will have to tell us.

1058
00:53:06,720 --> 00:53:09,770
We will put a lot of effort
into writing real time

1059
00:53:09,770 --> 00:53:12,350
encoders or adapting our
encoder to be real time

1060
00:53:12,350 --> 00:53:15,610
capable because that is
very important for us.

1061
00:53:15,610 --> 00:53:19,020
MATT FROST: But in terms of
raw latency, it should be

1062
00:53:19,020 --> 00:53:20,270
faster than VP8.

1063
00:53:20,270 --> 00:53:23,520

1064
00:53:23,520 --> 00:53:26,400
You can decode the first
frame, right?

1065
00:53:26,400 --> 00:53:28,260
RONALD BULTJE: I think it
will be the same as VP8.

1066
00:53:28,260 --> 00:53:31,010
So VP8 allows one frame in, one
frame out, and VP9 will

1067
00:53:31,010 --> 00:53:33,940
allow exactly that same
frame control model.

1068
00:53:33,940 --> 00:53:37,190

1069
00:53:37,190 --> 00:53:38,660
AUDIENCE: So you mentioned that
you've asked hardware

1070
00:53:38,660 --> 00:53:40,480
manufacturers for any concerns
or comments.

1071
00:53:40,480 --> 00:53:42,112
Have you gotten any yet?

1072
00:53:42,112 --> 00:53:42,490
MATT FROST: Sorry.

1073
00:53:42,490 --> 00:53:44,530
Are considering supporting it?

1074
00:53:44,530 --> 00:53:47,200
AUDIENCE: Well, in terms of
the algorithms and how you

1075
00:53:47,200 --> 00:53:48,520
would actually--

1076
00:53:48,520 --> 00:53:50,050
MATT FROST: They're working
on it quickly.

1077
00:53:50,050 --> 00:53:52,070
AUDIENCE: But there's no
concerns or comments or

1078
00:53:52,070 --> 00:53:53,390
anything yet?

1079
00:53:53,390 --> 00:53:55,520
MATT FROST: No concerns.

1080
00:53:55,520 --> 00:53:58,890
AUDIENCE: You said you opened
up for comments.

1081
00:53:58,890 --> 00:53:59,060
MATT FROST: No.

1082
00:53:59,060 --> 00:54:02,530
We have received comments.

1083
00:54:02,530 --> 00:54:05,910
We have a hardware team
internally that took a first

1084
00:54:05,910 --> 00:54:06,690
pass at comments.

1085
00:54:06,690 --> 00:54:09,240
We've received a couple of
comments additionally just

1086
00:54:09,240 --> 00:54:14,610
saying, here's some stuff you're
doing in software that

1087
00:54:14,610 --> 00:54:16,630
doesn't implement well,
and hardware.

1088
00:54:16,630 --> 00:54:20,530
I don't foresee a lot of
additional comments from the

1089
00:54:20,530 --> 00:54:22,480
hardware manufacturers.

1090
00:54:22,480 --> 00:54:25,080
The other work that we're doing
over the next 45 days is

1091
00:54:25,080 --> 00:54:28,240
we had a bunch of experiments
that we had to close out, and

1092
00:54:28,240 --> 00:54:31,100
so we're doing some closing
out as well and just

1093
00:54:31,100 --> 00:54:32,350
finishing the code.

1094
00:54:32,350 --> 00:54:34,770

1095
00:54:34,770 --> 00:54:41,100
Absent act of God, this is bit
stream final on June 17.

1096
00:54:41,100 --> 00:54:43,220
RONALD BULTJE: So we have
actually received comments

1097
00:54:43,220 --> 00:54:45,020
from some hardware
manufacturers, and we are

1098
00:54:45,020 --> 00:54:47,200
actively addressing the ones
that we're getting.

1099
00:54:47,200 --> 00:54:49,360
AUDIENCE: OK, thanks.

1100
00:54:49,360 --> 00:54:50,470
AUDIENCE: Hi.

1101
00:54:50,470 --> 00:54:53,170
I might have missed this, but
when did you say the ARM

1102
00:54:53,170 --> 00:54:55,612
optimizations for VP9 are
going to come out?

1103
00:54:55,612 --> 00:54:58,170

1104
00:54:58,170 --> 00:55:00,930
MATT FROST: Actually starting
now really, we're focusing on

1105
00:55:00,930 --> 00:55:03,920
doing some optimizations by
ourselves and with partners.

1106
00:55:03,920 --> 00:55:08,340
So I would say that's going to
be coming out second half of

1107
00:55:08,340 --> 00:55:11,510
the year, and it'll probably be
sort of incremental where

1108
00:55:11,510 --> 00:55:14,960
you may get an initial pass of
ARM optimizations and then

1109
00:55:14,960 --> 00:55:16,980
some final optimization.

1110
00:55:16,980 --> 00:55:20,640
It's obviously very important
for us for Android to be able

1111
00:55:20,640 --> 00:55:23,740
to get VP9 working as well as
possible, and obviously, ARM

1112
00:55:23,740 --> 00:55:26,580
is incredibly important for
the Android ecosystem, so

1113
00:55:26,580 --> 00:55:29,430
that's an area of significant
focus.

1114
00:55:29,430 --> 00:55:34,790
AUDIENCE: And in terms of real
time encoding, so in order to

1115
00:55:34,790 --> 00:55:36,620
blend into WebRTC,
you're going to

1116
00:55:36,620 --> 00:55:38,710
have to get that working.

1117
00:55:38,710 --> 00:55:42,720
So is this going to coincide
with the assimilation of VP9

1118
00:55:42,720 --> 00:55:45,520
into WebRTC?

1119
00:55:45,520 --> 00:55:47,790
MATT FROST: It'll be real time
optimizations, which I think

1120
00:55:47,790 --> 00:55:52,060
we were sort of thinking about
end of Q3, beginning of Q4,

1121
00:55:52,060 --> 00:55:55,540
and then integration into WebRTC
will follow on that.

1122
00:55:55,540 --> 00:55:57,270
Obviously, the one thing
I'd say, it's

1123
00:55:57,270 --> 00:55:58,670
an open source project.

1124
00:55:58,670 --> 00:56:02,660
If you guys think that you see
an opportunity, you can go out

1125
00:56:02,660 --> 00:56:04,380
and do the optimizations
yourselves.

1126
00:56:04,380 --> 00:56:06,030
There are contractors
who can do it.

1127
00:56:06,030 --> 00:56:09,170
So I encourage you guys to think
about that, that you can

1128
00:56:09,170 --> 00:56:11,060
take the code and you can start
working on some of this

1129
00:56:11,060 --> 00:56:12,440
stuff yourselves.

1130
00:56:12,440 --> 00:56:15,910
Obviously, we'd love it if you'd
contribute it back but

1131
00:56:15,910 --> 00:56:18,160
we're not going to
force you to.

1132
00:56:18,160 --> 00:56:20,025
Yeah, I guess last question.

1133
00:56:20,025 --> 00:56:22,940
AUDIENCE: This is a question
about how VP9 relates to what

1134
00:56:22,940 --> 00:56:25,120
the Android team talked about
with Google proxy and the

1135
00:56:25,120 --> 00:56:25,880
speedy proxy.

1136
00:56:25,880 --> 00:56:28,180
You alluded to transcoding
real time for backwards

1137
00:56:28,180 --> 00:56:30,370
compatible device support.

1138
00:56:30,370 --> 00:56:33,200
Do you see Google doing the same
thing they're going to do

1139
00:56:33,200 --> 00:56:36,230
with images in this proxy and
doing video transcoding to

1140
00:56:36,230 --> 00:56:38,900
adapt this and use this
for compression mode

1141
00:56:38,900 --> 00:56:39,520
in the Google proxy?

1142
00:56:39,520 --> 00:56:41,950
RONALD BULTJE: That's a really
interesting application, and

1143
00:56:41,950 --> 00:56:44,730
that's something that we'll have
to look into the future.

1144
00:56:44,730 --> 00:56:48,060
It's not as easy as it sounds
because video transcoding

1145
00:56:48,060 --> 00:56:51,370
actually takes some time.

1146
00:56:51,370 --> 00:56:53,410
So that would mean that you
would actually have to wait a

1147
00:56:53,410 --> 00:56:56,610
minute while the video is
transcoding until you can

1148
00:56:56,610 --> 00:56:59,570
visit that website, and that
might not be quite what you're

1149
00:56:59,570 --> 00:57:00,690
looking for.

1150
00:57:00,690 --> 00:57:03,250
But it's an interesting
application and we might look

1151
00:57:03,250 --> 00:57:04,500
into that in the future.

1152
00:57:04,500 --> 00:57:08,690

1153
00:57:08,690 --> 00:57:09,570
MATT FROST: I think that's it.

1154
00:57:09,570 --> 00:57:10,440
I think we're out of time.

1155
00:57:10,440 --> 00:57:13,030
Sorry, but we're happy to
talk to you afterwards.

1156
00:57:13,030 --> 00:57:15,600
[APPLAUSE]

