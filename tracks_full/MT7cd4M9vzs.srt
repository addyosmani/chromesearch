1
00:00:00,000 --> 00:00:02,120

2
00:00:02,120 --> 00:00:03,140
MANO MARKS: Hi, everyone.

3
00:00:03,140 --> 00:00:04,810
My name is Mano Marks.

4
00:00:04,810 --> 00:00:06,530
I'm the lead developer
advocate on

5
00:00:06,530 --> 00:00:09,390
the Google Maps team.

6
00:00:09,390 --> 00:00:10,160
KURT SCHWEHR: My name
Kurt Scwerhr.

7
00:00:10,160 --> 00:00:12,070
I'm head of ocean engineering.

8
00:00:12,070 --> 00:00:14,460
FRANCESC CAMPOY FLORES: And
I'm Francesc Campoy, the

9
00:00:14,460 --> 00:00:16,270
developer programs engineer
for the Go Team.

10
00:00:16,270 --> 00:00:18,320
MANO MARKS: And we're going to
talk to you today about all

11
00:00:18,320 --> 00:00:20,340
the ships in the world.

12
00:00:20,340 --> 00:00:23,820
So what do I mean by that?

13
00:00:23,820 --> 00:00:25,820
And I'm going to get--

14
00:00:25,820 --> 00:00:29,010
actually, Kurt's going to go
into detail on how we're

15
00:00:29,010 --> 00:00:35,180
collecting data from 75,000
ships and over four million

16
00:00:35,180 --> 00:00:36,610
position reports.

17
00:00:36,610 --> 00:00:39,690
But what I want to do is just
give you a short introduction

18
00:00:39,690 --> 00:00:41,940
to why we're doing this.

19
00:00:41,940 --> 00:00:44,410
We are doing this because, you
may have noticed there are

20
00:00:44,410 --> 00:00:46,810
sensors all over Moscone
right now.

21
00:00:46,810 --> 00:00:51,090
And the team is doing some
really interesting stuff with

22
00:00:51,090 --> 00:00:54,910
sensors in Arduino and just
Cloud and combining a lot of

23
00:00:54,910 --> 00:00:55,680
information.

24
00:00:55,680 --> 00:00:59,340
We were really interested in
taking a look at a real-world

25
00:00:59,340 --> 00:01:03,670
use case where people are
currently broadcasting their

26
00:01:03,670 --> 00:01:08,640
locations and then using
Google's Cloud to aggregate

27
00:01:08,640 --> 00:01:12,970
that information, filter it,
parse it out, and do really

28
00:01:12,970 --> 00:01:13,620
interesting--

29
00:01:13,620 --> 00:01:16,160
see if we can learn interesting
things and

30
00:01:16,160 --> 00:01:18,620
visualize it on a map.

31
00:01:18,620 --> 00:01:22,660
Now you may have seen the talk
this morning at 10:00 by

32
00:01:22,660 --> 00:01:27,830
Brendan Kenny where he went in
depth into using HTML5 plus

33
00:01:27,830 --> 00:01:30,910
Google Maps to do data
visualization using

34
00:01:30,910 --> 00:01:32,320
the same data set.

35
00:01:32,320 --> 00:01:34,030
We're going to talk a little
bit about that.

36
00:01:34,030 --> 00:01:36,210
But you should watch that video
if you haven't had a

37
00:01:36,210 --> 00:01:38,280
chance to watch it.

38
00:01:38,280 --> 00:01:42,930
What I want to do right now is
show you what this actually

39
00:01:42,930 --> 00:01:45,310
looks like.

40
00:01:45,310 --> 00:01:49,460
So the first thing I've got
here, this was the first

41
00:01:49,460 --> 00:01:52,650
implementation of
using this data.

42
00:01:52,650 --> 00:01:57,930
These large amounts of data
from ships' reports.

43
00:01:57,930 --> 00:02:03,500
We took a one-day snapshot and
used the JavaScript Maps API

44
00:02:03,500 --> 00:02:07,960
to load data in from BigQuery
where we were

45
00:02:07,960 --> 00:02:10,000
serving the data out.

46
00:02:10,000 --> 00:02:12,160
I want to just show you
a quick look at

47
00:02:12,160 --> 00:02:13,440
how fast that is.

48
00:02:13,440 --> 00:02:16,380

49
00:02:16,380 --> 00:02:19,464
It's not very fast.

50
00:02:19,464 --> 00:02:20,680
There you go.

51
00:02:20,680 --> 00:02:23,940
So this was a very naive
implementation.

52
00:02:23,940 --> 00:02:30,040
BigQuery was parsing out a large
number of points and

53
00:02:30,040 --> 00:02:31,700
passing it down to
the browser.

54
00:02:31,700 --> 00:02:34,350
But we're going to talk to you
a lot about how we built up a

55
00:02:34,350 --> 00:02:37,110
serving infrastructure over the
last few months to parse

56
00:02:37,110 --> 00:02:39,780
out way more data and
serve it out to you.

57
00:02:39,780 --> 00:02:42,700
This is, by the way, using
straight-up JavaScript Maps

58
00:02:42,700 --> 00:02:48,360
API using our heat map layer.

59
00:02:48,360 --> 00:02:51,970
And then, just to show you where
we're going, this is

60
00:02:51,970 --> 00:02:59,740
what it looks like in Google
Maps using HTML5 and the

61
00:02:59,740 --> 00:03:04,150
canvas layer utility library
to give all the latest

62
00:03:04,150 --> 00:03:08,390
position reports from all the
ships that we have data from.

63
00:03:08,390 --> 00:03:11,330
And you can see here, we've
actually done quite a bit of

64
00:03:11,330 --> 00:03:17,370
work on really interesting
things, including click

65
00:03:17,370 --> 00:03:19,900
notifications, which
is actually kind of

66
00:03:19,900 --> 00:03:23,650
hard to do in WebGL.

67
00:03:23,650 --> 00:03:27,180
And then, you can start to see
really interesting patterns

68
00:03:27,180 --> 00:03:28,040
developing.

69
00:03:28,040 --> 00:03:32,730
Like here, we're actually using
the direction right

70
00:03:32,730 --> 00:03:37,330
here, is the color of the
position location.

71
00:03:37,330 --> 00:03:41,840
So here you can see this strong
red line, this is

72
00:03:41,840 --> 00:03:45,090
people going pretty
much North.

73
00:03:45,090 --> 00:03:47,460
And you can see that
a big path, there.

74
00:03:47,460 --> 00:03:49,970
And just to the right of it--
it might be a little hard to

75
00:03:49,970 --> 00:03:51,440
see on the monitor--

76
00:03:51,440 --> 00:03:53,840
going pretty much due
South, you have

77
00:03:53,840 --> 00:03:59,000
this light blue course.

78
00:03:59,000 --> 00:04:02,630
And you can see that they
actually mirror each other.

79
00:04:02,630 --> 00:04:04,900
And I actually don't know
a lot about ships.

80
00:04:04,900 --> 00:04:08,230
Kurt is the expert on those.

81
00:04:08,230 --> 00:04:11,380
But I can start to discern,
just looking through this

82
00:04:11,380 --> 00:04:14,230
visualization, really
interesting patterns.

83
00:04:14,230 --> 00:04:19,360
And actually start to interact
with the data dynamically.

84
00:04:19,360 --> 00:04:24,270
So, go back to the slides,
because I get really excited

85
00:04:24,270 --> 00:04:26,810
about that stuff and
want to keep going.

86
00:04:26,810 --> 00:04:30,490
So this is the overall structure
of what we're doing.

87
00:04:30,490 --> 00:04:32,950
Ships are broadcasting
their locations.

88
00:04:32,950 --> 00:04:37,130
We are getting information
from satellites and

89
00:04:37,130 --> 00:04:39,400
ground-based receivers that
are picking that up.

90
00:04:39,400 --> 00:04:43,150
That data is being pushed
into Google Cloud.

91
00:04:43,150 --> 00:04:45,980
And then we are doing
stuff to it.

92
00:04:45,980 --> 00:04:48,810
And we're going to talk to you
about what we're doing and how

93
00:04:48,810 --> 00:04:49,870
that actually works.

94
00:04:49,870 --> 00:04:54,580
And then it gets pushed
down to the user.

95
00:04:54,580 --> 00:04:57,200
And we are going to use
all the Clouds.

96
00:04:57,200 --> 00:05:00,680
So this is pretty exciting.

97
00:05:00,680 --> 00:05:03,700
This is another reason we just
were like, oh yeah, we need

98
00:05:03,700 --> 00:05:04,680
this functionality.

99
00:05:04,680 --> 00:05:06,140
Wait, we've got that.

100
00:05:06,140 --> 00:05:10,460
So with that, I'm going to pass
that on to Kurt, who will

101
00:05:10,460 --> 00:05:12,420
talk to you about
gathering data.

102
00:05:12,420 --> 00:05:13,720
KURT SCHWEHR: Thank you, Mano.

103
00:05:13,720 --> 00:05:16,480
So I'm going to give you the
context behind the data that

104
00:05:16,480 --> 00:05:17,110
we're working with.

105
00:05:17,110 --> 00:05:17,930
It's always important to

106
00:05:17,930 --> 00:05:19,650
understand the domain knowledge.

107
00:05:19,650 --> 00:05:21,210
But I want you to remember when
you're looking at the

108
00:05:21,210 --> 00:05:23,950
details here that this isn't
just about ships.

109
00:05:23,950 --> 00:05:26,130
This is about whatever data
you would like that has a

110
00:05:26,130 --> 00:05:26,970
spatial component.

111
00:05:26,970 --> 00:05:30,280
Even if it doesn't, these
tools can help you.

112
00:05:30,280 --> 00:05:32,500
So let's talk about what
is the automatic

113
00:05:32,500 --> 00:05:34,030
identification system.

114
00:05:34,030 --> 00:05:38,690
It's a VHF system that was
designed in the 1990s for

115
00:05:38,690 --> 00:05:40,680
collision avoidance and
to help ships know

116
00:05:40,680 --> 00:05:41,720
who's around them.

117
00:05:41,720 --> 00:05:43,740
It's a public system where
everybody tells everybody

118
00:05:43,740 --> 00:05:47,180
else, hey, my name is so-and-so,
I'm going this way.

119
00:05:47,180 --> 00:05:49,995
And it's basically designed to
make mariners' lives better.

120
00:05:49,995 --> 00:05:52,270
These people out there, these
professional folks working at

121
00:05:52,270 --> 00:05:54,170
sea, have a tough job.

122
00:05:54,170 --> 00:05:56,330
They get pushed around by little
tug boats all the time.

123
00:05:56,330 --> 00:05:58,890
Like you see here, a large ship,
to make it through a

124
00:05:58,890 --> 00:06:01,230
harbor, has to get help
from its buddies.

125
00:06:01,230 --> 00:06:03,820
And if you forget the name of
your tug boat on your port

126
00:06:03,820 --> 00:06:06,460
side and you call the wrong ship
out, you might get pushed

127
00:06:06,460 --> 00:06:07,430
the wrong way.

128
00:06:07,430 --> 00:06:10,330
Those kinds of things are pretty
complicated and ships

129
00:06:10,330 --> 00:06:11,780
have a lot going on.

130
00:06:11,780 --> 00:06:14,700
Now, being that this is a VHF
system, it's a line of sight.

131
00:06:14,700 --> 00:06:18,000
So it means that you can see
out a little ways, maybe 80

132
00:06:18,000 --> 00:06:20,080
kilometers if it's good.

133
00:06:20,080 --> 00:06:23,190
But it doesn't make for great
visualization if you just have

134
00:06:23,190 --> 00:06:24,660
80 kilometers and you're
talking about all the

135
00:06:24,660 --> 00:06:25,400
ships in the world.

136
00:06:25,400 --> 00:06:27,680
It means we really
have a problem.

137
00:06:27,680 --> 00:06:29,700
But we actually have
a solution.

138
00:06:29,700 --> 00:06:33,270
We have some friendly folks at
SpaceQuest and Analyze who

139
00:06:33,270 --> 00:06:36,530
worked with us to create a
demonstration data set that is

140
00:06:36,530 --> 00:06:38,050
from their polar orbiting
satellites.

141
00:06:38,050 --> 00:06:39,410
The satellite's going
around the Earth.

142
00:06:39,410 --> 00:06:42,720
And it's slowly going around,
looking over different regions

143
00:06:42,720 --> 00:06:44,800
and picking up all the
ships below it.

144
00:06:44,800 --> 00:06:47,030
And when you're up in space,
line of sight covers a pretty

145
00:06:47,030 --> 00:06:48,950
good-sized patch of ground.

146
00:06:48,950 --> 00:06:51,550
And if you keep moving, you'll
get the whole globe.

147
00:06:51,550 --> 00:06:53,880
So this is our basic global data
set coverage that we're

148
00:06:53,880 --> 00:06:54,960
using in our example.

149
00:06:54,960 --> 00:06:57,880
We'll get some more
examples in here.

150
00:06:57,880 --> 00:07:01,010
We've got, from the National
Oceanographic and Atmospheric

151
00:07:01,010 --> 00:07:04,730
Administration, or NOAH, we have
three receivers that are

152
00:07:04,730 --> 00:07:08,160
professionally-installed on
towers in the Massachusetts

153
00:07:08,160 --> 00:07:09,120
area around Boston.

154
00:07:09,120 --> 00:07:11,300
And it's covering the Stellwagen
Bank National

155
00:07:11,300 --> 00:07:14,680
Marine Sanctuary, where they're
protecting white

156
00:07:14,680 --> 00:07:16,420
whales from going extinct.

157
00:07:16,420 --> 00:07:18,660
And this gives you a long
time series demo.

158
00:07:18,660 --> 00:07:21,980
So we have from 2005 to present
in that data set.

159
00:07:21,980 --> 00:07:24,260
It's hundreds of millions
of data points.

160
00:07:24,260 --> 00:07:26,490
And it gives you that long time
series to play with in

161
00:07:26,490 --> 00:07:28,670
terms of demoing.

162
00:07:28,670 --> 00:07:33,230
And to really mix it up, we'd
like to show you what can be

163
00:07:33,230 --> 00:07:34,630
done on the small scale.

164
00:07:34,630 --> 00:07:36,860
We always like to start with
a little test case.

165
00:07:36,860 --> 00:07:39,690
And so here we have a happy
engineer at Google who's just

166
00:07:39,690 --> 00:07:42,470
installed his first AIS receiver
on his desk in the

167
00:07:42,470 --> 00:07:44,800
San Francisco office.

168
00:07:44,800 --> 00:07:46,900
You can make fun of him--
he's having fun in

169
00:07:46,900 --> 00:07:48,520
the front row here.

170
00:07:48,520 --> 00:07:50,970
And we put this receiver up in
the Boston office to show you

171
00:07:50,970 --> 00:07:53,490
that you can get going with
almost no investment.

172
00:07:53,490 --> 00:07:55,770
We bought the cheapest receiver
you can get and we

173
00:07:55,770 --> 00:07:56,690
hooked it up to this
workstation

174
00:07:56,690 --> 00:07:57,990
that was already there.

175
00:07:57,990 --> 00:07:59,980
It's not near a window.

176
00:07:59,980 --> 00:08:02,410
But it works great.

177
00:08:02,410 --> 00:08:05,620
And since we're Google and we've
got to cover the whole

178
00:08:05,620 --> 00:08:08,690
globe, here, we threw another
one in the office in Sydney.

179
00:08:08,690 --> 00:08:12,250
And it has some company with an
Android and a nice gopher

180
00:08:12,250 --> 00:08:13,210
to go with it.

181
00:08:13,210 --> 00:08:16,360
And to show you how cheesy you
can get and still get away

182
00:08:16,360 --> 00:08:19,420
with creating interesting data
sets, they took a TV antenna

183
00:08:19,420 --> 00:08:22,770
aerial, which isn't totally
matched up right, and so I get

184
00:08:22,770 --> 00:08:24,660
a kick out the antenna
here, which isn't

185
00:08:24,660 --> 00:08:25,610
designed for this project.

186
00:08:25,610 --> 00:08:28,090
But we still get some good ship
traffic, because they are

187
00:08:28,090 --> 00:08:31,030
looking out the window
at ships.

188
00:08:31,030 --> 00:08:32,630
So that gives us a data set.

189
00:08:32,630 --> 00:08:35,289
But when we say all the ships
in the world, we really have

190
00:08:35,289 --> 00:08:36,659
to qualify that.

191
00:08:36,659 --> 00:08:38,500
It's most of the ships
in the world.

192
00:08:38,500 --> 00:08:41,960
And I like to show a ship that's
called a Little Toot,

193
00:08:41,960 --> 00:08:43,549
on the left there.

194
00:08:43,549 --> 00:08:44,890
She is a water taxi.

195
00:08:44,890 --> 00:08:47,186
For a $2 ride, you can go out
and see the sea lions or you

196
00:08:47,186 --> 00:08:49,160
ca get dropped of on your ship,
if you're meeting up

197
00:08:49,160 --> 00:08:50,150
with a big ship.

198
00:08:50,150 --> 00:08:52,860
She's too small to be required
to carry AIS.

199
00:08:52,860 --> 00:08:54,590
The larger ships are required.

200
00:08:54,590 --> 00:08:56,610
For something called "the safety
of life at sea," they

201
00:08:56,610 --> 00:09:00,280
have to carry that so that they
can keep coordinating.

202
00:09:00,280 --> 00:09:02,810
The smaller guys, it's up to
them whether or not the ship

203
00:09:02,810 --> 00:09:04,540
wants to get AIS.

204
00:09:04,540 --> 00:09:06,240
But the neat thing is
that, this whole

205
00:09:06,240 --> 00:09:07,230
community has come together.

206
00:09:07,230 --> 00:09:10,520
They realized that this is so
important for everybody that's

207
00:09:10,520 --> 00:09:11,900
smaller ships and smaller
ships are

208
00:09:11,900 --> 00:09:12,980
starting to add this.

209
00:09:12,980 --> 00:09:14,760
And you can see on the right
here, and engineer in New

210
00:09:14,760 --> 00:09:17,430
England who took about an hour
to install this on an oil

211
00:09:17,430 --> 00:09:18,660
spill response boat.

212
00:09:18,660 --> 00:09:20,680
So the data set is getting
more exciting over time.

213
00:09:20,680 --> 00:09:24,850
So it really provides a great
way to look at spatial data.

214
00:09:24,850 --> 00:09:27,850
So what are some of the
challenges with this data set?

215
00:09:27,850 --> 00:09:29,630
Because no data is easy.

216
00:09:29,630 --> 00:09:33,370
And, as I've often heard, real
data has real warts.

217
00:09:33,370 --> 00:09:35,200
So our first challenge
is data size.

218
00:09:35,200 --> 00:09:36,930
We just have a lot of it.

219
00:09:36,930 --> 00:09:39,370
If you put it on your laptop,
your laptop starts smoking,

220
00:09:39,370 --> 00:09:40,760
the fans start going.

221
00:09:40,760 --> 00:09:43,170
And you wait and you wait
and nothing happens.

222
00:09:43,170 --> 00:09:45,380
I've had queries that I've
wanted to do for years.

223
00:09:45,380 --> 00:09:47,360
And it's just been, I don't
want to let my laptop sit

224
00:09:47,360 --> 00:09:50,060
there for two weeks waiting
for it to figure out the

225
00:09:50,060 --> 00:09:53,270
number is 42.

226
00:09:53,270 --> 00:09:55,430
Beyond that, we have
stickier problems,

227
00:09:55,430 --> 00:09:56,400
which is data quality.

228
00:09:56,400 --> 00:09:57,590
We have bad points.

229
00:09:57,590 --> 00:10:01,180
We have ships out there with
GPSs that are non-functional.

230
00:10:01,180 --> 00:10:02,590
You might have heard this
morning about lightning

231
00:10:02,590 --> 00:10:03,650
hitting ships.

232
00:10:03,650 --> 00:10:05,765
We had a ship running around
that kept changing sides in

233
00:10:05,765 --> 00:10:06,230
its report.

234
00:10:06,230 --> 00:10:08,805
It was 10 meters longer, 10
meters shorter, ten meters

235
00:10:08,805 --> 00:10:10,840
longer, ten meters shorter,
all day long.

236
00:10:10,840 --> 00:10:11,770
What's going on?

237
00:10:11,770 --> 00:10:14,860
So we had to call up and say,
you guys OK out there?

238
00:10:14,860 --> 00:10:18,130
Well, last year they got
hit by lightning.

239
00:10:18,130 --> 00:10:20,160
We also have some other
challenges in that when you

240
00:10:20,160 --> 00:10:22,560
have all these coordinated
things like a satellite and a

241
00:10:22,560 --> 00:10:25,920
bunch of receivers onshore, you
might hear the same ship

242
00:10:25,920 --> 00:10:27,090
three or four times.

243
00:10:27,090 --> 00:10:29,760
That's a good thing in that
you're getting good coverage

244
00:10:29,760 --> 00:10:31,810
and making sure that you
don't miss anything.

245
00:10:31,810 --> 00:10:34,590
But you have to sort of cull
that down so that you're only

246
00:10:34,590 --> 00:10:36,810
dealing with one point from each
location and you don't

247
00:10:36,810 --> 00:10:39,810
have this over stacking of data
that you don't need to be

248
00:10:39,810 --> 00:10:40,300
dealing with.

249
00:10:40,300 --> 00:10:42,440
You could make your problem
three or four times harder

250
00:10:42,440 --> 00:10:45,110
than it already is.

251
00:10:45,110 --> 00:10:46,800
So let's talk about--
we've got this data.

252
00:10:46,800 --> 00:10:49,150
Let's talk about bringing it in
and keeping it someplace so

253
00:10:49,150 --> 00:10:50,350
we can actually do something
with it.

254
00:10:50,350 --> 00:10:53,480
Because if we don't collect it,
it's just going to go into

255
00:10:53,480 --> 00:10:56,300
the either and somebody at the
nearest planet or star will

256
00:10:56,300 --> 00:10:57,820
find out about it later on.

257
00:10:57,820 --> 00:11:00,150
That's not any good to us.

258
00:11:00,150 --> 00:11:03,060
So we started off with our
first cloud entity.

259
00:11:03,060 --> 00:11:05,110
We have Cloud Storage.

260
00:11:05,110 --> 00:11:08,030
Google Cloud Storage has got all
kinds of features that are

261
00:11:08,030 --> 00:11:09,360
really helpful for us.

262
00:11:09,360 --> 00:11:11,110
The first one is access
control lists.

263
00:11:11,110 --> 00:11:13,990
If we want to split up our
partners and work with a

264
00:11:13,990 --> 00:11:16,380
couple different groups and we
don't want them to share data

265
00:11:16,380 --> 00:11:18,530
because of particular agreements
or whatever reasons

266
00:11:18,530 --> 00:11:21,330
you've got, we can set up access
control lists as the

267
00:11:21,330 --> 00:11:23,780
user of the bucket where
you store your data.

268
00:11:23,780 --> 00:11:25,370
And we can control
that on the fly.

269
00:11:25,370 --> 00:11:26,680
It's really simple.

270
00:11:26,680 --> 00:11:28,840
We also have this great
feature of scale.

271
00:11:28,840 --> 00:11:32,180
We could start off with 10
bytes, 100 bytes, an empty

272
00:11:32,180 --> 00:11:33,320
directory, whatever you want.

273
00:11:33,320 --> 00:11:36,300
And you could scale up to four
gigabytes and beyond.

274
00:11:36,300 --> 00:11:37,890
You don't have to ask anybody's
permission.

275
00:11:37,890 --> 00:11:39,220
And if you're done with
the data storage,

276
00:11:39,220 --> 00:11:40,220
you get rid of it.

277
00:11:40,220 --> 00:11:41,910
You don't have to run out to
the store and buy more hard

278
00:11:41,910 --> 00:11:44,800
drives and then be done
with them, now what?

279
00:11:44,800 --> 00:11:46,650
So it gives you that flexibility
to keep your data

280
00:11:46,650 --> 00:11:49,000
around in whatever
form you want.

281
00:11:49,000 --> 00:11:51,360
It has a feature for us that's
extremely important.

282
00:11:51,360 --> 00:11:53,140
And that's that it's fast.

283
00:11:53,140 --> 00:11:55,660
Getting the data into the Google
Cloud Storage pretty

284
00:11:55,660 --> 00:11:57,310
quick, that's amazing.

285
00:11:57,310 --> 00:11:59,410
There's Google data centers all
over the world that will

286
00:11:59,410 --> 00:12:01,110
help get that data in there.

287
00:12:01,110 --> 00:12:04,090
But even better yet, once you
get into that cloud, all the

288
00:12:04,090 --> 00:12:06,290
thing that you will do with it
afterwards, the latency with

289
00:12:06,290 --> 00:12:08,790
inside is so low,
it's fantastic.

290
00:12:08,790 --> 00:12:10,860
It really makes the job of
building all the tools that

291
00:12:10,860 --> 00:12:13,500
come along later on so much
easier because you're not

292
00:12:13,500 --> 00:12:15,650
waiting for your data to get
from the storage to your

293
00:12:15,650 --> 00:12:18,480
processors.

294
00:12:18,480 --> 00:12:20,490
OK, so now we've got
data stored.

295
00:12:20,490 --> 00:12:21,360
That's great.

296
00:12:21,360 --> 00:12:22,650
So what does it look like?

297
00:12:22,650 --> 00:12:24,050
I'm going to show you something
that's a little

298
00:12:24,050 --> 00:12:24,900
frightening here.

299
00:12:24,900 --> 00:12:26,580
This is called NEMA.

300
00:12:26,580 --> 00:12:28,940
And it's not just normal NEMA,
which is comma separated

301
00:12:28,940 --> 00:12:30,790
value, or CSV, data.

302
00:12:30,790 --> 00:12:35,060
This is actually armored,
binary six-bit data with

303
00:12:35,060 --> 00:12:37,680
integers that are like three
bits long, and all sorts of

304
00:12:37,680 --> 00:12:38,560
strange things.

305
00:12:38,560 --> 00:12:40,660
It's really a pain.

306
00:12:40,660 --> 00:12:42,650
I hope all can read exactly
what that says.

307
00:12:42,650 --> 00:12:45,320
That says I'm a ship position
message type three.

308
00:12:45,320 --> 00:12:46,900
And I'm at a latitude
and longitude.

309
00:12:46,900 --> 00:12:48,410
Right got it?

310
00:12:48,410 --> 00:12:50,670
I don't.

311
00:12:50,670 --> 00:12:53,920
So we need some way to convert
this from the batch, which is

312
00:12:53,920 --> 00:12:57,040
completely useless to us, to
something like a simple CSV

313
00:12:57,040 --> 00:12:59,460
file where we can actually see
a column of latitudes and

314
00:12:59,460 --> 00:13:01,260
longitudes.

315
00:13:01,260 --> 00:13:03,490
And with that, we
have something

316
00:13:03,490 --> 00:13:04,450
called Compute Engine.

317
00:13:04,450 --> 00:13:07,980
And I've written a library
called libais that's a C++

318
00:13:07,980 --> 00:13:11,480
library designed to do this
decoding really fast.

319
00:13:11,480 --> 00:13:13,900
It's taken me years to
get this code going.

320
00:13:13,900 --> 00:13:15,635
And I'm not going to go right
into the language just because

321
00:13:15,635 --> 00:13:17,400
of the investment of time.

322
00:13:17,400 --> 00:13:18,980
And what am I going to do?

323
00:13:18,980 --> 00:13:19,620
Compute.

324
00:13:19,620 --> 00:13:22,290
We're in this, where we have
Compute Engine and App Engine

325
00:13:22,290 --> 00:13:23,800
and all these other
great tools.

326
00:13:23,800 --> 00:13:25,900
App Engine seems like the
reasonable solution, but it

327
00:13:25,900 --> 00:13:27,542
doesn't support C++.

328
00:13:27,542 --> 00:13:30,180
Well now, with Compute Engine,
we have the ability to use

329
00:13:30,180 --> 00:13:32,850
generic Linux instances where
I can put whatever I want.

330
00:13:32,850 --> 00:13:35,850
And I'm a control freak so I
get to put my software on

331
00:13:35,850 --> 00:13:37,230
there and control it
the way I want.

332
00:13:37,230 --> 00:13:38,470
That's awesome.

333
00:13:38,470 --> 00:13:41,115
But if I had another language--
say I love R or I

334
00:13:41,115 --> 00:13:45,510
love Pearl or Python or
Ruby, Go, Fortran--

335
00:13:45,510 --> 00:13:47,020
whatever you like,
put it on there.

336
00:13:47,020 --> 00:13:48,190
Run it your way.

337
00:13:48,190 --> 00:13:49,320
It's great.

338
00:13:49,320 --> 00:13:52,390
And on top of that, when you
build a Google Compute Engine

339
00:13:52,390 --> 00:13:55,470
instance, it comes with these
things called surface accounts

340
00:13:55,470 --> 00:13:57,200
that are OAuth 2.

341
00:13:57,200 --> 00:13:58,960
I always get confused between
often it's OAuth

342
00:13:58,960 --> 00:14:01,290
and it's OAuth 2.

343
00:14:01,290 --> 00:14:03,830
These surface accounts already
have this authentication built

344
00:14:03,830 --> 00:14:06,160
in, so your instance is already
available to get the

345
00:14:06,160 --> 00:14:07,540
data that you gave it
permission for.

346
00:14:07,540 --> 00:14:08,830
There's no fiddling around.

347
00:14:08,830 --> 00:14:11,520
It's really quick.

348
00:14:11,520 --> 00:14:13,380
So we're running this
libais code.

349
00:14:13,380 --> 00:14:16,270
It parses all this wonky-looking
data.

350
00:14:16,270 --> 00:14:17,730
And we get out something that
looks a little more

351
00:14:17,730 --> 00:14:18,840
manageable.

352
00:14:18,840 --> 00:14:20,920
Here's a quick table of decoding
that same very

353
00:14:20,920 --> 00:14:22,380
message that's right above.

354
00:14:22,380 --> 00:14:23,840
We have this thing called MMSI,

355
00:14:23,840 --> 00:14:25,360
that's our ship ID number.

356
00:14:25,360 --> 00:14:27,340
Navigation status,
are we sailing?

357
00:14:27,340 --> 00:14:29,900
It's just an integer you
map into a table.

358
00:14:29,900 --> 00:14:30,700
ROT, what's that?

359
00:14:30,700 --> 00:14:32,110
Well that's Rate Of Turn.

360
00:14:32,110 --> 00:14:33,910
It's whether the ship's going
left, right, straight.

361
00:14:33,910 --> 00:14:36,570
We have SOG, Speed
Over Ground.

362
00:14:36,570 --> 00:14:39,380
Longitude, Latitude, Course
Over Ground, which is the

363
00:14:39,380 --> 00:14:40,450
direction the ship is moving.

364
00:14:40,450 --> 00:14:42,530
And True Heading, which is
the way it's pointed.

365
00:14:42,530 --> 00:14:45,190
So sometimes ships have to point
into the wind to go the

366
00:14:45,190 --> 00:14:46,520
direction they want.

367
00:14:46,520 --> 00:14:46,890
So, great.

368
00:14:46,890 --> 00:14:48,980
We got some data decoded.

369
00:14:48,980 --> 00:14:51,530
And let's take a look at what
it's like to create one of

370
00:14:51,530 --> 00:14:53,890
these instances.

371
00:14:53,890 --> 00:14:58,080
So I record a little video
of firing up an instance.

372
00:14:58,080 --> 00:15:01,490
And for me, I like to
create a little--

373
00:15:01,490 --> 00:15:03,340
going into Linux
image on there.

374
00:15:03,340 --> 00:15:06,040
I've created an image out in the
world that's going to have

375
00:15:06,040 --> 00:15:06,960
all my code.

376
00:15:06,960 --> 00:15:08,880
It's ready to talk to all
the services I want.

377
00:15:08,880 --> 00:15:10,990
It's going to load data from the
place I want, put it where

378
00:15:10,990 --> 00:15:13,840
it's supposed to go, take
care of all of that.

379
00:15:13,840 --> 00:15:16,660
So here I'm using at the gcutil
instance to add a new

380
00:15:16,660 --> 00:15:17,720
instance in there.

381
00:15:17,720 --> 00:15:19,730
Telling it which Linux
instance I've

382
00:15:19,730 --> 00:15:20,660
created, where is it?

383
00:15:20,660 --> 00:15:21,760
Go find it.

384
00:15:21,760 --> 00:15:24,350
And let's fire up a
virtual machine.

385
00:15:24,350 --> 00:15:24,860
And this is great.

386
00:15:24,860 --> 00:15:26,380
You can control however
many you want.

387
00:15:26,380 --> 00:15:27,040
You can start them.

388
00:15:27,040 --> 00:15:27,890
You can stop them.

389
00:15:27,890 --> 00:15:29,730
And it goes pretty quick.

390
00:15:29,730 --> 00:15:31,890
It's less than about a minute
and a half for this particular

391
00:15:31,890 --> 00:15:34,730
instance to get going from "I
want it" to "It's running and

392
00:15:34,730 --> 00:15:36,380
I can access SSH into it".

393
00:15:36,380 --> 00:15:37,630
I think it's pretty fantastic.

394
00:15:37,630 --> 00:15:44,740

395
00:15:44,740 --> 00:15:47,820
All right, so we've got data
and we're moving it around.

396
00:15:47,820 --> 00:15:49,480
But we have a problem.

397
00:15:49,480 --> 00:15:51,370
So data comes in from
our sensors.

398
00:15:51,370 --> 00:15:54,690
We have a little script that's
running out on our sensors.

399
00:15:54,690 --> 00:15:59,370
It's using buckets stores API
to load that into a Google

400
00:15:59,370 --> 00:16:00,790
Cloud Store bucket.

401
00:16:00,790 --> 00:16:02,840
And then we want to run
Compute Engine on it.

402
00:16:02,840 --> 00:16:05,630
But how do we know to
get that data there?

403
00:16:05,630 --> 00:16:07,860
Well, there's a new feature
out called Bucket

404
00:16:07,860 --> 00:16:11,050
Notifications and you can tell
the infrastructure at Google

405
00:16:11,050 --> 00:16:14,680
that, hey, when somebody puts a
file in that bucket, I want

406
00:16:14,680 --> 00:16:15,120
to know about it.

407
00:16:15,120 --> 00:16:16,220
Let me know.

408
00:16:16,220 --> 00:16:18,010
And you'll hear later on a
little bit more about how

409
00:16:18,010 --> 00:16:20,560
that's done with App Engine to
get those things registered

410
00:16:20,560 --> 00:16:22,240
and to do something with it.

411
00:16:22,240 --> 00:16:24,440
But what we do is we take those
notifications and turn

412
00:16:24,440 --> 00:16:27,070
them into a task queue entry.

413
00:16:27,070 --> 00:16:29,250
And what we do is look this
queue of things that we would

414
00:16:29,250 --> 00:16:33,000
like to process and then I can
fire any number of instances

415
00:16:33,000 --> 00:16:35,460
that I want I could stagger them
around the globe in each

416
00:16:35,460 --> 00:16:38,180
of our data centers that you
could split off into, built

417
00:16:38,180 --> 00:16:42,210
myself a load balancing system
however I feel like, and just

418
00:16:42,210 --> 00:16:44,690
let those instances reach into
that queue and take the next

419
00:16:44,690 --> 00:16:46,300
one off and lease
it for awhile.

420
00:16:46,300 --> 00:16:47,960
And if they die, the
lease will expire.

421
00:16:47,960 --> 00:16:50,190
The data goes back into
the task queue.

422
00:16:50,190 --> 00:16:52,110
And some other instance
will pick it up.

423
00:16:52,110 --> 00:16:54,020
It gives them the ability
to control that.

424
00:16:54,020 --> 00:16:57,010
So even better, when I'm done
with the data, I write it back

425
00:16:57,010 --> 00:16:59,110
into a bucket and I
forget about it.

426
00:16:59,110 --> 00:16:59,730
I don't have to do anything.

427
00:16:59,730 --> 00:17:00,900
I'm in a computer
engine world.

428
00:17:00,900 --> 00:17:02,490
I can ignore everybody else.

429
00:17:02,490 --> 00:17:04,569
As long as I'm writing
my CSVs into the

430
00:17:04,569 --> 00:17:06,280
bucket store, I'm done.

431
00:17:06,280 --> 00:17:09,040
And I get to hand
off to Francesc.

432
00:17:09,040 --> 00:17:11,970
FRANCESC CAMPOY FLORES:
Thank you.

433
00:17:11,970 --> 00:17:12,260
OK.

434
00:17:12,260 --> 00:17:15,290
So now we have this very
big amount of data.

435
00:17:15,290 --> 00:17:16,780
I want to serve it.

436
00:17:16,780 --> 00:17:19,990
So you could imagine, we
have it as CSV files.

437
00:17:19,990 --> 00:17:23,380
So you could imagine writing
something that will parse all

438
00:17:23,380 --> 00:17:25,900
the CSV and imagine that we
want to get the latest

439
00:17:25,900 --> 00:17:27,630
positions for all the ships.

440
00:17:27,630 --> 00:17:31,800
Well, that's easy to write but
you have to run it yourself.

441
00:17:31,800 --> 00:17:33,790
There's probably a better
way to do it.

442
00:17:33,790 --> 00:17:36,300
Well we can put all that
data in Big Query.

443
00:17:36,300 --> 00:17:39,980
So the advantage of BigQuery
is that it allows you to

444
00:17:39,980 --> 00:17:43,420
crunch a huge amount of
data in a little time.

445
00:17:43,420 --> 00:17:45,865
So it's not hours or minutes.

446
00:17:45,865 --> 00:17:47,920
It's really seconds.

447
00:17:47,920 --> 00:17:49,730
I'll do a little demo.

448
00:17:49,730 --> 00:17:53,520
And the important part of this
is that having queries running

449
00:17:53,520 --> 00:17:57,010
that fast allows you to iterate
very fast and really

450
00:17:57,010 --> 00:18:01,790
find which queries give you back
interacting information.

451
00:18:01,790 --> 00:18:08,210
So first, we have to load
that data into BigQuery.

452
00:18:08,210 --> 00:18:09,930
And this is the way
we're doing it.

453
00:18:09,930 --> 00:18:12,890
So we're using again bucket
notifications.

454
00:18:12,890 --> 00:18:17,160
So when a Compute Engine
instance finishes processing

455
00:18:17,160 --> 00:18:22,090
one file and creates this new
file with CSV data into the

456
00:18:22,090 --> 00:18:25,220
bucket, we get a notification.

457
00:18:25,220 --> 00:18:28,330
So it will be a post-request
on App Engine.

458
00:18:28,330 --> 00:18:32,300
And App Engine will request
BigQuery to load that file.

459
00:18:32,300 --> 00:18:36,940
So BigQuery and Cloud Storage
are related and actually

460
00:18:36,940 --> 00:18:42,230
loading from Cloud Storage
is really fast.

461
00:18:42,230 --> 00:18:42,640
So

462
00:18:42,640 --> 00:18:46,060
OK now we have all the
data on BigQuery and

463
00:18:46,060 --> 00:18:46,890
we could run queries.

464
00:18:46,890 --> 00:18:51,330
So now we have this
table here.

465
00:18:51,330 --> 00:18:55,120
It's 70 gigabytes,
which is a pretty

466
00:18:55,120 --> 00:18:56,870
interesting amount of data.

467
00:18:56,870 --> 00:18:59,390
And it's 374 [INAUDIBLE]

468
00:18:59,390 --> 00:19:00,230
rows.

469
00:19:00,230 --> 00:19:06,850
Every row represents a position
of a ship over time.

470
00:19:06,850 --> 00:19:09,692
And if you go [INAUDIBLE].

471
00:19:09,692 --> 00:19:16,150

472
00:19:16,150 --> 00:19:17,850
So this is the table.

473
00:19:17,850 --> 00:19:23,550
And we're going to be running
this little query here.

474
00:19:23,550 --> 00:19:27,110
So what we're doing here
is a full scan range.

475
00:19:27,110 --> 00:19:30,020
So we're going to get all
the rows in the table.

476
00:19:30,020 --> 00:19:32,950
And we're going to compute the
average position for every

477
00:19:32,950 --> 00:19:34,670
hour, for every ship.

478
00:19:34,670 --> 00:19:37,770
So this is a pretty big query.

479
00:19:37,770 --> 00:19:40,860
Imagine how long it could take
to run this on your computer

480
00:19:40,860 --> 00:19:43,380
or if it would run it.

481
00:19:43,380 --> 00:19:45,570
And it's a demo, so--

482
00:19:45,570 --> 00:19:46,690
oh, there you go.

483
00:19:46,690 --> 00:19:48,030
Six seconds.

484
00:19:48,030 --> 00:19:51,790
Interestingly, we saw that
there were 70 gigabytes.

485
00:19:51,790 --> 00:19:53,700
And here, we see the process.

486
00:19:53,700 --> 00:19:55,010
There's only 14.

487
00:19:55,010 --> 00:19:56,720
That's actually what
you're paying for.

488
00:19:56,720 --> 00:19:58,310
And that's actually the
amount of data that we

489
00:19:58,310 --> 00:19:59,730
got from the data.

490
00:19:59,730 --> 00:20:01,510
Because we then get
all the columns.

491
00:20:01,510 --> 00:20:03,480
So that can be also very
important for you.

492
00:20:03,480 --> 00:20:07,680

493
00:20:07,680 --> 00:20:09,970
So, just in case.

494
00:20:09,970 --> 00:20:11,420
OK.

495
00:20:11,420 --> 00:20:16,140
Now let's see how to actually
get that data from BigQuery

496
00:20:16,140 --> 00:20:17,360
into the browser.

497
00:20:17,360 --> 00:20:20,270
The first solution could be what
we saw before, that heat

498
00:20:20,270 --> 00:20:22,150
map that is actually
you have--

499
00:20:22,150 --> 00:20:24,540
well, we have App Engine
just serving some html.

500
00:20:24,540 --> 00:20:27,610
Inside of that html, there's
some JavaScript.

501
00:20:27,610 --> 00:20:29,660
And that JavaScript is actually

502
00:20:29,660 --> 00:20:31,680
querying BigQuery directly.

503
00:20:31,680 --> 00:20:34,050
This is nice because
it's easy to do.

504
00:20:34,050 --> 00:20:35,780
And you can get a prototype
really fast.

505
00:20:35,780 --> 00:20:38,610
But as you saw, it's
fast to write it.

506
00:20:38,610 --> 00:20:39,910
Not fast to run it.

507
00:20:39,910 --> 00:20:41,440
So we have to improve that.

508
00:20:41,440 --> 00:20:43,770
That is not really enough.

509
00:20:43,770 --> 00:20:47,980
So what if actually all the
queries go to App Engine?

510
00:20:47,980 --> 00:20:49,550
So we serve the page.

511
00:20:49,550 --> 00:20:52,650
But actually JavaScript
is now querying

512
00:20:52,650 --> 00:20:54,230
our App Engine instance.

513
00:20:54,230 --> 00:20:56,950
And then we can serve
from BigQuery.

514
00:20:56,950 --> 00:20:58,980
Well, this doesn't
change anything.

515
00:20:58,980 --> 00:21:00,900
This is actually making it even
slower, because now we

516
00:21:00,900 --> 00:21:02,050
have two queries.

517
00:21:02,050 --> 00:21:04,230
But we can add things
on top of this.

518
00:21:04,230 --> 00:21:09,830
So the first thing we can do is
those BigQuery queries that

519
00:21:09,830 --> 00:21:12,950
take normally tens of seconds,
we can actually store the

520
00:21:12,950 --> 00:21:16,300
results of those queries
into our data storage.

521
00:21:16,300 --> 00:21:20,120
Once we have it there, next
time, instead of reading again

522
00:21:20,120 --> 00:21:23,090
from BigQuery, we'll read
from Datastore.

523
00:21:23,090 --> 00:21:26,670
So now we've passed actually
from tens of seconds to some

524
00:21:26,670 --> 00:21:31,250
seconds, which is nice,
but not good enough.

525
00:21:31,250 --> 00:21:34,010
So what if we also
add Memcache?

526
00:21:34,010 --> 00:21:37,420
Now what we're doing
is we read from

527
00:21:37,420 --> 00:21:39,400
Datastore or from BigQuery.

528
00:21:39,400 --> 00:21:42,440
But once we have this result
ready that is already

529
00:21:42,440 --> 00:21:45,950
formatted either in binary
code or JSON.

530
00:21:45,950 --> 00:21:49,830
Once we have it ready, we store
that into Memcache.

531
00:21:49,830 --> 00:21:52,730
Now, the second request, we'll
just get that from Memcache

532
00:21:52,730 --> 00:21:54,120
directly and serve it.

533
00:21:54,120 --> 00:21:58,120
So we passed from tens of
seconds to seconds to hundreds

534
00:21:58,120 --> 00:22:00,050
of milliseconds.

535
00:22:00,050 --> 00:22:02,600
So this is pretty amazing.

536
00:22:02,600 --> 00:22:05,900
And it allows us to actually
have an application that is

537
00:22:05,900 --> 00:22:07,830
really fast and is really
interactive.

538
00:22:07,830 --> 00:22:11,580
So from the html part, just
you open the webpage.

539
00:22:11,580 --> 00:22:14,340
And before you can see the page,
you actually already

540
00:22:14,340 --> 00:22:17,030
loaded all the data in it.

541
00:22:17,030 --> 00:22:20,150
So we implemented this in Go.

542
00:22:20,150 --> 00:22:20,840
Why?

543
00:22:20,840 --> 00:22:23,640
Well, because it's very fast.

544
00:22:23,640 --> 00:22:27,570
And it's very fast because it's
compiled to a binary code

545
00:22:27,570 --> 00:22:30,100
into the App Engine servers.

546
00:22:30,100 --> 00:22:31,360
And this means two things.

547
00:22:31,360 --> 00:22:33,590
First, that it's running binary
code, which is, in

548
00:22:33,590 --> 00:22:34,770
general, faster.

549
00:22:34,770 --> 00:22:37,740
And also that it creates
only one binary.

550
00:22:37,740 --> 00:22:40,860
And when you have to start a new
instance, you have to load

551
00:22:40,860 --> 00:22:41,870
just one binary.

552
00:22:41,870 --> 00:22:42,750
That's it.

553
00:22:42,750 --> 00:22:45,450
That makes it orders of
magnitude faster than other

554
00:22:45,450 --> 00:22:46,600
primary languages.

555
00:22:46,600 --> 00:22:48,810
So this is actually a very
good thing to have.

556
00:22:48,810 --> 00:22:54,460
Also, it's more efficient in
memory side, which allows you

557
00:22:54,460 --> 00:22:57,400
to have less instances and also

558
00:22:57,400 --> 00:22:58,570
more affordable instances.

559
00:22:58,570 --> 00:23:02,450
You don't need a huge amount
of RAM to run your jobs.

560
00:23:02,450 --> 00:23:05,190
And finally, it makes
concurrency very easy.

561
00:23:05,190 --> 00:23:06,480
And why is Concurrency
important?

562
00:23:06,480 --> 00:23:09,210
Well concurrency, when you're
running on the Cloud, is

563
00:23:09,210 --> 00:23:11,170
actually something that you
should be thinking about

564
00:23:11,170 --> 00:23:14,110
because most of the time on the
Cloud, you're waiting for

565
00:23:14,110 --> 00:23:15,410
something to happen.

566
00:23:15,410 --> 00:23:17,230
While you're waiting for
something to happen, it could

567
00:23:17,230 --> 00:23:19,890
be nice to be doing something
else at the same time.

568
00:23:19,890 --> 00:23:23,110
So let's see a little bit of
an example what I mean by

569
00:23:23,110 --> 00:23:24,775
saying that Google
makes it easy to

570
00:23:24,775 --> 00:23:27,230
write concurrent programs.

571
00:23:27,230 --> 00:23:30,760
So we have these
lines of code.

572
00:23:30,760 --> 00:23:31,740
Very simple things.

573
00:23:31,740 --> 00:23:33,960
We're just creating a
Memcache item and

574
00:23:33,960 --> 00:23:36,800
putting into Memcache.

575
00:23:36,800 --> 00:23:37,960
Very simple.

576
00:23:37,960 --> 00:23:41,190
Now imagine that this actually
takes too long.

577
00:23:41,190 --> 00:23:42,590
And this is actually something
that we do at

578
00:23:42,590 --> 00:23:43,490
the end of the request.

579
00:23:43,490 --> 00:23:46,960
So imagine that these days, ten
seconds, we're actually

580
00:23:46,960 --> 00:23:49,700
waiting for that before
we answer to the user.

581
00:23:49,700 --> 00:23:51,260
That's not something
nice to have.

582
00:23:51,260 --> 00:23:54,750
What if we want our user to have
an answer in less than

583
00:23:54,750 --> 00:23:55,550
one second?

584
00:23:55,550 --> 00:23:59,610
Well, we can write the different
[INAUDIBLE].

585
00:23:59,610 --> 00:24:03,020
Now we're not waiting for it
at all, which is not good

586
00:24:03,020 --> 00:24:06,400
either, because as soon as we
finish our request, this

587
00:24:06,400 --> 00:24:08,740
Memcache set operation
probably will be

588
00:24:08,740 --> 00:24:09,900
discarded and never run.

589
00:24:09,900 --> 00:24:15,200
So we actually have to wait
for it, but not too much.

590
00:24:15,200 --> 00:24:18,500
So now we waiting
for it again.

591
00:24:18,500 --> 00:24:20,330
What we're doing is we're
using these channels.

592
00:24:20,330 --> 00:24:23,030
So channels are a way to make
different go betweens

593
00:24:23,030 --> 00:24:24,510
communicate between them.

594
00:24:24,510 --> 00:24:27,410
So what we're doing is trying
to do our Memcache set

595
00:24:27,410 --> 00:24:29,490
operation in a different
go between.

596
00:24:29,490 --> 00:24:30,950
And our main go between
Is actually

597
00:24:30,950 --> 00:24:32,780
waiting for it to finish.

598
00:24:32,780 --> 00:24:34,690
So we have the same as before.

599
00:24:34,690 --> 00:24:36,470
We could wait for too long.

600
00:24:36,470 --> 00:24:39,290
But now we can use the
static statement.

601
00:24:39,290 --> 00:24:42,760
And this will actually choose
between two different things.

602
00:24:42,760 --> 00:24:46,580
Either the Memcache set
operation finishes--

603
00:24:46,580 --> 00:24:48,240
in that case, we're good--

604
00:24:48,240 --> 00:24:50,400
or one second passes.

605
00:24:50,400 --> 00:24:54,030
This means and now, if Memcache
is working perfectly,

606
00:24:54,030 --> 00:24:54,820
we don't have a problem.

607
00:24:54,820 --> 00:24:58,060
We finish our version and
then we send a reply.

608
00:24:58,060 --> 00:25:00,750
But if for some reason Memcache
is down, which never

609
00:25:00,750 --> 00:25:03,950
happens, of course, we will
actually wait for only one

610
00:25:03,950 --> 00:25:08,240
second and just keep
on doing our work.

611
00:25:08,240 --> 00:25:12,180
If you want to know more about
Go, there's all these three

612
00:25:12,180 --> 00:25:13,810
talks this afternoon.

613
00:25:13,810 --> 00:25:16,050
They're really good and all
the speakers are somewhere

614
00:25:16,050 --> 00:25:17,260
around there.

615
00:25:17,260 --> 00:25:19,950
And tomorrow also we're going
to be the [INAUDIBLE]

616
00:25:19,950 --> 00:25:21,390
of our network programming.

617
00:25:21,390 --> 00:25:22,260
We're going to build
a peer-to-peer

618
00:25:22,260 --> 00:25:24,020
network, very cool.

619
00:25:24,020 --> 00:25:26,110
And if you have any questions,
the Office Hours

620
00:25:26,110 --> 00:25:28,500
are also very useful.

621
00:25:28,500 --> 00:25:30,870
And now for the rest of the
talk, back to Mano.

622
00:25:30,870 --> 00:25:32,130
MANO MARKS: Thank you.

623
00:25:32,130 --> 00:25:33,380
FRANCESC CAMPOY FLORES:
Thanks.

624
00:25:33,380 --> 00:25:36,530

625
00:25:36,530 --> 00:25:39,670
MANO MARKS: So now we're back
to visualizing data.

626
00:25:39,670 --> 00:25:42,680
So once we've gotten this
data we're using

627
00:25:42,680 --> 00:25:44,160
the Google Maps API.

628
00:25:44,160 --> 00:25:46,670
And the reason we use a Google
Maps API is because it gives

629
00:25:46,670 --> 00:25:50,490
us both a global and
a local context.

630
00:25:50,490 --> 00:25:55,560
I can take a look at this
position viewer and I can see

631
00:25:55,560 --> 00:25:57,520
where everything is on
this global scale.

632
00:25:57,520 --> 00:26:08,600
But I can also zoom in and see
interesting things on the

633
00:26:08,600 --> 00:26:09,630
local scale.

634
00:26:09,630 --> 00:26:14,100
And I can switch over and take a
look at satellite imagery or

635
00:26:14,100 --> 00:26:16,860
anything else that might
give the context as to

636
00:26:16,860 --> 00:26:20,310
what's in the area.

637
00:26:20,310 --> 00:26:25,460
And also it's super fast
and easy to use.

638
00:26:25,460 --> 00:26:27,770
I want to show you a
couple other demos.

639
00:26:27,770 --> 00:26:31,050
This is the San Francisco
office that Michael

640
00:26:31,050 --> 00:26:32,700
Manoochehri--

641
00:26:32,700 --> 00:26:33,740
he's collected this data.

642
00:26:33,740 --> 00:26:37,420
This is a snapshot of that data
from, I think, just a few

643
00:26:37,420 --> 00:26:40,100
days' worth of that data.

644
00:26:40,100 --> 00:26:41,740
And it's just--

645
00:26:41,740 --> 00:26:43,490
it provides this really--

646
00:26:43,490 --> 00:26:44,330
look at that right there.

647
00:26:44,330 --> 00:26:45,000
What's that?

648
00:26:45,000 --> 00:26:47,530
That's a circle.

649
00:26:47,530 --> 00:26:49,200
Well it turns out that--

650
00:26:49,200 --> 00:26:52,730
I had to ask Kurt about this--
it turns out that ships will

651
00:26:52,730 --> 00:26:53,750
anchor there.

652
00:26:53,750 --> 00:26:57,700
And then they'll rotate around
the anchor because of current.

653
00:26:57,700 --> 00:27:01,140
And you can actually see that
it's not perfectly uniform

654
00:27:01,140 --> 00:27:04,590
because you don't see position
points at every single point

655
00:27:04,590 --> 00:27:05,510
along that line.

656
00:27:05,510 --> 00:27:08,820
So it's really interesting.

657
00:27:08,820 --> 00:27:11,750
And WebGL gives us a way to
do some really beautiful

658
00:27:11,750 --> 00:27:12,810
animations.

659
00:27:12,810 --> 00:27:15,040
I'm just going to reload
this one here.

660
00:27:15,040 --> 00:27:21,020
This is another one that
we can use to show some

661
00:27:21,020 --> 00:27:22,750
interesting stories.

662
00:27:22,750 --> 00:27:23,740
You don't see anything yet.

663
00:27:23,740 --> 00:27:25,710
Don't worry about that.

664
00:27:25,710 --> 00:27:31,500
What we wanted to do is take a
look at ships that they had--

665
00:27:31,500 --> 00:27:33,770
we have lots of data
for the ships.

666
00:27:33,770 --> 00:27:36,870
That we had over a certain
number of days--

667
00:27:36,870 --> 00:27:39,760
I think it was 30 days-- we had
some interesting data so

668
00:27:39,760 --> 00:27:44,810
we could show the paths that
they took around the globe.

669
00:27:44,810 --> 00:27:53,940
And you start to slowly see
them come in, because of

670
00:27:53,940 --> 00:27:56,490
course we're looking at
large amounts of data.

671
00:27:56,490 --> 00:27:58,320
But we're starting--

672
00:27:58,320 --> 00:28:01,580
we're showing the paths
grow over time.

673
00:28:01,580 --> 00:28:04,900
And dynamically interacting
with this data by choosing

674
00:28:04,900 --> 00:28:11,620
when to load and how to the
slide that data around.

675
00:28:11,620 --> 00:28:14,500
And this gives us a really
interesting and rich

676
00:28:14,500 --> 00:28:17,440
environment to explore
the data.

677
00:28:17,440 --> 00:28:20,850
So you can take a look, for
instance, different line

678
00:28:20,850 --> 00:28:22,410
segments are colored
differently.

679
00:28:22,410 --> 00:28:24,340
And by a different
line segments, I

680
00:28:24,340 --> 00:28:26,500
mean of the same path.

681
00:28:26,500 --> 00:28:32,620
And what that tells us is how
old the position reports that

682
00:28:32,620 --> 00:28:33,880
we have are for them.

683
00:28:33,880 --> 00:28:36,620
So you can see, if you're
looking at an individual path,

684
00:28:36,620 --> 00:28:40,500
you could see where it started
and basically what direction

685
00:28:40,500 --> 00:28:44,990
it was going just from
these paths.

686
00:28:44,990 --> 00:28:47,800
And we also get some interesting
stories here.

687
00:28:47,800 --> 00:28:49,865
So this is Iceland.

688
00:28:49,865 --> 00:28:52,370

689
00:28:52,370 --> 00:28:53,670
It looks like there's
a lot a looping

690
00:28:53,670 --> 00:28:55,860
around going on in Iceland.

691
00:28:55,860 --> 00:28:59,680
But it's at the also people
coming from other places.

692
00:28:59,680 --> 00:29:03,980
And it turns out that these are
fishing vessels that are

693
00:29:03,980 --> 00:29:06,600
traveling around Iceland and
then going back to their home

694
00:29:06,600 --> 00:29:11,970
ports doing fishing
in that area.

695
00:29:11,970 --> 00:29:17,610
So we're really able
to very dynamically

696
00:29:17,610 --> 00:29:19,340
interact with this data.

697
00:29:19,340 --> 00:29:23,420
And you can also see places
where we have data that

698
00:29:23,420 --> 00:29:24,780
doesn't look so good.

699
00:29:24,780 --> 00:29:27,770
This is a great way to explore
the data because you'll see

700
00:29:27,770 --> 00:29:30,700
here you've got ships
going over ground.

701
00:29:30,700 --> 00:29:33,730
Well part of that is that we
only get the ships' locations

702
00:29:33,730 --> 00:29:36,200
at certain times because
the satellite's

703
00:29:36,200 --> 00:29:37,980
circling the earth.

704
00:29:37,980 --> 00:29:41,950
So we may see it in one point
on one day and at another

705
00:29:41,950 --> 00:29:44,300
point on another and that might
just happen to go over

706
00:29:44,300 --> 00:29:46,220
ground so we're going to draw
a line in between it.

707
00:29:46,220 --> 00:29:56,020
And sometimes you'll see really
drastic data going over

708
00:29:56,020 --> 00:29:58,160
areas that are actually
much larger.

709
00:29:58,160 --> 00:30:03,260
And that's sometimes areas in
which we can get some bad

710
00:30:03,260 --> 00:30:08,320
data, as in transceivers that
are broadcasting incorrect

711
00:30:08,320 --> 00:30:11,800
locations or incorrect IDs.

712
00:30:11,800 --> 00:30:15,050
And you can tell other
interesting stories.

713
00:30:15,050 --> 00:30:21,840
So look here on the coast off
of Somalia, well known as a

714
00:30:21,840 --> 00:30:25,810
place where lots of
pirates hang out.

715
00:30:25,810 --> 00:30:29,990
Look, we don't have any
ships the going there.

716
00:30:29,990 --> 00:30:32,570
Or they're turning off their
broadcasters to not let you

717
00:30:32,570 --> 00:30:34,240
know what their locations are.

718
00:30:34,240 --> 00:30:40,550
And you can see that
again in the

719
00:30:40,550 --> 00:30:43,550
position-oriented ones, as well.

720
00:30:43,550 --> 00:30:46,080
So you can see here,
again, we have this

721
00:30:46,080 --> 00:30:48,810
empty space right here.

722
00:30:48,810 --> 00:30:51,190
Whereas, if you look on the
other side of Africa, you get

723
00:30:51,190 --> 00:30:55,040
a very rich environment
of travel.

724
00:30:55,040 --> 00:30:57,395
Lots of people going in in lots
of different directions.

725
00:30:57,395 --> 00:31:06,080

726
00:31:06,080 --> 00:31:10,100
I also want to point out that
the Google Maps API is

727
00:31:10,100 --> 00:31:10,990
multi-platform.

728
00:31:10,990 --> 00:31:14,130
So we've been showing you
JavaScript and WebGL.

729
00:31:14,130 --> 00:31:19,340
But there's also iOS and Android
platforms which you

730
00:31:19,340 --> 00:31:22,010
can use this Google Maps
on and then use

731
00:31:22,010 --> 00:31:23,390
a Google data web.

732
00:31:23,390 --> 00:31:26,080

733
00:31:26,080 --> 00:31:31,370
And again, just to reiterate
something that Kurt said is,

734
00:31:31,370 --> 00:31:33,470
we're not just interested
in ships.

735
00:31:33,470 --> 00:31:34,220
We just--

736
00:31:34,220 --> 00:31:35,100
well, Kurt is.

737
00:31:35,100 --> 00:31:37,240
[LAUGHTER]

738
00:31:37,240 --> 00:31:40,210
MANO MARKS: But the technology
can be-- this kind of

739
00:31:40,210 --> 00:31:43,720
technology can be used for
any kind of sensor data.

740
00:31:43,720 --> 00:31:47,330
Flights, taxi car services,
trucks, anything that you

741
00:31:47,330 --> 00:31:48,440
really want.

742
00:31:48,440 --> 00:31:51,560
Anything that's got a position
you can visualize on a map.

743
00:31:51,560 --> 00:31:57,560
And the Google Cloud allows
you to easily do that.

744
00:31:57,560 --> 00:31:59,630
So if you want to find out
more, there's links:

745
00:31:59,630 --> 00:32:04,530
developers.google.com
and goland.org.

746
00:32:04,530 --> 00:32:06,040
And that's all.

747
00:32:06,040 --> 00:32:08,170
We will take questions now.

748
00:32:08,170 --> 00:32:09,572
Thank you.

749
00:32:09,572 --> 00:32:19,510
[APPLAUSE]

750
00:32:19,510 --> 00:32:20,900
AUDIENCE: Hi.

751
00:32:20,900 --> 00:32:23,430
You have all this great
anonymous location data of

752
00:32:23,430 --> 00:32:26,890
users Have you that of taking
all of that and seeing if you

753
00:32:26,890 --> 00:32:31,800
can watch traffic flow of
all the Android users?

754
00:32:31,800 --> 00:32:32,770
MANO MARKS: You do.

755
00:32:32,770 --> 00:32:36,450
That's our traffic layer.

756
00:32:36,450 --> 00:32:36,960
AUDIENCE: Well, yes.

757
00:32:36,960 --> 00:32:42,060
But the individuals moving
around the world and how they

758
00:32:42,060 --> 00:32:45,200
move, like day-to-day, have
you ever visualized all of

759
00:32:45,200 --> 00:32:46,240
them, not just driving, but--

760
00:32:46,240 --> 00:32:48,560
MANO MARKS: That a really
interesting question.

761
00:32:48,560 --> 00:32:50,910
And I'm sure a lot of data
scientists would be really

762
00:32:50,910 --> 00:32:51,780
excited about that.

763
00:32:51,780 --> 00:32:56,650
And of course privacy folks get
really concerned when you

764
00:32:56,650 --> 00:32:57,740
start talking about that.

765
00:32:57,740 --> 00:33:01,030
So we couldn't talk about--

766
00:33:01,030 --> 00:33:04,430
we don't have anything like
that that we can show you.

767
00:33:04,430 --> 00:33:07,570

768
00:33:07,570 --> 00:33:08,710
In the back.

769
00:33:08,710 --> 00:33:10,640
AUDIENCE: I just want to know
how you're rendering that many

770
00:33:10,640 --> 00:33:13,480
points at once in the
JavaScript API.

771
00:33:13,480 --> 00:33:18,330
MANO MARKS: So we're using a
WebGL utility library called

772
00:33:18,330 --> 00:33:24,000
canvas layer that actually syncs
a WebGL canvas on top of

773
00:33:24,000 --> 00:33:27,450
the map and allows the
translation between WebGL

774
00:33:27,450 --> 00:33:30,050
coordinates and latitude,
longitude.

775
00:33:30,050 --> 00:33:32,890
AUDIENCE: So were you serving
that many points into the

776
00:33:32,890 --> 00:33:34,350
browser and then this--

777
00:33:34,350 --> 00:33:37,260
MANO MARKS: All those points
are being served into the

778
00:33:37,260 --> 00:33:40,890
browser and then rendered
in the browser by WebGL.

779
00:33:40,890 --> 00:33:43,380
We're not serving out
tile overlays.

780
00:33:43,380 --> 00:33:46,680
That what allows for
the interactivity.

781
00:33:46,680 --> 00:33:49,750
Brendan Kenny's session this
morning goes into a lot

782
00:33:49,750 --> 00:33:51,000
greater depth on how that
was accomplished.

783
00:33:51,000 --> 00:33:54,450

784
00:33:54,450 --> 00:33:57,100
AUDIENCE: This is actually
somewhat connected to that

785
00:33:57,100 --> 00:33:58,550
previous question.

786
00:33:58,550 --> 00:34:02,280
How many data points are you
able to scalably show in the

787
00:34:02,280 --> 00:34:03,870
browser window?

788
00:34:03,870 --> 00:34:07,930
MANO MARKS: So in this case,
we're typically working with

789
00:34:07,930 --> 00:34:09,830
tens of thousands.

790
00:34:09,830 --> 00:34:15,530
But when you see the tracks,
each one of those is actually

791
00:34:15,530 --> 00:34:19,320
being rendered as lines--

792
00:34:19,320 --> 00:34:21,570
millions of vertices, basically,
are being processed

793
00:34:21,570 --> 00:34:22,310
at that point.

794
00:34:22,310 --> 00:34:28,630
And for point data, we've done
experiments where we've shown

795
00:34:28,630 --> 00:34:32,130
one to two million rendering
pretty easily.

796
00:34:32,130 --> 00:34:35,940
The major problem, then, as
we've discussed here, is the

797
00:34:35,940 --> 00:34:38,179
communication between the
browser and the server to

798
00:34:38,179 --> 00:34:41,310
actually get the data in.

799
00:34:41,310 --> 00:34:42,320
In the back.

800
00:34:42,320 --> 00:34:44,739
AUDIENCE: Is there any thought
to providing electronic

801
00:34:44,739 --> 00:34:49,780
charting data similar to Google
Maps for the water?

802
00:34:49,780 --> 00:34:53,389
Or an ECTISP-like situation?

803
00:34:53,389 --> 00:34:54,449
KURT SCHWEHR: Sure.

804
00:34:54,449 --> 00:34:57,260
Actually, if you use the GDL
open source tools, you can

805
00:34:57,260 --> 00:35:00,140
take any-- it's called as S-57,
is the current format.

806
00:35:00,140 --> 00:35:01,670
There's a new one
coming out so.

807
00:35:01,670 --> 00:35:02,990
You can do that yourself.

808
00:35:02,990 --> 00:35:05,810
There's several companies that
provide that kind of service.

809
00:35:05,810 --> 00:35:08,230
Unfortunately, the United States
is the only country

810
00:35:08,230 --> 00:35:10,130
that gives those out for free.

811
00:35:10,130 --> 00:35:12,120
And if you get them from
anybody other than the

812
00:35:12,120 --> 00:35:14,640
official provider, which we are
not, you're not allowed to

813
00:35:14,640 --> 00:35:16,090
use them for navigation.

814
00:35:16,090 --> 00:35:18,330
So when it comes to things
like ECTISP--

815
00:35:18,330 --> 00:35:20,470
that's the standard for what
goes on your bridge of your

816
00:35:20,470 --> 00:35:22,770
ship, for those who
don't know--

817
00:35:22,770 --> 00:35:25,210
we can't play in that world.

818
00:35:25,210 --> 00:35:26,080
Sorry.

819
00:35:26,080 --> 00:35:26,860
You can, though.

820
00:35:26,860 --> 00:35:28,060
MANO MARKS: Next question.

821
00:35:28,060 --> 00:35:30,120
AUDIENCE: This is more of a
code question about the Go

822
00:35:30,120 --> 00:35:31,690
stuff and the channel stuff.

823
00:35:31,690 --> 00:35:33,850
So in the scenario that you
demoed earlier in the code

824
00:35:33,850 --> 00:35:37,410
snippet, so when you try to
retrieve, it's like it'll try

825
00:35:37,410 --> 00:35:37,990
to get it from Memcache.

826
00:35:37,990 --> 00:35:40,980
And then if it takes more
than one second, just

827
00:35:40,980 --> 00:35:42,540
respond to the user.

828
00:35:42,540 --> 00:35:45,380
So I guess, in that scenario,
is it pretty much like

829
00:35:45,380 --> 00:35:46,980
asynchronous processes happening
at the same time

830
00:35:46,980 --> 00:35:50,710
where you're trying to fetch the
data the Datastore and if

831
00:35:50,710 --> 00:35:52,370
Memcached fails, it just goes
from the Datastore.

832
00:35:52,370 --> 00:35:55,180
Is that how it works?

833
00:35:55,180 --> 00:35:56,600
FRANCESC CAMPOY FLORES:
I'm not doing that.

834
00:35:56,600 --> 00:36:01,470
I'm trying to fetch-- so I'm not
waiting for the Git from

835
00:36:01,470 --> 00:36:04,110
Memcache, because it's
really fast.

836
00:36:04,110 --> 00:36:07,480
If it's not there, it just
answers, missed cache.

837
00:36:07,480 --> 00:36:09,140
And then you get it
from Datastore.

838
00:36:09,140 --> 00:36:11,840
And if you get it from Datastore
and it takes too

839
00:36:11,840 --> 00:36:14,800
long, actually there's already
a time out of five seconds.

840
00:36:14,800 --> 00:36:17,220
So after those five seconds
[INAUDIBLE], And then you

841
00:36:17,220 --> 00:36:19,570
should be able to get that
data from BigQuery.

842
00:36:19,570 --> 00:36:22,690
But as I saying before,
it's way slower.

843
00:36:22,690 --> 00:36:23,100
AUDIENCE: OK.

844
00:36:23,100 --> 00:36:23,554
Thanks.

845
00:36:23,554 --> 00:36:24,916
FRANCESC CAMPOY FLORES:
No problem.

846
00:36:24,916 --> 00:36:26,280
MANO MARKS: Alright.

847
00:36:26,280 --> 00:36:29,570
Well thank you very much for
coming and we'll be in the

848
00:36:29,570 --> 00:36:33,530
Google Maps Sandbox immediately
after the session.

849
00:36:33,530 --> 00:36:34,660
Thank you.

850
00:36:34,660 --> 00:36:40,275
[APPLAUSE]

