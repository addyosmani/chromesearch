1
00:00:00,000 --> 00:00:12,000

2
00:00:12,000 --> 00:00:12,500
PAUL IRISH: Hi.

3
00:00:12,500 --> 00:00:16,470
So welcome to another episode
of the Breakpoint, where we

4
00:00:16,470 --> 00:00:19,750
dive into tools to make you a
more productive developer

5
00:00:19,750 --> 00:00:20,520
making web apps.

6
00:00:20,520 --> 00:00:22,530
And we have a full crew today.

7
00:00:22,530 --> 00:00:24,250
ADDY OSMANI: Yeah.

8
00:00:24,250 --> 00:00:25,710
PAUL IRISH: So I'd also
like to introduce

9
00:00:25,710 --> 00:00:27,930
[? Cyndra Sawhouse, ?]

10
00:00:27,930 --> 00:00:30,940
who is a contributor on Yeoman,
very active in the

11
00:00:30,940 --> 00:00:32,349
JavaScript community.

12
00:00:32,349 --> 00:00:34,160
But we're going to dive into
a lot of things today.

13
00:00:34,160 --> 00:00:37,840
This is the Source Map
Spectacular episode.

14
00:00:37,840 --> 00:00:40,460
So we're going to talk about
source maps, source maps for

15
00:00:40,460 --> 00:00:45,250
SAS, source URL, project
configuration stuff, JS Run,

16
00:00:45,250 --> 00:00:49,830
Yeoman, keyboard shortcuts and
developer workflow inside of

17
00:00:49,830 --> 00:00:51,560
the Chrome Developer Tools.

18
00:00:51,560 --> 00:00:51,980
ADDY OSMANI: So

19
00:00:51,980 --> 00:00:54,370
MALE SPEAKER: Wholesome.

20
00:00:54,370 --> 00:00:54,956
ADDY OSMANI: Let's
get started!

21
00:00:54,956 --> 00:00:55,850
Let's do it!

22
00:00:55,850 --> 00:00:57,060
PAUL IRISH: First thing we're
going to start off, we're

23
00:00:57,060 --> 00:00:59,440
going to do some source
map stuff, so let's

24
00:00:59,440 --> 00:01:01,150
switch over to my screen.

25
00:01:01,150 --> 00:01:06,720
Now, source maps, just to
review, provide a language

26
00:01:06,720 --> 00:01:15,860
agnostic way of mapping source
to destination of code.

27
00:01:15,860 --> 00:01:17,950
Now, there's a fantastic
article about it, very

28
00:01:17,950 --> 00:01:21,660
exhaustive on HTML5 Rocks that
Ryan Seddon wrote, and it

29
00:01:21,660 --> 00:01:24,110
talks a lot about what you can
do, but just to show an

30
00:01:24,110 --> 00:01:25,360
example of how this works.

31
00:01:25,360 --> 00:01:29,175
So I have a small little web
app, and as you can see, we're

32
00:01:29,175 --> 00:01:30,910
just changing colors.

33
00:01:30,910 --> 00:01:32,280
Pretty great.

34
00:01:32,280 --> 00:01:34,640
Let me View Source on this.

35
00:01:34,640 --> 00:01:40,490
So here, down where we have
the scripts, we originally

36
00:01:40,490 --> 00:01:44,690
used JQuery, we had a set-up
script and then this JS, we

37
00:01:44,690 --> 00:01:47,550
minified and concatenated,
like we should,

38
00:01:47,550 --> 00:01:49,390
so that's all there.

39
00:01:49,390 --> 00:01:53,480
But you notice down at the
very bottom of this is a

40
00:01:53,480 --> 00:01:56,730
Source Mapping URL, and this
points to a JSON file.

41
00:01:56,730 --> 00:02:00,220
Now, that JSON file was
generated, in this case, by

42
00:02:00,220 --> 00:02:04,130
Closure Compiler, but what it
allows me to do is when I open

43
00:02:04,130 --> 00:02:09,930
up my Dev Tools, hide away my
secrets, and go over to my

44
00:02:09,930 --> 00:02:15,710
Sources, while the page itself
is loading in the compiled and

45
00:02:15,710 --> 00:02:21,720
single minified file, since I
have Source Maps enabled here,

46
00:02:21,720 --> 00:02:23,130
what I'm actually seeing
in Sources

47
00:02:23,130 --> 00:02:25,430
are my original scripts.

48
00:02:25,430 --> 00:02:29,050
And the other benefit here, in
addition to just seeing these

49
00:02:29,050 --> 00:02:32,180
things, is that things like
Breakpoint still work.

50
00:02:32,180 --> 00:02:37,260
So when I set a breakpoint
inside this file, I can click.

51
00:02:37,260 --> 00:02:40,160
And so the browser is actually
interpreting the minified

52
00:02:40,160 --> 00:02:44,250
file, and you can see that
because over here in my Scope

53
00:02:44,250 --> 00:02:48,930
Variables, I'm looking at a
variable called P, but really,

54
00:02:48,930 --> 00:02:51,290
that's actually the text
variable here.

55
00:02:51,290 --> 00:02:54,830
So the browser's doing the
minified, I'm getting the

56
00:02:54,830 --> 00:02:56,960
original one, so I can
do breakpoints and

57
00:02:56,960 --> 00:02:57,930
do breakpoint debugging.

58
00:02:57,930 --> 00:03:00,270
MALE SPEAKER: So there's kind
of no point in waiting until

59
00:03:00,270 --> 00:03:02,460
the end of your project to get
all your JavaScript smushed

60
00:03:02,460 --> 00:03:04,620
down to this kind of
concatenated, minified form.

61
00:03:04,620 --> 00:03:07,680
You may as well do it earlier
on, and then kind of roll with

62
00:03:07,680 --> 00:03:08,990
source maps?

63
00:03:08,990 --> 00:03:10,140
What do we recommend?

64
00:03:10,140 --> 00:03:12,050
PAUL IRISH: Yeah, that's
a good question.

65
00:03:12,050 --> 00:03:14,830
So I think during development,
you're still probably going to

66
00:03:14,830 --> 00:03:16,210
want to develop with the
original source.

67
00:03:16,210 --> 00:03:17,020
There's downsides, right?

68
00:03:17,020 --> 00:03:19,130
I cannot actually just
see what's in the

69
00:03:19,130 --> 00:03:21,670
text very well here.

70
00:03:21,670 --> 00:03:25,740
Maybe this will come later,
but for now, that's this.

71
00:03:25,740 --> 00:03:28,790
I think this is a big boon for
debugging a production

72
00:03:28,790 --> 00:03:30,370
environment.

73
00:03:30,370 --> 00:03:32,410
But there's other things in
addition to just the fact of

74
00:03:32,410 --> 00:03:35,410
going from minified source back
to the original sources,

75
00:03:35,410 --> 00:03:38,570
so let's dive into that now.

76
00:03:38,570 --> 00:03:40,550
When Source Maps came out,
everyone was really excited

77
00:03:40,550 --> 00:03:41,974
about, what about Coffeescripts,
right?

78
00:03:41,974 --> 00:03:43,180
That's what they're asking.

79
00:03:43,180 --> 00:03:46,620
So Coffeescript redux is an
alternative Coffeescript

80
00:03:46,620 --> 00:03:49,050
Compiler that Matthew
[? Fakara ?]

81
00:03:49,050 --> 00:03:51,900
has been working on for
a long time now,

82
00:03:51,900 --> 00:03:53,010
and it's very active.

83
00:03:53,010 --> 00:03:56,830
And this new Coffeescript redux
compiler can create

84
00:03:56,830 --> 00:03:58,826
source maps.

85
00:03:58,826 --> 00:04:02,880
There's another project, too,
that has just reached a new,

86
00:04:02,880 --> 00:04:05,860
exciting state, which
is Uglify JS 2.

87
00:04:05,860 --> 00:04:09,890
A new version, it is now
finished and stable, and it

88
00:04:09,890 --> 00:04:12,380
also generates source maps.

89
00:04:12,380 --> 00:04:14,680
And not only that, but it can
consume source maps, too.

90
00:04:14,680 --> 00:04:19,240
So if you see here, it will
consume a source map, and then

91
00:04:19,240 --> 00:04:20,680
you can generate a new one.

92
00:04:20,680 --> 00:04:21,670
MALE SPEAKER: I was
really confused.

93
00:04:21,670 --> 00:04:23,940
You mentioned this earlier, and
I was like, this is the

94
00:04:23,940 --> 00:04:24,960
source map, and you can--

95
00:04:24,960 --> 00:04:26,450
ADDY OSMANI: Source
map [INAUDIBLE].

96
00:04:26,450 --> 00:04:27,590
MALE SPEAKER: But why
would Uglify?

97
00:04:27,590 --> 00:04:29,260
Uglify should create
a source map.

98
00:04:29,260 --> 00:04:29,390
PAUL IRISH: Yeah.

99
00:04:29,390 --> 00:04:30,240
It should.

100
00:04:30,240 --> 00:04:32,170
MALE SPEAKER: So why does
it take a source map?

101
00:04:32,170 --> 00:04:33,990
PAUL IRISH: Because you want
to take something like a

102
00:04:33,990 --> 00:04:35,050
Coffeescript--

103
00:04:35,050 --> 00:04:38,090
you can also take type script,
which creates a source map--

104
00:04:38,090 --> 00:04:41,250
consume its source map, and then
go down to minified code,

105
00:04:41,250 --> 00:04:44,210
because that's what we want
out of Uglify, right?

106
00:04:44,210 --> 00:04:47,380
But we want to take our minified
app, and then when

107
00:04:47,380 --> 00:04:49,710
we're debugging it, go back
to the original, original

108
00:04:49,710 --> 00:04:53,100
sources, which in this case,
is not even JavaScript.

109
00:04:53,100 --> 00:04:57,030
MALE SPEAKER: OK so we take the
one that Uglify gives us

110
00:04:57,030 --> 00:04:59,760
to get back to the Coffeescript
compiled

111
00:04:59,760 --> 00:05:02,890
JavaScript, and then we take the
Coffeescript source map to

112
00:05:02,890 --> 00:05:04,310
go back into the Coffeescript?

113
00:05:04,310 --> 00:05:05,810
PAUL IRISH: Pretty
close, yeah.

114
00:05:05,810 --> 00:05:09,080
The browser only ends up dealing
with one single map,

115
00:05:09,080 --> 00:05:11,460
so the map is mapped.

116
00:05:11,460 --> 00:05:14,000
So this is all explained in a
great post, again by Ryan

117
00:05:14,000 --> 00:05:16,170
Seddon, called Multilevel Source
Maps where he talks

118
00:05:16,170 --> 00:05:18,580
about how this works and
shows a nice demo.

119
00:05:18,580 --> 00:05:22,080
And I'm going to quickly
show my own demo.

120
00:05:22,080 --> 00:05:23,305
So let's see.

121
00:05:23,305 --> 00:05:29,700
I'm here in this little thing.

122
00:05:29,700 --> 00:05:33,170
I'm just going to log out this
small little piece of

123
00:05:33,170 --> 00:05:34,830
Coffeescript.

124
00:05:34,830 --> 00:05:38,680
We're just iterating over in
Array, we're mapping, and then

125
00:05:38,680 --> 00:05:43,720
we have this long form text
string, and we dropped the

126
00:05:43,720 --> 00:05:47,110
results of both of these things,
this math stuff and

127
00:05:47,110 --> 00:05:51,300
the Shakespeare, into Argon.

128
00:05:51,300 --> 00:05:55,810
Now, I compiled this with the
Coffeescript Redux compiler,

129
00:05:55,810 --> 00:05:59,640
and it turned into this.

130
00:05:59,640 --> 00:06:03,760
So generated by Coffeescript,
here's my JavaScript, and

131
00:06:03,760 --> 00:06:05,720
that's all looking good, and
you'll notice down at the

132
00:06:05,720 --> 00:06:10,000
bottom, this is how I refer
to that source map URL.

133
00:06:10,000 --> 00:06:15,260
Then, I went to Uglify, and I
said, hey man, hook it up.

134
00:06:15,260 --> 00:06:16,970
MALE SPEAKER: Just like,
smush this down.

135
00:06:16,970 --> 00:06:18,570
PAUL IRISH: Yeah.

136
00:06:18,570 --> 00:06:21,640
It looks something like
this right here.

137
00:06:21,640 --> 00:06:27,050
So we consume that map, we
generate a new one, and we

138
00:06:27,050 --> 00:06:28,940
output to this new min JS.

139
00:06:28,940 --> 00:06:31,540

140
00:06:31,540 --> 00:06:35,760
So let me bring up what this
looks like in the browser.

141
00:06:35,760 --> 00:06:48,250
So if I just View Source, I have
a test.min.js, but in my

142
00:06:48,250 --> 00:06:52,250
Sources Panel, I have my
original Coffeescript with

143
00:06:52,250 --> 00:06:53,050
working breakpoints.

144
00:06:53,050 --> 00:06:55,620
Very nice.

145
00:06:55,620 --> 00:06:56,490
MALE SPEAKER: Really slick.

146
00:06:56,490 --> 00:06:56,950
PAUL IRISH: Very nice.

147
00:06:56,950 --> 00:06:58,580
So there it is.

148
00:06:58,580 --> 00:06:59,930
MALE SPEAKER: So two steps.

149
00:06:59,930 --> 00:07:01,190
PAUL IRISH: Yeah.

150
00:07:01,190 --> 00:07:01,830
A combo.

151
00:07:01,830 --> 00:07:05,310
So Source Maps has gotten
a very active community.

152
00:07:05,310 --> 00:07:07,250
A lot of tools create them.

153
00:07:07,250 --> 00:07:09,780
This is essentially, the living
document that tracks

154
00:07:09,780 --> 00:07:12,170
all the activity in
Source Maps now.

155
00:07:12,170 --> 00:07:15,600
Over on GetHub, look up Ryan
Seddon in GetHub Source Maps,

156
00:07:15,600 --> 00:07:16,700
you'll find it.

157
00:07:16,700 --> 00:07:19,970
The current languages
that generate Source

158
00:07:19,970 --> 00:07:23,780
Maps, such as [? JWBT ?]

159
00:07:23,780 --> 00:07:27,290
projects, the Tracer project.

160
00:07:27,290 --> 00:07:33,600
This Mozilla Source Map
JavaScript project does this

161
00:07:33,600 --> 00:07:37,370
source map creation, and both
of these projects that I've

162
00:07:37,370 --> 00:07:39,700
shown use this.

163
00:07:39,700 --> 00:07:42,190
There's a lot of other good
stuff worth clicking around.

164
00:07:42,190 --> 00:07:44,870
Spend some time exploring
this.

165
00:07:44,870 --> 00:07:49,216
Now, I want to switch over to
non-JavaScript source maps.

166
00:07:49,216 --> 00:07:53,480
In the last episode, we talked
about dev tools in SAS, right,

167
00:07:53,480 --> 00:07:57,140
and I opened up HTML5
Please, we looked at

168
00:07:57,140 --> 00:07:58,540
kind of this [? H1 ?]

169
00:07:58,540 --> 00:08:00,910
and look, we're actually
referencing the [? SESS. ?]

170
00:08:00,910 --> 00:08:04,290
I click over here, and so
we add line mapping.

171
00:08:04,290 --> 00:08:06,450
And the current implementation
is just that.

172
00:08:06,450 --> 00:08:10,600
It just is line mapping, and
using these little hints about

173
00:08:10,600 --> 00:08:12,490
location to go over there.

174
00:08:12,490 --> 00:08:14,090
That's cool.

175
00:08:14,090 --> 00:08:18,990
In fact, that's really cool,
so cool that Felix

176
00:08:18,990 --> 00:08:20,240
[? Ganoss ?]

177
00:08:20,240 --> 00:08:22,550

178
00:08:22,550 --> 00:08:29,190
he added pull requests to both
Less JS and Stylus to add the

179
00:08:29,190 --> 00:08:31,340
same line number mapping to
those so that you can get the

180
00:08:31,340 --> 00:08:32,270
same benefits.

181
00:08:32,270 --> 00:08:34,090
ADDY OSMANI: So for all those
people that had been wondering

182
00:08:34,090 --> 00:08:35,870
whether Less and all the other
solutions were going to get

183
00:08:35,870 --> 00:08:36,929
this support--

184
00:08:36,929 --> 00:08:37,400
PAUL IRISH: Boom.

185
00:08:37,400 --> 00:08:38,150
ADDY OSMANI: Tada.

186
00:08:38,150 --> 00:08:40,500
PAUL IRISH: So those just went
up yesterday, so they're not

187
00:08:40,500 --> 00:08:43,830
in the projects yet, but
they're pretty awesome.

188
00:08:43,830 --> 00:08:48,720
But in the meantime, this is
just using this kind of hack

189
00:08:48,720 --> 00:08:49,750
to get line number mapping.

190
00:08:49,750 --> 00:08:52,650
It's not using real source maps,
because no tool has had

191
00:08:52,650 --> 00:08:53,600
the ability.

192
00:08:53,600 --> 00:08:58,250
But this over here on the SAS
repo is an active pull request

193
00:08:58,250 --> 00:09:02,020
contributed by the Chrome Dev
Tools Team to add actual V3

194
00:09:02,020 --> 00:09:04,330
source map generation into
the SAS compiler.

195
00:09:04,330 --> 00:09:05,150
MALE SPEAKER: That's so cool.

196
00:09:05,150 --> 00:09:06,000
PAUL IRISH: Yeah.

197
00:09:06,000 --> 00:09:14,330
So as far as what this will do,
let's say a few things.

198
00:09:14,330 --> 00:09:19,140
We know, basically, in the
compiled CSS, where everything

199
00:09:19,140 --> 00:09:20,440
that's in there came from.

200
00:09:20,440 --> 00:09:23,560
So let's say you have a color
called Red, and it originally

201
00:09:23,560 --> 00:09:25,340
came from a variable.

202
00:09:25,340 --> 00:09:28,910
You can Command-click from the
Elements Panel that red, and

203
00:09:28,910 --> 00:09:31,110
it'll jump back to its original
location, where you

204
00:09:31,110 --> 00:09:32,180
can make that change.

205
00:09:32,180 --> 00:09:37,180
Let's say the value was
evaluated because of some math

206
00:09:37,180 --> 00:09:38,710
in a function.

207
00:09:38,710 --> 00:09:40,860
You would Command-click, and it
would go directly to that

208
00:09:40,860 --> 00:09:42,976
evaluation point.

209
00:09:42,976 --> 00:09:47,020
And if a property's
source was from a

210
00:09:47,020 --> 00:09:48,630
mix-in, it would go there.

211
00:09:48,630 --> 00:09:51,090
So we can go directly from what
we're looking at in the

212
00:09:51,090 --> 00:09:54,870
CSS back to where it came from,
even considering a bunch

213
00:09:54,870 --> 00:09:58,270
of transformations and actual
logic happens [INAUDIBLE].

214
00:09:58,270 --> 00:10:02,080
So that's really cool.

215
00:10:02,080 --> 00:10:06,122
So I can't wait to really demo
how this really works.

216
00:10:06,122 --> 00:10:07,750
That's something to
look forward to.

217
00:10:07,750 --> 00:10:11,000

218
00:10:11,000 --> 00:10:11,910
One last quick on.

219
00:10:11,910 --> 00:10:12,800
Can I do that?

220
00:10:12,800 --> 00:10:13,640
ADDY OSMANI: Yeah, sure.

221
00:10:13,640 --> 00:10:14,400
MALE SPEAKER: Go for it.

222
00:10:14,400 --> 00:10:16,410
You're doing great,
[INAUDIBLE].

223
00:10:16,410 --> 00:10:18,060
PAUL IRISH: Source URL.

224
00:10:18,060 --> 00:10:19,450
Source URL is a little
funny one.

225
00:10:19,450 --> 00:10:23,876
So this is a little
tricky to explain.

226
00:10:23,876 --> 00:10:27,970
I'm going to bring
up some code.

227
00:10:27,970 --> 00:10:29,230
Actually, you know what?

228
00:10:29,230 --> 00:10:31,860
Here, we'll just bring
up my console.

229
00:10:31,860 --> 00:10:39,455
Eval, let's see, console.log
document window.

230
00:10:39,455 --> 00:10:41,610
Does that work?

231
00:10:41,610 --> 00:10:43,340
MALE SPEAKER: [INAUDIBLE].

232
00:10:43,340 --> 00:10:44,590
PAUL IRISH: [INAUDIBLE].

233
00:10:44,590 --> 00:10:47,160

234
00:10:47,160 --> 00:10:50,790
Now, typically when you eval, it
just evaluates, but there's

235
00:10:50,790 --> 00:10:54,010
no way to retain that
and access it later.

236
00:10:54,010 --> 00:10:57,120
Now, Source URL actually
gives us this ability.

237
00:10:57,120 --> 00:10:59,770
Now, you might be looking at
this and being like, why would

238
00:10:59,770 --> 00:11:03,260
you ever want to hold on to an
evaluation that you're just

239
00:11:03,260 --> 00:11:04,550
doing right here?

240
00:11:04,550 --> 00:11:06,260
[? hi-hi.js. ?]

241
00:11:06,260 --> 00:11:09,320
So if you see, this just
added [? hi-hi.js ?]

242
00:11:09,320 --> 00:11:10,950
in my Sources Panel.

243
00:11:10,950 --> 00:11:13,440
This is here.

244
00:11:13,440 --> 00:11:15,100
This is pretty cool, that I
can treat this like a real

245
00:11:15,100 --> 00:11:21,060
script, I can add breakpoints,
and with a much more

246
00:11:21,060 --> 00:11:22,460
significant evaluation.

247
00:11:22,460 --> 00:11:24,910
So typically, this will happen
inside of Framework.

248
00:11:24,910 --> 00:11:27,840
The Framework will be doing some
transformations, let's

249
00:11:27,840 --> 00:11:33,520
say it's a templating Framework,
that's creating

250
00:11:33,520 --> 00:11:38,120
compiled templates, and it can
just add them into here on the

251
00:11:38,120 --> 00:11:40,110
fly, generating the file name.

252
00:11:40,110 --> 00:11:43,220
The other thing that just got
added with Source URL is the

253
00:11:43,220 --> 00:11:46,580
ability to do the same thing,
not just for evaluated text,

254
00:11:46,580 --> 00:11:49,480
but for inline script tags.

255
00:11:49,480 --> 00:11:55,990
So if I take a little bit
of code from over here.

256
00:11:55,990 --> 00:12:01,890
So this right here, I'm just
creating a script element,

257
00:12:01,890 --> 00:12:07,610
tossing something into it, and
then adding it to the DOM.

258
00:12:07,610 --> 00:12:11,440
Now typically, this will just
throw it away, but again, I

259
00:12:11,440 --> 00:12:20,250
can add my Source URL into here,
and now, it actually

260
00:12:20,250 --> 00:12:23,370
lives, hypothetically.

261
00:12:23,370 --> 00:12:26,900

262
00:12:26,900 --> 00:12:29,890
Demo fail?

263
00:12:29,890 --> 00:12:31,660
Ah.

264
00:12:31,660 --> 00:12:35,770
There's a very important space
that's required right here.

265
00:12:35,770 --> 00:12:38,080
MALE SPEAKER: There we go.

266
00:12:38,080 --> 00:12:40,270
Awesome!

267
00:12:40,270 --> 00:12:42,580
PAUL IRISH: So the way that I'm
showing this is a little

268
00:12:42,580 --> 00:12:45,330
weird because why would you ever
want something from the

269
00:12:45,330 --> 00:12:48,050
console to go over here, but
this is really important in

270
00:12:48,050 --> 00:12:51,900
larger frameworks that manage
script evaluation for you, or

271
00:12:51,900 --> 00:12:52,935
anything like that.

272
00:12:52,935 --> 00:12:54,390
MALE SPEAKER: Are we gong to
see Frameworks actually

273
00:12:54,390 --> 00:12:56,980
starting to support this?

274
00:12:56,980 --> 00:13:00,925
PAUL IRISH: Ember uses this
really well, so they have a

275
00:13:00,925 --> 00:13:04,590
way to collect all the modules
and evaluate them.

276
00:13:04,590 --> 00:13:07,010
So the modules are collected and
actually executed as only

277
00:13:07,010 --> 00:13:10,610
a single JavaScript file, but
you authored them in a lot of

278
00:13:10,610 --> 00:13:13,280
different files, and it's
actually just running them all

279
00:13:13,280 --> 00:13:16,480
through a bell, but using Source
URL so that you have a

280
00:13:16,480 --> 00:13:18,300
very enjoyable debugging
experience.

281
00:13:18,300 --> 00:13:20,090
So yeah.

282
00:13:20,090 --> 00:13:20,770
ADDY OSMANI: That's
really cool.

283
00:13:20,770 --> 00:13:21,907
PAUL IRISH: It's good stuff.

284
00:13:21,907 --> 00:13:23,040
ADDY OSMANI: I like it.

285
00:13:23,040 --> 00:13:24,890
MALE SPEAKER: Cool.

286
00:13:24,890 --> 00:13:25,520
Well done.

287
00:13:25,520 --> 00:13:28,130
That was like--

288
00:13:28,130 --> 00:13:30,040
PAUL IRISH: All right, you want
to show us some stuff?

289
00:13:30,040 --> 00:13:30,570
SINDRE SORHUS: Yeah.

290
00:13:30,570 --> 00:13:33,250
PAUL IRISH: So what are you
going to talk about?

291
00:13:33,250 --> 00:13:35,260
SINDRE SORHUS: So I'm going
to talk about some project

292
00:13:35,260 --> 00:13:38,980
configuration files you should
use in a project.

293
00:13:38,980 --> 00:13:42,630
So I have some templates I
usually use when I start a new

294
00:13:42,630 --> 00:13:46,320
project to make it easier for
people to contribute to my

295
00:13:46,320 --> 00:13:49,340
code, while still keeping my
preference on different code

296
00:13:49,340 --> 00:13:53,100
style preferences.

297
00:13:53,100 --> 00:13:56,660
So the first one is dot get
attributes [INAUDIBLE].

298
00:13:56,660 --> 00:13:57,940
You should [? press always ?]

299
00:13:57,940 --> 00:14:00,380
on a route folder, and
it applies to all

300
00:14:00,380 --> 00:14:03,510
your files in a project.

301
00:14:03,510 --> 00:14:08,810
So what it does, this one, it
just all the text files--

302
00:14:08,810 --> 00:14:11,810
yeah, thanks.

303
00:14:11,810 --> 00:14:16,050
All the text files, it will
normalize your line handlings

304
00:14:16,050 --> 00:14:19,880
to Unix, because some people
might be on Windows using

305
00:14:19,880 --> 00:14:22,550
Notepad [INAUDIBLE], and you
don't really want to mix

306
00:14:22,550 --> 00:14:22,890
[INAUDIBLE].

307
00:14:22,890 --> 00:14:25,260
MALE SPEAKER: So this makes a
difference because Windows has

308
00:14:25,260 --> 00:14:27,207
character return line
feed, and Linux is

309
00:14:27,207 --> 00:14:27,715
just line feed, right?

310
00:14:27,715 --> 00:14:28,860
SINDRE SORHUS: Exactly.

311
00:14:28,860 --> 00:14:33,010
MALE SPEAKER: And if you check
out a repo and it's different,

312
00:14:33,010 --> 00:14:34,480
Get will start to say,
I'm going to

313
00:14:34,480 --> 00:14:35,555
change some stuff here.

314
00:14:35,555 --> 00:14:35,960
SINDRE SORHUS: Yeah.

315
00:14:35,960 --> 00:14:38,690
It's really messy, so
you don't want that.

316
00:14:38,690 --> 00:14:40,355
MALE SPEAKER: This makes
this go away, right?

317
00:14:40,355 --> 00:14:40,800
SINDRE SORHUS: Exactly.

318
00:14:40,800 --> 00:14:41,170
MALE SPEAKER: I like that.

319
00:14:41,170 --> 00:14:42,900
SINDRE SORHUS: You just put it
in a repo, and magically, you

320
00:14:42,900 --> 00:14:44,660
don't have to think about it.

321
00:14:44,660 --> 00:14:45,455
PAUL IRISH: That's awesome.

322
00:14:45,455 --> 00:14:47,130
MALE SPEAKER: Yeah, I like
not thinking about it.

323
00:14:47,130 --> 00:14:50,360
SINDRE SORHUS: We also have
[INAUDIBLE], which if you

324
00:14:50,360 --> 00:14:52,465
don't know what Travis is--

325
00:14:52,465 --> 00:14:53,745
PAUL IRISH: Want to bring
that down [INAUDIBLE]?

326
00:14:53,745 --> 00:14:55,740
SINDRE SORHUS: Yeah, I'll bring
it down, of course.

327
00:14:55,740 --> 00:14:59,530
So Travis is a continuous
integration system which

328
00:14:59,530 --> 00:15:03,490
actually tests your code when
you push, and on the commits,

329
00:15:03,490 --> 00:15:04,360
and stuff like that.

330
00:15:04,360 --> 00:15:06,310
PAUL IRISH: There are quite a
few Open Source projects using

331
00:15:06,310 --> 00:15:07,550
[INAUDIBLE], aren't there?

332
00:15:07,550 --> 00:15:09,070
Actually, Modernizer's
using it.

333
00:15:09,070 --> 00:15:13,260
SINDRE SORHUS: Modernizer,
Yeoman, of course, JQuery.

334
00:15:13,260 --> 00:15:14,840
So it's very popular.

335
00:15:14,840 --> 00:15:16,940
It's free for Open Source.

336
00:15:16,940 --> 00:15:17,920
Yes sir?

337
00:15:17,920 --> 00:15:18,380
PAUL IRISH: [INAUDIBLE]

338
00:15:18,380 --> 00:15:19,540
switch over to my screen.

339
00:15:19,540 --> 00:15:20,030
SINDRE SORHUS: Yeah.

340
00:15:20,030 --> 00:15:21,720
PAUL IRISH: So we'll just
show this real quick.

341
00:15:21,720 --> 00:15:25,010
This is Travis in use
on Modernizer.

342
00:15:25,010 --> 00:15:29,820
Incoming pull requests, Travis
pulls them, and then evaluates

343
00:15:29,820 --> 00:15:33,350
them, and basically runs the
Modernizer Test Suite on their

344
00:15:33,350 --> 00:15:37,735
servers against the actual
pull request.

345
00:15:37,735 --> 00:15:43,910
So this runs using Node, it
checks out dependencies and

346
00:15:43,910 --> 00:15:48,510
evaluates my queue unit test
suite, and lets me know that

347
00:15:48,510 --> 00:15:52,010
everything's fine, test suite
passes, we're good.

348
00:15:52,010 --> 00:15:53,500
SINDRE SORHUS: And that makes it
a lot easier to manage big

349
00:15:53,500 --> 00:15:55,530
projects with lots of
[INAUDIBLE] requests and stuff

350
00:15:55,530 --> 00:15:56,890
like that, because--

351
00:15:56,890 --> 00:15:57,900
ADDY OSMANI: I mean, the first
thing that you do whenever

352
00:15:57,900 --> 00:15:59,713
someone sends you through a pull
request is check to see

353
00:15:59,713 --> 00:16:01,560
if it passes your test, so it
just saves you so much time.

354
00:16:01,560 --> 00:16:01,990
SINDRE SORHUS: Exactly.

355
00:16:01,990 --> 00:16:04,260
It saves you so much time, and
then you can be confident this

356
00:16:04,260 --> 00:16:07,550
actually works, because
it passes the tests.

357
00:16:07,550 --> 00:16:11,470
And another file I usually put
in, it's not real well known,

358
00:16:11,470 --> 00:16:13,890
but it's very useful.

359
00:16:13,890 --> 00:16:15,780
It's called Editor Config.

360
00:16:15,780 --> 00:16:19,415
What it does is try to define
some rules that you usually

361
00:16:19,415 --> 00:16:21,300
want in your editor.

362
00:16:21,300 --> 00:16:27,430
Like I prefer tab indentation,
so I just mention there.

363
00:16:27,430 --> 00:16:29,780
And I prefer Unix [INAUDIBLE].

364
00:16:29,780 --> 00:16:30,720
MALE SPEAKER: We're going
to get so many

365
00:16:30,720 --> 00:16:32,002
comments about this.

366
00:16:32,002 --> 00:16:33,252
[INTERPOSING VOICES]

367
00:16:33,252 --> 00:16:35,040

368
00:16:35,040 --> 00:16:37,510
ADDY OSMANI: Fight,
fight, fight.

369
00:16:37,510 --> 00:16:41,040
PAUL IRISH: We brought this up
last night, and we actually

370
00:16:41,040 --> 00:16:42,510
did have a [INAUDIBLE]
versus spaces.

371
00:16:42,510 --> 00:16:43,220
MALE SPEAKER: You did not.

372
00:16:43,220 --> 00:16:44,900
PAUL IRISH: We did.

373
00:16:44,900 --> 00:16:48,560
ADDY OSMANI: Nobody comes out
good from that fight.

374
00:16:48,560 --> 00:16:49,870
SINDRE SORHUS: In fact,
[INAUDIBLE] never-ending

375
00:16:49,870 --> 00:16:52,130
battle because you're never
going to agree.

376
00:16:52,130 --> 00:16:53,320
PAUL IRISH: There were
some good arguments.

377
00:16:53,320 --> 00:16:54,730
MALE SPEAKER: It's almost like
people are fighting over a

378
00:16:54,730 --> 00:16:56,710
preference, though.

379
00:16:56,710 --> 00:16:57,470
It's strange.

380
00:16:57,470 --> 00:16:58,770
ADDY OSMANI: It's a very
personal thing.

381
00:16:58,770 --> 00:16:59,020
MALE SPEAKER: It is.

382
00:16:59,020 --> 00:17:00,560
PAUL IRISH: So here, you're
able to define your

383
00:17:00,560 --> 00:17:03,030
preferences for the
entire project.

384
00:17:03,030 --> 00:17:05,050
SINDRE SORHUS: For the entire
project, and team or

385
00:17:05,050 --> 00:17:07,662
collaborators on the project.

386
00:17:07,662 --> 00:17:09,800
MALE SPEAKER: That's good,
because it removes headaches,

387
00:17:09,800 --> 00:17:11,710
doesn't it, when everybody's
sharing the same thing.

388
00:17:11,710 --> 00:17:13,456
At least you know what
you're getting into.

389
00:17:13,456 --> 00:17:13,942
I like that.

390
00:17:13,942 --> 00:17:15,750
SINDRE SORHUS: You also have
the most well known, it's

391
00:17:15,750 --> 00:17:20,250
called JS Hints, which
[INAUDIBLE], and it defines

392
00:17:20,250 --> 00:17:27,460
some code consistency rules, and
in general makes your code

393
00:17:27,460 --> 00:17:34,160
better by forcing it to
adhere to some rules.

394
00:17:34,160 --> 00:17:38,400
Like for example, I put
up some of the--

395
00:17:38,400 --> 00:17:41,140
they're [? pretty neat, ?] not
very well known, but they're

396
00:17:41,140 --> 00:17:44,320
really useful for code
consistency and making your

397
00:17:44,320 --> 00:17:46,470
code actually better.

398
00:17:46,470 --> 00:17:50,650
Like I prefer single quotes,
because that's the best.

399
00:17:50,650 --> 00:17:52,650
Right?

400
00:17:52,650 --> 00:17:53,900
ADDY OSMANI: It's a choice.

401
00:17:53,900 --> 00:17:56,830

402
00:17:56,830 --> 00:17:58,790
[INTERPOSING VOICES]

403
00:17:58,790 --> 00:18:01,080
SINDRE SORHUS: Yeah, whatever.

404
00:18:01,080 --> 00:18:03,970
And you can define
trailing, which

405
00:18:03,970 --> 00:18:05,220
actually informs you if--

406
00:18:05,220 --> 00:18:07,950
PAUL IRISH: Do you have
a demo of this, or an

407
00:18:07,950 --> 00:18:08,740
example of how it works?

408
00:18:08,740 --> 00:18:09,530
SINDRE SORHUS: Yes, exactly.

409
00:18:09,530 --> 00:18:12,830
So here, we have just user
code, JavaScript code.

410
00:18:12,830 --> 00:18:15,500

411
00:18:15,500 --> 00:18:19,010
So Sublime highlights for me
when I have trailing spaces,

412
00:18:19,010 --> 00:18:20,100
but most don't.

413
00:18:20,100 --> 00:18:23,600
PAUL IRISH: So Sublime is using
your [INAUDIBLE] rules?

414
00:18:23,600 --> 00:18:24,140
SINDRE SORHUS: Yes.

415
00:18:24,140 --> 00:18:28,470
Not at the moment, because that
would be too much stuff,

416
00:18:28,470 --> 00:18:30,260
but I'm going to explain
it anyway.

417
00:18:30,260 --> 00:18:31,620
So if [? earlier, ?]

418
00:18:31,620 --> 00:18:35,500
this is my code and save,
[INAUDIBLE] is going to shout

419
00:18:35,500 --> 00:18:38,240
at me, of course, because
that's a rule and I

420
00:18:38,240 --> 00:18:40,160
should follow it.

421
00:18:40,160 --> 00:18:43,190
And there are some other useful
stuff, like you can

422
00:18:43,190 --> 00:18:48,180
define a max length, which will
inform if you don't wrap

423
00:18:48,180 --> 00:18:49,120
your lines at--

424
00:18:49,120 --> 00:18:50,720
I think I defined 80.

425
00:18:50,720 --> 00:18:52,630
Yeah, 80.

426
00:18:52,630 --> 00:18:54,270
And if most--

427
00:18:54,270 --> 00:18:59,410
a lot of JavaScript don't know
JS development, and the thing

428
00:18:59,410 --> 00:19:01,080
about that is the [INAUDIBLE]

429
00:19:01,080 --> 00:19:04,075
measure actually makes
it really hard not

430
00:19:04,075 --> 00:19:06,970
to get into a callback--

431
00:19:06,970 --> 00:19:08,530
MALE SPEAKER: Callback hell,
I think is the [INAUDIBLE].

432
00:19:08,530 --> 00:19:11,655
SINDRE SORHUS: Callback
hell, [INAUDIBLE].

433
00:19:11,655 --> 00:19:15,070
So what this does, it actually
informs you if you try to nest

434
00:19:15,070 --> 00:19:20,410
your code more than the set
level, like I prefer two or

435
00:19:20,410 --> 00:19:23,305
three because of the
[INAUDIBLE], you should just

436
00:19:23,305 --> 00:19:27,040
put your function outside
the nested callbacks.

437
00:19:27,040 --> 00:19:30,913
So that's really good to
actually try to simplify your

438
00:19:30,913 --> 00:19:35,420
code and make it easier for
others to contribute.

439
00:19:35,420 --> 00:19:36,710
MALE SPEAKER: I like
the max params one.

440
00:19:36,710 --> 00:19:37,865
We were talking about
this earlier.

441
00:19:37,865 --> 00:19:41,120
This is this idea that I guess
if you get too many

442
00:19:41,120 --> 00:19:43,930
parameters, it just becomes this
kind of, which one am I

443
00:19:43,930 --> 00:19:45,850
setting, especially if you call
that function, because it

444
00:19:45,850 --> 00:19:49,380
would be like, true, false,
false, true, five, and it

445
00:19:49,380 --> 00:19:51,610
becomes very hard for
somebody to--

446
00:19:51,610 --> 00:19:52,690
which one was that again,
which parameter?

447
00:19:52,690 --> 00:19:54,990
SINDRE SORHUS: Yeah, that's
called the Boolean trap.

448
00:19:54,990 --> 00:19:55,470
MALE SPEAKER: Exactly.

449
00:19:55,470 --> 00:20:00,100
So this is the idea that if you
get over three, in this

450
00:20:00,100 --> 00:20:02,750
case, it's going to suggest that
maybe you might want to

451
00:20:02,750 --> 00:20:05,390
bounce that down to an object,
or something else that can

452
00:20:05,390 --> 00:20:05,835
[INAUDIBLE].

453
00:20:05,835 --> 00:20:07,450
SINDRE SORHUS: [INAUDIBLE],
because then you don't have to

454
00:20:07,450 --> 00:20:09,680
care about--

455
00:20:09,680 --> 00:20:11,000
ADDY OSMANI: And this is a
pattern people have seen with

456
00:20:11,000 --> 00:20:13,930
at least JQuery, if nothing
else, using objects instead of

457
00:20:13,930 --> 00:20:16,700
having insane numbers
of parameters.

458
00:20:16,700 --> 00:20:21,850
PAUL IRISH: I like that in JSN,
we now have rules to keep

459
00:20:21,850 --> 00:20:24,710
you from shooting yourself in
the foot as you're developing,

460
00:20:24,710 --> 00:20:28,830
but also things like this, which
is code to ensure good,

461
00:20:28,830 --> 00:20:31,480
healthy code over the lifetime
of a project so others

462
00:20:31,480 --> 00:20:33,460
developers are not coming in
and making poor mistakes.

463
00:20:33,460 --> 00:20:34,630
MALE SPEAKER: Well, it's really
good, like you said,

464
00:20:34,630 --> 00:20:37,320
because that maintenance thing,
it can be really hard,

465
00:20:37,320 --> 00:20:39,740
especially with a lot of people,
and sometimes you just

466
00:20:39,740 --> 00:20:40,360
want to ship.

467
00:20:40,360 --> 00:20:42,730
And this kind of keeps you on
the straight and narrow a

468
00:20:42,730 --> 00:20:44,780
little bit, and just
forces you to--

469
00:20:44,780 --> 00:20:48,220
I don't know, maybe sometimes
I've started a project well,

470
00:20:48,220 --> 00:20:50,140
and then over time,
it may have got a

471
00:20:50,140 --> 00:20:53,150
little worse, possibly.

472
00:20:53,150 --> 00:20:53,840
SINDRE SORHUS: Possibly.

473
00:20:53,840 --> 00:20:55,520
MALE SPEAKER: This might
be useful for me.

474
00:20:55,520 --> 00:20:57,480
SINDRE SORHUS: Exactly.

475
00:20:57,480 --> 00:21:00,510
So you should use all those
files in projects.

476
00:21:00,510 --> 00:21:01,020
It's easy.

477
00:21:01,020 --> 00:21:03,660
Just have them in a
folder, copy them

478
00:21:03,660 --> 00:21:07,620
over on a new project.

479
00:21:07,620 --> 00:21:10,550
PAUL IRISH: So my Get
Attributes, Travis, Editor,

480
00:21:10,550 --> 00:21:11,130
Config, [? JSN. ?]

481
00:21:11,130 --> 00:21:11,600
SINDRE SORHUS: Exactly.

482
00:21:11,600 --> 00:21:13,715
And they all have websites,
so just Google it.

483
00:21:13,715 --> 00:21:14,510
MALE SPEAKER: I like it.

484
00:21:14,510 --> 00:21:16,580
SINDRE SORHUS: Yeah.

485
00:21:16,580 --> 00:21:17,700
And, you want to introduce?

486
00:21:17,700 --> 00:21:18,160
PAUL IRISH: Yes.

487
00:21:18,160 --> 00:21:22,560
So you're going to show us an
extension that you wrote for

488
00:21:22,560 --> 00:21:30,002
Sublime, and this actually came
because my friend uses--

489
00:21:30,002 --> 00:21:32,000
I think MatLab has
this ability.

490
00:21:32,000 --> 00:21:34,380
You're looking at code, you
can be authoring it, and

491
00:21:34,380 --> 00:21:36,810
you're just like, I want to
evaluate just these two lines

492
00:21:36,810 --> 00:21:39,440
of the file, just send
that and evaluate it.

493
00:21:39,440 --> 00:21:43,260
And I was like, I really want to
have this in Sublime text.

494
00:21:43,260 --> 00:21:44,700
ADDY OSMANI: And you want it to
be able to run the code in

495
00:21:44,700 --> 00:21:46,710
the browser, not just
inside Sublime.

496
00:21:46,710 --> 00:21:48,160
PAUL IRISH: Yeah, and
not in Node either.

497
00:21:48,160 --> 00:21:49,714
I wanted to test it
against the DOM.

498
00:21:49,714 --> 00:21:50,926
ADDY OSMANI: Exactly.

499
00:21:50,926 --> 00:21:53,110
PAUL IRISH: So you did that?

500
00:21:53,110 --> 00:21:54,890
SINDRE SORHUS: Yeah, I thought
it looked useful, so--

501
00:21:54,890 --> 00:21:56,050
ADDY OSMANI: So Sindre is one
of these people that will

502
00:21:56,050 --> 00:21:58,320
respond to a comment with
a complete solution.

503
00:21:58,320 --> 00:22:01,350
MALE SPEAKER: It's
quite astounding.

504
00:22:01,350 --> 00:22:01,725
PAUL IRISH: Good.

505
00:22:01,725 --> 00:22:02,330
All right, so you
want to show us.

506
00:22:02,330 --> 00:22:03,820
SINDRE SORHUS: Yes, of course.

507
00:22:03,820 --> 00:22:09,630
Here, I'm using [INAUDIBLE] new
features in Canary that

508
00:22:09,630 --> 00:22:13,410
lets you style your console,
log out of it.

509
00:22:13,410 --> 00:22:13,950
ADDY OSMANI: We actually showed

510
00:22:13,950 --> 00:22:16,450
this in the last episode.

511
00:22:16,450 --> 00:22:19,760
SINDRE SORHUS: One new feature
is now you're allowed style

512
00:22:19,760 --> 00:22:20,680
multiple times.

513
00:22:20,680 --> 00:22:23,820
PAUL IRISH: Yeah, different
styles within the same blog.

514
00:22:23,820 --> 00:22:26,960
SINDRE SORHUS: You just use
Percent C before the

515
00:22:26,960 --> 00:22:28,780
[INAUDIBLE] thing you
want to style.

516
00:22:28,780 --> 00:22:32,350
So here, I've defined base
style, and I just

517
00:22:32,350 --> 00:22:35,340
differentiated it between
the different verbs.

518
00:22:35,340 --> 00:22:38,040
I'm just going to mark
[INAUDIBLE], because that's

519
00:22:38,040 --> 00:22:39,580
how we did it in [INAUDIBLE]

520
00:22:39,580 --> 00:22:41,510
and run it.

521
00:22:41,510 --> 00:22:43,890
PAUL IRISH: Nice.

522
00:22:43,890 --> 00:22:44,370
ADDY OSMANI: Nice, slick.

523
00:22:44,370 --> 00:22:45,450
I like it.

524
00:22:45,450 --> 00:22:48,420
PAUL IRISH: So you could be
selecting just a single line.

525
00:22:48,420 --> 00:22:49,280
SINDRE SORHUS: I
could add to--

526
00:22:49,280 --> 00:22:50,530
I could just--

527
00:22:50,530 --> 00:22:55,020

528
00:22:55,020 --> 00:22:58,400
and it runs, either a selected
line or the selected text.

529
00:22:58,400 --> 00:23:00,140
So it's written nicely to
quickly test [INAUDIBLE]

530
00:23:00,140 --> 00:23:00,910
stuff.

531
00:23:00,910 --> 00:23:03,330
And you can do it to existing
projects too, and just modify

532
00:23:03,330 --> 00:23:07,920
our method, and just override
the current page.

533
00:23:07,920 --> 00:23:09,340
It's really easy.

534
00:23:09,340 --> 00:23:13,030
So yeah, I think that could
be useful to some.

535
00:23:13,030 --> 00:23:14,330
MALE SPEAKER: Where do
people get that?

536
00:23:14,330 --> 00:23:15,440
Can they get that through--

537
00:23:15,440 --> 00:23:16,200
SINDRE SORHUS: Yes,
it's currently

538
00:23:16,200 --> 00:23:18,520
on GetHub, of course.

539
00:23:18,520 --> 00:23:20,040
MALE SPEAKER: Look up JSRun?

540
00:23:20,040 --> 00:23:21,750
SINDRE SORHUS: Yeah,
it's called JSRun.

541
00:23:21,750 --> 00:23:23,340
Just Google it.

542
00:23:23,340 --> 00:23:25,130
ADDY OSMANI: And taking a look
at the Moderator here, I see

543
00:23:25,130 --> 00:23:26,950
some people have been asking
about where they can get all

544
00:23:26,950 --> 00:23:28,140
the code for what we're using.

545
00:23:28,140 --> 00:23:30,610
We'll try to stick as much of
this up online after the show

546
00:23:30,610 --> 00:23:32,000
as possible, so you guys
can [INAUDIBLE].

547
00:23:32,000 --> 00:23:34,900

548
00:23:34,900 --> 00:23:36,770
PAUL IRISH: So since we saw
some stuff in the console,

549
00:23:36,770 --> 00:23:38,890
you're going to show
some more.

550
00:23:38,890 --> 00:23:41,510
ADDY OSMANI: Yeah, I'm going to
show you some more stuff.

551
00:23:41,510 --> 00:23:43,022
So over--

552
00:23:43,022 --> 00:23:44,730
MALE SPEAKER: Some rainbow
action in the console.

553
00:23:44,730 --> 00:23:47,430
ADDY OSMANI: As you can see, I
absolutely hate this new style

554
00:23:47,430 --> 00:23:48,700
console stuff.

555
00:23:48,700 --> 00:23:49,070
I hate it.

556
00:23:49,070 --> 00:23:49,800
MALE SPEAKER: See, it can
be used for great

557
00:23:49,800 --> 00:23:50,790
good or great evil.

558
00:23:50,790 --> 00:23:54,270
ADDY OSMANI: In my
case, it's yes.

559
00:23:54,270 --> 00:23:55,420
This is like visual vomit.

560
00:23:55,420 --> 00:23:56,200
All right.

561
00:23:56,200 --> 00:23:58,200
So over the past couple of
episodes, we've been spending

562
00:23:58,200 --> 00:24:01,130
a lot of time in the Sources
Panel and we've been showing

563
00:24:01,130 --> 00:24:03,410
you snippets and how all
those things work.

564
00:24:03,410 --> 00:24:06,620
And in some ways, this is like
working in a text editor

565
00:24:06,620 --> 00:24:08,440
within the Dev Tools.

566
00:24:08,440 --> 00:24:10,160
Now, when you working in a text
editor, there are some

567
00:24:10,160 --> 00:24:11,500
functions that you're
commonly doing.

568
00:24:11,500 --> 00:24:14,090
You're always trying to locate
files, you're trying to find

569
00:24:14,090 --> 00:24:16,930
particular methods or selectors
in files you're

570
00:24:16,930 --> 00:24:17,820
working on.

571
00:24:17,820 --> 00:24:20,850
Maybe you want to do a text
search on a file or locate

572
00:24:20,850 --> 00:24:22,720
something across your
entire project.

573
00:24:22,720 --> 00:24:25,450
Now, how do you do those things
inside the Dev Tools?

574
00:24:25,450 --> 00:24:30,720
So I've just navigated to the
Sources panel, and there are a

575
00:24:30,720 --> 00:24:32,820
bunch of different shortcuts
that you can use to access the

576
00:24:32,820 --> 00:24:33,800
features I'm going
to talk about.

577
00:24:33,800 --> 00:24:37,040
Now, if you're on OSX, you could
just use Command for

578
00:24:37,040 --> 00:24:37,535
some of these.

579
00:24:37,535 --> 00:24:39,860
If you're on Windows,
you can use Control.

580
00:24:39,860 --> 00:24:41,810
What do people do if
they're on Linux?

581
00:24:41,810 --> 00:24:42,380
PAUL IRISH: Control.

582
00:24:42,380 --> 00:24:42,655
ADDY OSMANI: Control.

583
00:24:42,655 --> 00:24:44,300
It's Control on Linux as well.

584
00:24:44,300 --> 00:24:46,160
So the first thing I'm
going to show you is

585
00:24:46,160 --> 00:24:47,200
how to locate a file.

586
00:24:47,200 --> 00:24:50,670
So Command O will bring up this
dialog that has basically

587
00:24:50,670 --> 00:24:52,430
a list of all the different
files in your project.

588
00:24:52,430 --> 00:24:54,770
And if I wanted to go to a
particular one, I can filter

589
00:24:54,770 --> 00:24:56,670
down quite easily just
by typing in.

590
00:24:56,670 --> 00:24:59,640
So in this case, I want
to go to script.js.

591
00:24:59,640 --> 00:25:02,680
Now let's say, so I'm in a
JavaScript file at the moment,

592
00:25:02,680 --> 00:25:06,150
and I want to locate a function
inside my script.

593
00:25:06,150 --> 00:25:09,860
So if I go and I use Command
Shift-O this time, it'll

594
00:25:09,860 --> 00:25:12,640
actually give me a list of all
the different methods in my

595
00:25:12,640 --> 00:25:14,210
file, and I can go
and access them.

596
00:25:14,210 --> 00:25:17,130
So if I wanted to access, say,
this function called Update

597
00:25:17,130 --> 00:25:21,880
Search, I get it right away,
which is quite nice.

598
00:25:21,880 --> 00:25:24,440
Let's say I wanted to do
something else, like doing a

599
00:25:24,440 --> 00:25:25,480
text search on this file.

600
00:25:25,480 --> 00:25:27,880
So maybe I'm not necessarily
looking for a particular

601
00:25:27,880 --> 00:25:29,560
method, but for something
else.

602
00:25:29,560 --> 00:25:34,680
So Control Command-F will give
you that, and you get another

603
00:25:34,680 --> 00:25:37,530
little dialog in the corner, and
let's say I want to type

604
00:25:37,530 --> 00:25:40,150
in Notification.

605
00:25:40,150 --> 00:25:42,640
So as you can see, it highlights
the term in my

606
00:25:42,640 --> 00:25:47,240
file, and I can continue using
Command-G. In this case, I can

607
00:25:47,240 --> 00:25:50,120
continue just flipping through
all the different instances of

608
00:25:50,120 --> 00:25:52,130
notification in my file.

609
00:25:52,130 --> 00:25:54,450
PAUL IRISH: And I guess we
should point out that this

610
00:25:54,450 --> 00:25:58,430
Command F to search, it searches
the current pane, and

611
00:25:58,430 --> 00:25:59,600
it will work in any pane.

612
00:25:59,600 --> 00:26:01,660
ADDY OSMANI: Yeah so if we
went to Resources, for

613
00:26:01,660 --> 00:26:05,740
example, and we did Command-F,
and I typed in something like

614
00:26:05,740 --> 00:26:10,760
web, or I typed in Script, you
can see there's actually a

615
00:26:10,760 --> 00:26:14,150
little notice that comes up
saying how many different

616
00:26:14,150 --> 00:26:15,220
results have been found
in those files.

617
00:26:15,220 --> 00:26:19,550
So in script, it'll say there's
been one thing found,

618
00:26:19,550 --> 00:26:23,050
and let's see if web comes
up with anything.

619
00:26:23,050 --> 00:26:25,010
So I've typed in "web," and
I'm now going through

620
00:26:25,010 --> 00:26:28,070
different items in the Resources
panel that have the

621
00:26:28,070 --> 00:26:29,820
word "web" in there.

622
00:26:29,820 --> 00:26:31,080
This also works in Networks.

623
00:26:31,080 --> 00:26:36,230
If I refresh the page, and I was
looking for something, so

624
00:26:36,230 --> 00:26:38,890
inside the panel, Command-F, and
I type in something like

625
00:26:38,890 --> 00:26:43,180
"normal," it'll actually go and
similarly, locate all the

626
00:26:43,180 --> 00:26:45,720
items in the Network panel
that have these things.

627
00:26:45,720 --> 00:26:47,840
PAUL IRISH: And then sometimes
we have this little filter

628
00:26:47,840 --> 00:26:49,580
check box, too.

629
00:26:49,580 --> 00:26:52,090
ADDY OSMANI: Yeah.

630
00:26:52,090 --> 00:26:53,430
That's nice, right?

631
00:26:53,430 --> 00:26:55,160
That's pretty sweet.

632
00:26:55,160 --> 00:26:58,020
I'm going to go back to the
Sources panel very quickly.

633
00:26:58,020 --> 00:26:59,560
MALE SPEAKER: Did the filter
thing just give

634
00:26:59,560 --> 00:27:00,670
you only the ones--

635
00:27:00,670 --> 00:27:02,670
ADDY OSMANI: It displays only
the list of items that have

636
00:27:02,670 --> 00:27:06,300
been filtered down with the
highlighting and everything.

637
00:27:06,300 --> 00:27:08,200
PAUL IRISH: It's nice on
Timeline when you just want to

638
00:27:08,200 --> 00:27:09,570
see the Garbage Collect
events.

639
00:27:09,570 --> 00:27:11,620
MALE SPEAKER: Which I do,
actually, most times.

640
00:27:11,620 --> 00:27:13,500
PAUL IRISH: And then
you just see.

641
00:27:13,500 --> 00:27:13,830
Boom, boom, boom.

642
00:27:13,830 --> 00:27:15,810
MALE SPEAKER: Oh,
that's the best.

643
00:27:15,810 --> 00:27:18,290
ADDY OSMANI: So we've gone
through text search, we've

644
00:27:18,290 --> 00:27:21,430
gone through filtering down
methods, locating files.

645
00:27:21,430 --> 00:27:23,390
Now, what if you wanted to
do a text search across

646
00:27:23,390 --> 00:27:25,130
everything in your project?

647
00:27:25,130 --> 00:27:29,790
Now, if you do the Command
Option and then F again,

648
00:27:29,790 --> 00:27:31,940
another panel will show up.

649
00:27:31,940 --> 00:27:34,960
And let me just bring down the
size of this a little bit.

650
00:27:34,960 --> 00:27:37,030
So you have the ability to
search sources in your

651
00:27:37,030 --> 00:27:40,480
project, ignore case or type
in "Regular Expressions" to

652
00:27:40,480 --> 00:27:42,140
find things based on regular
expressions.

653
00:27:42,140 --> 00:27:45,080
So in my case, I want to
find a file called--

654
00:27:45,080 --> 00:27:49,330
I think it's called Sing or Song
or something like that.

655
00:27:49,330 --> 00:27:52,490
So I can't find the file here,
but I can find files that have

656
00:27:52,490 --> 00:27:54,460
the word "sing" in them.

657
00:27:54,460 --> 00:27:57,210
Let's say I want to navigate
to that file.

658
00:27:57,210 --> 00:28:02,090
So Command-O, that
gets song.js.

659
00:28:02,090 --> 00:28:05,160
So I've now gone and it's
actually located me a snippet

660
00:28:05,160 --> 00:28:07,400
with the file name song.js.

661
00:28:07,400 --> 00:28:10,660
So this works across not just
regular project files, but all

662
00:28:10,660 --> 00:28:12,910
of the snippets that you
have saved as well.

663
00:28:12,910 --> 00:28:15,580
Now, I'm going to show you
another quick thing.

664
00:28:15,580 --> 00:28:19,370
Let me just close up that.

665
00:28:19,370 --> 00:28:20,910
Let's go to our song.

666
00:28:20,910 --> 00:28:25,120
So I've selected some code
in my song.js snippet.

667
00:28:25,120 --> 00:28:30,920
Now if I run Command
Shift and E--

668
00:28:30,920 --> 00:28:31,660
MALE SPEAKER: I think it's
Control Shift-E.

669
00:28:31,660 --> 00:28:33,430
ADDY OSMANI: Sorry, it's Control
Shift-E, you're right.

670
00:28:33,430 --> 00:28:35,850
You're right.

671
00:28:35,850 --> 00:28:38,180
It's now gone, and it's
evaluated the selection that I

672
00:28:38,180 --> 00:28:39,370
had in the console.

673
00:28:39,370 --> 00:28:42,270
PAUL IRISH: Which Is basically
what we had in JS Run, but now

674
00:28:42,270 --> 00:28:45,106
we just have [INAUDIBLE].

675
00:28:45,106 --> 00:28:46,140
ADDY OSMANI: And it's
pretty slick.

676
00:28:46,140 --> 00:28:49,790
I mean, there are so many
shortcuts in the Dev Tools

677
00:28:49,790 --> 00:28:50,790
that you can use.

678
00:28:50,790 --> 00:28:54,880
Another one that we wanted to
point out is actually Command

679
00:28:54,880 --> 00:28:56,750
plus square brackets.

680
00:28:56,750 --> 00:29:00,550
So you can actually use this to
tab back and forth between

681
00:29:00,550 --> 00:29:01,420
different panels.

682
00:29:01,420 --> 00:29:03,080
So let me show you
how that works.

683
00:29:03,080 --> 00:29:06,660
So I'm in Sources at the moment,
and I want to go back

684
00:29:06,660 --> 00:29:09,220
so I can flip through Elements,
Resources, Network

685
00:29:09,220 --> 00:29:11,380
Sources, and it just works
across everything.

686
00:29:11,380 --> 00:29:13,644
It's quite nice as well.

687
00:29:13,644 --> 00:29:14,560
PAUL IRISH: [INAUDIBLE]?

688
00:29:14,560 --> 00:29:15,400
ADDY OSMANI: Yeah.

689
00:29:15,400 --> 00:29:18,260
PAUL IRISH: Are we going to
get a listing of all the--

690
00:29:18,260 --> 00:29:19,930
MALE SPEAKER: I was just going
to the very same question,

691
00:29:19,930 --> 00:29:21,330
Paul Irish.

692
00:29:21,330 --> 00:29:21,665
Wow.

693
00:29:21,665 --> 00:29:23,460
PAUL IRISH: Do you
know the answer?

694
00:29:23,460 --> 00:29:23,940
MALE SPEAKER: Yes.

695
00:29:23,940 --> 00:29:24,660
It's in Dev Tools.

696
00:29:24,660 --> 00:29:26,770
PAUL IRISH: Well, so there's
actually two, so there's a

697
00:29:26,770 --> 00:29:27,650
little bit of an overlap.

698
00:29:27,650 --> 00:29:32,050
So if you're in Dev Tools on any
pane but Console and just

699
00:29:32,050 --> 00:29:37,520
hit question mark, you get a
quick listing of all the

700
00:29:37,520 --> 00:29:39,280
keyboard shortcuts.

701
00:29:39,280 --> 00:29:39,810
ADDY OSMANI: So question mark.

702
00:29:39,810 --> 00:29:41,680
There we go.

703
00:29:41,680 --> 00:29:43,740
PAUL IRISH: And so it's
all by panel.

704
00:29:43,740 --> 00:29:47,010
There's also a Keyboard
Shortcuts page on the

705
00:29:47,010 --> 00:29:47,180
[INAUDIBLE]

706
00:29:47,180 --> 00:29:50,140
Dev Tools documentation site
that I think has a few more

707
00:29:50,140 --> 00:29:51,000
beyond just these.

708
00:29:51,000 --> 00:29:51,340
ADDY OSMANI: Yes.

709
00:29:51,340 --> 00:29:52,030
Yes, it does.

710
00:29:52,030 --> 00:29:52,605
MALE SPEAKER: Hidden gems.

711
00:29:52,605 --> 00:29:53,610
ADDY OSMANI: Yeah,
hidden gems.

712
00:29:53,610 --> 00:29:55,850
And we're updating that page at
the moment to cover all of

713
00:29:55,850 --> 00:29:56,470
these shortcuts.

714
00:29:56,470 --> 00:29:58,980
So even if some of these things
seem like a bit of a

715
00:29:58,980 --> 00:30:01,590
mystery and this is your first
time finding out about them,

716
00:30:01,590 --> 00:30:03,380
we're going to try demystifying
that just a

717
00:30:03,380 --> 00:30:04,185
little bit.

718
00:30:04,185 --> 00:30:04,690
MALE SPEAKER: Awesome

719
00:30:04,690 --> 00:30:05,990
SINDRE SORHUS: Yeah.

720
00:30:05,990 --> 00:30:07,820
PAUL IRISH: Do we
have questions?

721
00:30:07,820 --> 00:30:08,760
ADDY OSMANI: We've got
some questions.

722
00:30:08,760 --> 00:30:10,650
Let's check out the Moderator
Queue and see what

723
00:30:10,650 --> 00:30:13,230
questions we've got.

724
00:30:13,230 --> 00:30:15,870
PAUL IRISH: Sergey from,
um-- oh, wow.

725
00:30:15,870 --> 00:30:16,730
MALE SPEAKER: Right.

726
00:30:16,730 --> 00:30:17,350
PAUL IRISH: Yeah?

727
00:30:17,350 --> 00:30:17,750
OK.

728
00:30:17,750 --> 00:30:20,900
Well, let's answer Sergey's
question, and then we'll talk

729
00:30:20,900 --> 00:30:21,610
about [INAUDIBLE].

730
00:30:21,610 --> 00:30:23,980
We missed our Yeoman
[INAUDIBLE].

731
00:30:23,980 --> 00:30:25,515
MALE SPEAKER: Dude, we
should swing that--

732
00:30:25,515 --> 00:30:27,085
[INTERPOSING VOICES]

733
00:30:27,085 --> 00:30:28,290
SINDRE SORHUS: Dude, it's like
a major [INAUDIBLE].

734
00:30:28,290 --> 00:30:31,165
We should totally
talk about it.

735
00:30:31,165 --> 00:30:33,650
MALE SPEAKER: Let's answer the
question, then [INAUDIBLE].

736
00:30:33,650 --> 00:30:36,130
PAUL IRISH: Sergey, we're going
to answer your question.

737
00:30:36,130 --> 00:30:40,150
Sergey in Tel Aviv asks, do you
recommend to build assets

738
00:30:40,150 --> 00:30:42,380
and commit them in version
control before deployment, or

739
00:30:42,380 --> 00:30:44,570
to add a build hook on
a production server?

740
00:30:44,570 --> 00:30:49,430

741
00:30:49,430 --> 00:30:50,990
Build hook.

742
00:30:50,990 --> 00:30:52,795
Well, you know-- basically,
yeah.

743
00:30:52,795 --> 00:30:55,910

744
00:30:55,910 --> 00:30:56,175
ADDY OSMANI: Depends.

745
00:30:56,175 --> 00:30:58,220
PAUL IRISH: Yeah.

746
00:30:58,220 --> 00:31:01,760
MALE SPEAKER: Like most
questions, right?

747
00:31:01,760 --> 00:31:04,370
PAUL IRISH: I would say, there's
no reason to ever

748
00:31:04,370 --> 00:31:07,640
commit minified to
source control.

749
00:31:07,640 --> 00:31:11,830
However, I could see the case
for committing optimized

750
00:31:11,830 --> 00:31:14,830
images if you don't
feel like--

751
00:31:14,830 --> 00:31:16,680
optimizing an image is actually
a very expensive

752
00:31:16,680 --> 00:31:19,520
operation, and so it would make
sense to actually keep

753
00:31:19,520 --> 00:31:21,090
those optimized inside
source control.

754
00:31:21,090 --> 00:31:22,120
MALE SPEAKER: And you're not
going to want to do that every

755
00:31:22,120 --> 00:31:23,270
time you do a build, right?

756
00:31:23,270 --> 00:31:23,860
ADDY OSMANI: No,
of course not.

757
00:31:23,860 --> 00:31:26,540
I mean, what we sometimes do
is if you have multiple

758
00:31:26,540 --> 00:31:29,010
repositories and one repository
requires a minified

759
00:31:29,010 --> 00:31:32,850
asset for something else, just
sub-module in that asset only,

760
00:31:32,850 --> 00:31:35,770
and just use that in the
secondary project.

761
00:31:35,770 --> 00:31:36,330
Yeah.

762
00:31:36,330 --> 00:31:38,460
PAUL IRISH: The solution here,
I think, is to have a

763
00:31:38,460 --> 00:31:41,680
[INAUDIBLE] script that you can
execute both on your local

764
00:31:41,680 --> 00:31:45,410
development machine and on the
production environment.

765
00:31:45,410 --> 00:31:47,790
MALE SPEAKER: But personally
speaking, I would never commit

766
00:31:47,790 --> 00:31:51,780
those minified, concatenated,
particularly scripts into

767
00:31:51,780 --> 00:31:52,420
source control.

768
00:31:52,420 --> 00:31:54,660
PAUL IRISH: I actually don't
think that minified scripts

769
00:31:54,660 --> 00:31:56,420
should be in GetHub.

770
00:31:56,420 --> 00:31:57,830
I don't think they should
ever be there.

771
00:31:57,830 --> 00:32:00,485
I don't think that, even
on a project page--

772
00:32:00,485 --> 00:32:02,370
[INTERPOSING VOICES]

773
00:32:02,370 --> 00:32:04,470
SINDRE SORHUS: But sometimes,
has to do it.

774
00:32:04,470 --> 00:32:05,480
PAUL IRISH: Why?

775
00:32:05,480 --> 00:32:09,360
SINDRE SORHUS: [INAUDIBLE], you
have to compile the page

776
00:32:09,360 --> 00:32:11,810
before pushing it to GetHub.

777
00:32:11,810 --> 00:32:13,720
So there are some
cases for it.

778
00:32:13,720 --> 00:32:15,230
PAUL IRISH: Oh yeah, you
don't have that option.

779
00:32:15,230 --> 00:32:16,750
MALE SPEAKER: But in general,
though, like if--

780
00:32:16,750 --> 00:32:19,970
PAUL IRISH: You just install Mod
Page Speed in that case.

781
00:32:19,970 --> 00:32:22,090
I would install Mod Page Speed
and then call it a day,

782
00:32:22,090 --> 00:32:23,410
because that's going to
take care of all those

783
00:32:23,410 --> 00:32:23,860
optimizations for me.

784
00:32:23,860 --> 00:32:25,096
ADDY OSMANI: Now, if you haven't
heard about Mod Page

785
00:32:25,096 --> 00:32:27,820
Speed before, there's actually
a good GDL episode about it.

786
00:32:27,820 --> 00:32:28,690
PAUL IRISH: Yeah, watch that.

787
00:32:28,690 --> 00:32:29,025
MALE SPEAKER: Very good.

788
00:32:29,025 --> 00:32:30,355
ADDY OSMANI: You should
check it out.

789
00:32:30,355 --> 00:32:32,270
MALE SPEAKER: But I guess the
general point that you were

790
00:32:32,270 --> 00:32:35,170
making was if a developer is
going to include, say, your

791
00:32:35,170 --> 00:32:37,700
library or something in a bunch
of scripts that they've

792
00:32:37,700 --> 00:32:39,730
already got, they've already
got a concatenation,

793
00:32:39,730 --> 00:32:42,210
minification process in place,
and you want to drop into

794
00:32:42,210 --> 00:32:46,280
that, rather than giving them
your smushed down version, if

795
00:32:46,280 --> 00:32:47,530
they're going to go through
that process anyway.

796
00:32:47,530 --> 00:32:50,400
Is that fair?

797
00:32:50,400 --> 00:32:52,000
ADDY OSMANI: So we've got a
bunch of other questions, but

798
00:32:52,000 --> 00:32:53,140
before we do this--

799
00:32:53,140 --> 00:32:55,180
PAUL IRISH: We're going to talk
about a project that can

800
00:32:55,180 --> 00:32:58,030
actually do things like build
scripts really well.

801
00:32:58,030 --> 00:33:00,470
ADDY OSMANI: What's it called?

802
00:33:00,470 --> 00:33:02,080
SINDRE SORHUS: It's
called Yeoman.

803
00:33:02,080 --> 00:33:03,330
[INAUDIBLE].

804
00:33:03,330 --> 00:33:05,090

805
00:33:05,090 --> 00:33:07,520
PAUL IRISH: Yeah, your laptop
got pretty decorated

806
00:33:07,520 --> 00:33:08,346
[INAUDIBLE].

807
00:33:08,346 --> 00:33:10,630
SINDRE SORHUS: Yeah, I finally
got some nice stickers.

808
00:33:10,630 --> 00:33:12,070
MALE SPEAKER: Yeah, and
you went to town.

809
00:33:12,070 --> 00:33:14,430
You really did.

810
00:33:14,430 --> 00:33:18,000
ADDY OSMANI: He's getting as bad
as me with the stickers.

811
00:33:18,000 --> 00:33:19,990
MALE SPEAKER: All the stickers,
and a little ship in

812
00:33:19,990 --> 00:33:21,240
between the Yeoman.

813
00:33:21,240 --> 00:33:24,090

814
00:33:24,090 --> 00:33:26,360
ADDY OSMANI: So as we mentioned
before, Sindre is on

815
00:33:26,360 --> 00:33:29,650
the Yeoman team, and he's been
working a lot lately on the

816
00:33:29,650 --> 00:33:31,180
next version of Yeoman 1.0.

817
00:33:31,180 --> 00:33:34,560
So tell us a little bit about
what you've been doing lately.

818
00:33:34,560 --> 00:33:36,640
SINDRE SORHUS: So we had to
struggle a little bit with

819
00:33:36,640 --> 00:33:38,645
[INAUDIBLE]

820
00:33:38,645 --> 00:33:43,640
from users for different stuff
like back end integration,

821
00:33:43,640 --> 00:33:47,530
more customized [INAUDIBLE],
and a lot of stuff that we

822
00:33:47,530 --> 00:33:50,180
really want to solve, but is
not really easy with the

823
00:33:50,180 --> 00:33:52,290
current architecture.

824
00:33:52,290 --> 00:33:54,080
We're also tied into the
current version of

825
00:33:54,080 --> 00:33:56,410
[INAUDIBLE], which--

826
00:33:56,410 --> 00:34:01,240
So we tried to rethink how we
were doing stuff, and we came

827
00:34:01,240 --> 00:34:05,370
to the conclusion that the
easiest thing is to move a lot

828
00:34:05,370 --> 00:34:09,090
of the logic that is currently
behind closed doors, far

829
00:34:09,090 --> 00:34:11,889
behind [INAUDIBLE] code base,
and put them into the

830
00:34:11,889 --> 00:34:13,469
[INAUDIBLE] file itself.

831
00:34:13,469 --> 00:34:16,250
What this solves is that
everything is transparent to

832
00:34:16,250 --> 00:34:18,440
the user because they
can see what

833
00:34:18,440 --> 00:34:20,239
happens behind the scenes.

834
00:34:20,239 --> 00:34:23,010
They can change it if they
want to, they can add

835
00:34:23,010 --> 00:34:23,780
[INAUDIBLE] tasks.

836
00:34:23,780 --> 00:34:26,735
Currently, there are like
200 plus tasks they

837
00:34:26,735 --> 00:34:27,440
can make use of.

838
00:34:27,440 --> 00:34:28,750
ADDY OSMANI: Is there a
place where people can

839
00:34:28,750 --> 00:34:29,120
go and check out--

840
00:34:29,120 --> 00:34:29,510
SINDRE SORHUS: Yes.

841
00:34:29,510 --> 00:34:31,520
You can go to [? GruntJS.com ?]

842
00:34:31,520 --> 00:34:34,030
which lists everything.

843
00:34:34,030 --> 00:34:38,540
And that's one more thing
we want to solve

844
00:34:38,540 --> 00:34:39,789
with the new release.

845
00:34:39,789 --> 00:34:41,580
ADDY OSMANI: So I know that
from the first version of

846
00:34:41,580 --> 00:34:44,190
Yeoman, there were a lot of
people that took a look at it,

847
00:34:44,190 --> 00:34:46,420
they liked what they saw, but
then they started doing a lot

848
00:34:46,420 --> 00:34:49,090
more custom stuff with their
builds, and they wanted to be

849
00:34:49,090 --> 00:34:51,590
able to, in some ways, move a
little bit more towards Grunt

850
00:34:51,590 --> 00:34:54,030
and a little bit more away from
some of the opinions we

851
00:34:54,030 --> 00:34:56,280
had, which is totally cool.

852
00:34:56,280 --> 00:34:59,220
How are we going to be solving
that moving forward, and

853
00:34:59,220 --> 00:35:00,520
making it easier?

854
00:35:00,520 --> 00:35:02,180
SINDRE SORHUS: As I said
with this [INAUDIBLE]

855
00:35:02,180 --> 00:35:05,430
as we're calling, which just
means that we are generating

856
00:35:05,430 --> 00:35:06,020
the [? Grunt ?]

857
00:35:06,020 --> 00:35:09,650
file once and putting the
dependents in, in

858
00:35:09,650 --> 00:35:15,740
package.json, which means
it says Grunt 0.4 there.

859
00:35:15,740 --> 00:35:17,490
And you can upgrade it
whenever you want.

860
00:35:17,490 --> 00:35:19,630
So you're not tied to a
specific Grunt file

861
00:35:19,630 --> 00:35:20,190
[INAUDIBLE]

862
00:35:20,190 --> 00:35:23,970
for you, and you can keep your
projects and dependents and

863
00:35:23,970 --> 00:35:25,570
stuff if you want that.

864
00:35:25,570 --> 00:35:28,690
And what that means is that it's
extremely easy to make

865
00:35:28,690 --> 00:35:31,150
changes and to do whatever you
want, like if you want the

866
00:35:31,150 --> 00:35:33,890
back end integration, you
can do it yourself.

867
00:35:33,890 --> 00:35:36,620
We are mainly [INAUDIBLE]

868
00:35:36,620 --> 00:35:38,630
front end apps at the moment.

869
00:35:38,630 --> 00:35:42,350
We might explore something else
in the future, but at the

870
00:35:42,350 --> 00:35:45,190
moment, with this new release,
you can do it

871
00:35:45,190 --> 00:35:46,905
yourself, so why not?

872
00:35:46,905 --> 00:35:47,570
PAUL IRISH: That's
really cool.

873
00:35:47,570 --> 00:35:48,430
MALE SPEAKER: More control.

874
00:35:48,430 --> 00:35:49,570
SINDRE SORHUS: More
control, exactly.

875
00:35:49,570 --> 00:35:52,430
And that's what the users have
been asking for, so--

876
00:35:52,430 --> 00:35:53,760
MALE SPEAKER: So they get it.

877
00:35:53,760 --> 00:35:54,850
Give the people what
they want.

878
00:35:54,850 --> 00:35:56,870
It's a good idea.

879
00:35:56,870 --> 00:35:58,150
ADDY OSMANI: When can people
expect to see the

880
00:35:58,150 --> 00:35:58,740
next version of Yeoman?

881
00:35:58,740 --> 00:36:02,620
SINDRE SORHUS: OK, so we are
doing a pre-release that this

882
00:36:02,620 --> 00:36:05,400
is going to be feature complete
in the middle of

883
00:36:05,400 --> 00:36:09,685
December, and we are shooting
for a final release in the

884
00:36:09,685 --> 00:36:10,870
middle of January.

885
00:36:10,870 --> 00:36:14,050
So that is going to be great.

886
00:36:14,050 --> 00:36:19,410
We also have some cool stuff
in the road map that we are

887
00:36:19,410 --> 00:36:25,070
targeting for February, like we
want to integrate with the

888
00:36:25,070 --> 00:36:28,290
editors like Sublime, and have
brackets to make it easier.

889
00:36:28,290 --> 00:36:29,900
ADDY OSMANI: So people aren't
going to have to keep

890
00:36:29,900 --> 00:36:31,380
switching back and forth
between lots

891
00:36:31,380 --> 00:36:31,975
of different tools.

892
00:36:31,975 --> 00:36:32,920
SINDRE SORHUS: Yes, exactly.

893
00:36:32,920 --> 00:36:35,700
We currently have a built system
for Sublime, which is

894
00:36:35,700 --> 00:36:37,060
really naive.

895
00:36:37,060 --> 00:36:40,220
You can trigger Build and Save
and stuff like that, but we

896
00:36:40,220 --> 00:36:43,000
want to get a little more
integration with different

897
00:36:43,000 --> 00:36:45,990
editors, so that's going
to be really nice.

898
00:36:45,990 --> 00:36:48,780
It is also going to make it
easier for people that aren't

899
00:36:48,780 --> 00:36:50,990
really that comfortable
with command lines.

900
00:36:50,990 --> 00:36:54,650

901
00:36:54,650 --> 00:36:59,680
And we are also thinking about,
currently, it's very

902
00:36:59,680 --> 00:37:01,326
hard to debug a mobile.

903
00:37:01,326 --> 00:37:04,270
When you're creating mobile
apps, a lot of people

904
00:37:04,270 --> 00:37:06,580
[INAUDIBLE], really.

905
00:37:06,580 --> 00:37:10,615
We want to make it easier to
debug a mobile by integrating

906
00:37:10,615 --> 00:37:15,955
with some debugging solutions
like Android, so we are going

907
00:37:15,955 --> 00:37:19,110
to explore that, too,
in the future.

908
00:37:19,110 --> 00:37:21,960
Yes, and also, we are currently
[INAUDIBLE]

909
00:37:21,960 --> 00:37:23,280
generator [INAUDIBLE]

910
00:37:23,280 --> 00:37:24,580
Yeoman in it.

911
00:37:24,580 --> 00:37:27,790
We've heard some dependencies
that we need, like HTML5

912
00:37:27,790 --> 00:37:31,120
boilerplate, and other stuff,
that's currently [INAUDIBLE]

913
00:37:31,120 --> 00:37:33,055
from Get directly.

914
00:37:33,055 --> 00:37:36,560
What we are going to change
in the future is to start

915
00:37:36,560 --> 00:37:39,540
fetching everything from
[INAUDIBLE], which is the

916
00:37:39,540 --> 00:37:42,220
package manager we
currently use.

917
00:37:42,220 --> 00:37:45,760
And what that means, it's going
to be super easy to keep

918
00:37:45,760 --> 00:37:49,300
those dependencies up to date
because they're already in the

919
00:37:49,300 --> 00:37:54,630
registry, and you can just
run your month update.

920
00:37:54,630 --> 00:37:57,132
So this is going to
be really nice.

921
00:37:57,132 --> 00:37:58,070
MALE SPEAKER: A lot of exciting

922
00:37:58,070 --> 00:38:00,430
changes around the corner.

923
00:38:00,430 --> 00:38:01,680
ADDY OSMANI: Lots of fun stuff
to look forward to.

924
00:38:01,680 --> 00:38:04,550

925
00:38:04,550 --> 00:38:06,220
SINDRE SORHUS: Paul published
a road map.

926
00:38:06,220 --> 00:38:12,670
You can go to the Yeoman
wiki and look at it.

927
00:38:12,670 --> 00:38:15,730
And we allow some comments and
feedback about the possible

928
00:38:15,730 --> 00:38:18,680
future, how do you
think about that.

929
00:38:18,680 --> 00:38:20,280
PAUL IRISH: I think it's good.

930
00:38:20,280 --> 00:38:26,090
A lot of the static Grunt file
stuff that Sindre mentioned,

931
00:38:26,090 --> 00:38:28,880
you're able to much more
declaratively specify your

932
00:38:28,880 --> 00:38:31,410
configuration and how you want
these operations to have,

933
00:38:31,410 --> 00:38:34,470
instead of it being kind
of in Yeoman somewhere.

934
00:38:34,470 --> 00:38:37,090
And then it also allows for
better flexibility and

935
00:38:37,090 --> 00:38:40,530
extensibility when you say that,
I know, Yeoman, you do

936
00:38:40,530 --> 00:38:44,330
it this way, but I've got to
make this change and swap out

937
00:38:44,330 --> 00:38:45,510
one thing for [INAUDIBLE].

938
00:38:45,510 --> 00:38:47,010
SINDRE SORHUS: [INAUDIBLE]

939
00:38:47,010 --> 00:38:47,970
a common one.

940
00:38:47,970 --> 00:38:51,660
And it's also going to make
it easier for us to create

941
00:38:51,660 --> 00:38:54,940
customized builds, like you
don't really want to build the

942
00:38:54,940 --> 00:38:58,500
same if you're creating a Chrome
extension, instead of

943
00:38:58,500 --> 00:38:59,810
[INAUDIBLE], or a [INAUDIBLE]

944
00:38:59,810 --> 00:39:00,550
plug-in.

945
00:39:00,550 --> 00:39:04,140
So this is going to be
more customized.

946
00:39:04,140 --> 00:39:05,730
PAUL IRISH: So we're excited.

947
00:39:05,730 --> 00:39:08,050
We have some ideas on this.

948
00:39:08,050 --> 00:39:13,070
But really, we want to help
everyone build web

949
00:39:13,070 --> 00:39:15,710
applications in a more
productive way.

950
00:39:15,710 --> 00:39:19,850
And so if you have any ideas on
how we can help with that,

951
00:39:19,850 --> 00:39:22,670
please feel free to
leave a comment.

952
00:39:22,670 --> 00:39:24,240
OK, is this it?

953
00:39:24,240 --> 00:39:24,950
ADDY OSMANI: Do you want
to answer any more

954
00:39:24,950 --> 00:39:26,140
questions, or are you--

955
00:39:26,140 --> 00:39:26,880
PAUL IRISH: One more question?

956
00:39:26,880 --> 00:39:27,410
ADDY OSMANI: One
more question.

957
00:39:27,410 --> 00:39:28,904
Let's do one more.

958
00:39:28,904 --> 00:39:37,520

959
00:39:37,520 --> 00:39:40,480
Do you like any of those?

960
00:39:40,480 --> 00:39:41,840
Can we answer any of them?

961
00:39:41,840 --> 00:39:44,020
PAUL IRISH: Yeah.

962
00:39:44,020 --> 00:39:47,810
You want to pick one?

963
00:39:47,810 --> 00:39:48,190
OK.

964
00:39:48,190 --> 00:39:49,885
So Sergey asks--

965
00:39:49,885 --> 00:39:51,230
MALE SPEAKER: Sergey again?

966
00:39:51,230 --> 00:39:52,480
[INTERPOSING VOICES]

967
00:39:52,480 --> 00:39:55,135

968
00:39:55,135 --> 00:39:59,520
PAUL IRISH: He gets two
questions answered, yeah.

969
00:39:59,520 --> 00:40:01,960
So Sergey asks about
redeveloping a Rails app.

970
00:40:01,960 --> 00:40:04,770
Should you use Yeoman, or
stick with the Rails

971
00:40:04,770 --> 00:40:06,820
[? as a ?] pipeline.

972
00:40:06,820 --> 00:40:08,220
MALE SPEAKER: Yeah.

973
00:40:08,220 --> 00:40:09,520
PAUL IRISH: I say pipeline.

974
00:40:09,520 --> 00:40:15,710
Well, there's a lot of tooling
in the Rails ecosystem

975
00:40:15,710 --> 00:40:19,680
already, and Yeoman's solving
the problem of there's not

976
00:40:19,680 --> 00:40:23,380
much tooling on the client
side in JavaScript space.

977
00:40:23,380 --> 00:40:27,650
And so I'd say that on the Rails
side, it's pretty much

978
00:40:27,650 --> 00:40:29,540
you're over there already.

979
00:40:29,540 --> 00:40:35,060
And in Yeoman, we also are
improving on our story for how

980
00:40:35,060 --> 00:40:40,150
Yeoman can integrate with Rails,
and have Rails power

981
00:40:40,150 --> 00:40:42,860
the Preview Server, but you
still have the Library

982
00:40:42,860 --> 00:40:45,340
Compilation Functionality
still going.

983
00:40:45,340 --> 00:40:49,210
And so as we're doing that,
that's ongoing, and we'll have

984
00:40:49,210 --> 00:40:51,780
something to look at soon, but
in the meantime, I think Rails

985
00:40:51,780 --> 00:40:52,810
as a pipeline would be--

986
00:40:52,810 --> 00:40:54,060
MALE SPEAKER: Yep.

987
00:40:54,060 --> 00:40:56,130

988
00:40:56,130 --> 00:40:58,670
PAUL IRISH: I think
that'll be it.

989
00:40:58,670 --> 00:41:00,655
and please join us next time
on the Breakpoint.

990
00:41:00,655 --> 00:41:02,300
MALE SPEAKER: Thank you for
joining us this time.

991
00:41:02,300 --> 00:41:02,990
ADDY OSMANI: Thanks
for joining us.

992
00:41:02,990 --> 00:41:04,240
We'll see you next time.

993
00:41:04,240 --> 00:41:13,933

