1
00:00:00,000 --> 00:00:08,710

2
00:00:08,710 --> 00:00:10,340
PETE LEPAGE: Welcome,
everybody.

3
00:00:10,340 --> 00:00:12,860
My name is Pete LePage, and I'm
a developer advocate on

4
00:00:12,860 --> 00:00:14,350
the Chrome team.

5
00:00:14,350 --> 00:00:17,360
Today we've got another exciting
episode of our Chrome

6
00:00:17,360 --> 00:00:19,030
Apps Office Hours.

7
00:00:19,030 --> 00:00:21,500
I'm joined by Paul Kinlan
who's in London.

8
00:00:21,500 --> 00:00:23,420
Paul, I'll let you introduce
yourself.

9
00:00:23,420 --> 00:00:26,480
PAUL KINLAN: Yes, I'm Paul
Kinlan in London.

10
00:00:26,480 --> 00:00:30,056
I'm also a Chrome Developer
advocate at Google, and we've

11
00:00:30,056 --> 00:00:33,546
got a really exciting episode
today about identity and

12
00:00:33,546 --> 00:00:35,600
managing identity inside
Chrome applications.

13
00:00:35,600 --> 00:00:37,360
PETE LEPAGE: Yeah, I think so.

14
00:00:37,360 --> 00:00:39,935
Awesome.

15
00:00:39,935 --> 00:00:44,130
So let's just introduce the
identity stuff in Chrome apps,

16
00:00:44,130 --> 00:00:46,140
because I think that's
a fairly important

17
00:00:46,140 --> 00:00:47,650
thing to talk about.

18
00:00:47,650 --> 00:00:52,070
Because Chrome apps, if you want
to authenticate against a

19
00:00:52,070 --> 00:00:55,840
Google app, there's a real easy
way-- or a Google service

20
00:00:55,840 --> 00:00:57,780
or anything like that, there's
a real easy way you can go

21
00:00:57,780 --> 00:00:58,390
about doing that.

22
00:00:58,390 --> 00:01:00,520
It's a pretty quick way to go.

23
00:01:00,520 --> 00:01:02,930
But if you want to authenticate
against anything

24
00:01:02,930 --> 00:01:05,160
else, if you say you wanted to
authenticate against Twitter,

25
00:01:05,160 --> 00:01:08,280
maybe your own service, maybe
you want to authenticate--

26
00:01:08,280 --> 00:01:11,630
today, we're actually going to
take a look at Instagram.

27
00:01:11,630 --> 00:01:14,920
But if you want to be able to
authenticate against those so

28
00:01:14,920 --> 00:01:17,970
that you can make sure, hey,
this user has rights to do

29
00:01:17,970 --> 00:01:21,260
this and maybe upload files,
these are things that are

30
00:01:21,260 --> 00:01:22,720
really important that
you're going to want

31
00:01:22,720 --> 00:01:24,720
to be able to do.

32
00:01:24,720 --> 00:01:27,580
As we go through today, I just
put up some links to some of

33
00:01:27,580 --> 00:01:31,340
the documentation that
we've got going.

34
00:01:31,340 --> 00:01:35,360
As always, we always want to
hear about your questions.

35
00:01:35,360 --> 00:01:37,950
The link to questions is
up there right now.

36
00:01:37,950 --> 00:01:40,720
You can ask your questions
at that URL.

37
00:01:40,720 --> 00:01:44,360
We'll be keeping an eye on
there during the day.

38
00:01:44,360 --> 00:01:46,900
It's actually, Paul,
it's right there.

39
00:01:46,900 --> 00:01:47,400
So--

40
00:01:47,400 --> 00:01:48,930
PAUL KINLAN: Oh yeah, I'm
looking the wrong way.

41
00:01:48,930 --> 00:01:50,180
PETE LEPAGE: --yeah,
it's to your--

42
00:01:50,180 --> 00:01:52,470

43
00:01:52,470 --> 00:01:53,995
I'm not even going
to try and guess.

44
00:01:53,995 --> 00:01:55,190
PAUL KINLAN: I was trying
to be cool.

45
00:01:55,190 --> 00:01:57,330
PETE LEPAGE: I think it's to
your lower right, if you look

46
00:01:57,330 --> 00:01:58,730
to your lower right.

47
00:01:58,730 --> 00:01:59,390
There you go.

48
00:01:59,390 --> 00:02:00,620
Alright, perfect.

49
00:02:00,620 --> 00:02:02,200
Awesome.

50
00:02:02,200 --> 00:02:07,430
So why don't I pass it over to
Paul, and you can start with a

51
00:02:07,430 --> 00:02:10,000
little introduction of the stuff
that you've got going.

52
00:02:10,000 --> 00:02:13,860
PAUL KINLAN: Yeah, so identity,
identity, identity.

53
00:02:13,860 --> 00:02:16,240
It's what we're trying
to talk about today.

54
00:02:16,240 --> 00:02:17,960
One of the things that we
noticed when we've been

55
00:02:17,960 --> 00:02:20,210
building web applications,
especially inside Chrome and

56
00:02:20,210 --> 00:02:23,440
Chrome Extensions over the past
couple years, is that

57
00:02:23,440 --> 00:02:26,130
it's actually pretty hard to
authenticate against a third

58
00:02:26,130 --> 00:02:27,440
party service.

59
00:02:27,440 --> 00:02:29,685
And these third party services
like Pete mentioned before

60
00:02:29,685 --> 00:02:32,565
were like Twitter, or Instagram,
or Facebook, things

61
00:02:32,565 --> 00:02:35,770
that aren't necessarily Google
properties, they've always

62
00:02:35,770 --> 00:02:37,400
been a little bit hard
to authenticate

63
00:02:37,400 --> 00:02:38,505
against OAuth 1.0.

64
00:02:38,505 --> 00:02:41,300
The OAuth 1.0 flow doesn't
quite work very well for

65
00:02:41,300 --> 00:02:43,960
installed applications,
applications not necessarily

66
00:02:43,960 --> 00:02:46,720
with a server behind
the scenes.

67
00:02:46,720 --> 00:02:48,540
And obviously, OAuth 2.0 has
come along as well, and people

68
00:02:48,540 --> 00:02:52,086
want to take advantage of OAuth
2.0, and not have to

69
00:02:52,086 --> 00:02:54,680
have any specific integrations
into the browser for those

70
00:02:54,680 --> 00:02:55,790
external APIs.

71
00:02:55,790 --> 00:02:58,660
But you build to authenticate
and interact with these APIs

72
00:02:58,660 --> 00:02:59,550
themselves.

73
00:02:59,550 --> 00:03:02,390
So we've introduced this
experimental--

74
00:03:02,390 --> 00:03:04,850
it's still experimental
at the moment--

75
00:03:04,850 --> 00:03:06,000
identity API.

76
00:03:06,000 --> 00:03:08,620
And the identity API is like
pizza, it's split into two

77
00:03:08,620 --> 00:03:13,580
bits, the Google service area,
where you can ask for access

78
00:03:13,580 --> 00:03:16,080
to Docs and a whole lot of other
stuff like that, and

79
00:03:16,080 --> 00:03:19,860
then the third party flows
where that's the

80
00:03:19,860 --> 00:03:22,570
Twittergrams-- ah, that's
a new one--

81
00:03:22,570 --> 00:03:25,450
Instagram, Twitter, Facebook,
all those types of services.

82
00:03:25,450 --> 00:03:26,990
And that's the one we're going
to talk about today.

83
00:03:26,990 --> 00:03:28,240
It's a really simple API.

84
00:03:28,240 --> 00:03:30,880

85
00:03:30,880 --> 00:03:32,440
The reason why we're doing it
is we want to make it super

86
00:03:32,440 --> 00:03:34,220
simple for you, when you're
building an installed

87
00:03:34,220 --> 00:03:36,750
application, to be able to
authenticate against a third

88
00:03:36,750 --> 00:03:39,960
party service without tons and
tons and tons of code.

89
00:03:39,960 --> 00:03:41,830
We've all been burned
by OAuth 1.0.

90
00:03:41,830 --> 00:03:43,520
OAuth 2.0 is a lot easier.

91
00:03:43,520 --> 00:03:45,050
But you've got to remember,
a lot of services don't

92
00:03:45,050 --> 00:03:47,960
necessarily use just OAuth
for authentication.

93
00:03:47,960 --> 00:03:52,400
They might use OpenID, they
might use Basic Auth, loads of

94
00:03:52,400 --> 00:03:54,220
different types of
authentication.

95
00:03:54,220 --> 00:03:58,100
We think that the way we've
designed this third party

96
00:03:58,100 --> 00:04:02,200
authentication system is in a
way that it enables you to be

97
00:04:02,200 --> 00:04:05,450
able to authenticate and
basically use any type of

98
00:04:05,450 --> 00:04:07,720
authentication process that
you could think of.

99
00:04:07,720 --> 00:04:12,200
We're going to look at OAuth
2.0 today inside Instagram.

100
00:04:12,200 --> 00:04:13,737
Should we just jump into
the application for

101
00:04:13,737 --> 00:04:14,140
the rest of the show?

102
00:04:14,140 --> 00:04:15,390
PETE LEPAGE: Yeah,
let's do that.

103
00:04:15,390 --> 00:04:17,350

104
00:04:17,350 --> 00:04:20,750
I'm bringing up your screen now
so they see your screen.

105
00:04:20,750 --> 00:04:22,210
PAUL KINLAN: That's my screen,
these are all my apps, there's

106
00:04:22,210 --> 00:04:23,990
a lot of installed applications
there.

107
00:04:23,990 --> 00:04:25,810
We have a very nice
MarkDown editor.

108
00:04:25,810 --> 00:04:26,820
I'd try that one out.

109
00:04:26,820 --> 00:04:28,480
PETE LEPAGE: That MarkDown
editor is pretty sweet.

110
00:04:28,480 --> 00:04:29,600
PAUL KINLAN: Yeah,
it's pretty cool.

111
00:04:29,600 --> 00:04:30,930
IRC app as well.

112
00:04:30,930 --> 00:04:33,210
Anyway, that's not what we're
talking about today.

113
00:04:33,210 --> 00:04:34,650
We are doing this
thing called--

114
00:04:34,650 --> 00:04:35,930
I called it On Air
Authentication

115
00:04:35,930 --> 00:04:37,960
because I had two apps.

116
00:04:37,960 --> 00:04:40,680
One was a test app, which I've
just realized doesn't load,

117
00:04:40,680 --> 00:04:41,120
but this one does.

118
00:04:41,120 --> 00:04:42,355
So this one works.

119
00:04:42,355 --> 00:04:46,390
And this is the worst looking
application you will see in

120
00:04:46,390 --> 00:04:48,510
your lifetime today, but it's
going to be something that

121
00:04:48,510 --> 00:04:51,336
we're going to show you the
potential of the API.

122
00:04:51,336 --> 00:04:54,150
Click some buttons, doesn't
do anything.

123
00:04:54,150 --> 00:04:57,010
You would also expect, with an
Instagram API, to be able to

124
00:04:57,010 --> 00:05:00,220
view photos and a whole
lot of other stuff.

125
00:05:00,220 --> 00:05:03,130
However, that's not going to
work, because that is an

126
00:05:03,130 --> 00:05:05,250
exercise for you, the listener,
the watcher, the

127
00:05:05,250 --> 00:05:07,030
reader to actually implement.

128
00:05:07,030 --> 00:05:08,370
But what we're going
to show you is--

129
00:05:08,370 --> 00:05:09,720
PETE LEPAGE: I think they're
actually viewers, Paul.

130
00:05:09,720 --> 00:05:10,160
PAUL KINLAN: Sorry?

131
00:05:10,160 --> 00:05:11,560
PETE LEPAGE: I think
they're viewers.

132
00:05:11,560 --> 00:05:13,110
PAUL KINLAN: Did
I say watchers?

133
00:05:13,110 --> 00:05:15,010
PETE LEPAGE: Watchers, yes.

134
00:05:15,010 --> 00:05:15,280
PAUL KINLAN: Oh, my.

135
00:05:15,280 --> 00:05:16,000
That's terrible--

136
00:05:16,000 --> 00:05:18,580
PETE LEPAGE: That's OK, it's
always fun like that.

137
00:05:18,580 --> 00:05:19,490
I'm giving you trouble.

138
00:05:19,490 --> 00:05:20,740
PAUL KINLAN: It's the English
way of saying it.

139
00:05:20,740 --> 00:05:23,080

140
00:05:23,080 --> 00:05:25,790
Anyway, sorry.

141
00:05:25,790 --> 00:05:27,370
So this is the application that
we're going to fill out,

142
00:05:27,370 --> 00:05:29,690
and basically by the end of it,
we'll see an authenticated

143
00:05:29,690 --> 00:05:31,322
stream of data coming back in.

144
00:05:31,322 --> 00:05:34,120
It'll just be JSON, raw JSON
data, but you'll be able to

145
00:05:34,120 --> 00:05:35,695
see the fact that you can
get this information.

146
00:05:35,695 --> 00:05:38,210
You can authenticate against the
service, and then start to

147
00:05:38,210 --> 00:05:40,270
interact with it, and build
your own things.

148
00:05:40,270 --> 00:05:42,950
One of the reasons that we
haven't got images is we can't

149
00:05:42,950 --> 00:05:46,160
directly pull images
in for content

150
00:05:46,160 --> 00:05:47,320
security policy reasons.

151
00:05:47,320 --> 00:05:49,990
And Paul Lewis has written a
really good library that

152
00:05:49,990 --> 00:05:51,360
enables it to do this,
but it's out the

153
00:05:51,360 --> 00:05:53,550
scope of this talk.

154
00:05:53,550 --> 00:05:56,770
So jumping into the code, what
do we have to do to get

155
00:05:56,770 --> 00:05:58,120
identity working?

156
00:05:58,120 --> 00:05:59,180
Well, it's actually
pretty simple.

157
00:05:59,180 --> 00:05:59,730
We have an app.

158
00:05:59,730 --> 00:06:02,680
I've already made the shell of
the app, so it's the outside

159
00:06:02,680 --> 00:06:04,216
parts of it where--

160
00:06:04,216 --> 00:06:05,960
basically, I don't want to bore
you kind of showing you

161
00:06:05,960 --> 00:06:07,490
how to create applications,
because you already

162
00:06:07,490 --> 00:06:08,160
know how to do it.

163
00:06:08,160 --> 00:06:10,610
PETE LEPAGE: Yeah, we've done a
bunch of Hangouts and Office

164
00:06:10,610 --> 00:06:11,940
Hours before where we've walked

165
00:06:11,940 --> 00:06:12,920
through the Hello World.

166
00:06:12,920 --> 00:06:16,470
If you haven't seen one, you
can go back to all the GDL

167
00:06:16,470 --> 00:06:17,130
events before.

168
00:06:17,130 --> 00:06:18,440
You can grab one of those.

169
00:06:18,440 --> 00:06:22,500
If not, there's a good Hello
World app in the

170
00:06:22,500 --> 00:06:23,350
documentation.

171
00:06:23,350 --> 00:06:25,307
PAUL KINLAN: Yeah, and you can
use Yeoman, yeoman init Chrome

172
00:06:25,307 --> 00:06:27,960
apps, or Chrome app, those types
of things, which I've

173
00:06:27,960 --> 00:06:28,750
done with this actually.

174
00:06:28,750 --> 00:06:31,380
Which is why there's a picture
of Yeoman as the icon.

175
00:06:31,380 --> 00:06:33,860
So anyway, the first thing that
we always do when we're

176
00:06:33,860 --> 00:06:37,080
building applications is just
check out the manifest.

177
00:06:37,080 --> 00:06:38,340
This is a basic manifest.

178
00:06:38,340 --> 00:06:40,070
It's using some localized
variables.

179
00:06:40,070 --> 00:06:42,370
We can ignore them a little
bit at the moment.

180
00:06:42,370 --> 00:06:45,270
An app background script, the
thing that always runs there.

181
00:06:45,270 --> 00:06:47,880
And there's this weird thing
here which normally most

182
00:06:47,880 --> 00:06:49,940
people don't play around with,
especially when you upload

183
00:06:49,940 --> 00:06:54,240
into the store, called a key.

184
00:06:54,240 --> 00:06:56,350
The key is the public key,
basically, of your

185
00:06:56,350 --> 00:06:58,520
application, and it's used
for authentication and

186
00:06:58,520 --> 00:07:01,570
verification that the installed
application or

187
00:07:01,570 --> 00:07:04,790
extension that you've got is
authentic, essentially.

188
00:07:04,790 --> 00:07:07,400
The reason why we need this is
that we need a consistent ID

189
00:07:07,400 --> 00:07:11,220
to be able to actually test our
application, because what

190
00:07:11,220 --> 00:07:14,090
normally happens in the OAuth
flow is that you will

191
00:07:14,090 --> 00:07:17,240
authenticate against a service
such as Instagram, and then it

192
00:07:17,240 --> 00:07:20,750
will redirect the user
back to a web page.

193
00:07:20,750 --> 00:07:23,300
And our web page-- well, it
doesn't actually exist.

194
00:07:23,300 --> 00:07:26,150
It's a Chrome Extension
URL, essentially.

195
00:07:26,150 --> 00:07:29,380
So we need to know what that
URL is ahead of time.

196
00:07:29,380 --> 00:07:31,730
And the easiest way to do it,
and the easiest way to make

197
00:07:31,730 --> 00:07:35,610
sure that your ID is consistent
across even all

198
00:07:35,610 --> 00:07:38,610
your machines is to generate
it yourself.

199
00:07:38,610 --> 00:07:40,540
And I want to show you a little
tip to actually go off

200
00:07:40,540 --> 00:07:43,070
and generate one.

201
00:07:43,070 --> 00:07:45,240
You might not be able to see
this too well-- and I've just

202
00:07:45,240 --> 00:07:47,232
done the volume by mistake--

203
00:07:47,232 --> 00:07:55,140
is if we go in here, I think
it's atob actually.

204
00:07:55,140 --> 00:07:56,310
Test.

205
00:07:56,310 --> 00:07:58,746
Can't spell, it doesn't
really matter.

206
00:07:58,746 --> 00:07:59,670
There we are.

207
00:07:59,670 --> 00:08:04,650
Got it wrong already,
btoa, btoa.

208
00:08:04,650 --> 00:08:07,550
Wow, there we go.

209
00:08:07,550 --> 00:08:10,510
And that will generate a
Base64 encoded string.

210
00:08:10,510 --> 00:08:14,350
And the Base64 encoded string is
what you need for your key

211
00:08:14,350 --> 00:08:15,540
inside your manifest.

212
00:08:15,540 --> 00:08:17,510
You can put whatever you want
inside of here when you are

213
00:08:17,510 --> 00:08:19,350
testing for general
testing purposes.

214
00:08:19,350 --> 00:08:20,990
It doesn't really matter what
you use as long as it's a

215
00:08:20,990 --> 00:08:23,540
basic full encoded string.

216
00:08:23,540 --> 00:08:25,860
However, never ever publish
that to the store.

217
00:08:25,860 --> 00:08:28,130
If you're going to publish this
to the Chrome Web Store,

218
00:08:28,130 --> 00:08:30,130
make sure you just delete the
key outside of your manifest,

219
00:08:30,130 --> 00:08:32,100
and the Chrome Web Store will
manage that itself.

220
00:08:32,100 --> 00:08:35,370
Which will mean that you have
to go and often change your

221
00:08:35,370 --> 00:08:37,860
redirect URLs inside your
authentication provider, but

222
00:08:37,860 --> 00:08:39,010
that's generally OK.

223
00:08:39,010 --> 00:08:41,890
That's a nice quick way of doing
it inside Chrome itself.

224
00:08:41,890 --> 00:08:43,250
So let's jump back
to the code.

225
00:08:43,250 --> 00:08:45,440
There's the key, and we
have permissions.

226
00:08:45,440 --> 00:08:47,830
And the permissions are these
things that basically say

227
00:08:47,830 --> 00:08:50,222
upfront what your application
requires from the user to be

228
00:08:50,222 --> 00:08:51,940
able to operate.

229
00:08:51,940 --> 00:08:54,180
Now, you'd think that
an identity

230
00:08:54,180 --> 00:08:55,110
permission would be needed.

231
00:08:55,110 --> 00:08:55,900
Right now it's not.

232
00:08:55,900 --> 00:08:57,820
You just need this thing
called an experimental

233
00:08:57,820 --> 00:08:58,600
permission.

234
00:08:58,600 --> 00:09:00,660
And the reason why you need this
is because you need to

235
00:09:00,660 --> 00:09:01,590
basically--

236
00:09:01,590 --> 00:09:04,050
excuse me.

237
00:09:04,050 --> 00:09:06,100
The identity API is behind
an experimental flag,

238
00:09:06,100 --> 00:09:08,920
essentially, at the moment, so
you need this flag here to be

239
00:09:08,920 --> 00:09:09,800
able to actually use it.

240
00:09:09,800 --> 00:09:12,640
This also means you can't upload
to the Web Store today,

241
00:09:12,640 --> 00:09:16,080
but soon that'll hopefully
change.

242
00:09:16,080 --> 00:09:17,960
OK, so that's our manifest.

243
00:09:17,960 --> 00:09:19,890
We've got to the point where we
can do something inside our

244
00:09:19,890 --> 00:09:22,080
application, or describe
what we need inside our

245
00:09:22,080 --> 00:09:23,050
application.

246
00:09:23,050 --> 00:09:25,080
Let's look at the index.html.

247
00:09:25,080 --> 00:09:26,340
Doesn't do much.

248
00:09:26,340 --> 00:09:29,440
If we go right down to the
bottom, you'll see the words

249
00:09:29,440 --> 00:09:30,960
"Step1", which is the header.

250
00:09:30,960 --> 00:09:33,190
There's a button that when it's
clicked we will launch an

251
00:09:33,190 --> 00:09:35,140
authentication flow and a pre.

252
00:09:35,140 --> 00:09:38,250
And the pre is just for nice
pretty printing, essentially.

253
00:09:38,250 --> 00:09:40,690
There's not much else that we
need inside this application.

254
00:09:40,690 --> 00:09:44,010
It doesn't need to look fancy,
so that's all there is.

255
00:09:44,010 --> 00:09:48,580
But interestingly, there is
an index.js which is our

256
00:09:48,580 --> 00:09:49,380
functionality.

257
00:09:49,380 --> 00:09:52,350
And this is what we're going
to fill out today.

258
00:09:52,350 --> 00:09:54,700
So if we do this right,
I will put

259
00:09:54,700 --> 00:09:59,100
console.log("HELLO") in here.

260
00:09:59,100 --> 00:10:05,530
And if we go back to Chrome, we
reload the app, login, and

261
00:10:05,530 --> 00:10:08,930
inspect the element, we should
get console.log.

262
00:10:08,930 --> 00:10:11,880
That proves we're doing
the live thing, right?

263
00:10:11,880 --> 00:10:14,570
In theory.

264
00:10:14,570 --> 00:10:15,520
So what's next?

265
00:10:15,520 --> 00:10:17,940
So what we need to do is,
basically, we need to actually

266
00:10:17,940 --> 00:10:21,760
start to actually provide the
information that we need to

267
00:10:21,760 --> 00:10:22,360
authenticate.

268
00:10:22,360 --> 00:10:25,370
So I'm going to make a var id.

269
00:10:25,370 --> 00:10:27,930
This is going to sound a little
bit cryptic right now,

270
00:10:27,930 --> 00:10:29,450
but basically it's the identity

271
00:10:29,450 --> 00:10:30,830
credentials that we need.

272
00:10:30,830 --> 00:10:34,400
And the first thing that you
need is actually a URL, and

273
00:10:34,400 --> 00:10:35,950
the URL is the thing
that we're going to

274
00:10:35,950 --> 00:10:38,960
authenticate against.

275
00:10:38,960 --> 00:10:44,110
To spare my hair, because I have
none, let me just copy

276
00:10:44,110 --> 00:10:46,160
and paste something
very quickly.

277
00:10:46,160 --> 00:10:50,880

278
00:10:50,880 --> 00:10:52,432
Oops a daisy, wrong one.

279
00:10:52,432 --> 00:10:57,750

280
00:10:57,750 --> 00:11:02,340
Delete that, delete
that as well.

281
00:11:02,340 --> 00:11:05,160
Var id =, boom, there we are.

282
00:11:05,160 --> 00:11:07,250
Now this is actually the
Instagram authentication end

283
00:11:07,250 --> 00:11:10,710
point, and as you can see
we've got a client ID.

284
00:11:10,710 --> 00:11:13,610
I will be deleting this
client ID after this

285
00:11:13,610 --> 00:11:15,610
presentation, at least.

286
00:11:15,610 --> 00:11:17,920
But the client ID is part of
the OAuth 2.0 process. it's

287
00:11:17,920 --> 00:11:20,220
the thing that you need to
identify your application to

288
00:11:20,220 --> 00:11:21,630
the third party service.

289
00:11:21,630 --> 00:11:23,790
And the way that you actually
do that is you go to the

290
00:11:23,790 --> 00:11:25,720
Instagram developer
documentation-- it's a pretty

291
00:11:25,720 --> 00:11:27,650
nice documentation--

292
00:11:27,650 --> 00:11:29,070
and then you look at
your applications.

293
00:11:29,070 --> 00:11:31,004
I did have my application
up before.

294
00:11:31,004 --> 00:11:34,716

295
00:11:34,716 --> 00:11:36,095
API console, nope.

296
00:11:36,095 --> 00:11:38,240
That's not the one.

297
00:11:38,240 --> 00:11:39,200
Help.

298
00:11:39,200 --> 00:11:40,450
Hey.

299
00:11:40,450 --> 00:11:43,940

300
00:11:43,940 --> 00:11:44,640
PETE LEPAGE: So these are--

301
00:11:44,640 --> 00:11:45,040
[INTERPOSING VOICES]

302
00:11:45,040 --> 00:11:46,690
PETE LEPAGE: --these are that
thing that you have to do,

303
00:11:46,690 --> 00:11:50,190
Paul, to initially set your app
up with whatever service

304
00:11:50,190 --> 00:11:52,950
provider if it's using
OAuth 2.0, right?

305
00:11:52,950 --> 00:11:53,820
PAUL KINLAN: Yeah,
exactly right.

306
00:11:53,820 --> 00:11:55,580
So what we've got here
is a client ID.

307
00:11:55,580 --> 00:11:57,980
This is the thing that you
present to the your

308
00:11:57,980 --> 00:12:00,950
application, client secret
which I will be deleting

309
00:12:00,950 --> 00:12:04,600
pretty much straight away, the
website URL, that's just

310
00:12:04,600 --> 00:12:06,630
basically to prove who you are
essentially, and then the

311
00:12:06,630 --> 00:12:07,550
redirect URL.

312
00:12:07,550 --> 00:12:12,750
Now the redirect URL is the
thing that Instagram will

313
00:12:12,750 --> 00:12:15,550
redirect you back
to, essentially.

314
00:12:15,550 --> 00:12:19,500
Let me go back here, if we
can zoom in, the zoom

315
00:12:19,500 --> 00:12:22,280
doesn't work anymore.

316
00:12:22,280 --> 00:12:23,130
It's a weird URL.

317
00:12:23,130 --> 00:12:25,850
It's not HTTP URL, it's a
Chrome Extension URL.

318
00:12:25,850 --> 00:12:27,830
PETE LEPAGE: Can you just move
that up a little bit, Paul.

319
00:12:27,830 --> 00:12:30,270
PAUL KINLAN: Yeah, sure.

320
00:12:30,270 --> 00:12:30,800
PETE LEPAGE: There we go.

321
00:12:30,800 --> 00:12:31,880
That's good, yup.

322
00:12:31,880 --> 00:12:33,780
PAUL KINLAN: Cool, so we have
this weird little URL, which

323
00:12:33,780 --> 00:12:36,190
is a Chrome Extension URL, and
this is why we need that

324
00:12:36,190 --> 00:12:36,950
consistent ID.

325
00:12:36,950 --> 00:12:39,000
That thing that we put in the
manifest to generate a nice

326
00:12:39,000 --> 00:12:42,370
ID, that's what we need to be
able to basically send the

327
00:12:42,370 --> 00:12:45,322
user from Instagram back
into our Chrome app.

328
00:12:45,322 --> 00:12:48,120
PETE LEPAGE: Right, so that
redirects into a Chrome app.

329
00:12:48,120 --> 00:12:51,060
So if you think about normally
with a web app you go to a

330
00:12:51,060 --> 00:12:56,730
specific URL, with a Chrome
packaged app, it's URL, even

331
00:12:56,730 --> 00:13:00,270
though it's not visible to the
user ever, is that sort of

332
00:13:00,270 --> 00:13:01,910
Chrome app URL.

333
00:13:01,910 --> 00:13:03,670
PAUL KINLAN: Yeah, exactly.

334
00:13:03,670 --> 00:13:04,440
Yeah, that's right.

335
00:13:04,440 --> 00:13:09,600
It's just this thing to,
basically, let the other app

336
00:13:09,600 --> 00:13:10,950
return into your application.

337
00:13:10,950 --> 00:13:12,790
Now, the interesting thing is
that you don't necessarily

338
00:13:12,790 --> 00:13:17,000
have to have a Chrome Extension
URL, it's just that

339
00:13:17,000 --> 00:13:19,390
Instagram have enabled it so
that you can have any kind of

340
00:13:19,390 --> 00:13:21,240
protocol, any scheme.

341
00:13:21,240 --> 00:13:23,330
We do have a service--

342
00:13:23,330 --> 00:13:26,260
it's not live and ready for
users or developers to play

343
00:13:26,260 --> 00:13:30,560
with-- where we will host
the redirect URL for the

344
00:13:30,560 --> 00:13:31,470
developer, essentially.

345
00:13:31,470 --> 00:13:32,790
So it would extension ID dot--

346
00:13:32,790 --> 00:13:35,850
I think it's chromiumapps.org.

347
00:13:35,850 --> 00:13:38,240
So you put that in, essentially,
and all that

348
00:13:38,240 --> 00:13:40,210
Chrome's doing behind the
scenes, all the application

349
00:13:40,210 --> 00:13:42,900
framework is doing behind
scenes, is listening out for

350
00:13:42,900 --> 00:13:45,120
either a redirect into its
application using the Chrome

351
00:13:45,120 --> 00:13:53,180
Extension URL, or a redirect
into HTTPS:/ whatever it is.

352
00:13:53,180 --> 00:13:54,500
PETE LEPAGE: OK, so
that way if--

353
00:13:54,500 --> 00:13:55,580
[INTERPOSING VOICES]

354
00:13:55,580 --> 00:13:58,280
PETE LEPAGE: --some third party
provider forces you to

355
00:13:58,280 --> 00:14:04,530
use HTTPS, you can still make it
work because our schema is

356
00:14:04,530 --> 00:14:06,540
Chrome Extension?

357
00:14:06,540 --> 00:14:08,700
PAUL KINLAN: Yes, exactly right,
you can make it work

358
00:14:08,700 --> 00:14:10,570
that way, and that's some

359
00:14:10,570 --> 00:14:14,250
infrastructure we'll be providing.

360
00:14:14,250 --> 00:14:17,630
So let me just quickly
jump out.

361
00:14:17,630 --> 00:14:20,130
The next thing that we're going
to do after putting the

362
00:14:20,130 --> 00:14:24,150
URL in is this thing
called interactive.

363
00:14:24,150 --> 00:14:28,460
This is just a special flag
which basically says, should

364
00:14:28,460 --> 00:14:35,350
the browser or should the run
time pop up, a special little

365
00:14:35,350 --> 00:14:38,180
window that you can
control which

366
00:14:38,180 --> 00:14:39,360
presents the login details.

367
00:14:39,360 --> 00:14:42,760
If you say interactive equals
false, then you won't see

368
00:14:42,760 --> 00:14:44,090
anything on the screen at all.

369
00:14:44,090 --> 00:14:46,780
Now, the reason why you might
want false is not necessarily

370
00:14:46,780 --> 00:14:49,450
in the OAuth flow, but
if there's some other

371
00:14:49,450 --> 00:14:51,990
authenticating scheme where
you know the user based on

372
00:14:51,990 --> 00:14:55,000
information that they put in
from that URL, maybe it's like

373
00:14:55,000 --> 00:14:56,450
a username-password combination

374
00:14:56,450 --> 00:14:57,810
or some secret token--

375
00:14:57,810 --> 00:15:00,630
I mean it's a really bad
way of saying it.

376
00:15:00,630 --> 00:15:03,000
You might not always need
this kind of pop up.

377
00:15:03,000 --> 00:15:04,060
It doesn't make that
much sense.

378
00:15:04,060 --> 00:15:05,520
You don't need a pop up to
come up to the user to

379
00:15:05,520 --> 00:15:07,740
authenticate them because
they've already presented the

380
00:15:07,740 --> 00:15:10,800
details that they need inside
your application.

381
00:15:10,800 --> 00:15:12,395
Interactive false will
never do the pop

382
00:15:12,395 --> 00:15:13,830
up, it'll just redirect.

383
00:15:13,830 --> 00:15:15,940
It'll do the things it needs to
do on this remote server,

384
00:15:15,940 --> 00:15:18,530
and then bring yourself back
in the application once the

385
00:15:18,530 --> 00:15:20,930
redirect's happened.

386
00:15:20,930 --> 00:15:22,360
So that's all it's doing.

387
00:15:22,360 --> 00:15:25,080
It's not anything too sexy, but
it's kind of interesting.

388
00:15:25,080 --> 00:15:26,950
Now, there's not much
to show you.

389
00:15:26,950 --> 00:15:29,860
I could go off and show
you this working.

390
00:15:29,860 --> 00:15:32,010
It just would not do anything
at the moment because we're

391
00:15:32,010 --> 00:15:34,245
not actually doing the
authentication flow.

392
00:15:34,245 --> 00:15:36,770

393
00:15:36,770 --> 00:15:40,260
This is the important
piece that you need

394
00:15:40,260 --> 00:15:41,510
in the whole flow.

395
00:15:41,510 --> 00:15:45,350

396
00:15:45,350 --> 00:15:49,170
This is the API basically where
you go launch web--

397
00:15:49,170 --> 00:15:52,620

398
00:15:52,620 --> 00:15:55,430
what I'd do for IntelliSense.

399
00:15:55,430 --> 00:15:56,780
PETE LEPAGE: Well, why aren't
you using Sublime or

400
00:15:56,780 --> 00:15:58,290
something like that?

401
00:15:58,290 --> 00:16:00,535
PAUL KINLAN: I never got around
to even trying it.

402
00:16:00,535 --> 00:16:03,450
You get stuck with your favorite
preferred text

403
00:16:03,450 --> 00:16:05,670
editor, which is BIM, and I
don't even have any sensible

404
00:16:05,670 --> 00:16:07,160
defaults in this one either.

405
00:16:07,160 --> 00:16:09,410
Brand new machine.

406
00:16:09,410 --> 00:16:11,062
But this is it, right?

407
00:16:11,062 --> 00:16:16,100
Let's see if this works,
console.log, URL, sorry.

408
00:16:16,100 --> 00:16:19,530

409
00:16:19,530 --> 00:16:22,010
So what happens here
is that we have the

410
00:16:22,010 --> 00:16:26,520
chrome.experimental.identity
object namespace,

411
00:16:26,520 --> 00:16:28,840
launchWebAuthFlow is the
method that we call.

412
00:16:28,840 --> 00:16:31,760
We pass in the details of the
thing that we want to call, so

413
00:16:31,760 --> 00:16:34,670
the ID object, which is
basically the information

414
00:16:34,670 --> 00:16:37,410
about Instagram, and
then a call back.

415
00:16:37,410 --> 00:16:40,000
The interesting thing about this
is the parameter in the

416
00:16:40,000 --> 00:16:42,250
callback that you'll receive
once authentication is

417
00:16:42,250 --> 00:16:45,040
successful is a URL.

418
00:16:45,040 --> 00:16:46,920
Now, you might think that's a
little bit weird, but actually

419
00:16:46,920 --> 00:16:49,920
what happens is, especially in
the OAuth flow, is that the

420
00:16:49,920 --> 00:16:53,370
URL contains normally the
authentication token--

421
00:16:53,370 --> 00:16:56,150

422
00:16:56,150 --> 00:16:58,450
sorry, not the authentication
token, the access token.

423
00:16:58,450 --> 00:17:01,270
But it must also include some
things like a session ID or

424
00:17:01,270 --> 00:17:07,280
whatever you need to basically
have access to the user's

425
00:17:07,280 --> 00:17:08,369
object store at least.

426
00:17:08,369 --> 00:17:11,480
So right, should we try
and give this a go?

427
00:17:11,480 --> 00:17:12,560
PETE LEPAGE: Yeah.

428
00:17:12,560 --> 00:17:13,220
PAUL KINLAN: Yay.

429
00:17:13,220 --> 00:17:14,499
We don't need Insta--

430
00:17:14,499 --> 00:17:15,880
we might need Instagram,
actually.

431
00:17:15,880 --> 00:17:22,849
Let me just edit this, because
we do actually have a new

432
00:17:22,849 --> 00:17:24,109
extension ID.

433
00:17:24,109 --> 00:17:29,510
This is what we've been talking
about is where- I

434
00:17:29,510 --> 00:17:31,310
think the extension ID which
is here at the bottom.

435
00:17:31,310 --> 00:17:33,840
You can't really see it
probably, but on our

436
00:17:33,840 --> 00:17:37,550
authentication, it's got
a unique identifier.

437
00:17:37,550 --> 00:17:40,980
I'm going to just put that in
there for the description, and

438
00:17:40,980 --> 00:17:43,230
the redirect URL is going
in the back into my app.

439
00:17:43,230 --> 00:17:44,480
I'm going update the client.

440
00:17:44,480 --> 00:17:47,350

441
00:17:47,350 --> 00:17:48,870
And away we go.

442
00:17:48,870 --> 00:17:55,165
So step one, if this all
works, reload app.

443
00:17:55,165 --> 00:17:57,410
Here's our code.

444
00:17:57,410 --> 00:17:59,465
So let me go back there so
you can see the screen.

445
00:17:59,465 --> 00:18:02,370

446
00:18:02,370 --> 00:18:04,470
PETE LEPAGE: And as a reminder
for folks, as they're watching

447
00:18:04,470 --> 00:18:06,650
this, if you have questions, if
you're curious about some

448
00:18:06,650 --> 00:18:08,940
of the things that are going on,
please post your questions

449
00:18:08,940 --> 00:18:10,460
to our Google Moderator page.

450
00:18:10,460 --> 00:18:13,240
The link is right there
on screen right now.

451
00:18:13,240 --> 00:18:16,270

452
00:18:16,270 --> 00:18:17,390
PAUL KINLAN: Hey,
so here we go.

453
00:18:17,390 --> 00:18:19,900
So what's happened here is
essentially we've gone through

454
00:18:19,900 --> 00:18:26,520
part of the OAuth flow and the
redirect URL of my extension

455
00:18:26,520 --> 00:18:28,050
doesn't match what is supposed
to be registered.

456
00:18:28,050 --> 00:18:30,830
So let me go back, I think I
know what the problem is.

457
00:18:30,830 --> 00:18:33,730

458
00:18:33,730 --> 00:18:39,000
PETE LEPAGE: So this is the
particular case where our app,

459
00:18:39,000 --> 00:18:40,900
when we say, hey, we want
to authenticate against

460
00:18:40,900 --> 00:18:45,170
something, we have to give it
where we want to redirect to.

461
00:18:45,170 --> 00:18:52,070
And on the Instagram side, the
store where they think we want

462
00:18:52,070 --> 00:18:53,120
to redirect to.

463
00:18:53,120 --> 00:18:55,080
And so we make sure--

464
00:18:55,080 --> 00:18:56,885
I'm covering myself with
the little image

465
00:18:56,885 --> 00:18:57,590
there, there we go--

466
00:18:57,590 --> 00:19:01,280
so they make sure that both
of those are identical.

467
00:19:01,280 --> 00:19:04,860
And if they're not identical,
they say, oh, screw you, got

468
00:19:04,860 --> 00:19:08,390
to go, get out of here, we're
not going to actually work.

469
00:19:08,390 --> 00:19:09,580
PAUL KINLAN: Yup, exactly.

470
00:19:09,580 --> 00:19:11,730
Basically what's happened is
I've constructed the wrong URL

471
00:19:11,730 --> 00:19:13,590
inside my request.

472
00:19:13,590 --> 00:19:15,920
Because the extension ID changed
between me testing

473
00:19:15,920 --> 00:19:19,160
this and me actually just
updating the variables before.

474
00:19:19,160 --> 00:19:23,810
So if all works well--

475
00:19:23,810 --> 00:19:25,580
let's get rid of, no,
the new tab is fine,

476
00:19:25,580 --> 00:19:27,980
developers tool is fine.

477
00:19:27,980 --> 00:19:33,120
Reload app and I'm really
nervous now because if this

478
00:19:33,120 --> 00:19:34,370
doesn't work then--

479
00:19:34,370 --> 00:19:39,780

480
00:19:39,780 --> 00:19:40,710
there we go, right.

481
00:19:40,710 --> 00:19:43,530
So we've got the URL.

482
00:19:43,530 --> 00:19:45,820
Now, what actually happened
here is I've been

483
00:19:45,820 --> 00:19:47,390
a little bit sneaky.

484
00:19:47,390 --> 00:19:50,000
Not too sneaky, because I'm
already logged into Instagram

485
00:19:50,000 --> 00:19:53,520
so let me log out.

486
00:19:53,520 --> 00:19:59,780

487
00:19:59,780 --> 00:20:02,460
PETE LEPAGE: So you didn't see
anything pop up or anything

488
00:20:02,460 --> 00:20:04,000
like that because you're
already logged in and

489
00:20:04,000 --> 00:20:06,170
Instagram said oh hey, you're
already logged in, we know who

490
00:20:06,170 --> 00:20:08,280
this guy is, feel free to--

491
00:20:08,280 --> 00:20:09,020
PAUL KINLAN: Yeah, exactly.

492
00:20:09,020 --> 00:20:09,690
That is exactly right.

493
00:20:09,690 --> 00:20:11,860
So Instagram knew I was already
logged in, so all they

494
00:20:11,860 --> 00:20:14,080
said was cool, you're logged in,
redirect back to the app

495
00:20:14,080 --> 00:20:15,140
and away you go.

496
00:20:15,140 --> 00:20:16,920
So if this works, we'll
do the log in there.

497
00:20:16,920 --> 00:20:20,910
PETE LEPAGE: So now we get that
dialog that pops up that

498
00:20:20,910 --> 00:20:22,220
asks us to log in.

499
00:20:22,220 --> 00:20:24,090
This is this interactive
dialogue that you were talking

500
00:20:24,090 --> 00:20:24,620
about before.

501
00:20:24,620 --> 00:20:27,180
So if you had set that
interactive to false, this

502
00:20:27,180 --> 00:20:29,880
thing wouldn't pop up,
and we wouldn't be

503
00:20:29,880 --> 00:20:31,670
able to log in, correct?

504
00:20:31,670 --> 00:20:33,090
PAUL KINLAN: Yes, exactly.

505
00:20:33,090 --> 00:20:36,280
So the interesting thing here
as well is that, actually,

506
00:20:36,280 --> 00:20:39,275
what's happened is that we've
got a full screen window as

507
00:20:39,275 --> 00:20:40,860
well, pretty much.

508
00:20:40,860 --> 00:20:43,620
You, as the application
developer, can control the

509
00:20:43,620 --> 00:20:46,180
size of the window and the
position, so if you wanted it

510
00:20:46,180 --> 00:20:48,690
to pop up in the middle of your
screen and just small and

511
00:20:48,690 --> 00:20:50,590
tight, you can do that.

512
00:20:50,590 --> 00:20:53,460
So we offer that, certainly.

513
00:20:53,460 --> 00:20:55,290
And we go back, let's have
a look at the code.

514
00:20:55,290 --> 00:20:56,650
There we go.

515
00:20:56,650 --> 00:20:57,640
So we've got this URL.

516
00:20:57,640 --> 00:21:03,130
So basically what's happened is
we look at the JavaScript--

517
00:21:03,130 --> 00:21:04,950
let me hide that.

518
00:21:04,950 --> 00:21:08,360
We've gone into this call back
here with the URL being passed

519
00:21:08,360 --> 00:21:11,180
back in and now we've got the
ability to do some extra

520
00:21:11,180 --> 00:21:13,790
little bits and pieces of magic,
essentially, because we

521
00:21:13,790 --> 00:21:14,975
now have the access token.

522
00:21:14,975 --> 00:21:18,700
The access token, as you can
see it here, is in the

523
00:21:18,700 --> 00:21:22,010
document fragment at
the end of the URL.

524
00:21:22,010 --> 00:21:24,080
So should we try and do
something nice with the

525
00:21:24,080 --> 00:21:25,570
Instagram API just to prove
that's it worked?

526
00:21:25,570 --> 00:21:27,700
We've authenticated,
but we don't know

527
00:21:27,700 --> 00:21:28,550
actually if it works.

528
00:21:28,550 --> 00:21:29,311
PETE LEPAGE: Yeah, let's.

529
00:21:29,311 --> 00:21:31,970
PAUL KINLAN: Here we go, cool.

530
00:21:31,970 --> 00:21:34,755
So there's going to be a little
bit of code which might

531
00:21:34,755 --> 00:21:36,835
not look like it makes sense to
start off with, but I know

532
00:21:36,835 --> 00:21:39,040
you're all smart and you'll be
able to pick it up, even if I

533
00:21:39,040 --> 00:21:40,730
don't explain it very well.

534
00:21:40,730 --> 00:21:44,810
So let's make a variable
called access token.

535
00:21:44,810 --> 00:21:48,770
We know the access token is on
the URL, it'll pass back in.

536
00:21:48,770 --> 00:21:57,036
So we'll just do a sub
string URL.index of--

537
00:21:57,036 --> 00:21:57,800
oh, dear.

538
00:21:57,800 --> 00:21:59,580
Sorry.

539
00:21:59,580 --> 00:22:00,030
What is it?

540
00:22:00,030 --> 00:22:02,880
It was the hash sign,
or the pound sign

541
00:22:02,880 --> 00:22:04,075
as you say in America.

542
00:22:04,075 --> 00:22:05,986
Is that what you say
in America, pound?

543
00:22:05,986 --> 00:22:09,170
PETE LEPAGE: Pound,
hash, number sign.

544
00:22:09,170 --> 00:22:09,650
PAUL KINLAN: Number sign.

545
00:22:09,650 --> 00:22:10,680
Well, there we go.

546
00:22:10,680 --> 00:22:15,320
So basically, what we've done is
we've been really not that

547
00:22:15,320 --> 00:22:18,580
robust at all in the sense that
this will fall over if

548
00:22:18,580 --> 00:22:20,360
you try to use this
in production.

549
00:22:20,360 --> 00:22:24,040
PETE LEPAGE: So I was going to
ask what happens if I were to

550
00:22:24,040 --> 00:22:27,120
either provide a bad password
and it didn't let me log in or

551
00:22:27,120 --> 00:22:32,250
if maybe I was offline, there
was no connection?

552
00:22:32,250 --> 00:22:33,510
PAUL KINLAN: So actually,
I've never actually

553
00:22:33,510 --> 00:22:36,220
tested it with offline.

554
00:22:36,220 --> 00:22:38,080
The thing that's happened in the
past generally is that the

555
00:22:38,080 --> 00:22:39,550
URL would be blank.

556
00:22:39,550 --> 00:22:41,180
Basically a null
and undefined.

557
00:22:41,180 --> 00:22:45,180
So if you get the point where
it's null undefined, then it

558
00:22:45,180 --> 00:22:45,570
won't work.

559
00:22:45,570 --> 00:22:50,520
But if your offline, the weird
thing is it only really ever

560
00:22:50,520 --> 00:22:52,930
fires when there's a redirect
back into app, so it's kind of

561
00:22:52,930 --> 00:22:54,880
like you could be hanging
around waiting.

562
00:22:54,880 --> 00:22:59,010
It might make sense to have some
more unsuccess, unfailure

563
00:22:59,010 --> 00:23:02,040
methods, because you want to
know where log ins failed, on

564
00:23:02,040 --> 00:23:04,480
one side and not the other.

565
00:23:04,480 --> 00:23:08,730
So if anyone wants to provide
that feedback more publicly--

566
00:23:08,730 --> 00:23:13,050
I can do it, whatever you
want to, it's cool.

567
00:23:13,050 --> 00:23:15,650
So this is a little something
I learned off [? Mehi ?]

568
00:23:15,650 --> 00:23:16,390
[? Paparita, ?]

569
00:23:16,390 --> 00:23:20,810
who is no longer with us.

570
00:23:20,810 --> 00:23:22,680
He is no longer with
the Chrome team.

571
00:23:22,680 --> 00:23:24,620
I think he's working for
someone else now.

572
00:23:24,620 --> 00:23:28,180
He made a nice little API
wrapper around Foursquare, and

573
00:23:28,180 --> 00:23:30,355
so I've done the same type of
thing here where I've made an

574
00:23:30,355 --> 00:23:31,810
Instagram API.

575
00:23:31,810 --> 00:23:33,570
It's not going to do too much,
but it's just going to

576
00:23:33,570 --> 00:23:37,460
basically make it a little bit
easier to make requests, make

577
00:23:37,460 --> 00:23:39,150
it a little bit more
sane if you want

578
00:23:39,150 --> 00:23:41,790
to call more functions.

579
00:23:41,790 --> 00:23:46,120
So this is our request
method, arguments.

580
00:23:46,120 --> 00:23:47,990
So it's going to look very bad
when you see it because I

581
00:23:47,990 --> 00:23:52,350
don't actually use arguments,
but here we go.

582
00:23:52,350 --> 00:23:54,060
PETE LEPAGE: So, Paul,
one just quick--

583
00:23:54,060 --> 00:23:54,830
yup, you got it.

584
00:23:54,830 --> 00:23:56,080
Never mind.

585
00:23:56,080 --> 00:23:57,660

586
00:23:57,660 --> 00:23:58,910
PAUL KINLAN: So xhr= new XML--

587
00:23:58,910 --> 00:24:01,990

588
00:24:01,990 --> 00:24:04,008
I never get that, there we are,
that's the right one.

589
00:24:04,008 --> 00:24:07,330

590
00:24:07,330 --> 00:24:12,110
And now all we're doing is,
and I'll show you why I'm

591
00:24:12,110 --> 00:24:13,840
doing this in a minute actually,
but we're just

592
00:24:13,840 --> 00:24:16,940
making it so that we can
make xhr requests.

593
00:24:16,940 --> 00:24:23,491
And we'll call the call back
with some xhr.response.

594
00:24:23,491 --> 00:24:27,860

595
00:24:27,860 --> 00:24:30,105
There we are.

596
00:24:30,105 --> 00:24:30,850
Just like that.

597
00:24:30,850 --> 00:24:34,400
It's not doing too
much just yet.

598
00:24:34,400 --> 00:24:39,320
Xhr.open, it's a get request
at the moment.

599
00:24:39,320 --> 00:24:43,120
Obviously this API was to be
fleshed out a little bit more.

600
00:24:43,120 --> 00:24:45,062
You might want to do posts, when
you're posting data, but

601
00:24:45,062 --> 00:24:46,860
I'm not doing that just yet.

602
00:24:46,860 --> 00:24:53,010
Instagram.com/v1 if I am
remembering correctly.

603
00:24:53,010 --> 00:24:55,070
And then the way that they do
the methods is that they'll

604
00:24:55,070 --> 00:24:59,580
have a /user, /fetch, all
those type of things.

605
00:24:59,580 --> 00:25:03,035

606
00:25:03,035 --> 00:25:06,750
I tell you now, this does not
look very sexy at the moment.

607
00:25:06,750 --> 00:25:09,050
PETE LEPAGE: Well, you know
what, it'll be sexy when you

608
00:25:09,050 --> 00:25:10,360
make it work.

609
00:25:10,360 --> 00:25:11,420
PAUL KINLAN: Yes, it's
going to be cool.

610
00:25:11,420 --> 00:25:13,005
So I'm just going to move it
up a little bit so just in

611
00:25:13,005 --> 00:25:14,255
case people can't see it.

612
00:25:14,255 --> 00:25:19,180

613
00:25:19,180 --> 00:25:22,980
Access token, right, it's going
to be asynchronous so we

614
00:25:22,980 --> 00:25:24,445
don't need to put anything in.

615
00:25:24,445 --> 00:25:26,395
xhr.send.

616
00:25:26,395 --> 00:25:29,550
There we go.

617
00:25:29,550 --> 00:25:30,800
That's it, so cool.

618
00:25:30,800 --> 00:25:34,800

619
00:25:34,800 --> 00:25:37,460
And I'm going to leave a bug
in, and see if anyone spots

620
00:25:37,460 --> 00:25:38,770
what is once we get to it.

621
00:25:38,770 --> 00:25:39,570
New Instagram.

622
00:25:39,570 --> 00:25:41,710
So we're going to call
Instagram now.

623
00:25:41,710 --> 00:25:46,540
Instagram, with the access
token in the constructor,

624
00:25:46,540 --> 00:25:49,890
because we're going to use
that for our method call.

625
00:25:49,890 --> 00:25:51,140
api.request("use
rs/self/fetch").

626
00:25:51,140 --> 00:25:58,614

627
00:25:58,614 --> 00:26:04,300
Oh, no it's not, it's "feed",
undefined, So I can't design

628
00:26:04,300 --> 00:26:06,660
APIs to save my life, that
shouldn't even exist, but

629
00:26:06,660 --> 00:26:08,390
there we go.

630
00:26:08,390 --> 00:26:09,910
I thought it would be a good
idea that when I was designing

631
00:26:09,910 --> 00:26:14,020
this Instagram API to
put an undefined in.

632
00:26:14,020 --> 00:26:15,270
Console.log(data).

633
00:26:15,270 --> 00:26:21,030

634
00:26:21,030 --> 00:26:22,390
What else can we do?

635
00:26:22,390 --> 00:26:23,380
Output.

636
00:26:23,380 --> 00:26:27,175
So output is the dump element,
which is the pre-- the thing

637
00:26:27,175 --> 00:26:29,520
we showed earlier on today.

638
00:26:29,520 --> 00:26:30,770
The JSON.stringify--

639
00:26:30,770 --> 00:26:34,700

640
00:26:34,700 --> 00:26:36,380
PETE LEPAGE: I like the
"strongify", that would be

641
00:26:36,380 --> 00:26:37,040
kind of cool.

642
00:26:37,040 --> 00:26:38,005
I want to make it so strong.

643
00:26:38,005 --> 00:26:39,966
[ROARING]

644
00:26:39,966 --> 00:26:41,490
PAUL KINLAN: OK, so stringify.

645
00:26:41,490 --> 00:26:44,655
And then last week I learned
that this exists.

646
00:26:44,655 --> 00:26:47,775
You put "null, 4".

647
00:26:47,775 --> 00:26:51,800
It will use taps or I think,
four spaces and pretty print

648
00:26:51,800 --> 00:26:53,870
the JSON object.

649
00:26:53,870 --> 00:26:55,700
Did not know that
last week, and I

650
00:26:55,700 --> 00:26:58,360
learned it just for this.

651
00:26:58,360 --> 00:27:00,860
PETE LEPAGE: And this is
available in Chrome?

652
00:27:00,860 --> 00:27:02,210
PAUL KINLAN: I think it's just
generally available in the

653
00:27:02,210 --> 00:27:04,950
APIs, so Chrome, Firefox,
and other browsers.

654
00:27:04,950 --> 00:27:08,310

655
00:27:08,310 --> 00:27:09,590
Should we see if this works?

656
00:27:09,590 --> 00:27:11,800
PETE LEPAGE: Let's reload our
app and see if it works.

657
00:27:11,800 --> 00:27:12,590
PAUL KINLAN: Reload it.

658
00:27:12,590 --> 00:27:14,970
Let's get some source
control--

659
00:27:14,970 --> 00:27:16,100
source control?

660
00:27:16,100 --> 00:27:17,350
Source view on.

661
00:27:17,350 --> 00:27:19,340

662
00:27:19,340 --> 00:27:21,570
I've already spotted
the mistake.

663
00:27:21,570 --> 00:27:24,190
Did anyone pick it up?

664
00:27:24,190 --> 00:27:26,270
PETE LEPAGE: Nobody picked it up
in any of the comments that

665
00:27:26,270 --> 00:27:29,390
I'm seeing, and nobody's posted
it in the questions.

666
00:27:29,390 --> 00:27:32,140
So, I don't know.

667
00:27:32,140 --> 00:27:32,800
PAUL KINLAN: There we go.

668
00:27:32,800 --> 00:27:34,250
Reload.

669
00:27:34,250 --> 00:27:35,780
Inspect element.

670
00:27:35,780 --> 00:27:37,530
That's how live this is.

671
00:27:37,530 --> 00:27:40,870
PETE LEPAGE: Got to love
live broadcasts.

672
00:27:40,870 --> 00:27:43,590
PAUL KINLAN: Let's move
this up there.

673
00:27:43,590 --> 00:27:46,275
A little hint for everyone, if
you create a window, give it

674
00:27:46,275 --> 00:27:49,450
an ID, and then it will stick.

675
00:27:49,450 --> 00:27:51,970
It will stay stuck in the place
that you last left it,

676
00:27:51,970 --> 00:27:53,480
rather than what I have to
do, which is just reload

677
00:27:53,480 --> 00:27:55,080
this all the time.

678
00:27:55,080 --> 00:27:56,456
So let's put one in there so
we know that we're going to

679
00:27:56,456 --> 00:27:57,706
get the token back.

680
00:27:57,706 --> 00:27:59,870

681
00:27:59,870 --> 00:28:01,860
method, access token,
access token.

682
00:28:01,860 --> 00:28:03,170
Spelling is all correct.

683
00:28:03,170 --> 00:28:03,880
Callback.

684
00:28:03,880 --> 00:28:05,110
We'll just put it in
there just so we

685
00:28:05,110 --> 00:28:07,270
can see what happens.

686
00:28:07,270 --> 00:28:08,620
Login.

687
00:28:08,620 --> 00:28:09,150
Hello.

688
00:28:09,150 --> 00:28:09,410
Right.

689
00:28:09,410 --> 00:28:12,750
So we know we've got the access
token, that works.

690
00:28:12,750 --> 00:28:16,390
Oo, oo, oo, oo, another bug.

691
00:28:16,390 --> 00:28:20,340
PETE LEPAGE: And somebody just
said, and I don't know if this

692
00:28:20,340 --> 00:28:24,730
is his suggestion on what your
bug is, but is it Instagram

693
00:28:24,730 --> 00:28:27,200
API as the--

694
00:28:27,200 --> 00:28:29,100
PAUL KINLAN: Yeah, he just saw
me type that out, man.

695
00:28:29,100 --> 00:28:32,470

696
00:28:32,470 --> 00:28:32,990
There's another one.

697
00:28:32,990 --> 00:28:36,660
But we fixed it, we spotted
it, reload app.

698
00:28:36,660 --> 00:28:38,000
There we go.

699
00:28:38,000 --> 00:28:40,370
So the bug we just had then a
second ago was I was looking

700
00:28:40,370 --> 00:28:42,990
at the wrong part of the URL
string to actually parse out

701
00:28:42,990 --> 00:28:45,740
the access token.

702
00:28:45,740 --> 00:28:47,650
So here we go, boom, great.

703
00:28:47,650 --> 00:28:52,130
We have an access token,
looks nice.

704
00:28:52,130 --> 00:28:54,222
We're going to do the request.

705
00:28:54,222 --> 00:28:57,430
Yeah, that looks OK.

706
00:28:57,430 --> 00:28:59,530
Data, right, so--

707
00:28:59,530 --> 00:29:02,330
oh, there's an error.

708
00:29:02,330 --> 00:29:03,550
Oh man, what's that errors?

709
00:29:03,550 --> 00:29:04,860
Can you see that there?

710
00:29:04,860 --> 00:29:06,065
Is it visible on the screen?

711
00:29:06,065 --> 00:29:08,400
PETE LEPAGE: It's visible
on screen.

712
00:29:08,400 --> 00:29:12,296
PAUL KINLAN: So could not
load api.instagram.com.

713
00:29:12,296 --> 00:29:12,700
Damn.

714
00:29:12,700 --> 00:29:15,660
Well luckily, I know what that
is because that was the bug I

715
00:29:15,660 --> 00:29:17,150
purposefully left in.

716
00:29:17,150 --> 00:29:18,432
PETE LEPAGE: All right,
we like it when we

717
00:29:18,432 --> 00:29:19,120
have purpose bug.

718
00:29:19,120 --> 00:29:20,660
PAUL KINLAN: So obviously, the
thing that we're doing with

719
00:29:20,660 --> 00:29:24,660
all these APIs is that we need
to basically ask the

720
00:29:24,660 --> 00:29:28,280
permission to access
any arbitrary URL.

721
00:29:28,280 --> 00:29:31,440
So we're going to basically say,
let me do the install and

722
00:29:31,440 --> 00:29:33,210
reload, can I get access
to api.instagram.com?

723
00:29:33,210 --> 00:29:36,870

724
00:29:36,870 --> 00:29:38,930
So let's go back, get
to our extensions.

725
00:29:38,930 --> 00:29:41,610
PETE LEPAGE: So now that's going
to say, this app can

726
00:29:41,610 --> 00:29:44,255
access that particular
set of URLs.

727
00:29:44,255 --> 00:29:47,570
PAUL KINLAN: Yeah, so when the
store integration all works

728
00:29:47,570 --> 00:29:51,060
and everything, the user will
be asked at install time

729
00:29:51,060 --> 00:29:55,430
whether they allow access to
that URL, essentially, which

730
00:29:55,430 --> 00:29:56,420
is pretty nice.

731
00:29:56,420 --> 00:29:58,140
It gives the user some
confidence about what the

732
00:29:58,140 --> 00:29:59,390
application is doing.

733
00:29:59,390 --> 00:30:01,550

734
00:30:01,550 --> 00:30:03,530
Yeah, I was going to say you
can't normally access--

735
00:30:03,530 --> 00:30:05,500
for instance, I can't access
Twitter right now inside this

736
00:30:05,500 --> 00:30:05,960
application.

737
00:30:05,960 --> 00:30:07,550
I can only access Instagram
because the

738
00:30:07,550 --> 00:30:09,190
user's granted access.

739
00:30:09,190 --> 00:30:11,020
PETE LEPAGE: And as a user, you
know that you're not going

740
00:30:11,020 --> 00:30:14,040
to have some other app going
and sending your data to

741
00:30:14,040 --> 00:30:16,622
places where you don't
expect it to go.

742
00:30:16,622 --> 00:30:20,970
You know your data is being
handled responsibly.

743
00:30:20,970 --> 00:30:22,410
PAUL KINLAN: Here we
go, look at this.

744
00:30:22,410 --> 00:30:25,470
So the API request
has come back in.

745
00:30:25,470 --> 00:30:29,540
The JSON object, it's
just a string at the

746
00:30:29,540 --> 00:30:32,460
moment, has come back.

747
00:30:32,460 --> 00:30:33,980
We will press play and--

748
00:30:33,980 --> 00:30:38,030

749
00:30:38,030 --> 00:30:40,260
it doesn't look as nice
as it did in my demo,

750
00:30:40,260 --> 00:30:41,510
but there we are.

751
00:30:41,510 --> 00:30:44,930

752
00:30:44,930 --> 00:30:46,570
I think I generally know
what the problem is.

753
00:30:46,570 --> 00:30:49,240
The response type has
come back and it's

754
00:30:49,240 --> 00:30:51,050
not recognized its--

755
00:30:51,050 --> 00:30:52,300
it should though.

756
00:30:52,300 --> 00:30:55,370

757
00:30:55,370 --> 00:30:57,180
Well anyway, it doesn't
really matter.

758
00:30:57,180 --> 00:30:59,060
You have to trust me that
this is a JSON object.

759
00:30:59,060 --> 00:30:59,420
It is.

760
00:30:59,420 --> 00:31:01,881
Looks well, nice, and sexy.

761
00:31:01,881 --> 00:31:03,520
And that's it.

762
00:31:03,520 --> 00:31:05,180
That was basically
authenticating against

763
00:31:05,180 --> 00:31:09,270
Instagram, and being able to
query it, with a get request

764
00:31:09,270 --> 00:31:10,160
admittedly.

765
00:31:10,160 --> 00:31:12,430
You could change it to a post
request and things should

766
00:31:12,430 --> 00:31:12,890
still work.

767
00:31:12,890 --> 00:31:15,580
As long as you've got access
to the access token, you

768
00:31:15,580 --> 00:31:18,030
should be able to do the things
that you need to do

769
00:31:18,030 --> 00:31:20,130
inside your APIs.

770
00:31:20,130 --> 00:31:22,220
This isn't just restricted to
Instagram, obviously things

771
00:31:22,220 --> 00:31:25,360
like Twitter, anything that
sports OAuth 2.0 generally

772
00:31:25,360 --> 00:31:26,680
should work.

773
00:31:26,680 --> 00:31:28,746
And the really nice thing about
this is the actual-- if

774
00:31:28,746 --> 00:31:32,640
we go back to the code for
just two seconds--

775
00:31:32,640 --> 00:31:35,580
the actual core, the core logic
is constructing the

776
00:31:35,580 --> 00:31:37,980
variables itself, the things
that you want to call and how

777
00:31:37,980 --> 00:31:40,880
you want to call it, and then
the final thing is the

778
00:31:40,880 --> 00:31:42,130
experimental.ide
ntity.launchWebAuthFlow.

779
00:31:42,130 --> 00:31:44,990

780
00:31:44,990 --> 00:31:49,130
And that's the brunt of the API,
and we didn't have that

781
00:31:49,130 --> 00:31:51,590
many servers in place to do
anything, we just called it.

782
00:31:51,590 --> 00:31:54,650
PETE LEPAGE: We were able to go
in and grab somebody else's

783
00:31:54,650 --> 00:31:57,070
service, and start pulling
stuff down, and

784
00:31:57,070 --> 00:31:58,340
into our own app.

785
00:31:58,340 --> 00:32:00,400
PAUL KINLAN: Yes, exactly.

786
00:32:00,400 --> 00:32:02,810
It's pretty interesting,
it's pretty exciting.

787
00:32:02,810 --> 00:32:05,160
We've only just kind of, me in
particular, has only just

788
00:32:05,160 --> 00:32:06,360
really started playing
with this against

789
00:32:06,360 --> 00:32:08,630
other external services.

790
00:32:08,630 --> 00:32:11,620
But I've seen people in
hackathons update these, call

791
00:32:11,620 --> 00:32:15,660
these different services and
just start to use the identity

792
00:32:15,660 --> 00:32:18,650
API pretty quickly.

793
00:32:18,650 --> 00:32:20,810
Obviously, we'll have more
information about the Google

794
00:32:20,810 --> 00:32:22,070
authentication against
individual

795
00:32:22,070 --> 00:32:24,260
services at a later date.

796
00:32:24,260 --> 00:32:25,620
We'll do a Hangout around
that as well.

797
00:32:25,620 --> 00:32:27,730
That's actually pretty
interesting as well.

798
00:32:27,730 --> 00:32:28,720
PETE LEPAGE: That works today?

799
00:32:28,720 --> 00:32:30,680
Like if somebody wanted to play
with that, it's under the

800
00:32:30,680 --> 00:32:33,150
experimental API, does
it work today?

801
00:32:33,150 --> 00:32:34,040
PAUL KINLAN: The Google one?

802
00:32:34,040 --> 00:32:36,020
PETE LEPAGE: Yeah.

803
00:32:36,020 --> 00:32:37,950
PAUL KINLAN: It does, but you
need to request a key, and

804
00:32:37,950 --> 00:32:41,170
there's a whole lot of potential
changes that might

805
00:32:41,170 --> 00:32:43,340
happen in the near future around
the experimental API,

806
00:32:43,340 --> 00:32:46,070
around the Google
authentication.

807
00:32:46,070 --> 00:32:49,375
So hold on just a little
bit with this.

808
00:32:49,375 --> 00:32:52,000
The interesting thing is you
could probably implement and

809
00:32:52,000 --> 00:32:55,190
integrate with Google services
relatively easy with this

810
00:32:55,190 --> 00:32:58,080
third party OAuth flow, because
OAuth 2.0 has this

811
00:32:58,080 --> 00:33:00,540
concept of scopes, and we have
this concept of scopes as well

812
00:33:00,540 --> 00:33:02,400
in our authentication
protocol.

813
00:33:02,400 --> 00:33:04,160
So you can probably do
it with this as well.

814
00:33:04,160 --> 00:33:08,240
It's just not kind of a
seamless, if that make sense.

815
00:33:08,240 --> 00:33:10,530
PETE LEPAGE: Yeah, that
makes perfect sense.

816
00:33:10,530 --> 00:33:13,270
PAUL KINLAN: But it's a nice
seamless API for what it is.

817
00:33:13,270 --> 00:33:14,950
So that's it.

818
00:33:14,950 --> 00:33:18,680
I really want to know why it
didn't come out as nice as it

819
00:33:18,680 --> 00:33:22,380
did in my other tester.

820
00:33:22,380 --> 00:33:24,390
Doesn't matter, we'll
leave it, I'm happy.

821
00:33:24,390 --> 00:33:25,080
PETE LEPAGE: That's OK.

822
00:33:25,080 --> 00:33:29,510
So the link for those of you
who have questions is up on

823
00:33:29,510 --> 00:33:32,270
screen right now, so you could
ask your questions if you want

824
00:33:32,270 --> 00:33:35,910
to know a little bit more
about what's going on.

825
00:33:35,910 --> 00:33:39,280
As well, if you want to go have
a look, Paul's uploaded

826
00:33:39,280 --> 00:33:41,200
these samples already.

827
00:33:41,200 --> 00:33:43,360
So if you want to go and play
with this, I just popped the

828
00:33:43,360 --> 00:33:46,980
sample URL up on screen right
now so that if you want to go

829
00:33:46,980 --> 00:33:48,880
play with it-- did you get it?

830
00:33:48,880 --> 00:33:50,780
PAUL KINLAN: Yes.

831
00:33:50,780 --> 00:33:52,680
[INTERPOSING VOICES]

832
00:33:52,680 --> 00:33:55,210
PAUL KINLAN: I didn't turn
it into a JSON, a proper

833
00:33:55,210 --> 00:33:58,940
JavaScript object, the
left of the screen.

834
00:33:58,940 --> 00:34:01,010
And it turns out strings are
proper JavaScript object,

835
00:34:01,010 --> 00:34:04,685
which is why it double encoded
everything, so there we go.

836
00:34:04,685 --> 00:34:05,320
PETE LEPAGE: There you go.

837
00:34:05,320 --> 00:34:07,390
All right, can we
actually see it?

838
00:34:07,390 --> 00:34:08,840
Let's see it running.

839
00:34:08,840 --> 00:34:10,306
PAUL KINLAN: It's there.

840
00:34:10,306 --> 00:34:11,060
Do you not trust me?

841
00:34:11,060 --> 00:34:11,710
PETE LEPAGE:There we go.

842
00:34:11,710 --> 00:34:13,080
Now we can see it.

843
00:34:13,080 --> 00:34:14,290
That's pretty.

844
00:34:14,290 --> 00:34:15,060
PAUL KINLAN: Whee!

845
00:34:15,060 --> 00:34:16,699
PETE LEPAGE: Yay.

846
00:34:16,699 --> 00:34:17,179
PAUL KINLAN: Yeah, nice job.

847
00:34:17,179 --> 00:34:17,969
It's pretty cool.

848
00:34:17,969 --> 00:34:19,250
PETE LEPAGE: But could
you do it with two

849
00:34:19,250 --> 00:34:20,540
spaces instead of four.

850
00:34:20,540 --> 00:34:21,850
Four is a little too many.

851
00:34:21,850 --> 00:34:23,710
I'm kidding.

852
00:34:23,710 --> 00:34:25,300
PAUL KINLAN: Just for
you, anything.

853
00:34:25,300 --> 00:34:27,370
PETE LEPAGE: Aww,
you're so sweet.

854
00:34:27,370 --> 00:34:31,429
So why don't we grab one of the
first questions that we

855
00:34:31,429 --> 00:34:34,070
have, and I'll take the stab
at this first question,

856
00:34:34,070 --> 00:34:37,260
because it's, I think, a
really good question.

857
00:34:37,260 --> 00:34:39,530
Unfortunately I don't have a
really great answer for you

858
00:34:39,530 --> 00:34:42,650
today, I can give you an answer,
but I want to dive

859
00:34:42,650 --> 00:34:46,770
into it more in a coming Chrome
Apps Office Hours.

860
00:34:46,770 --> 00:34:50,179
This is from Tommy in Illinois,
and Tommy wants to

861
00:34:50,179 --> 00:34:52,820
know what the status of
Native Client SDK and

862
00:34:52,820 --> 00:34:54,060
packaged apps is.

863
00:34:54,060 --> 00:34:57,130
And, Tommy, as far as I know you
can actually start playing

864
00:34:57,130 --> 00:35:00,050
with them today, though
it's still somewhat

865
00:35:00,050 --> 00:35:02,120
experimental on that.

866
00:35:02,120 --> 00:35:08,660
Either next week or the week
after, we're going to do our

867
00:35:08,660 --> 00:35:12,280
Chrome Apps Office Hours
specifically on this topic.

868
00:35:12,280 --> 00:35:16,300
We've got one of the great guys
from they Native Client

869
00:35:16,300 --> 00:35:18,750
team who's going to be joining
us to talk about this.

870
00:35:18,750 --> 00:35:21,290
He's going to dive into this
in a lot more detail.

871
00:35:21,290 --> 00:35:25,190
So keep an eye out, it's either
next Tuesday or the

872
00:35:25,190 --> 00:35:27,300
following Tuesday, I don't
remember specifically

873
00:35:27,300 --> 00:35:27,990
which one it is.

874
00:35:27,990 --> 00:35:31,790
But Tommy, have a peek, we'd
love to have you join us for

875
00:35:31,790 --> 00:35:35,670
that, and we'll dive into a
lot more the good, nitty

876
00:35:35,670 --> 00:35:37,494
gritty details.

877
00:35:37,494 --> 00:35:38,590
PAUL KINLAN: Yeah, it's cool.

878
00:35:38,590 --> 00:35:40,460
What we've seen so
far is cool.

879
00:35:40,460 --> 00:35:41,180
It'll be an exciting one.

880
00:35:41,180 --> 00:35:44,050
It'll be good.

881
00:35:44,050 --> 00:35:46,490
PETE LEPAGE: So Paul, I'll pass
this next one on to you.

882
00:35:46,490 --> 00:35:51,110
From Swader in Croatia, is this
authentication mechanism

883
00:35:51,110 --> 00:35:53,220
limited to just packaged apps,
or does it work for

884
00:35:53,220 --> 00:35:55,180
extensions as well?

885
00:35:55,180 --> 00:35:58,090
PAUL KINLAN: So I've not tried
it in extensions, however it's

886
00:35:58,090 --> 00:36:01,470
not under the Chrome.app
namespace, so there's a good

887
00:36:01,470 --> 00:36:02,950
chance that it'll work.

888
00:36:02,950 --> 00:36:04,710
it just needs to be tested.

889
00:36:04,710 --> 00:36:07,250
It doesn't take that much to
actually go off and test it.

890
00:36:07,250 --> 00:36:09,815
I might go and test
it in a minute.

891
00:36:09,815 --> 00:36:10,820
Yeah, I've not tested it.

892
00:36:10,820 --> 00:36:13,246
It'd be nice if it does because
extensions needs this

893
00:36:13,246 --> 00:36:15,733
type of API too, and I wouldn't
be surprised if it

894
00:36:15,733 --> 00:36:19,190
did work, but I've
not tested it.

895
00:36:19,190 --> 00:36:20,920
PETE LEPAGE: So Swader, one of
the things I'd recommend you

896
00:36:20,920 --> 00:36:25,470
do is go post that question
to our email list which is

897
00:36:25,470 --> 00:36:29,980
chromium-apps, chromium hyphen
apps at chromium.org.

898
00:36:29,980 --> 00:36:32,460
You can go join there, you can
keep up to date with some of

899
00:36:32,460 --> 00:36:36,270
the latest stuff on what's going
on, you can see this all

900
00:36:36,270 --> 00:36:37,670
the great conversations.

901
00:36:37,670 --> 00:36:40,890
We've got announcements about
all of the new features that

902
00:36:40,890 --> 00:36:42,020
get released.

903
00:36:42,020 --> 00:36:44,820
Right now this is experimental
so certainly it'll move out of

904
00:36:44,820 --> 00:36:45,570
experimental.

905
00:36:45,570 --> 00:36:48,390
When that happens, we will be
sure to let everybody know

906
00:36:48,390 --> 00:36:52,010
through our mailing
list as well.

907
00:36:52,010 --> 00:36:54,050
So with that I think that's
sort of the end of our

908
00:36:54,050 --> 00:36:56,410
questions in great
demo today, Paul.

909
00:36:56,410 --> 00:36:58,670
Thank you very much
for joining again.

910
00:36:58,670 --> 00:36:59,952
PAUL KINLAN: I'll make it
a nice, proper looking

911
00:36:59,952 --> 00:37:01,278
app soon, as well.

912
00:37:01,278 --> 00:37:02,570
I just think it's a nice
little demo to

913
00:37:02,570 --> 00:37:03,850
show you what happens.

914
00:37:03,850 --> 00:37:05,060
PETE LEPAGE: Yeah, absolutely.

915
00:37:05,060 --> 00:37:08,220
Now, if people want to go and
download this, they want to

916
00:37:08,220 --> 00:37:12,060
try this on their own,
so the URL is there.

917
00:37:12,060 --> 00:37:14,810
They're going to have to change
the secret key, and

918
00:37:14,810 --> 00:37:17,950
they're going to have set
themselves up as a developer

919
00:37:17,950 --> 00:37:20,900
on Instagram.

920
00:37:20,900 --> 00:37:21,910
Isn't that correct?

921
00:37:21,910 --> 00:37:23,370
PAUL KINLAN: Yeah, it's
pretty simple process.

922
00:37:23,370 --> 00:37:26,110
They've got really nice
documentation as well.

923
00:37:26,110 --> 00:37:28,590
You basically just go to the
instagram.com/developer, click

924
00:37:28,590 --> 00:37:30,670
register your application.

925
00:37:30,670 --> 00:37:33,900
I've just actually deleted my
client key now, just in case.

926
00:37:33,900 --> 00:37:35,660
PETE LEPAGE: So for those of
you who wanted to have a

927
00:37:35,660 --> 00:37:36,870
little fun with it, sorry.

928
00:37:36,870 --> 00:37:38,770
PAUL KINLAN: Yeah,
I mean it's cool.

929
00:37:38,770 --> 00:37:44,340

930
00:37:44,340 --> 00:37:47,770
You go to Instagram, any kind
of third party service site,

931
00:37:47,770 --> 00:37:49,190
you should be able to, so as
long as they support OAuth

932
00:37:49,190 --> 00:37:50,890
2.0, you will be able to pretty
much use the exact code

933
00:37:50,890 --> 00:37:53,856
that we've got today, and
just go from there.

934
00:37:53,856 --> 00:37:55,860
I'll tell you what though,
if you do have any other

935
00:37:55,860 --> 00:37:58,110
applications, any other
authentication methods that

936
00:37:58,110 --> 00:38:01,600
you do use inside your own
services, let us know because

937
00:38:01,600 --> 00:38:04,705
we would like to make sure that
this API works for you

938
00:38:04,705 --> 00:38:05,530
guys, right.

939
00:38:05,530 --> 00:38:08,210
So just catch us on
Google+, or email.

940
00:38:08,210 --> 00:38:09,960
I'm paulkinlan@google.com.

941
00:38:09,960 --> 00:38:13,050
PETE LEPAGE: I'm petele.

942
00:38:13,050 --> 00:38:14,030
PAUL KINLAN: We're our
names pretty much

943
00:38:14,030 --> 00:38:16,030
everywhere else on the web.

944
00:38:16,030 --> 00:38:20,170
Just get access to us, post on
the forum, let us know what

945
00:38:20,170 --> 00:38:21,900
you want to do with the
authentication API and the

946
00:38:21,900 --> 00:38:24,850
identity API because we think
it's going to be key, and it's

947
00:38:24,850 --> 00:38:26,610
going to be absolutely awesome,
but we need to make

948
00:38:26,610 --> 00:38:27,970
sure that it works
for you guys.

949
00:38:27,970 --> 00:38:29,010
PETE LEPAGE: Absolutely.

950
00:38:29,010 --> 00:38:31,040
All right well, Paul,
thank you for

951
00:38:31,040 --> 00:38:31,910
joining us from London.

952
00:38:31,910 --> 00:38:32,980
Have a wonderful evening.

953
00:38:32,980 --> 00:38:36,180
It's, what, almost 6 o'clock
there tonight.

954
00:38:36,180 --> 00:38:37,440
PAUL KINLAN: It's already 6:00
o'clock and I've got another--

955
00:38:37,440 --> 00:38:39,672
well, I'm not going tell you
how long I've got left, but

956
00:38:39,672 --> 00:38:41,170
yeah, it's a long time.

957
00:38:41,170 --> 00:38:43,360
PETE LEPAGE: Well, Paul, thanks
for joining us, and

958
00:38:43,360 --> 00:38:44,910
thanks to all of you guys
for joining us.

959
00:38:44,910 --> 00:38:48,520
We hope you have a wonderful
day, and we will see

960
00:38:48,520 --> 00:38:49,800
you guys next week.

961
00:38:49,800 --> 00:38:51,780
Same time, same place.

962
00:38:51,780 --> 00:38:53,030
Take care, everybody.

963
00:38:53,030 --> 00:39:01,600

