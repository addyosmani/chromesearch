1
00:00:00,000 --> 00:00:00,380

2
00:00:00,380 --> 00:00:02,130
BILL LUAN: Shanghai
GDG is a very

3
00:00:02,130 --> 00:00:04,310
interesting developer community.

4
00:00:04,310 --> 00:00:05,040
FEMALE SPEAKER: I'm
glad somebody

5
00:00:05,040 --> 00:00:06,280
has asked this question.

6
00:00:06,280 --> 00:00:07,470
MALE SPEAKER: This is where
the magic happens.

7
00:00:07,470 --> 00:00:08,923
FEMALE SPEAKER: This is
primarily a question and

8
00:00:08,923 --> 00:00:11,350
answer show, so if any of you
out there would like to ask

9
00:00:11,350 --> 00:00:12,600
questions--

10
00:00:12,600 --> 00:00:22,630

11
00:00:22,630 --> 00:00:25,280
BILL LUAN: Hello and
welcome to another

12
00:00:25,280 --> 00:00:28,400
episode GDL-IL, GDL Israel.

13
00:00:28,400 --> 00:00:31,910
Today we are going to speak
about HTML5, some cool new

14
00:00:31,910 --> 00:00:33,270
things that we see today.

15
00:00:33,270 --> 00:00:36,920
And of course, we're going to
deep dive into web workers and

16
00:00:36,920 --> 00:00:42,520
why this HTML5 API lets you
use multi-thread in the

17
00:00:42,520 --> 00:00:49,730
browsers is very great way
to actually improve your

18
00:00:49,730 --> 00:00:53,610
performance and make sure that
your web apps and websites are

19
00:00:53,610 --> 00:00:58,470
working better and utilized
quad-core, 8-core, or any

20
00:00:58,470 --> 00:01:01,870
other number of cores that the
devices that your browsers is

21
00:01:01,870 --> 00:01:02,980
running on.

22
00:01:02,980 --> 00:01:08,570
So without further ado, let's
jump and see some code.

23
00:01:08,570 --> 00:01:11,330
Let me share my screen
with you.

24
00:01:11,330 --> 00:01:15,070
And we are hopefully if
I'm jumping-- yeah.

25
00:01:15,070 --> 00:01:19,260
So for the ones that don't know,
let me just open it and

26
00:01:19,260 --> 00:01:22,190
make it a bit bigger
but on this spot.

27
00:01:22,190 --> 00:01:27,530
So it will be here,
right here.

28
00:01:27,530 --> 00:01:29,040
Let's make it bigger.

29
00:01:29,040 --> 00:01:35,460
So at ido-green.appspot.com, you
could see all the sources

30
00:01:35,460 --> 00:01:38,420
and everything that we
will cover today.

31
00:01:38,420 --> 00:01:43,210
And as you saw probably, the
first screen that I shared

32
00:01:43,210 --> 00:01:49,530
with you was a post that I wrote
actually almost now a

33
00:01:49,530 --> 00:01:52,560
year ago about big data
and web workers.

34
00:01:52,560 --> 00:01:56,810
And the promise of the big thing
there is that today in

35
00:01:56,810 --> 00:01:57,980
modern browsers--

36
00:01:57,980 --> 00:02:00,960
and more and more browsers are
actually implementing this

37
00:02:00,960 --> 00:02:03,750
important HTML5 feature--

38
00:02:03,750 --> 00:02:05,610
allowing us to work
with big data.

39
00:02:05,610 --> 00:02:09,280
And when I'm saying big data,
it's with half a smile because

40
00:02:09,280 --> 00:02:15,700
it's not teras, but still few
megs that up to now, when we

41
00:02:15,700 --> 00:02:19,050
wanted to move them, we
postMessage to the window

42
00:02:19,050 --> 00:02:21,020
object or to the
worker object.

43
00:02:21,020 --> 00:02:22,810
It was quite hard.

44
00:02:22,810 --> 00:02:27,190
Luckily, today with HTML5, we
could use transferable object

45
00:02:27,190 --> 00:02:30,340
and do that very,
very quickly.

46
00:02:30,340 --> 00:02:33,720
This is a good link to start
with, which is the spec of

47
00:02:33,720 --> 00:02:35,420
transferable object.

48
00:02:35,420 --> 00:02:38,890
And basically, from a macro
level what we have here is

49
00:02:38,890 --> 00:02:41,800
that just a moving and
not a copy operation.

50
00:02:41,800 --> 00:02:44,970
So I'm going to be moving a
pointer, and we're getting a

51
00:02:44,970 --> 00:02:47,110
boost in our performances.

52
00:02:47,110 --> 00:02:51,660
In this specific case, our
specific example, you can see

53
00:02:51,660 --> 00:02:55,310
that basically what we have
here is a way to use

54
00:02:55,310 --> 00:02:58,190
transferable object or not to
use them, and then we're just

55
00:02:58,190 --> 00:03:02,890
seeing what huge difference it's
bringing in terms of the

56
00:03:02,890 --> 00:03:07,315
amount of seconds that it will
cause our worker to get a

57
00:03:07,315 --> 00:03:09,520
data, crunch it, and
return it back.

58
00:03:09,520 --> 00:03:13,210

59
00:03:13,210 --> 00:03:14,740
This is the example page.

60
00:03:14,740 --> 00:03:16,930
And as you can see here
on ido-green.appspo

61
00:03:16,930 --> 00:03:25,010
t.com/HTML5webcom, this is
part of a presentation.

62
00:03:25,010 --> 00:03:29,030
And basically when we're running
the test, you can see

63
00:03:29,030 --> 00:03:35,060
here that it's taking it two
milliseconds on average, maybe

64
00:03:35,060 --> 00:03:37,010
three, four.

65
00:03:37,010 --> 00:03:40,180
Let me make it a bit bigger so
it will be easier to see.

66
00:03:40,180 --> 00:03:45,040
Now if you will take the exact
URL here and basically copy to

67
00:03:45,040 --> 00:03:49,090
an older browsers that are not
supporting transferable

68
00:03:49,090 --> 00:03:52,760
objects, you'll see a number
here that is at

69
00:03:52,760 --> 00:03:54,470
least 50 times higher.

70
00:03:54,470 --> 00:03:58,560
In most of the cases that I've
checked, it was around 150,

71
00:03:58,560 --> 00:04:01,010
160 milliseconds.

72
00:04:01,010 --> 00:04:04,890
So it's quite nice to see that
today we have a very efficient

73
00:04:04,890 --> 00:04:09,130
way to work with web workers
because, of course, the

74
00:04:09,130 --> 00:04:12,380
bottleneck wasn't in the CPU
or the work that the worker

75
00:04:12,380 --> 00:04:16,570
itself is doing for us but more
in the way that we are

76
00:04:16,570 --> 00:04:18,730
transmitting big data--

77
00:04:18,730 --> 00:04:20,329
again with a half a smile--

78
00:04:20,329 --> 00:04:24,380
to the worker and back
to our web app.

79
00:04:24,380 --> 00:04:25,550
Here is another link.

80
00:04:25,550 --> 00:04:27,030
Basically I wrote
the book with O'

81
00:04:27,030 --> 00:04:29,570
Reilly about web workers.

82
00:04:29,570 --> 00:04:32,460
But all the examples of the book
are, off course, free for

83
00:04:32,460 --> 00:04:34,040
use on GitHub.

84
00:04:34,040 --> 00:04:39,860
And you could see it here and
basically get and [INAUDIBLE]

85
00:04:39,860 --> 00:04:41,700
all the different examples.

86
00:04:41,700 --> 00:04:46,530
The ones that we will focus
today are just two quite nice

87
00:04:46,530 --> 00:04:49,610
examples that I wanted
to share with you.

88
00:04:49,610 --> 00:04:53,900
So let's go here and
try now again to

89
00:04:53,900 --> 00:04:56,160
share the example page.

90
00:04:56,160 --> 00:04:58,010
It's right here.

91
00:04:58,010 --> 00:05:01,450
The reason I just switch windows
is because I wish to

92
00:05:01,450 --> 00:05:04,300
show you this example
in Chrome Canary.

93
00:05:04,300 --> 00:05:08,590
For the web developers here
that aren't using Chrome

94
00:05:08,590 --> 00:05:12,480
Canary when they are developing,
I highly advise

95
00:05:12,480 --> 00:05:14,740
you to try it.

96
00:05:14,740 --> 00:05:18,190
It's a great way to stay up to
date with all the new features

97
00:05:18,190 --> 00:05:20,720
that you have in Chrome and
that you will see in the

98
00:05:20,720 --> 00:05:24,030
stable version after six
weeks, more or less.

99
00:05:24,030 --> 00:05:27,790
Because as you all know, Chrome
is out there every six

100
00:05:27,790 --> 00:05:32,040
weeks with new features and
improvements to its speed,

101
00:05:32,040 --> 00:05:34,460
security, and simplicity
of course.

102
00:05:34,460 --> 00:05:37,740
And here in Chrome Canary, we
have several things that are

103
00:05:37,740 --> 00:05:41,600
new but basically harnessing
us with better ability to

104
00:05:41,600 --> 00:05:44,740
debug web workers.

105
00:05:44,740 --> 00:05:47,520
As you could see here--
let me just load this

106
00:05:47,520 --> 00:05:50,240
page from the start--

107
00:05:50,240 --> 00:05:54,040
what we have here is a web
worker that we would use in

108
00:05:54,040 --> 00:05:56,670
order to calculate pi.

109
00:05:56,670 --> 00:05:59,240
And as you could see here, I
could choose the amount of

110
00:05:59,240 --> 00:06:02,430
cycles that I wish to do and
then start the worker.

111
00:06:02,430 --> 00:06:09,090
And, I hope that you could all
see now that what I have here

112
00:06:09,090 --> 00:06:12,950
is basically a [INAUDIBLE]

113
00:06:12,950 --> 00:06:14,980
Chrome DevTools.

114
00:06:14,980 --> 00:06:17,990
Yeah, I see that you don't see
because you see the main page.

115
00:06:17,990 --> 00:06:21,560
Let me again share with
you the right window,

116
00:06:21,560 --> 00:06:25,646
and let's see here.

117
00:06:25,646 --> 00:06:30,710

118
00:06:30,710 --> 00:06:32,680
Yeah, Chrome DevTools.

119
00:06:32,680 --> 00:06:37,210
So the nice thing here is what
you see here is basically the

120
00:06:37,210 --> 00:06:41,300
Chrome DevTools that you all
know and, I hope, love.

121
00:06:41,300 --> 00:06:46,080
But here, the main difference is
that as you could see now,

122
00:06:46,080 --> 00:06:50,050
we are in the example pi.js,
which is our worker.

123
00:06:50,050 --> 00:06:57,880
And what I did is that I just
checked one check box to make

124
00:06:57,880 --> 00:07:02,310
sure that on the start of
everything, our web worker's

125
00:07:02,310 --> 00:07:04,680
DevTool window will
be open for us.

126
00:07:04,680 --> 00:07:08,260
And then we'll be able to go
step-by-step and just use the

127
00:07:08,260 --> 00:07:09,300
debugger as we like.

128
00:07:09,300 --> 00:07:12,350
As you can see here, I have
an event listener.

129
00:07:12,350 --> 00:07:14,930
And I'm getting two messages--

130
00:07:14,930 --> 00:07:17,550
the Start and the
Stop buttons.

131
00:07:17,550 --> 00:07:21,140
So in this case, since you are
aware that I clicked on the

132
00:07:21,140 --> 00:07:25,440
Start button, if we just release
it, you see that I'm

133
00:07:25,440 --> 00:07:28,590
holding now on the postMessage
of the Start case.

134
00:07:28,590 --> 00:07:32,000
And now we could go case-by-case
and just have our

135
00:07:32,000 --> 00:07:33,410
calculation.

136
00:07:33,410 --> 00:07:37,640
You could see here that I have
the right number with me.

137
00:07:37,640 --> 00:07:41,730
And now, basically, I just need
to communicate it back to

138
00:07:41,730 --> 00:07:48,150
the parent, which is the
index.html5 app.

139
00:07:48,150 --> 00:07:50,780
I just release it, and
now let's switch

140
00:07:50,780 --> 00:07:52,030
again to the main window.

141
00:07:52,030 --> 00:07:55,970

142
00:07:55,970 --> 00:07:57,690
Here it is.

143
00:07:57,690 --> 00:08:00,430
And as you could see
here nicely--

144
00:08:00,430 --> 00:08:03,666
let me make it a bit bigger.

145
00:08:03,666 --> 00:08:09,540
Not this one, but
rather this one.

146
00:08:09,540 --> 00:08:12,950
So I got the messages as you
could see here in the

147
00:08:12,950 --> 00:08:17,270
DevTools, and we got the amount
of cycles that we are

148
00:08:17,270 --> 00:08:18,050
going to run.

149
00:08:18,050 --> 00:08:19,720
And then we got our
answer back.

150
00:08:19,720 --> 00:08:23,480
And as you could all see, we
have here the right answer.

151
00:08:23,480 --> 00:08:29,960
Maybe we should step one or two
steps back and just let me

152
00:08:29,960 --> 00:08:31,175
share with you--

153
00:08:31,175 --> 00:08:33,169
let's close this one--

154
00:08:33,169 --> 00:08:36,530
when we're talking about web
workers, what are the most

155
00:08:36,530 --> 00:08:41,289
basic, fundamental components
that we're working with and we

156
00:08:41,289 --> 00:08:43,530
want to see in a web worker?

157
00:08:43,530 --> 00:08:51,540
So let me here just go--

158
00:08:51,540 --> 00:08:52,790
yeah.

159
00:08:52,790 --> 00:08:54,640

160
00:08:54,640 --> 00:09:01,735
So let's do it again, and we'll
just load a new screen

161
00:09:01,735 --> 00:09:04,460
that I'll share with you.

162
00:09:04,460 --> 00:09:07,090
And we'll see what are the most
basic components of web

163
00:09:07,090 --> 00:09:09,598
workers and how we could
work with them.

164
00:09:09,598 --> 00:09:18,562

165
00:09:18,562 --> 00:09:19,812
[INAUDIBLE].

166
00:09:19,812 --> 00:09:22,550

167
00:09:22,550 --> 00:09:24,515
IDO GREEN: If people
are joining,

168
00:09:24,515 --> 00:09:26,033
please just put on mute.

169
00:09:26,033 --> 00:09:27,415
It will be great.

170
00:09:27,415 --> 00:09:28,665
[INAUDIBLE].

171
00:09:28,665 --> 00:09:37,740

172
00:09:37,740 --> 00:09:39,660
IDO GREEN: OK.

173
00:09:39,660 --> 00:09:41,737
So, let's take [INAUDIBLE].

174
00:09:41,737 --> 00:09:42,987
[INAUDIBLE].

175
00:09:42,987 --> 00:09:47,010

176
00:09:47,010 --> 00:09:48,070
IDO GREEN: Yes.

177
00:09:48,070 --> 00:09:49,330
So what we have basically--

178
00:09:49,330 --> 00:09:58,740

179
00:09:58,740 --> 00:09:59,010
[INAUDIBLE]

180
00:09:59,010 --> 00:10:05,590
let me take and show you
this quick example.

181
00:10:05,590 --> 00:10:07,845
I hope you all see my window.

182
00:10:07,845 --> 00:10:10,780

183
00:10:10,780 --> 00:10:16,170
Yeah, it's going to
be quite quick.

184
00:10:16,170 --> 00:10:20,848

185
00:10:20,848 --> 00:10:23,435
We'll reach to the part
that we want to show.

186
00:10:23,435 --> 00:10:30,126

187
00:10:30,126 --> 00:10:31,580
Yeah.

188
00:10:31,580 --> 00:10:35,080
So basically, when we are
talking about web workers, we

189
00:10:35,080 --> 00:10:38,660
have three elements that we
want to take and note.

190
00:10:38,660 --> 00:10:42,640
First is in our one-page app, in
our mobile web app, in our

191
00:10:42,640 --> 00:10:46,960
web app, we want to be able to
get out of the realm of the

192
00:10:46,960 --> 00:10:50,000
single thread that our
JavaScript engine allow us to

193
00:10:50,000 --> 00:10:53,700
do and just start a new thread
on the side, crunch some

194
00:10:53,700 --> 00:10:54,370
number there.

195
00:10:54,370 --> 00:10:57,400
It could be 3D metrics
calculation.

196
00:10:57,400 --> 00:10:59,710
It could be route calculation
on maps.

197
00:10:59,710 --> 00:11:02,350
It could be anything that right
now you're doing with

198
00:11:02,350 --> 00:11:07,570
hacks of setTimeout or things
like that and you just want to

199
00:11:07,570 --> 00:11:11,630
purely do it off the main
thread, so it will not

200
00:11:11,630 --> 00:11:14,170
interfere with the DOM, with
the window that you are

201
00:11:14,170 --> 00:11:14,800
showing the user.

202
00:11:14,800 --> 00:11:18,630
So the user won't see any
sluggishness, and everything

203
00:11:18,630 --> 00:11:20,740
will work really
nice and fast.

204
00:11:20,740 --> 00:11:26,720
So what you need to do in your
index HTML5 is just call your

205
00:11:26,720 --> 00:11:29,260
work with this constructor.

206
00:11:29,260 --> 00:11:32,280
And basically you're just
pointing to a JavaScript file

207
00:11:32,280 --> 00:11:33,700
that contain all the
logic that the

208
00:11:33,700 --> 00:11:35,610
worker itself will run.

209
00:11:35,610 --> 00:11:39,030
After that, the only two other
things is to create the

210
00:11:39,030 --> 00:11:41,130
communication channel
with the worker.

211
00:11:41,130 --> 00:11:45,710
So one, we'll just create a new
event listener and just

212
00:11:45,710 --> 00:11:50,760
hook it, so we'll be able to
send some commands, some data,

213
00:11:50,760 --> 00:11:54,900
to the worker and, of course,
get back from the worker

214
00:11:54,900 --> 00:11:56,020
information.

215
00:11:56,020 --> 00:11:58,830
In this example, I'm
just sending at the

216
00:11:58,830 --> 00:12:00,000
beginning some settings--

217
00:12:00,000 --> 00:12:03,170
so some initial agent settings,
and that's it.

218
00:12:03,170 --> 00:12:07,490
In the worker itself, what we
need to do is, of course, aid

219
00:12:07,490 --> 00:12:11,120
the event listener, so we'll
have the postmaster channel

220
00:12:11,120 --> 00:12:14,460
with our master or parent
if you will.

221
00:12:14,460 --> 00:12:17,600
Then, of course, have a main
function of doing some work.

222
00:12:17,600 --> 00:12:21,060
And here, I just choose to
put as an example JSONP.

223
00:12:21,060 --> 00:12:23,350
So it's quite powerful.

224
00:12:23,350 --> 00:12:27,620
The specification in a worker
doesn't allow you to do

225
00:12:27,620 --> 00:12:32,150
everything that you could do
today in the window of the

226
00:12:32,150 --> 00:12:33,310
main DOM object.

227
00:12:33,310 --> 00:12:35,470
But it's good enough, and
you could do quite a lot

228
00:12:35,470 --> 00:12:36,520
of things with it.

229
00:12:36,520 --> 00:12:41,150
One of them is just leveraging
the power of JSONP and just

230
00:12:41,150 --> 00:12:44,980
import scripts from the
outside world and just

231
00:12:44,980 --> 00:12:49,110
register a callback to them
to handle the work.

232
00:12:49,110 --> 00:12:52,310
And in our case, we just choose
this amazing generic

233
00:12:52,310 --> 00:12:53,710
name, handleWork.

234
00:12:53,710 --> 00:12:57,780
And here we'll just do the work
when we're getting the

235
00:12:57,780 --> 00:13:01,250
results from the callback and,
in this case, post the message

236
00:13:01,250 --> 00:13:02,910
back to the parent.

237
00:13:02,910 --> 00:13:07,060
So here it will get it again,
and it will do the right

238
00:13:07,060 --> 00:13:07,550
things with it--

239
00:13:07,550 --> 00:13:11,820
probably communicate it back
to the user with some DOM

240
00:13:11,820 --> 00:13:14,760
manipulation that reflect
the calculation that

241
00:13:14,760 --> 00:13:17,440
we did in our worker.

242
00:13:17,440 --> 00:13:21,460
Few things that are quite nice
to note and are quite

243
00:13:21,460 --> 00:13:23,570
important, actually--

244
00:13:23,570 --> 00:13:29,390
let me first just remove this
image that with my big screen

245
00:13:29,390 --> 00:13:31,350
doesn't for work well here.

246
00:13:31,350 --> 00:13:35,490
And now, when we removed it, we
could focus better on what

247
00:13:35,490 --> 00:13:36,570
we're doing here.

248
00:13:36,570 --> 00:13:41,830
So first and foremost, you
want to use Modernizr.

249
00:13:41,830 --> 00:13:47,660
Modernizr is a great framework
that basically allow you to

250
00:13:47,660 --> 00:13:50,604
make sure that you have web
worker in the browser.

251
00:13:50,604 --> 00:13:51,816
How you do that?

252
00:13:51,816 --> 00:13:59,424
After you are basically import
the Modernizr library, you

253
00:13:59,424 --> 00:14:04,780
just set up a if statement.

254
00:14:04,780 --> 00:14:07,760
And with this if statement,
everything that you do after

255
00:14:07,760 --> 00:14:10,220
that-- if it's true, of course,
letting you know that

256
00:14:10,220 --> 00:14:14,720
you do have web workers in
the specific browsers.

257
00:14:14,720 --> 00:14:16,280
How Modernizr look like?

258
00:14:16,280 --> 00:14:18,830
Well, you can find it on GitHub,
and you could check

259
00:14:18,830 --> 00:14:22,450
lot of great things that Paul
Irish, Bruce [INAUDIBLE]

260
00:14:22,450 --> 00:14:26,750
and other great contributors
are saying about it.

261
00:14:26,750 --> 00:14:32,350
The other big and major thing
about it is shared workers.

262
00:14:32,350 --> 00:14:35,820
Shared workers is basically
a web worker that could be

263
00:14:35,820 --> 00:14:38,480
shared between several
windows or tabs.

264
00:14:38,480 --> 00:14:41,940
So you can think of it as one
point of communication with

265
00:14:41,940 --> 00:14:44,500
your local database, your
local index DB.

266
00:14:44,500 --> 00:14:48,000
Or maybe if you have a database
in the cloud or some

267
00:14:48,000 --> 00:14:51,990
other logic that you want one
place to communicate with,

268
00:14:51,990 --> 00:14:54,070
that's the right location
to put it.

269
00:14:54,070 --> 00:14:57,570
And the great things about it
is that, if you'll see when

270
00:14:57,570 --> 00:15:03,650
I'm opening the Chrome DevTools,
very easily I could

271
00:15:03,650 --> 00:15:11,080
go and make sure that I will
be able to debug workers.

272
00:15:11,080 --> 00:15:11,760
And how?

273
00:15:11,760 --> 00:15:12,910
With that.

274
00:15:12,910 --> 00:15:14,100
On Source tab--

275
00:15:14,100 --> 00:15:15,200
as you saw what I did.

276
00:15:15,200 --> 00:15:16,990
I just went to the
Source tab--

277
00:15:16,990 --> 00:15:18,780
down here, we have workers.

278
00:15:18,780 --> 00:15:23,310
So like we're putting any other
break points, we could

279
00:15:23,310 --> 00:15:27,030
just mark this check box,
Impose on Start.

280
00:15:27,030 --> 00:15:30,500
And then, as I said, shared
workers will be inspected the

281
00:15:30,500 --> 00:15:33,860
Task Manager, but regular
workers like the one I showed

282
00:15:33,860 --> 00:15:35,380
will be just stopped here.

283
00:15:35,380 --> 00:15:38,220
And that's basically the example
that we start our GDL

284
00:15:38,220 --> 00:15:39,470
today with.

285
00:15:39,470 --> 00:15:41,940

286
00:15:41,940 --> 00:15:44,810
What else we could
say about it?

287
00:15:44,810 --> 00:15:46,370
Yeah, of course, we
have a link here

288
00:15:46,370 --> 00:15:48,220
to the worker itself.

289
00:15:48,220 --> 00:15:52,090
And when I clicked on it,
basically I opened another

290
00:15:52,090 --> 00:15:54,550
window that let me debug it.

291
00:15:54,550 --> 00:15:58,580
And let's close this one.

292
00:15:58,580 --> 00:16:00,790
And of course, you could have
a link here with all the

293
00:16:00,790 --> 00:16:04,870
examples that we are going on,
and I showed you it's all on

294
00:16:04,870 --> 00:16:08,870
GitHub now for free,
of course.

295
00:16:08,870 --> 00:16:11,420
So I think that's it.

296
00:16:11,420 --> 00:16:14,260
I see that we have
a few questions.

297
00:16:14,260 --> 00:16:16,400
If someone would like to
ask a question, this

298
00:16:16,400 --> 00:16:17,650
is the right time.

299
00:16:17,650 --> 00:16:22,420

300
00:16:22,420 --> 00:16:23,000
Great.

301
00:16:23,000 --> 00:16:26,780
So if there are no more
questions, let's see if we

302
00:16:26,780 --> 00:16:30,580
have some more things that
I wanted to share today.

303
00:16:30,580 --> 00:16:35,720
Let me share the screen
one more time please.

304
00:16:35,720 --> 00:16:36,790
Let's see here.

305
00:16:36,790 --> 00:16:38,900
Yeah, this is the right one.

306
00:16:38,900 --> 00:16:41,850
And this is the example of
the transferable object.

307
00:16:41,850 --> 00:16:46,390
This is the location of the
web workers examples.

308
00:16:46,390 --> 00:16:49,950
Let me make it a bit bigger.

309
00:16:49,950 --> 00:16:53,290
And the easiest way
to do it is just--

310
00:16:53,290 --> 00:16:56,762

311
00:16:56,762 --> 00:16:58,250
yeah.

312
00:16:58,250 --> 00:17:03,330
And of course you could see and
read more thoroughly what

313
00:17:03,330 --> 00:17:07,780
we covered today on my blog,
greenido.wordpress.com.

314
00:17:07,780 --> 00:17:10,720

315
00:17:10,720 --> 00:17:15,160
Let me put it just here
so you'll all see it.

316
00:17:15,160 --> 00:17:18,254
It's right here.

317
00:17:18,254 --> 00:17:24,609

318
00:17:24,609 --> 00:17:28,369
So if you'll search web workers
on this blog, you're

319
00:17:28,369 --> 00:17:32,310
probably going to see all the
different things that you

320
00:17:32,310 --> 00:17:34,350
could do with web workers.

321
00:17:34,350 --> 00:17:38,020
And until next time,
be strong and safe.

322
00:17:38,020 --> 00:17:42,383
And next week, we are going
to have here an AngularJS

323
00:17:42,383 --> 00:17:44,410
specialist, [INAUDIBLE]

324
00:17:44,410 --> 00:17:47,280
that will share with us
some of his thoughts.

325
00:17:47,280 --> 00:17:52,920
So you are most welcome to join
us in our next GDL-IL.

326
00:17:52,920 --> 00:17:56,770
It will be on next week
at 2:00 Israel time.

327
00:17:56,770 --> 00:18:00,140
And until then, see you later.

328
00:18:00,140 --> 00:18:01,390
Bye-bye, guys.

329
00:18:01,390 --> 00:18:07,552

