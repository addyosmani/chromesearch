1
00:00:00,000 --> 00:02:03,006
[MUSIC PLAYING]

2
00:02:03,006 --> 00:02:12,530

3
00:02:12,530 --> 00:02:13,520
PETE LEPAGE: Well,
hello everybody.

4
00:02:13,520 --> 00:02:14,960
I am Pete LePage.

5
00:02:14,960 --> 00:02:17,130
I'm a developer advocate
on the Chrome team.

6
00:02:17,130 --> 00:02:21,345
And today I'm joined by Paul
Kinlan in our London office.

7
00:02:21,345 --> 00:02:22,240
PAUL KINLAN: Hey, guys.

8
00:02:22,240 --> 00:02:23,070
PETE LEPAGE: Hey, Paul.

9
00:02:23,070 --> 00:02:24,192
How you doing?

10
00:02:24,192 --> 00:02:25,116
PAUL KINLAN: Yeah, I'm good.

11
00:02:25,116 --> 00:02:25,578
Thank you.

12
00:02:25,578 --> 00:02:26,040
Good, good, good.

13
00:02:26,040 --> 00:02:26,640
PETE LEPAGE: Excellent

14
00:02:26,640 --> 00:02:27,740
PAUL KINLAN: Had
yesterday off.

15
00:02:27,740 --> 00:02:29,482
Now I'm back at work.

16
00:02:29,482 --> 00:02:30,690
It's exciting times.

17
00:02:30,690 --> 00:02:31,830
PETE LEPAGE: Very nice.

18
00:02:31,830 --> 00:02:36,490
So today we want to about one
of the new Chrome Apps APIs,

19
00:02:36,490 --> 00:02:38,455
the System Info API.

20
00:02:38,455 --> 00:02:42,400
The System Info API lets you
access information about the

21
00:02:42,400 --> 00:02:47,390
system, things like the number
of CPUs, the CPU usage,

22
00:02:47,390 --> 00:02:50,450
memory, hard drive
storage space.

23
00:02:50,450 --> 00:02:53,290
There's a couple of new ones
coming that we'll talk a

24
00:02:53,290 --> 00:02:56,750
little bit about, including
display settings

25
00:02:56,750 --> 00:02:58,700
and things like that.

26
00:02:58,700 --> 00:03:01,150
These are experimental APIs.

27
00:03:01,150 --> 00:03:04,870
So right now, they're under the
experimental namespace.

28
00:03:04,870 --> 00:03:06,940
So as you're playing with them,
keep in mind that they

29
00:03:06,940 --> 00:03:07,630
may change.

30
00:03:07,630 --> 00:03:10,980
In fact, Paul you had mentioned
the display one.

31
00:03:10,980 --> 00:03:13,130
I hadn't found that earlier,
but you found it, right?

32
00:03:13,130 --> 00:03:15,770
PAUL KINLAN: Yeah, I was
searching through the Docs

33
00:03:15,770 --> 00:03:19,200
site that we've got where
I was looking for--

34
00:03:19,200 --> 00:03:20,850
because we don't necessarily
always link to the latest

35
00:03:20,850 --> 00:03:24,260
trunk at the moment from
the documentation.

36
00:03:24,260 --> 00:03:26,155
So I was looking through the
search, and the search turned

37
00:03:26,155 --> 00:03:28,370
up display settings.

38
00:03:28,370 --> 00:03:32,620
And I was like, that's not
linked from anywhere.

39
00:03:32,620 --> 00:03:35,110
So it's like so early on
it's kind of exciting.

40
00:03:35,110 --> 00:03:38,330
So we're finding more APIs as
they come along, as well.

41
00:03:38,330 --> 00:03:40,290
PETE LEPAGE: Yeah, so the
documentation link is up there

42
00:03:40,290 --> 00:03:42,980
on the screen, so you can go
have a look at the couple of

43
00:03:42,980 --> 00:03:45,450
things that are documented
right now.

44
00:03:45,450 --> 00:03:48,840
There are two pieces that are
definitely there documented.

45
00:03:48,840 --> 00:03:52,170
There's a third one that we'll
talk about in our demo today

46
00:03:52,170 --> 00:03:54,410
that's not documented.

47
00:03:54,410 --> 00:03:56,590
And I'll explain a little
bit about that one.

48
00:03:56,590 --> 00:03:59,440
But let's jump in and have
a quick look at the demo.

49
00:03:59,440 --> 00:04:01,660
If we could bring
my screen up.

50
00:04:01,660 --> 00:04:04,890
I'm going to bring up this
little app that I wrote

51
00:04:04,890 --> 00:04:06,490
earlier today.

52
00:04:06,490 --> 00:04:09,770
And we'll link to the source
code here in a little bit, but

53
00:04:09,770 --> 00:04:11,700
for now I'll just show you a
couple of things that are

54
00:04:11,700 --> 00:04:14,560
available through the
System Info API.

55
00:04:14,560 --> 00:04:17,540
So first off, you can get
information about the system

56
00:04:17,540 --> 00:04:18,200
architecture.

57
00:04:18,200 --> 00:04:23,010
So what type of CPU is in there,
what the model is.

58
00:04:23,010 --> 00:04:26,880
So you can see on my Mac that
I'm running here, I've got a

59
00:04:26,880 --> 00:04:29,610
Core i7 running at about two
gigahertz with eight

60
00:04:29,610 --> 00:04:31,540
processors.

61
00:04:31,540 --> 00:04:34,870
I was trying this earlier on
a Chromebook to make sure

62
00:04:34,870 --> 00:04:37,620
everything worked OK, and
I got a different set of

63
00:04:37,620 --> 00:04:38,890
information here.

64
00:04:38,890 --> 00:04:43,160
So you can see what's going
on within the processor.

65
00:04:43,160 --> 00:04:45,490
I also can get the CPU usage.

66
00:04:45,490 --> 00:04:49,990
So I know how much of my
CPU is being used.

67
00:04:49,990 --> 00:04:51,981
Right now, the computer's not
really doing a whole heck of a

68
00:04:51,981 --> 00:04:55,230
lot, so you can see that my
numbers are nice and low here.

69
00:04:55,230 --> 00:04:57,870

70
00:04:57,870 --> 00:05:01,110
Next piece is the memory
information.

71
00:05:01,110 --> 00:05:03,140
Memory information--

72
00:05:03,140 --> 00:05:05,980
I've just got this set
statically right now.

73
00:05:05,980 --> 00:05:09,550
But it's showing me that the
available memory that I've got

74
00:05:09,550 --> 00:05:12,820
on my computer, the maximum
capacity, and how much is

75
00:05:12,820 --> 00:05:15,320
left, how much is
not being used.

76
00:05:15,320 --> 00:05:17,170
So you can see I've got
about 8 gigs of

77
00:05:17,170 --> 00:05:19,140
memory in this computer.

78
00:05:19,140 --> 00:05:21,980
I'm using about 5 and
1/2, I think.

79
00:05:21,980 --> 00:05:24,860
So I've got about
2 and 1/2 left.

80
00:05:24,860 --> 00:05:29,020
And then, finally, the third one
is the storage capacity.

81
00:05:29,020 --> 00:05:31,910
And this goes off and lists the
number of hard drives that

82
00:05:31,910 --> 00:05:35,550
you have available, the total
capacity of the hard drive,

83
00:05:35,550 --> 00:05:39,620
and the available space.

84
00:05:39,620 --> 00:05:41,370
So those are the three pieces.

85
00:05:41,370 --> 00:05:43,610
And then as Paul mentioned,
there's also the display

86
00:05:43,610 --> 00:05:44,720
capabilities.

87
00:05:44,720 --> 00:05:48,040
The display capabilities I
didn't get in here because

88
00:05:48,040 --> 00:05:49,690
we're pretty sure
it just landed.

89
00:05:49,690 --> 00:05:53,280
We can have a look here in a
minute and see if it's in

90
00:05:53,280 --> 00:05:57,920
Chromium or where it is.

91
00:05:57,920 --> 00:06:01,690
But let's take a look
at the code and see

92
00:06:01,690 --> 00:06:03,150
how this is all working.

93
00:06:03,150 --> 00:06:05,260
So I'm going to bring
up the sample.

94
00:06:05,260 --> 00:06:09,905
And you can see on the screen
right now there's a link to a

95
00:06:09,905 --> 00:06:11,170
GitHub repository.

96
00:06:11,170 --> 00:06:15,880
This is the link to the
repository that I wrote

97
00:06:15,880 --> 00:06:17,730
earlier this morning.

98
00:06:17,730 --> 00:06:20,070
You can also go get
the one out of the

99
00:06:20,070 --> 00:06:23,110
Chrome Apps sample directory.

100
00:06:23,110 --> 00:06:30,500
That one, the code on it, Paul,
you described it well.

101
00:06:30,500 --> 00:06:37,270
It's maybe not the best sample
code to use, because sample

102
00:06:37,270 --> 00:06:40,690
code really should be written
reasonably well and follow

103
00:06:40,690 --> 00:06:43,640
best practices, and
this may be--

104
00:06:43,640 --> 00:06:45,190
PAUL KINLAN: Yeah, we need
to get that one fixed.

105
00:06:45,190 --> 00:06:47,170
I'll take full responsibility
in the fact that I actually

106
00:06:47,170 --> 00:06:50,230
merged that one in.

107
00:06:50,230 --> 00:06:52,520
So basically, this actual
system info API has been

108
00:06:52,520 --> 00:06:54,810
worked on by some of
the guys at Intel.

109
00:06:54,810 --> 00:06:58,670
And basically, it landed, and we
didn't have any samples for

110
00:06:58,670 --> 00:07:01,580
it, so I went asking
to do samples.

111
00:07:01,580 --> 00:07:02,820
Yeah, I was in a
bit of a rush.

112
00:07:02,820 --> 00:07:06,330
And I checked it, it looked
OK, it worked.

113
00:07:06,330 --> 00:07:09,355
And then we came back to it
today to say we're going to

114
00:07:09,355 --> 00:07:12,710
show developers'
best practices.

115
00:07:12,710 --> 00:07:14,380
Let's show them something
really cool.

116
00:07:14,380 --> 00:07:16,180
And it needs a little
bit of work.

117
00:07:16,180 --> 00:07:18,782
It's actually a great sample,
it's probably not the best one

118
00:07:18,782 --> 00:07:20,600
to show off live.

119
00:07:20,600 --> 00:07:25,760
PETE LEPAGE: Yeah, so
we'll take a look.

120
00:07:25,760 --> 00:07:29,350
Here's the code for the one that
I wrote, which is up and

121
00:07:29,350 --> 00:07:31,250
available on my GitHub
repository.

122
00:07:31,250 --> 00:07:32,960
But there's a couple of
things in here that

123
00:07:32,960 --> 00:07:33,740
I'll just point out.

124
00:07:33,740 --> 00:07:37,090
It's just sort of
standard HTML.

125
00:07:37,090 --> 00:07:40,450
I've got some tables in here for
some of the data so that,

126
00:07:40,450 --> 00:07:42,480
for example, if you've got
multiple hard drives, we want

127
00:07:42,480 --> 00:07:45,940
to be able to have multiple
hard drives listed.

128
00:07:45,940 --> 00:07:51,060
Have a look at my main JS, so
this is the place that brings

129
00:07:51,060 --> 00:07:52,710
up the app.

130
00:07:52,710 --> 00:07:54,100
Pretty standard stuff here.

131
00:07:54,100 --> 00:07:56,300
We're used to all of these
normal things.

132
00:07:56,300 --> 00:07:58,990
There's one that we don't talk
about a lot, and I'd like to

133
00:07:58,990 --> 00:07:59,990
toss this one here.

134
00:07:59,990 --> 00:08:03,470
This is one I think is really
useful to toss in is the ID.

135
00:08:03,470 --> 00:08:07,945
If you put an ID into your
Chrome packaged app manifest

136
00:08:07,945 --> 00:08:12,810
on the onLaunched call, what
that does is that'll help

137
00:08:12,810 --> 00:08:14,720
Chrome remember where
that window is.

138
00:08:14,720 --> 00:08:17,630
So if you close the window and
reopen it, or if you resize

139
00:08:17,630 --> 00:08:19,580
it, it'll come back
to the same place.

140
00:08:19,580 --> 00:08:22,480
If you don't put it in there,
it's not going to reopen to

141
00:08:22,480 --> 00:08:23,916
the same place.

142
00:08:23,916 --> 00:08:25,750
PAUL KINLAN: Yeah, the other
cool thing to point out about

143
00:08:25,750 --> 00:08:28,480
that as well, it also acts
as a singleton as well.

144
00:08:28,480 --> 00:08:30,456
So in theory, you can't open
any more windows now that

145
00:08:30,456 --> 00:08:32,880
you've returned and referenced
the original window, if you're

146
00:08:32,880 --> 00:08:34,390
trying to open the same
window twice.

147
00:08:34,390 --> 00:08:34,880
PETE LEPAGE: Oh, perfect.

148
00:08:34,880 --> 00:08:35,580
OK.

149
00:08:35,580 --> 00:08:37,419
PAUL KINLAN: It's only
relatively recently that came

150
00:08:37,419 --> 00:08:37,870
in as well.

151
00:08:37,870 --> 00:08:39,200
So it's kind of cool.

152
00:08:39,200 --> 00:08:39,400
PETE LEPAGE: OK.

153
00:08:39,400 --> 00:08:40,130
PAUL KINLAN: It's kind
of nice, as well.

154
00:08:40,130 --> 00:08:42,320
PETE LEPAGE: Excellent.

155
00:08:42,320 --> 00:08:45,960
So in the manifest, manifest
is pretty much the standard

156
00:08:45,960 --> 00:08:47,590
manifest that we're used
to looking at.

157
00:08:47,590 --> 00:08:50,460
But there's one thing that I
added in here, and that's the

158
00:08:50,460 --> 00:08:53,530
experimental API permission.

159
00:08:53,530 --> 00:08:56,150
Because right now, like
I said, this is under

160
00:08:56,150 --> 00:08:59,360
experimental, so we need to make
sure that we are asking

161
00:08:59,360 --> 00:09:00,790
for experimental.

162
00:09:00,790 --> 00:09:02,690
That does mean you can't
upload this to

163
00:09:02,690 --> 00:09:03,510
the Chrome Web Store.

164
00:09:03,510 --> 00:09:06,810
I tried to upload it earlier
thinking, huh, let's see if I

165
00:09:06,810 --> 00:09:09,440
can get it up there so that you
guys could download it and

166
00:09:09,440 --> 00:09:11,690
play with it as we're
talking about it.

167
00:09:11,690 --> 00:09:15,030
And I was thinking, well, maybe
because I'm a Googler I

168
00:09:15,030 --> 00:09:15,640
can get it in.

169
00:09:15,640 --> 00:09:16,570
Yeah, no.

170
00:09:16,570 --> 00:09:19,770
And, of course, my pet peeve, it
doesn't tell you until you

171
00:09:19,770 --> 00:09:20,880
go to hit Publish.

172
00:09:20,880 --> 00:09:22,230
And then it's like, ah!

173
00:09:22,230 --> 00:09:23,580
[MOCKING LAUGH]

174
00:09:23,580 --> 00:09:27,100
So, in any event, you need to
ask for the experimental

175
00:09:27,100 --> 00:09:28,480
permission.

176
00:09:28,480 --> 00:09:33,770
So let's go have a look at the
code that we've got in here.

177
00:09:33,770 --> 00:09:37,630
I've just taken the system info,
created a variable that

178
00:09:37,630 --> 00:09:41,220
I've shortened down to the
chrome.experimental.systemInfo

179
00:09:41,220 --> 00:09:44,090
API just so that I would save a
little bit of typing and all

180
00:09:44,090 --> 00:09:45,350
that kind of stuff.

181
00:09:45,350 --> 00:09:48,640
And on my ("document").ready,
I go do a couple of things.

182
00:09:48,640 --> 00:09:51,520
So I call updateCPU,
updateMemory, and

183
00:09:51,520 --> 00:09:52,550
updateStorage.

184
00:09:52,550 --> 00:09:54,550
We'll have a look at
those in a sec.

185
00:09:54,550 --> 00:09:56,660
And then I added a listener.

186
00:09:56,660 --> 00:10:00,160
So, like I said, there are
three different APIs

187
00:10:00,160 --> 00:10:01,130
that you can call.

188
00:10:01,130 --> 00:10:05,350
So systemInfo.cpu.get
will go and get the

189
00:10:05,350 --> 00:10:06,860
information about the CPU.

190
00:10:06,860 --> 00:10:09,470

191
00:10:09,470 --> 00:10:12,190
Let's take a dive into that
right off the bat.

192
00:10:12,190 --> 00:10:16,230
So I just do a console log so
we can see what's going on,

193
00:10:16,230 --> 00:10:18,840
but I say CPU architecture
is CPU dot

194
00:10:18,840 --> 00:10:22,770
architecture name, or archName.

195
00:10:22,770 --> 00:10:27,190
The model is just the model
and number of processors.

196
00:10:27,190 --> 00:10:31,620
And that's basically all that
we get back when we ask for

197
00:10:31,620 --> 00:10:37,420
the GET for the CPU Info API.

198
00:10:37,420 --> 00:10:39,270
So we get three parameters
back--

199
00:10:39,270 --> 00:10:42,395
the model, the architecture, and
the number of processors.

200
00:10:42,395 --> 00:10:45,150

201
00:10:45,150 --> 00:10:47,690
The second one is memory.

202
00:10:47,690 --> 00:10:50,530
And memory gives you the amount
of available memory

203
00:10:50,530 --> 00:10:52,360
that you have on your
computer and the

204
00:10:52,360 --> 00:10:54,330
amount of total memory.

205
00:10:54,330 --> 00:10:57,500
So if we go and have a
look at updateMemory.

206
00:10:57,500 --> 00:11:00,370
So systemInfo, memory.get.

207
00:11:00,370 --> 00:11:05,280
And again, like most Chrome
packaged apps APIs

208
00:11:05,280 --> 00:11:07,090
it uses a call back.

209
00:11:07,090 --> 00:11:11,960
So updateMemoryInfo, so if we
go to updateMemoryInfo, sure

210
00:11:11,960 --> 00:11:14,000
enough, here it is.

211
00:11:14,000 --> 00:11:16,170
We've got a couple of things in
here that I'll point out.

212
00:11:16,170 --> 00:11:18,780
So, again, I just do that
console log because I always

213
00:11:18,780 --> 00:11:23,820
like to see when I'm debugging
things what's going on.

214
00:11:23,820 --> 00:11:29,450
I say Math.round
memory.capacity, which is the

215
00:11:29,450 --> 00:11:34,170
total capacity of my memory,
divided by 1024 by 1024, so I

216
00:11:34,170 --> 00:11:36,720
can get it in megabytes, because
it gives you the

217
00:11:36,720 --> 00:11:38,550
information back in bytes.

218
00:11:38,550 --> 00:11:41,660
And then I just tack
on some megabyte.

219
00:11:41,660 --> 00:11:44,730
And, again, same thing here
for the second line,

220
00:11:44,730 --> 00:11:49,620
memory.availablecapacity gives
me the available capacity--

221
00:11:49,620 --> 00:11:51,290
the amount of memory left.

222
00:11:51,290 --> 00:11:56,030
So if we go and pop over,
here we go, let's

223
00:11:56,030 --> 00:11:58,400
bring this guy up.

224
00:11:58,400 --> 00:12:00,530
PAUL KINLAN: Does the memory
information update in real

225
00:12:00,530 --> 00:12:02,830
time or is there a gap?

226
00:12:02,830 --> 00:12:04,190
PETE LEPAGE: Yeah, that's
a good question, Paul.

227
00:12:04,190 --> 00:12:06,930
Memory information does not
update in real time.

228
00:12:06,930 --> 00:12:10,590
In fact, unless you specifically
add an event

229
00:12:10,590 --> 00:12:12,360
listener, and we'll talk about
where you can do that in a

230
00:12:12,360 --> 00:12:14,310
sec, none of these update
in real time.

231
00:12:14,310 --> 00:12:19,440
It's just a single "get this
piece of information and do

232
00:12:19,440 --> 00:12:24,000
something with it." So the
CPU information, memory

233
00:12:24,000 --> 00:12:28,180
information, and the list of
hard drives that you have

234
00:12:28,180 --> 00:12:33,140
available on your computer
are all just based on

235
00:12:33,140 --> 00:12:36,110
a single GET request.

236
00:12:36,110 --> 00:12:39,500
So you can see here that I've
got the eight and that.

237
00:12:39,500 --> 00:12:44,260
So let's go back over to the
code here for a sec.

238
00:12:44,260 --> 00:12:47,260
So then the third one we've got
is updateStorage, so if we

239
00:12:47,260 --> 00:12:48,770
have a look at updateStorage.

240
00:12:48,770 --> 00:12:53,820
Again, same thing, notice it's
systemInfo.storage.get and,

241
00:12:53,820 --> 00:12:57,210
again, that callback that goes
and does the callback.

242
00:12:57,210 --> 00:13:01,410
So if we go and look at
updateStorageInfo and have a

243
00:13:01,410 --> 00:13:02,270
quick peek at that.

244
00:13:02,270 --> 00:13:06,690
Again, for the storage info,
what I'm doing is basically

245
00:13:06,690 --> 00:13:09,620
creating a bunch of
rows in my table.

246
00:13:09,620 --> 00:13:13,040
So I go and grab my table body,
go through each of the

247
00:13:13,040 --> 00:13:18,530
drives that I've got, and add
something for the drive ID,

248
00:13:18,530 --> 00:13:22,230
for the drive type, the drive
capacity, and the drive

249
00:13:22,230 --> 00:13:23,860
available capacity.

250
00:13:23,860 --> 00:13:26,400
Now, one of the things you're
going to want to do when you

251
00:13:26,400 --> 00:13:29,280
play with this as you look
around at some of these is

252
00:13:29,280 --> 00:13:32,520
test this on a couple of
different platforms.

253
00:13:32,520 --> 00:13:35,020
This is experimental right now,
so you want to try it in

254
00:13:35,020 --> 00:13:36,040
a couple of different places.

255
00:13:36,040 --> 00:13:39,100
Once we get this out of
experimental, I don't think

256
00:13:39,100 --> 00:13:40,790
you're going to need
to do that.

257
00:13:40,790 --> 00:13:46,010
The reason why I say you need
to check this is today the

258
00:13:46,010 --> 00:13:49,890
storage info, if you request
that on a Chrome OS or a

259
00:13:49,890 --> 00:13:53,255
Chromebook, it returns undefined
there because while

260
00:13:53,255 --> 00:13:57,460
the machine has a hard drive and
storage space, it doesn't

261
00:13:57,460 --> 00:14:00,120
really have the storage space in
the same way that we think

262
00:14:00,120 --> 00:14:03,050
about storage space
on a regular

263
00:14:03,050 --> 00:14:04,710
laptop or other device.

264
00:14:04,710 --> 00:14:08,400
And as we move into looking at
how some of these apps run on

265
00:14:08,400 --> 00:14:13,450
mobile devices, whether that's
a tablet, a phone, again,

266
00:14:13,450 --> 00:14:15,190
that's going to be something
a little different.

267
00:14:15,190 --> 00:14:17,570
So you're going to need to
handle a couple of different

268
00:14:17,570 --> 00:14:22,530
behaviors in here on some
of these things.

269
00:14:22,530 --> 00:14:23,740
Go ahead, Paul.

270
00:14:23,740 --> 00:14:24,720
PAUL KINLAN: Yeah, I was going
to say just a note as well.

271
00:14:24,720 --> 00:14:27,850
The [? type ?] can include
removable, as well.

272
00:14:27,850 --> 00:14:31,470
So you can have removable
storage, so if it's a USB

273
00:14:31,470 --> 00:14:33,316
drive, [INAUDIBLE] understand
whether

274
00:14:33,316 --> 00:14:35,940
that's attached or not.

275
00:14:35,940 --> 00:14:37,714
I'm yet to actually see
that working though.

276
00:14:37,714 --> 00:14:39,045
But that's not to say it
doesn't, because I haven't put

277
00:14:39,045 --> 00:14:40,400
the USB drive in.

278
00:14:40,400 --> 00:14:44,125
PETE LEPAGE: Yeah, so I tried
that earlier today with a CF

279
00:14:44,125 --> 00:14:47,310
card and inserted and
removed a CF card--

280
00:14:47,310 --> 00:14:50,560
and let me just bring up
the sample again here.

281
00:14:50,560 --> 00:14:56,260
Notice how here it says
"harddisk." When I inserted a

282
00:14:56,260 --> 00:15:00,470
CF card and refreshed, it
said "removable." But,

283
00:15:00,470 --> 00:15:05,400
unfortunately, the API didn't
come back and automatically

284
00:15:05,400 --> 00:15:07,310
say, hey, there's something
new there.

285
00:15:07,310 --> 00:15:12,040
Now, that's kind of OK
because right now--

286
00:15:12,040 --> 00:15:14,810
remember this was just that
single, one-time GET.

287
00:15:14,810 --> 00:15:17,420
If I did another GET,
it would show up.

288
00:15:17,420 --> 00:15:19,950
So there was no notification
because I wasn't listening for

289
00:15:19,950 --> 00:15:22,340
anything at the time.

290
00:15:22,340 --> 00:15:23,460
PAUL KINLAN: That's kind of
interesting [? enough ?] to me

291
00:15:23,460 --> 00:15:28,380
because obviously we've got
the Media Gallery API, and

292
00:15:28,380 --> 00:15:30,960
right now we don't have a device
attached to them, which

293
00:15:30,960 --> 00:15:32,040
I think would be really
cool to have.

294
00:15:32,040 --> 00:15:34,530
I know we were talking about
it a while ago, especially

295
00:15:34,530 --> 00:15:37,410
with the [INAUDIBLE] work.

296
00:15:37,410 --> 00:15:39,000
It'd be nice to have a device
attached to them.

297
00:15:39,000 --> 00:15:40,990
And in lieu of that, you could
basically look through the

298
00:15:40,990 --> 00:15:43,270
types of devices that
are attached.

299
00:15:43,270 --> 00:15:46,160
Removable can say, hey, look
you've attached removable

300
00:15:46,160 --> 00:15:48,410
storage, if you want to go and
scan the pictures, at least.

301
00:15:48,410 --> 00:15:49,760
And then you can hook
that in with the

302
00:15:49,760 --> 00:15:51,230
Media Gallery API then.

303
00:15:51,230 --> 00:15:52,520
PETE LEPAGE: Exactly, exactly.

304
00:15:52,520 --> 00:15:53,380
PAUL KINLAN: It seems like
a pretty nice way

305
00:15:53,380 --> 00:15:54,250
to work around that.

306
00:15:54,250 --> 00:15:54,940
PETE LEPAGE: Yeah.

307
00:15:54,940 --> 00:15:56,600
Yeah, and I don't think
it would be a

308
00:15:56,600 --> 00:16:00,400
terribly hard thing because--

309
00:16:00,400 --> 00:16:02,700
I'll pop into this right
now, if I pop

310
00:16:02,700 --> 00:16:03,950
back over to the code--

311
00:16:03,950 --> 00:16:06,890

312
00:16:06,890 --> 00:16:09,707
if you have a look, I've got
this systemInfo.cpu.o

313
00:16:09,707 --> 00:16:10,957
nUpdated.addListener.

314
00:16:10,957 --> 00:16:14,320

315
00:16:14,320 --> 00:16:19,310
So this says, hey, any
time the CPU is

316
00:16:19,310 --> 00:16:21,070
updated, add an event.

317
00:16:21,070 --> 00:16:25,400
There's a similar event for
storage that you can say, hey,

318
00:16:25,400 --> 00:16:29,700
I want to listen for changes
in my storage

319
00:16:29,700 --> 00:16:31,320
drive available size.

320
00:16:31,320 --> 00:16:35,080
Now, I don't have that
one in here.

321
00:16:35,080 --> 00:16:39,240
Though, let me actually bring up
a place where we do have it

322
00:16:39,240 --> 00:16:40,700
so that you can just see.

323
00:16:40,700 --> 00:16:45,930
Again, this is in the sample
that is up in the GitHub

324
00:16:45,930 --> 00:16:49,730
repository for the team.

325
00:16:49,730 --> 00:16:55,330
And you'll see here in a sec
why this is a little bit

326
00:16:55,330 --> 00:16:55,940
frightening.

327
00:16:55,940 --> 00:16:59,000
But startMonitor, so we
do systemInfo.stora

328
00:16:59,000 --> 00:17:04,480
ge.onAvailableCa
pacityChanged.addListener so

329
00:17:04,480 --> 00:17:07,569
that you can go in and say,
hey, I want to be able to

330
00:17:07,569 --> 00:17:11,050
listen for changes
to the available

331
00:17:11,050 --> 00:17:14,109
drive capacity changes.

332
00:17:14,109 --> 00:17:15,591
PAUL KINLAN: When does
that change?

333
00:17:15,591 --> 00:17:19,950
I mean, is that when you format
a drive or something?

334
00:17:19,950 --> 00:17:23,630
PETE LEPAGE: That event fires
any time that the available

335
00:17:23,630 --> 00:17:25,880
hard drive space changes.

336
00:17:25,880 --> 00:17:30,600
Now, that could mean maybe you
saved a file to the disk.

337
00:17:30,600 --> 00:17:36,850
Maybe the system has written
something in terms of like

338
00:17:36,850 --> 00:17:40,440
some other app's saved to
disk, your paging files

339
00:17:40,440 --> 00:17:41,590
changed size.

340
00:17:41,590 --> 00:17:45,180
So it's not the most useful
thing right now because it's

341
00:17:45,180 --> 00:17:48,650
going to fire left, right,
center, up, down, three ways

342
00:17:48,650 --> 00:17:49,240
until Sunday.

343
00:17:49,240 --> 00:17:53,090
As I was just writing some of
this app earlier, it was like

344
00:17:53,090 --> 00:17:56,650
changing seven times.

345
00:17:56,650 --> 00:18:02,310
So maybe not the most useful
thing, but still good to have.

346
00:18:02,310 --> 00:18:07,090
So you can see here I've also
added a system info on updated

347
00:18:07,090 --> 00:18:11,110
add listener for the
CPUUsageChanged.

348
00:18:11,110 --> 00:18:15,580
And that's going to fire every
time the usage on the CPU

349
00:18:15,580 --> 00:18:19,380
changes, so if I may be using
more CPU for processing or

350
00:18:19,380 --> 00:18:20,430
something like that.

351
00:18:20,430 --> 00:18:25,840
And that's why you get these
values here are changing.

352
00:18:25,840 --> 00:18:30,220
So if I inspect this element,
and will have a look at the

353
00:18:30,220 --> 00:18:34,550
console here, I don't have this
firing off right now with

354
00:18:34,550 --> 00:18:35,150
each change.

355
00:18:35,150 --> 00:18:38,270
So let's go and add that
in so that you

356
00:18:38,270 --> 00:18:39,360
can see what's happening.

357
00:18:39,360 --> 00:18:43,020
So update, update storage.

358
00:18:43,020 --> 00:18:47,390
So here we go.

359
00:18:47,390 --> 00:18:51,470
We've got the onCPUUsageChanged,
I'm just

360
00:18:51,470 --> 00:18:52,720
going to do a console.log(info).

361
00:18:52,720 --> 00:18:55,580

362
00:18:55,580 --> 00:19:00,010
And now we'll pop
back over here.

363
00:19:00,010 --> 00:19:08,040
If we reload the app, notice
we've got this log fire.

364
00:19:08,040 --> 00:19:10,730
So we get the average
usage, and we

365
00:19:10,730 --> 00:19:12,210
get a usage per processor.

366
00:19:12,210 --> 00:19:17,560
And that's a list, an array
of the amount of

367
00:19:17,560 --> 00:19:20,490
usage for each processor.

368
00:19:20,490 --> 00:19:23,960
And I'm just doing a little bit
of math to go and display

369
00:19:23,960 --> 00:19:26,350
these things.

370
00:19:26,350 --> 00:19:28,720
PAUL KINLAN: Just a quick one,
we've had a question on one of

371
00:19:28,720 --> 00:19:32,040
the Google+ posts from
Francois Beaufort.

372
00:19:32,040 --> 00:19:37,050

373
00:19:37,050 --> 00:19:41,492
What does Chrome OS is not the
same for storage info?

374
00:19:41,492 --> 00:19:43,540
Can you ask Pete to elaborate?

375
00:19:43,540 --> 00:19:45,280
PETE LEPAGE: Yes, certainly.

376
00:19:45,280 --> 00:19:50,770
So earlier today when I tried
this on Chrome OS, what I got

377
00:19:50,770 --> 00:19:54,400
back from the-- let me just
bring up the code here so I

378
00:19:54,400 --> 00:19:55,650
can show you.

379
00:19:55,650 --> 00:19:57,930

380
00:19:57,930 --> 00:20:00,680
Where is it?

381
00:20:00,680 --> 00:20:05,887
So here in the updateStorageInfo
method where

382
00:20:05,887 --> 00:20:07,340
it's the callback--

383
00:20:07,340 --> 00:20:09,660
so this is where I'm
handling the

384
00:20:09,660 --> 00:20:12,590
different storage devices--

385
00:20:12,590 --> 00:20:19,580
instead of getting back in an
array of the different hard

386
00:20:19,580 --> 00:20:24,220
drives that are available to
me, I got back undefined,

387
00:20:24,220 --> 00:20:27,550
which Chrome is coming back and
saying, hey, there are no

388
00:20:27,550 --> 00:20:29,010
hard drives in this computer.

389
00:20:29,010 --> 00:20:33,170
And rather than giving an array
of length zero, it gave

390
00:20:33,170 --> 00:20:35,620
an undefined.

391
00:20:35,620 --> 00:20:40,290
And so right now it's just
not returning anything.

392
00:20:40,290 --> 00:20:42,540
Personally, I think that's a
bug, and I think we should be

393
00:20:42,540 --> 00:20:46,920
returning an array of length
zero if there is no storage

394
00:20:46,920 --> 00:20:50,825
devices available to
the application.

395
00:20:50,825 --> 00:20:53,510

396
00:20:53,510 --> 00:20:54,750
That's what's going on.

397
00:20:54,750 --> 00:20:55,710
Go ahead.

398
00:20:55,710 --> 00:20:57,210
PAUL KINLAN: Yeah, I agree.

399
00:20:57,210 --> 00:20:57,820
I think it's a bug.

400
00:20:57,820 --> 00:21:00,430
But at the same time, I think
some of the concept behind

401
00:21:00,430 --> 00:21:04,120
Chrome OS, as well, is that
you should [INAUDIBLE].

402
00:21:04,120 --> 00:21:04,710
PETE LEPAGE: Exactly.

403
00:21:04,710 --> 00:21:06,010
PAUL KINLAN: It doesn't
make that much sense.

404
00:21:06,010 --> 00:21:07,810
I don't know what it would be
like if you plugged a USB

405
00:21:07,810 --> 00:21:11,650
device in, like a
storage device.

406
00:21:11,650 --> 00:21:13,330
Regardless, it seems
like a bug.

407
00:21:13,330 --> 00:21:16,450
Like Pete said, we'd expect
it to return zero, zero

408
00:21:16,450 --> 00:21:18,320
[INAUDIBLE], for instance.

409
00:21:18,320 --> 00:21:22,025
So I think that's to clarify
what Pete was

410
00:21:22,025 --> 00:21:23,010
talking about before.

411
00:21:23,010 --> 00:21:24,390
PETE LEPAGE: Exactly.

412
00:21:24,390 --> 00:21:30,600
So if we can actually bring up
the link to Moderator so that

413
00:21:30,600 --> 00:21:33,830
if people have questions they
can post your questions there

414
00:21:33,830 --> 00:21:34,780
on Google Moderator.

415
00:21:34,780 --> 00:21:37,270
We'll start taking those
questions here in

416
00:21:37,270 --> 00:21:39,060
two or three minutes.

417
00:21:39,060 --> 00:21:43,170
But the key thing to keep in
mind here is this is a cool,

418
00:21:43,170 --> 00:21:45,990
easy way to get the information
you need about

419
00:21:45,990 --> 00:21:50,100
what type of CPU is in the
machine, how busy the computer

420
00:21:50,100 --> 00:21:52,700
is, how much memory is
available, and how much

421
00:21:52,700 --> 00:21:54,510
storage space is available.

422
00:21:54,510 --> 00:21:57,020
I think for the most part, the
storage space is going to be

423
00:21:57,020 --> 00:22:01,480
the most interesting and most
useful to people, because as a

424
00:22:01,480 --> 00:22:04,180
developer writing an
application, I'm not sure I

425
00:22:04,180 --> 00:22:08,990
really need or really care what
platform that I'm on or

426
00:22:08,990 --> 00:22:11,740
necessarily how much memory
is available.

427
00:22:11,740 --> 00:22:14,570
I might want that information
to report back for analytics

428
00:22:14,570 --> 00:22:17,950
or something like that, but
it's not really going to

429
00:22:17,950 --> 00:22:21,630
change the way that I deal
with a lot of stuff.

430
00:22:21,630 --> 00:22:26,110
One way that I might use it is
determining where I want to do

431
00:22:26,110 --> 00:22:28,060
some of my processing.

432
00:22:28,060 --> 00:22:30,720
If I'm writing an image-editing
app and I've got

433
00:22:30,720 --> 00:22:34,350
some pretty heavy processing
that I'm going to do, I might

434
00:22:34,350 --> 00:22:36,460
push that up to the server
to do if I've

435
00:22:36,460 --> 00:22:38,940
got a low-end machine.

436
00:22:38,940 --> 00:22:41,770
But that's going to depend on
a couple of other things.

437
00:22:41,770 --> 00:22:43,550
PAUL KINLAN: That's actually
not a bad idea.

438
00:22:43,550 --> 00:22:45,950
It's kind of hard to work out
whether you want to do things

439
00:22:45,950 --> 00:22:48,520
locally or not, and it's kind
of interesting to see where

440
00:22:48,520 --> 00:22:52,240
that's going to change with the
number of processes and

441
00:22:52,240 --> 00:22:53,350
everything.

442
00:22:53,350 --> 00:22:56,620
But, for me, some of the areas
that I'm kind of interested in

443
00:22:56,620 --> 00:22:59,387
is you might be able to see
when a web worker, for

444
00:22:59,387 --> 00:23:01,260
instance, that you have gets
pushed on to another thread

445
00:23:01,260 --> 00:23:04,930
and you can see that it's
not on your main thread.

446
00:23:04,930 --> 00:23:09,030
But from an actual usage, giving
it to users, they might

447
00:23:09,030 --> 00:23:10,430
want to know how busy
their CPU is.

448
00:23:10,430 --> 00:23:11,630
They're actually insanely
popular

449
00:23:11,630 --> 00:23:13,720
tools on other platforms.

450
00:23:13,720 --> 00:23:15,040
PETE LEPAGE: Yeah,
that's true.

451
00:23:15,040 --> 00:23:16,660
PAUL KINLAN: Just
to see how much

452
00:23:16,660 --> 00:23:18,730
processing is getting used.

453
00:23:18,730 --> 00:23:22,680
I'm always kind of a little
wary because by virtue of

454
00:23:22,680 --> 00:23:26,000
using the API, it means that
you're using the CPU.

455
00:23:26,000 --> 00:23:26,720
PETE LEPAGE: Exactly.

456
00:23:26,720 --> 00:23:29,390
It's sort of that, well, if
you're going to measure it,

457
00:23:29,390 --> 00:23:31,800
you're going to affect the
measurement of it.

458
00:23:31,800 --> 00:23:33,910
It's always that fun
little piece.

459
00:23:33,910 --> 00:23:34,380
I think there's a pact.

460
00:23:34,380 --> 00:23:36,510
PAUL KINLAN: I can see a lot of
apps coming out like basic,

461
00:23:36,510 --> 00:23:40,890
nice, HTML-based site, like
storage space site stuff, you

462
00:23:40,890 --> 00:23:44,730
got the number of CPU processes
you've got.

463
00:23:44,730 --> 00:23:46,325
I mean, there's a whole
load of stuff.

464
00:23:46,325 --> 00:23:48,640
We haven't even got CPU
temperature in or a whole

465
00:23:48,640 --> 00:23:49,350
other bit of metrics.

466
00:23:49,350 --> 00:23:50,860
PETE LEPAGE: Absolutely.

467
00:23:50,860 --> 00:23:52,800
PAUL KINLAN: I think it's one
of those experimental APIs

468
00:23:52,800 --> 00:23:55,360
where we want more feedback
about what people want.

469
00:23:55,360 --> 00:23:57,240
I know Intel wanted this
and to see some stuff.

470
00:23:57,240 --> 00:23:59,035
But what do developers want?

471
00:23:59,035 --> 00:24:01,690
And if you're a developer, what
you want, make sure you

472
00:24:01,690 --> 00:24:03,540
leave it on [INAUDIBLE]

473
00:24:03,540 --> 00:24:05,580
or leave us a message about
exactly what type of

474
00:24:05,580 --> 00:24:07,100
information you want
from the system.

475
00:24:07,100 --> 00:24:08,040
PETE LEPAGE: Yeah, that's
a good call.

476
00:24:08,040 --> 00:24:09,850
That's a very good call.

477
00:24:09,850 --> 00:24:12,860
So if we can come off the
display and just go to the

478
00:24:12,860 --> 00:24:14,310
side by side.

479
00:24:14,310 --> 00:24:17,440
Why don't we have a look at some
of the questions and see

480
00:24:17,440 --> 00:24:21,250
if there any questions in
Moderator so that if people

481
00:24:21,250 --> 00:24:24,290
who do have any questions, we
can take some of those.

482
00:24:24,290 --> 00:24:26,800
While I'm pulling that up, Paul,
is there anything you

483
00:24:26,800 --> 00:24:29,330
want to add?

484
00:24:29,330 --> 00:24:31,150
PAUL KINLAN: No, I think it's
basically this is still

485
00:24:31,150 --> 00:24:32,070
experimental.

486
00:24:32,070 --> 00:24:35,420
We've got the Display API, which
is kind of hidden and

487
00:24:35,420 --> 00:24:37,990
doesn't seem to be available,
which, again, I think is

488
00:24:37,990 --> 00:24:40,770
either a bug or it's embedding
Chromium [INAUDIBLE] trunk at

489
00:24:40,770 --> 00:24:43,580
the moment.

490
00:24:43,580 --> 00:24:46,070
These are actually kind of
interesting, if you've got the

491
00:24:46,070 --> 00:24:48,080
displays, you want to know how
many displays are on the

492
00:24:48,080 --> 00:24:50,850
screen, which window--

493
00:24:50,850 --> 00:24:52,030
well, I'll rephrase it.

494
00:24:52,030 --> 00:24:54,470
The thing I would be kind of
interested in is to be able to

495
00:24:54,470 --> 00:24:57,340
target which window goes on to
what screen, because I don't

496
00:24:57,340 --> 00:24:59,510
believe we have that capability
at the moment.

497
00:24:59,510 --> 00:25:02,710
But if you can understand the
screens, the display depth and

498
00:25:02,710 --> 00:25:06,380
the DPI and all that type of
stuff, you let the user have a

499
00:25:06,380 --> 00:25:08,230
little bit more advanced control
over the layout of

500
00:25:08,230 --> 00:25:11,330
applications, and you can go
full screen on one top or one

501
00:25:11,330 --> 00:25:14,320
window or choose to go full
screen on a second window and

502
00:25:14,320 --> 00:25:16,450
kind of keep the use of that
[INAUDIBLE] to do that.

503
00:25:16,450 --> 00:25:18,190
PETE LEPAGE: Yeah, that's
a good point.

504
00:25:18,190 --> 00:25:19,140
PAUL KINLAN: Which is
what I want to see.

505
00:25:19,140 --> 00:25:21,240
I don't think we're quite there
just yet, but this is

506
00:25:21,240 --> 00:25:24,023
the whole point of these talks
is for us to tell everyone

507
00:25:24,023 --> 00:25:25,983
exactly what's going down the
line and tell them how to

508
00:25:25,983 --> 00:25:27,830
start to play with it
and also how to get

509
00:25:27,830 --> 00:25:28,790
good feedback as well.

510
00:25:28,790 --> 00:25:30,500
PETE LEPAGE: Yeah, cool.

511
00:25:30,500 --> 00:25:33,070
So I just pulled up the
questions, and the

512
00:25:33,070 --> 00:25:35,300
link is there on--

513
00:25:35,300 --> 00:25:36,950
hang on.

514
00:25:36,950 --> 00:25:38,200
It's always fun.

515
00:25:38,200 --> 00:25:39,140
It's somewhere.

516
00:25:39,140 --> 00:25:40,020
It's right down there.

517
00:25:40,020 --> 00:25:40,630
See?

518
00:25:40,630 --> 00:25:43,350
You can see it right there.

519
00:25:43,350 --> 00:25:45,290
So the questions are there.

520
00:25:45,290 --> 00:25:47,240
If you've got questions,
feel free to post them.

521
00:25:47,240 --> 00:25:51,570
I want to take one question from
a student at Davidson in

522
00:25:51,570 --> 00:25:53,010
North Carolina.

523
00:25:53,010 --> 00:25:56,560
It's not completely related to
the stuff that we're talking

524
00:25:56,560 --> 00:26:00,800
about with the System Info
APIs, but I think it is a

525
00:26:00,800 --> 00:26:06,010
somewhat interesting question
that definitely you could use

526
00:26:06,010 --> 00:26:08,050
some of these with
Chrome apps.

527
00:26:08,050 --> 00:26:11,260
And the student wanted to
know, "I'm working on an

528
00:26:11,260 --> 00:26:14,710
independent research project
where I want to project a lot

529
00:26:14,710 --> 00:26:18,670
of data, whether university or
hospital locations, economic

530
00:26:18,670 --> 00:26:21,350
data, onto a map of the US.

531
00:26:21,350 --> 00:26:25,220
What's the best program to use,
and what are some of the

532
00:26:25,220 --> 00:26:28,590
Google API features that
would meet your needs?"

533
00:26:28,590 --> 00:26:33,330
Well, I think from a Chrome apps
perspective for something

534
00:26:33,330 --> 00:26:37,130
like this, we run into a couple
of challenges with

535
00:26:37,130 --> 00:26:39,080
Chrome apps because
unfortunately right now, we

536
00:26:39,080 --> 00:26:43,540
can't super easily embed maps.

537
00:26:43,540 --> 00:26:45,620
Because the point of Chrome
apps is that they work

538
00:26:45,620 --> 00:26:49,140
offline, and maps need that
online connection.

539
00:26:49,140 --> 00:26:54,570
You can use a web view to go
and represent and pull in

540
00:26:54,570 --> 00:26:56,840
those maps, but it won't
work offline.

541
00:26:56,840 --> 00:26:59,970
That's probably the best way to
do this if you wanted to do

542
00:26:59,970 --> 00:27:04,390
it as a Chrome app, to use
a web view and use

543
00:27:04,390 --> 00:27:06,340
the Google Maps APIs.

544
00:27:06,340 --> 00:27:08,250
And I know that they have
a regular show.

545
00:27:08,250 --> 00:27:10,040
I don't know when they're
show is on.

546
00:27:10,040 --> 00:27:12,500
I think their show may
actually be on in

547
00:27:12,500 --> 00:27:13,450
about half an hour.

548
00:27:13,450 --> 00:27:17,190
So if you're still
watching, check

549
00:27:17,190 --> 00:27:22,790
developers.google.com/live to
see when the Maps show is.

550
00:27:22,790 --> 00:27:26,350
They can definitely talk a lot
more about how to go and

551
00:27:26,350 --> 00:27:31,720
overlay data and that kind of
stuff onto maps and where to

552
00:27:31,720 --> 00:27:34,950
get some of this information.

553
00:27:34,950 --> 00:27:36,580
Paul, anything you want
to add to that?

554
00:27:36,580 --> 00:27:38,770
PAUL KINLAN: Yeah, I mean,
there's a lot of other APIs

555
00:27:38,770 --> 00:27:39,590
that we've got as well.

556
00:27:39,590 --> 00:27:43,875
And whilst we don't quite have
access to what we know as the

557
00:27:43,875 --> 00:27:46,520
Google Script Loader, where you
do Goog.load and then the

558
00:27:46,520 --> 00:27:49,240
name of the script, primarily
because we can't

559
00:27:49,240 --> 00:27:50,100
inject brand new--

560
00:27:50,100 --> 00:27:51,350
well, we can inject new tags.

561
00:27:51,350 --> 00:27:53,435
But the way that it does it, we
can't have access to that

562
00:27:53,435 --> 00:27:55,580
at the moment.

563
00:27:55,580 --> 00:27:58,850
But it's actually not too hard
to get access to the API's

564
00:27:58,850 --> 00:27:59,170
[? expression. ?]

565
00:27:59,170 --> 00:28:02,140
You can use the identity API,
whether it's the first-party

566
00:28:02,140 --> 00:28:03,360
or third-party APIs.

567
00:28:03,360 --> 00:28:04,090
PETE LEPAGE: That's true.

568
00:28:04,090 --> 00:28:06,780
PAUL KINLAN: You can just make
normal XML and HTTP requests,

569
00:28:06,780 --> 00:28:09,850
which are authenticated against
the OAuth token.

570
00:28:09,850 --> 00:28:11,340
It's like two or three
lines of JavaScript.

571
00:28:11,340 --> 00:28:15,900
And while we can make it a lot
easier to do, and we've still

572
00:28:15,900 --> 00:28:17,430
got to work on that side of
things, you can still use that

573
00:28:17,430 --> 00:28:20,250
to access all the existing APIs
because pretty much all

574
00:28:20,250 --> 00:28:23,260
of our API suite is based off
OAuth 2.0 authentication.

575
00:28:23,260 --> 00:28:25,670
So we have that built into
Chrome applications.

576
00:28:25,670 --> 00:28:27,820
And if you want to go and get
some extra source of the data,

577
00:28:27,820 --> 00:28:31,000
whether it's like a reverse
geomap, for instance, or

578
00:28:31,000 --> 00:28:34,170
reverse geocode, sorry, you can
go and call those API REST

579
00:28:34,170 --> 00:28:37,270
endpoints quite easily.

580
00:28:37,270 --> 00:28:39,380
So that was my answer.

581
00:28:39,380 --> 00:28:40,680
PETE LEPAGE: Cool.

582
00:28:40,680 --> 00:28:43,460
All right, well it looks like
that's the end of the

583
00:28:43,460 --> 00:28:44,260
questions for today.

584
00:28:44,260 --> 00:28:49,130
So I want to thank Paul for
joining us from London and

585
00:28:49,130 --> 00:28:50,270
thank you guys for watching.

586
00:28:50,270 --> 00:28:52,130
Hopefully you found
this interesting.

587
00:28:52,130 --> 00:28:55,240
We'll be back again next week,
same time, where we're going

588
00:28:55,240 --> 00:29:00,800
to dive into some more
Chrome apps APIs.

589
00:29:00,800 --> 00:29:04,780
Definitely go have a look at
developers.google.com/live to

590
00:29:04,780 --> 00:29:09,660
see what our show next week is,
as well as check out our

591
00:29:09,660 --> 00:29:13,650
Plus page at Google
Chrome Developers

592
00:29:13,650 --> 00:29:15,740
is our name on there.

593
00:29:15,740 --> 00:29:18,870
I'll be posting a short summary
of some of the stuff

594
00:29:18,870 --> 00:29:20,150
that we talked about today.

595
00:29:20,150 --> 00:29:21,710
So with that, Paul?

596
00:29:21,710 --> 00:29:22,620
Do you have anything else
you want to add?

597
00:29:22,620 --> 00:29:23,630
PAUL KINLAN: I'm really
excited about the

598
00:29:23,630 --> 00:29:24,370
next couple of weeks.

599
00:29:24,370 --> 00:29:28,350
I think this was the first,
probably simplest API to kind

600
00:29:28,350 --> 00:29:29,710
of start to talk about.

601
00:29:29,710 --> 00:29:30,520
We've got notifications.

602
00:29:30,520 --> 00:29:31,640
I know people are going to
watch the notifications.

603
00:29:31,640 --> 00:29:32,050
PETE LEPAGE: Yeah, the

604
00:29:32,050 --> 00:29:34,970
notifications are really slick.

605
00:29:34,970 --> 00:29:36,340
PAUL KINLAN: Yeah,
notifications, push

606
00:29:36,340 --> 00:29:37,020
messaging--

607
00:29:37,020 --> 00:29:38,450
PETE LEPAGE: That one's
pretty awesome.

608
00:29:38,450 --> 00:29:39,260
PAUL KINLAN: That's
a good one.

609
00:29:39,260 --> 00:29:40,300
What else have we got?

610
00:29:40,300 --> 00:29:41,170
We've got loads actually.

611
00:29:41,170 --> 00:29:44,390
PETE LEPAGE: Yeah, we've
got a whole bunch.

612
00:29:44,390 --> 00:29:47,170
In fact, I'll pull
it up right now.

613
00:29:47,170 --> 00:29:48,190
PAUL KINLAN: We've got a
minute to spare, right?

614
00:29:48,190 --> 00:29:51,090
PETE LEPAGE: Yeah, we've
got a minute.

615
00:29:51,090 --> 00:29:56,700
All right, so if I bring up
google.developers.com/live.

616
00:29:56,700 --> 00:29:59,030
It's great, some days at Google,
where you'd think we'd

617
00:29:59,030 --> 00:30:02,870
have nice, fast internet
connections, we don't always

618
00:30:02,870 --> 00:30:04,810
have the fastest of internet
connections.

619
00:30:04,810 --> 00:30:06,240
PAUL KINLAN: That's because
you're using it to stream

620
00:30:06,240 --> 00:30:06,700
video, right?

621
00:30:06,700 --> 00:30:07,870
PETE LEPAGE: Well, yeah,
that's true.

622
00:30:07,870 --> 00:30:10,850
So next week we're going to
be talking about rich

623
00:30:10,850 --> 00:30:11,660
notifications.

624
00:30:11,660 --> 00:30:15,810
So that's next week,
on the 26th.

625
00:30:15,810 --> 00:30:19,340
The week after, we're going to
be talking about the synced

626
00:30:19,340 --> 00:30:20,720
filesystem.

627
00:30:20,720 --> 00:30:24,280
Synced filesystem, Paul why
don't you talk about that?

628
00:30:24,280 --> 00:30:26,270
This is one you've been really
excited about for a while.

629
00:30:26,270 --> 00:30:28,430
PAUL KINLAN: Yeah, this is one
of those ones that we kind of

630
00:30:28,430 --> 00:30:30,510
need on the web, at least
especially for offline

631
00:30:30,510 --> 00:30:31,130
applications.

632
00:30:31,130 --> 00:30:34,880
It's the ability to use an API
that is basically exactly the

633
00:30:34,880 --> 00:30:40,060
same as HTML5 sandbox filesystem
API, but basically

634
00:30:40,060 --> 00:30:42,765
have better access
to Google Drive.

635
00:30:42,765 --> 00:30:44,975
I think ultimately we don't want
to necessarily, like if

636
00:30:44,975 --> 00:30:47,310
it's standardized, have it just
on Google Drive only.

637
00:30:47,310 --> 00:30:49,760
But right now, it's integrated
the experience of Chrome

638
00:30:49,760 --> 00:30:51,450
applications.

639
00:30:51,450 --> 00:30:54,390
You'll basically save the file
to the HTML5 filesystem and

640
00:30:54,390 --> 00:30:55,830
via the Google Drive--

641
00:30:55,830 --> 00:30:56,950
and still sandboxed, right?

642
00:30:56,950 --> 00:30:59,570
It's still sandboxed inside your
applications area, not

643
00:30:59,570 --> 00:31:01,910
completely available
to everyone.

644
00:31:01,910 --> 00:31:04,316
Have that file and replicate it
out to all your other that

645
00:31:04,316 --> 00:31:06,950
kind of instances of your
application for that user.

646
00:31:06,950 --> 00:31:09,670
So if they're on their MacBook
Pro and they save a file in to

647
00:31:09,670 --> 00:31:13,215
their local sandboxed
filesystem, and then they go

648
00:31:13,215 --> 00:31:15,035
in their Chromebook, well, it
will start to appear there.

649
00:31:15,035 --> 00:31:17,720
And it will just be available
and synchronized.

650
00:31:17,720 --> 00:31:20,840
So that facet, it's very
early on at the moment.

651
00:31:20,840 --> 00:31:22,920
It's still experimental.

652
00:31:22,920 --> 00:31:24,610
And there's a lot of things that
we're trying to work out

653
00:31:24,610 --> 00:31:26,590
how we think developers
want to use it.

654
00:31:26,590 --> 00:31:31,660
Right now, there's a collision
between the same file and two

655
00:31:31,660 --> 00:31:33,340
different updates
on two machines.

656
00:31:33,340 --> 00:31:36,630
The developer has to delete one
of those files, basically.

657
00:31:36,630 --> 00:31:38,880
And we want to get a little bit
smarter about what to do

658
00:31:38,880 --> 00:31:42,610
and how to kind of help the
developer resolve the conflict

659
00:31:42,610 --> 00:31:44,425
and the collisions
inside files.

660
00:31:44,425 --> 00:31:47,820
But that's one API to check out,
test, and obviously watch

661
00:31:47,820 --> 00:31:50,640
in a couple of weeks when we're
going to show it off.

662
00:31:50,640 --> 00:31:51,430
PETE LEPAGE: Cool.

663
00:31:51,430 --> 00:31:55,070
And then the following week
we've got alarms, the

664
00:31:55,070 --> 00:31:56,030
week of March 11.

665
00:31:56,030 --> 00:31:58,730
So we've got plenty of cool
stuff coming out for you.

666
00:31:58,730 --> 00:32:01,540
So stay tuned, and we'll
see you next

667
00:32:01,540 --> 00:32:02,700
week at the same time.

668
00:32:02,700 --> 00:32:04,630
Paul, thanks for joining,
and thanks

669
00:32:04,630 --> 00:32:05,910
for watching, everybody.

670
00:32:05,910 --> 00:32:07,160
PAUL KINLAN: Bye.

671
00:32:07,160 --> 00:32:17,380

