1
00:00:00,000 --> 00:00:00,140

2
00:00:00,140 --> 00:00:00,820
ERIC BIDELMAN: Welcome,
everybody.

3
00:00:00,820 --> 00:00:03,100
Thank you so much for coming
to Web Components.

4
00:00:03,100 --> 00:00:06,780
You're going to learn a lot
in the next 40 minutes.

5
00:00:06,780 --> 00:00:08,565
Thank you to everyone--

6
00:00:08,565 --> 00:00:09,325
[APPLAUSE]

7
00:00:09,325 --> 00:00:10,165
ERIC BIDELMAN: I haven't
started it yet.

8
00:00:10,165 --> 00:00:12,050
You guys, you guys.

9
00:00:12,050 --> 00:00:12,920
You might not learn anything.

10
00:00:12,920 --> 00:00:15,980
You don't even know what I
have in this slide deck.

11
00:00:15,980 --> 00:00:18,237
So a little bit about myself,
so you know who's up here in

12
00:00:18,237 --> 00:00:18,470
front of you.

13
00:00:18,470 --> 00:00:19,870
My name is Eric Bidelman.

14
00:00:19,870 --> 00:00:21,430
I work on the Google
Chrome team.

15
00:00:21,430 --> 00:00:23,870
I'm on the developer relations
team there.

16
00:00:23,870 --> 00:00:25,980
We're going to talk about a lot
of stuff, so there might

17
00:00:25,980 --> 00:00:27,160
not be enough time
for questions.

18
00:00:27,160 --> 00:00:31,750
Feel free, please, tweet at me,
Google+ me, come poke me

19
00:00:31,750 --> 00:00:33,000
afterwards at Office Hours.

20
00:00:33,000 --> 00:00:35,380

21
00:00:35,380 --> 00:00:40,200
So I have 40 minutes to cover
the future web platform, which

22
00:00:40,200 --> 00:00:42,210
is a complete fail.

23
00:00:42,210 --> 00:00:44,310
We could talk about this for
three days straight.

24
00:00:44,310 --> 00:00:46,380
There should be a conference
devoted to Web Components.

25
00:00:46,380 --> 00:00:49,140
There's so much stuff now that's
starting to even land

26
00:00:49,140 --> 00:00:52,310
in browsers that it's just
amazing, and I fundamentally

27
00:00:52,310 --> 00:00:53,440
think it's going to change
the way we think

28
00:00:53,440 --> 00:00:55,240
about developing apps.

29
00:00:55,240 --> 00:00:56,250
This is what you're
going to feel like

30
00:00:56,250 --> 00:00:57,110
for the next 40 minutes.

31
00:00:57,110 --> 00:01:00,980
We're going to throw a lot
of stuff your way.

32
00:01:00,980 --> 00:01:01,700
Boosh!

33
00:01:01,700 --> 00:01:05,880
And then hopefully, around that
35 minute mark, you'll

34
00:01:05,880 --> 00:01:06,980
have this moment of zen.

35
00:01:06,980 --> 00:01:09,280
Hopefully some of this stuff
will make sense, and you'll

36
00:01:09,280 --> 00:01:13,010
really see where this
is trying to go.

37
00:01:13,010 --> 00:01:16,450
So if you've been following Web
Components, or this term

38
00:01:16,450 --> 00:01:19,790
Web Components, even at a sort
of bird's eye view, what the

39
00:01:19,790 --> 00:01:21,660
heck are we talking about?

40
00:01:21,660 --> 00:01:24,290
Well, we're talking about
custom elements in HTML.

41
00:01:24,290 --> 00:01:27,150
You can define a new vocabulary
for HTML.

42
00:01:27,150 --> 00:01:29,110
So the blink tag, for example,
is not dead.

43
00:01:29,110 --> 00:01:30,750
The blink tag is
alive and well.

44
00:01:30,750 --> 00:01:34,450
We can call it x-blink, and
all it is-- it's a custom

45
00:01:34,450 --> 00:01:36,760
element that I've implemented
using CSS, and it just has an

46
00:01:36,760 --> 00:01:40,020
opacity change using
transitions.

47
00:01:40,020 --> 00:01:41,160
That's kind of a
silly example.

48
00:01:41,160 --> 00:01:45,413
But you can do something like
the gangnam-style tag.

49
00:01:45,413 --> 00:01:47,340
[MUSIC - PSY, "GANGNAM STYLE"]

50
00:01:47,340 --> 00:01:50,350
ERIC BIDELMAN: And that's
all it does, right?

51
00:01:50,350 --> 00:01:51,765
A CSS action.

52
00:01:51,765 --> 00:01:54,430

53
00:01:54,430 --> 00:01:56,860
So as a user of this component,
all I have to do is

54
00:01:56,860 --> 00:02:00,380
include the gangnam-style tag
on my page, and I get--

55
00:02:00,380 --> 00:02:03,790
[MUSIC - PSY, "GANGNAM STYLE"]

56
00:02:03,790 --> 00:02:04,790
ERIC BIDELMAN: Of course,
there's more practical

57
00:02:04,790 --> 00:02:07,680
examples, and maybe this one's
not practical either, but it's

58
00:02:07,680 --> 00:02:09,419
not just defining new
elements in HTML.

59
00:02:09,419 --> 00:02:11,160
It's actually extending
existing.

60
00:02:11,160 --> 00:02:14,820
If you don't like the way the
native HTML button does its

61
00:02:14,820 --> 00:02:18,750
thing, you can say a button is a
mega-button, and define that

62
00:02:18,750 --> 00:02:21,730
mega-button to do something like
on a CSS transition, have

63
00:02:21,730 --> 00:02:24,472
this crazy gradient, and then
when you click it--

64
00:02:24,472 --> 00:02:26,240
[MOO]

65
00:02:26,240 --> 00:02:27,840
ERIC BIDELMAN: It moos at you.

66
00:02:27,840 --> 00:02:31,260
So defining your own,
extending-- you'll see some

67
00:02:31,260 --> 00:02:35,960
more practical examples, but
that's what this is all about.

68
00:02:35,960 --> 00:02:39,670
Being able to expand on
what we have in HTML.

69
00:02:39,670 --> 00:02:42,110
So when I think of
Web Components--

70
00:02:42,110 --> 00:02:44,770
so this ecosystem,
this umbrella

71
00:02:44,770 --> 00:02:46,310
terminology for new stuff--

72
00:02:46,310 --> 00:02:48,800
I think of four main areas.

73
00:02:48,800 --> 00:02:49,710
I think of Shadow DOM.

74
00:02:49,710 --> 00:02:52,050
This is sort of the foundational
glue, the mortar,

75
00:02:52,050 --> 00:02:55,140
this is how we get
encapsulation

76
00:02:55,140 --> 00:02:57,500
for free on the web.

77
00:02:57,500 --> 00:02:58,280
HTML templates.

78
00:02:58,280 --> 00:03:01,090
So if you're going to build a
custom element, a widget, a

79
00:03:01,090 --> 00:03:03,730
component for your page, you
need to be able to scaffold

80
00:03:03,730 --> 00:03:07,070
out sort of inert chunks of
markup, and then use those

81
00:03:07,070 --> 00:03:10,720
later as people stamp
out your element.

82
00:03:10,720 --> 00:03:12,370
Custom elements brings
all this together.

83
00:03:12,370 --> 00:03:15,450
This is how you define a new tag
in HTML and put all these

84
00:03:15,450 --> 00:03:18,320
lower level technologies
together.

85
00:03:18,320 --> 00:03:22,150
Think of that as your
Bat utility belt.

86
00:03:22,150 --> 00:03:25,910
And lastly, HTML import sort
of is used for repackaging,

87
00:03:25,910 --> 00:03:26,190
repurposing.

88
00:03:26,190 --> 00:03:28,630
If somebody writes this awesome
component someplace

89
00:03:28,630 --> 00:03:31,650
over on the web, throws it up
on a CDN, I can then import

90
00:03:31,650 --> 00:03:33,600
that into my page
and reuse that.

91
00:03:33,600 --> 00:03:37,930
So we have now this proper
notion of reusability on the

92
00:03:37,930 --> 00:03:39,520
web, which is awesome.

93
00:03:39,520 --> 00:03:42,430
So all in all, a collection
of new API

94
00:03:42,430 --> 00:03:43,390
primitives in the browser.

95
00:03:43,390 --> 00:03:46,610
That's what I think about when
I hear Web Components.

96
00:03:46,610 --> 00:03:50,210
And we'll talk about each of
these in this presentation.

97
00:03:50,210 --> 00:03:53,020
So 40 minutes, and I have 36
to cover all this stuff.

98
00:03:53,020 --> 00:03:55,130
So HTML templates is
the first beast.

99
00:03:55,130 --> 00:03:58,950

100
00:03:58,950 --> 00:04:00,100
This is really cool.

101
00:04:00,100 --> 00:04:03,020
With one tag, we now have
proper, like, at the browser

102
00:04:03,020 --> 00:04:06,850
level, the ability to template
out a certain section of

103
00:04:06,850 --> 00:04:08,310
markup to be a template.

104
00:04:08,310 --> 00:04:11,010
And this is great, because what
you put in this is just

105
00:04:11,010 --> 00:04:11,890
DOM, right?

106
00:04:11,890 --> 00:04:15,000
So I'm working with DOM, the
browser knows DOM, it's easy

107
00:04:15,000 --> 00:04:15,740
to work with.

108
00:04:15,740 --> 00:04:17,370
That's really awesome.

109
00:04:17,370 --> 00:04:19,579
But the best part about template
is that it's parsed

110
00:04:19,579 --> 00:04:20,470
and not rendered.

111
00:04:20,470 --> 00:04:23,280
And basically what that means
is that things like scripts

112
00:04:23,280 --> 00:04:23,930
are not going to run.

113
00:04:23,930 --> 00:04:25,900
If I have a script tag in this
template, it's not going to

114
00:04:25,900 --> 00:04:28,680
run until I actually stamp this
template out and use it.

115
00:04:28,680 --> 00:04:29,680
So that's really cool.

116
00:04:29,680 --> 00:04:32,700
Stylesheets and images aren't
going to load until I stamp

117
00:04:32,700 --> 00:04:33,500
this template out.

118
00:04:33,500 --> 00:04:35,770
So that's great from a
resource perspective.

119
00:04:35,770 --> 00:04:37,480
You're not loading things in.

120
00:04:37,480 --> 00:04:39,770
If the user never sees this
template-- maybe it's a view

121
00:04:39,770 --> 00:04:40,760
or something--

122
00:04:40,760 --> 00:04:42,380
you're not actually going
to waste bandwidth

123
00:04:42,380 --> 00:04:43,710
until you use it.

124
00:04:43,710 --> 00:04:44,640
And media's not played.

125
00:04:44,640 --> 00:04:47,580
So if you had a video in here
that had autoplay true, that's

126
00:04:47,580 --> 00:04:50,280
not going to do anything until
you actually invoke and stamp

127
00:04:50,280 --> 00:04:52,530
this template out.

128
00:04:52,530 --> 00:04:55,510
The other really nice property
about the template element is

129
00:04:55,510 --> 00:04:57,410
that it's hidden from
the document.

130
00:04:57,410 --> 00:04:59,360
So that basically means you
can't traverse into it.

131
00:04:59,360 --> 00:05:01,870
It's in its own separate
little world.

132
00:05:01,870 --> 00:05:05,040
So for an example, if I try to
query selector in and try to

133
00:05:05,040 --> 00:05:08,580
rip out that comment div that I
have in my template, I'm not

134
00:05:08,580 --> 00:05:10,890
going to be able to do that,
because, again, it's in its

135
00:05:10,890 --> 00:05:13,030
own sort of context.

136
00:05:13,030 --> 00:05:17,250
So it truly is a template that
you can use and reuse.

137
00:05:17,250 --> 00:05:18,470
And so how do we
use a template?

138
00:05:18,470 --> 00:05:19,980
There's two ways.

139
00:05:19,980 --> 00:05:23,200
The first is there's a content
property on the template

140
00:05:23,200 --> 00:05:24,660
element itself.

141
00:05:24,660 --> 00:05:26,410
And that'll just give you
a document fragment.

142
00:05:26,410 --> 00:05:27,570
So that'll just give
you a chunk of DOM

143
00:05:27,570 --> 00:05:28,595
you can work with.

144
00:05:28,595 --> 00:05:31,750
And the second is, if you want,
you can do innerHTML and

145
00:05:31,750 --> 00:05:33,330
work with that.

146
00:05:33,330 --> 00:05:35,260
So the process for using
a template--

147
00:05:35,260 --> 00:05:38,460
clone it, grabbing that content
in any way you want,

148
00:05:38,460 --> 00:05:40,690
stamp it out, and then that's
what activates it.

149
00:05:40,690 --> 00:05:42,780
That's what makes the stuff
inside of it go live.

150
00:05:42,780 --> 00:05:44,840
Then you see what's in it.

151
00:05:44,840 --> 00:05:47,520
So by default, it's actually
display none, right?

152
00:05:47,520 --> 00:05:48,770
So a quick example.

153
00:05:48,770 --> 00:05:50,950
I have the same template
that I had before.

154
00:05:50,950 --> 00:05:55,220
Just a blank source and
an empty comment div.

155
00:05:55,220 --> 00:05:57,540
I can rip out the content
property.

156
00:05:57,540 --> 00:06:00,380
And this is a great example of
showing the dynamicism of

157
00:06:00,380 --> 00:06:00,830
this, right?

158
00:06:00,830 --> 00:06:02,230
So I'm setting the
image source at

159
00:06:02,230 --> 00:06:03,190
runtime, which is great.

160
00:06:03,190 --> 00:06:07,390
I can change a template as I
need to before I stamp it out.

161
00:06:07,390 --> 00:06:08,670
And then the last line
there is actually

162
00:06:08,670 --> 00:06:09,920
where the magic happens.

163
00:06:09,920 --> 00:06:12,700
So I'll get that content, I'll
clone its node with all its

164
00:06:12,700 --> 00:06:15,290
attributes, and that's what
makes that stuff go live.

165
00:06:15,290 --> 00:06:18,066
So at that point, this logo PNG
would be pulled down, if I

166
00:06:18,066 --> 00:06:20,660
had stylesheets in the template,
they be pulled down,

167
00:06:20,660 --> 00:06:23,830
media would be playing
if it had autoplay.

168
00:06:23,830 --> 00:06:27,710
So clone, stamp out, and
then stuff goes live.

169
00:06:27,710 --> 00:06:28,510
Another example.

170
00:06:28,510 --> 00:06:30,380
So this is actually really
great, because it shows the

171
00:06:30,380 --> 00:06:31,970
inertness of script.

172
00:06:31,970 --> 00:06:35,310
So if I refresh this slide deck
1,000 times, it's never

173
00:06:35,310 --> 00:06:37,040
going to run this alert--

174
00:06:37,040 --> 00:06:38,160
OK, thanks, bye--

175
00:06:38,160 --> 00:06:40,630
until I actually stamp
the template out.

176
00:06:40,630 --> 00:06:41,830
So we'll do the exact
same thing.

177
00:06:41,830 --> 00:06:44,230
This time, I'm going to
basically just going to

178
00:06:44,230 --> 00:06:45,150
increment this value.

179
00:06:45,150 --> 00:06:46,360
Every time I stamp it
out, an instance

180
00:06:46,360 --> 00:06:48,150
is going to be created.

181
00:06:48,150 --> 00:06:49,620
And then the script
will run as well.

182
00:06:49,620 --> 00:06:50,700
So when I press this
run button,

183
00:06:50,700 --> 00:06:52,170
hopefully that will happen.

184
00:06:52,170 --> 00:06:53,340
You'll see, OK, thanks, bye.

185
00:06:53,340 --> 00:06:55,970
That script is immediately
invoked when I stamp the

186
00:06:55,970 --> 00:06:57,260
template out.

187
00:06:57,260 --> 00:06:59,330
And I'm showing how to
increment that value.

188
00:06:59,330 --> 00:07:01,880
So I'm changing the guts of
the template on the fly.

189
00:07:01,880 --> 00:07:05,590

190
00:07:05,590 --> 00:07:07,880
So HTML templates are a
relatively new spec, actually,

191
00:07:07,880 --> 00:07:11,320
but support is actually coming
along really nicely.

192
00:07:11,320 --> 00:07:14,340
So Firefox already has this,
Chrome has this now, I'm

193
00:07:14,340 --> 00:07:16,530
including Opera Beta Mobile on
this, because they recently

194
00:07:16,530 --> 00:07:18,040
moved to Chromium.

195
00:07:18,040 --> 00:07:18,820
So very cool.

196
00:07:18,820 --> 00:07:22,080
Proper at the DOM level
HTML templates.

197
00:07:22,080 --> 00:07:23,390
Inert templates.

198
00:07:23,390 --> 00:07:24,910
So that's the first
building block.

199
00:07:24,910 --> 00:07:26,320
Quick introduction.

200
00:07:26,320 --> 00:07:28,720
Let's move on to Shadow DOM.

201
00:07:28,720 --> 00:07:33,100
So Shadow DOM is an absolute
complex beast.

202
00:07:33,100 --> 00:07:33,820
That's not Shadow DOM.

203
00:07:33,820 --> 00:07:34,850
This is also not Shadow DOM.

204
00:07:34,850 --> 00:07:39,350
This is a cool car that has
the license plate SHDWDOM.

205
00:07:39,350 --> 00:07:41,620
But what Shadow DOM
really is--

206
00:07:41,620 --> 00:07:44,240
it gives us markup
encapsulation, it gives us DOM

207
00:07:44,240 --> 00:07:48,140
encapsulation, it gives us CSS
style boundary protection.

208
00:07:48,140 --> 00:07:49,940
So if you're writing a custom
widget, if you're writing a

209
00:07:49,940 --> 00:07:51,940
component, you want your
widget to look

210
00:07:51,940 --> 00:07:52,530
in a certain way.

211
00:07:52,530 --> 00:07:53,980
You've maybe designed
it to be that way.

212
00:07:53,980 --> 00:07:57,200
You don't want things bleeding
in or things bleeding out.

213
00:07:57,200 --> 00:07:58,830
So it gives us style
boundaries.

214
00:07:58,830 --> 00:08:02,670
And what it really does is it
exposes to us web developers

215
00:08:02,670 --> 00:08:05,150
the same mechanics browser
vendors have been using to

216
00:08:05,150 --> 00:08:07,716
implement their own
HTML elements.

217
00:08:07,716 --> 00:08:10,350
And so I mean by that--

218
00:08:10,350 --> 00:08:12,820
you might also say, well, hey,
Eric, the web already has

219
00:08:12,820 --> 00:08:13,450
encapsulation.

220
00:08:13,450 --> 00:08:14,920
It's the iframe, right?

221
00:08:14,920 --> 00:08:15,700
The iframe is great.

222
00:08:15,700 --> 00:08:18,640
We can import third party
content into our page.

223
00:08:18,640 --> 00:08:20,460
But I would actually argue
it's super bloated.

224
00:08:20,460 --> 00:08:22,260
For this use case, it's
super bloated.

225
00:08:22,260 --> 00:08:25,060
It creates a new document
context, scripting into it is

226
00:08:25,060 --> 00:08:27,740
very hard, you have to do
crazy postMessage hacks.

227
00:08:27,740 --> 00:08:30,540
If you want an iframe to shrink
wrap to your content,

228
00:08:30,540 --> 00:08:33,539
you have to figure that stuff
out in JavaScript, and it's

229
00:08:33,539 --> 00:08:34,230
just a mess.

230
00:08:34,230 --> 00:08:38,909
And for the use case of
component on a page, it's

231
00:08:38,909 --> 00:08:40,139
super bloated.

232
00:08:40,139 --> 00:08:43,039
But actually, what we have is
something lurking in the

233
00:08:43,039 --> 00:08:45,370
shadows, no pun intended.

234
00:08:45,370 --> 00:08:47,200
And so there's a couple truths
here that I want to highlight

235
00:08:47,200 --> 00:08:50,630
to you right now, and that's
that DOM nodes today can

236
00:08:50,630 --> 00:08:55,440
already hidden DOM, and that the
hidden DOM that they host

237
00:08:55,440 --> 00:08:58,680
cannot actually be traversed
into from our scripts.

238
00:08:58,680 --> 00:09:01,650
We can't actually navigate into
those or document course

239
00:09:01,650 --> 00:09:03,760
lecture into them.

240
00:09:03,760 --> 00:09:06,170
There's a couple of pretty
good examples actually

241
00:09:06,170 --> 00:09:08,110
implemented in the web platform
today, and those are

242
00:09:08,110 --> 00:09:10,060
some of the more complex
input types.

243
00:09:10,060 --> 00:09:12,210
So input type date, or
input type time are

244
00:09:12,210 --> 00:09:14,600
really great examples.

245
00:09:14,600 --> 00:09:16,550
With my keyboard, I can
navigate these, I can

246
00:09:16,550 --> 00:09:19,220
increment these, so there's
clearly something going on

247
00:09:19,220 --> 00:09:20,700
under the hood here.

248
00:09:20,700 --> 00:09:21,350
It's pretty interesting.

249
00:09:21,350 --> 00:09:23,640
I have a little increment
widget, and there's this

250
00:09:23,640 --> 00:09:26,300
boom-- there's this calendar
picker under the hood.

251
00:09:26,300 --> 00:09:30,310
All I do as a user is declare
this input type date on my

252
00:09:30,310 --> 00:09:34,190
page, and I get all this extra
goodness for free.

253
00:09:34,190 --> 00:09:36,630
So if I actually drill
into this--

254
00:09:36,630 --> 00:09:37,920
I'm an interested developer.

255
00:09:37,920 --> 00:09:39,840
I want to drill into
the dev tools.

256
00:09:39,840 --> 00:09:43,220

257
00:09:43,220 --> 00:09:46,830
You can turn on the dev tools
under the wrench here, or the

258
00:09:46,830 --> 00:09:48,630
gear, show Shadow Dom.

259
00:09:48,630 --> 00:09:51,870
And so this is something
you turn on.

260
00:09:51,870 --> 00:09:53,880
And then immediately when I do
that, anything that has a

261
00:09:53,880 --> 00:09:56,890
Shadow Dom in the web platform,
I can drill down

262
00:09:56,890 --> 00:09:59,380
into that's going to have
this little triangle.

263
00:09:59,380 --> 00:10:03,700
Hopefully you guys can
see that here.

264
00:10:03,700 --> 00:10:04,810
And so the input--

265
00:10:04,810 --> 00:10:06,570
there's a hidden document
[INAUDIBLE].

266
00:10:06,570 --> 00:10:10,670
There's a hidden Shadow DOM
attached to this input tag.

267
00:10:10,670 --> 00:10:13,150
And you can see what's happening
is that the browser

268
00:10:13,150 --> 00:10:15,390
vendors have implemented this
tag, the guts of it, the

269
00:10:15,390 --> 00:10:17,550
internals, using nothing
but markup.

270
00:10:17,550 --> 00:10:18,780
So they've used what we as web

271
00:10:18,780 --> 00:10:20,410
developers have in our toolbelt--

272
00:10:20,410 --> 00:10:23,490
markup-- they've implemented
that with their native widget,

273
00:10:23,490 --> 00:10:25,550
not using C++ but markup.

274
00:10:25,550 --> 00:10:26,880
I think it's pretty cool.

275
00:10:26,880 --> 00:10:30,480
But from a user perspective, all
I have to do on this page

276
00:10:30,480 --> 00:10:32,552
is just declare this element.

277
00:10:32,552 --> 00:10:33,870
And there's other examples.

278
00:10:33,870 --> 00:10:36,440
Video tag has all these buttons
and stuff and sliders.

279
00:10:36,440 --> 00:10:37,300
Really cool.

280
00:10:37,300 --> 00:10:38,510
Textarea has a Shadow DOM.

281
00:10:38,510 --> 00:10:40,510
Details has a Shadow DOM.

282
00:10:40,510 --> 00:10:43,120
So all in all, the browser
vendors have been

283
00:10:43,120 --> 00:10:44,380
holding out on us.

284
00:10:44,380 --> 00:10:45,520
Shame on them.

285
00:10:45,520 --> 00:10:46,662
But now they're exposing
this to us.

286
00:10:46,662 --> 00:10:48,830
They're exposing the ability
to create Shadow DOM.

287
00:10:48,830 --> 00:10:51,840
And so here's a quick example of
how to actually create this

288
00:10:51,840 --> 00:10:52,640
Shadow DOM.

289
00:10:52,640 --> 00:10:55,450
I have my markup on the left
here-- my host element that

290
00:10:55,450 --> 00:10:58,130
I'm attaching this
hidden markup to.

291
00:10:58,130 --> 00:11:00,710
And what I do is I just call
a query selector for that

292
00:11:00,710 --> 00:11:02,540
element, and I call
createShadowRoot.

293
00:11:02,540 --> 00:11:05,620
So this is vendor
prefixed, FYI.

294
00:11:05,620 --> 00:11:08,620
So createShadowRoot, and in that
shadow root's inner HTML,

295
00:11:08,620 --> 00:11:10,390
I'm just going to fill
in some markup.

296
00:11:10,390 --> 00:11:13,700
I'm going to put in an H2 that
says, yo, y ou got replaced.

297
00:11:13,700 --> 00:11:17,040
And I'm going to put in by my
awesome content just a div.

298
00:11:17,040 --> 00:11:20,350
And you can see what actually
renders, right, in that, once

299
00:11:20,350 --> 00:11:22,860
I've attached that Shadow DOM,
is the Shadow DOM content.

300
00:11:22,860 --> 00:11:24,840
It's not this stuff up
here-- and we'll talk

301
00:11:24,840 --> 00:11:26,120
about that in a bit.

302
00:11:26,120 --> 00:11:26,850
It's the Shadow DOM.

303
00:11:26,850 --> 00:11:28,630
The Shadow DOM rules all.

304
00:11:28,630 --> 00:11:29,870
And here's an alternative
view.

305
00:11:29,870 --> 00:11:31,810
This is what you would see in
the dev tools, for instance.

306
00:11:31,810 --> 00:11:34,320
You see that hidden document
fragment representing the

307
00:11:34,320 --> 00:11:35,570
Shadow DOM.

308
00:11:35,570 --> 00:11:37,510

309
00:11:37,510 --> 00:11:39,250
So one thing that's really
important if we're creating a

310
00:11:39,250 --> 00:11:41,500
custom element is you want
some style protections.

311
00:11:41,500 --> 00:11:43,150
You want to be able
to style things.

312
00:11:43,150 --> 00:11:45,770
Things that aren't styled are
kind of unsexy on the web.

313
00:11:45,770 --> 00:11:47,810
So we have, with Shadow DOM,
the ability of style

314
00:11:47,810 --> 00:11:48,750
encapsulation for free.

315
00:11:48,750 --> 00:11:51,150
This is one of the great
properties of it.

316
00:11:51,150 --> 00:11:55,205
So in this instance, I'm using
the same sort of inner HTML

317
00:11:55,205 --> 00:11:57,520
that I was before, the
H2 and the div that

318
00:11:57,520 --> 00:11:59,250
says yo, you got replaced.

319
00:11:59,250 --> 00:12:01,900
But this time, I'm including
a style tag that's going to

320
00:12:01,900 --> 00:12:05,330
color all of my internal H2s
red, which is exactly why you

321
00:12:05,330 --> 00:12:08,940
see at the bottom that yo you
got replaced is now red.

322
00:12:08,940 --> 00:12:10,870
But this is really cool, because
I have an H2 at the

323
00:12:10,870 --> 00:12:11,970
top of the slide deck, right?

324
00:12:11,970 --> 00:12:13,530
The slide title's an H2.

325
00:12:13,530 --> 00:12:15,880
And that's not being styled
red, because again, style

326
00:12:15,880 --> 00:12:18,250
encapsulation inside of my
Shadow DOM, inside of my

327
00:12:18,250 --> 00:12:18,730
shadow root.

328
00:12:18,730 --> 00:12:20,540
Very cool.

329
00:12:20,540 --> 00:12:22,570
But we also have the ability
to control this.

330
00:12:22,570 --> 00:12:25,080
So if you're creating, again,
a component, and you want to

331
00:12:25,080 --> 00:12:28,600
embed this thing on your page,
maybe you have a certain look

332
00:12:28,600 --> 00:12:29,850
and feel that you want
to preserve.

333
00:12:29,850 --> 00:12:32,610

334
00:12:32,610 --> 00:12:36,190
You don't want that thing to
look completely out of place

335
00:12:36,190 --> 00:12:36,710
on your page.

336
00:12:36,710 --> 00:12:38,870
You want it to be seamlessly
integrated.

337
00:12:38,870 --> 00:12:40,230
So we have a couple properties
we can set.

338
00:12:40,230 --> 00:12:43,200
We have reset style inheritance,
and we have apply

339
00:12:43,200 --> 00:12:44,820
author styles.

340
00:12:44,820 --> 00:12:45,750
Apply author styles is great.

341
00:12:45,750 --> 00:12:48,390
If I turn that on, set that to
true, you can immediately see

342
00:12:48,390 --> 00:12:51,610
that my Shadow DOM content is
now taking on the look and

343
00:12:51,610 --> 00:12:52,800
feel of this slide deck.

344
00:12:52,800 --> 00:12:56,140
Font faces are the same,
line heights are same.

345
00:12:56,140 --> 00:12:58,040
Reset style inheritance
just says, at

346
00:12:58,040 --> 00:12:59,510
that Shadow DOM boundary--

347
00:12:59,510 --> 00:13:02,050
so there's this magical boundary
that when your

348
00:13:02,050 --> 00:13:03,390
content turns rendering--

349
00:13:03,390 --> 00:13:07,360
at that place, [INAUDIBLE]
define Shadow DOM, any CSS

350
00:13:07,360 --> 00:13:08,270
properties that are

351
00:13:08,270 --> 00:13:09,580
inheritable, just resets those.

352
00:13:09,580 --> 00:13:11,130
So that's kind of
a clean slate.

353
00:13:11,130 --> 00:13:13,820
That's how I can define my
own styles, and not have

354
00:13:13,820 --> 00:13:17,040
inheritable properties bleed
through into my Shadow DOM and

355
00:13:17,040 --> 00:13:18,290
my custom element.

356
00:13:18,290 --> 00:13:20,760

357
00:13:20,760 --> 00:13:23,680
All right.

358
00:13:23,680 --> 00:13:25,090
Something else you probably want
to do if you're creating

359
00:13:25,090 --> 00:13:28,210
a custom element is actually
provide some default

360
00:13:28,210 --> 00:13:29,580
stylings for it.

361
00:13:29,580 --> 00:13:32,870
So say I want my element to be
displayed block by default, or

362
00:13:32,870 --> 00:13:36,430
have a transition effect when
somebody hovers over it.

363
00:13:36,430 --> 00:13:39,360
This is how I can do that from
internal to my Shadow DOM.

364
00:13:39,360 --> 00:13:42,430
So there's a new @host at-rule
that you can define.

365
00:13:42,430 --> 00:13:45,820
So this style tag would be
inside of my Shadow DOM, and I

366
00:13:45,820 --> 00:13:47,010
define inside of it.

367
00:13:47,010 --> 00:13:48,730
I don't care what tag it is.

368
00:13:48,730 --> 00:13:51,480
You could be gangnam-style
tag, you could be photo

369
00:13:51,480 --> 00:13:53,710
[INAUDIBLE] tag, you could
be the x-blink tag.

370
00:13:53,710 --> 00:13:57,770
Whatever you are, set yourself
to be opacity 0.2 and

371
00:13:57,770 --> 00:13:59,800
transition with an
opacity to 1 when

372
00:13:59,800 --> 00:14:01,200
somebody hovers over you.

373
00:14:01,200 --> 00:14:05,260
So styling the host element or
the component you're styling--

374
00:14:05,260 --> 00:14:06,540
this is how you actually
provide some

375
00:14:06,540 --> 00:14:07,560
default styles for that.

376
00:14:07,560 --> 00:14:09,380
You can set widths, whatever
you want to do, right?

377
00:14:09,380 --> 00:14:12,320

378
00:14:12,320 --> 00:14:14,490
So if you remember in the
previous example, when I

379
00:14:14,490 --> 00:14:17,580
created that Shadow DOM,
everything inside of that

380
00:14:17,580 --> 00:14:19,320
thing that I was attaching
myself to completely went

381
00:14:19,320 --> 00:14:21,110
away, and what was rendered
was the Shadow DOM.

382
00:14:21,110 --> 00:14:23,840
So you're probably saying,
hey, what's up with that?

383
00:14:23,840 --> 00:14:25,990
And that's where insertion
points come in.

384
00:14:25,990 --> 00:14:28,170
So insertion points are super
powerful, because they allow

385
00:14:28,170 --> 00:14:29,850
you to sort of define--

386
00:14:29,850 --> 00:14:32,060
I think of it as a declarative
API, but that's probably not

387
00:14:32,060 --> 00:14:34,400
the best description for it.

388
00:14:34,400 --> 00:14:36,990
But what I have here is the
same markup on my left.

389
00:14:36,990 --> 00:14:37,590
That's my host.

390
00:14:37,590 --> 00:14:39,940
That's the thing I'm going to
attach the Shadow DOM to.

391
00:14:39,940 --> 00:14:42,390
My Shadow DOM is on the right,
so I'm trying to

392
00:14:42,390 --> 00:14:44,180
style all H2s red.

393
00:14:44,180 --> 00:14:46,430
And what I have here is a couple
of insertion points.

394
00:14:46,430 --> 00:14:49,410
And so this is a way, internal
to your Shadow DOM, to define

395
00:14:49,410 --> 00:14:51,750
a structure similar to that
input type date, right?

396
00:14:51,750 --> 00:14:54,960
It has this crazy internal
structure.

397
00:14:54,960 --> 00:14:58,240
I can define placeholders for
content from the left side,

398
00:14:58,240 --> 00:15:00,660
nodes from my host node,
to then be funneled and

399
00:15:00,660 --> 00:15:03,150
distributed inside of my
insertion points inside of my

400
00:15:03,150 --> 00:15:03,960
Shadow DOM.

401
00:15:03,960 --> 00:15:06,650
So internal structure in my
Shadow DOM, and then the user

402
00:15:06,650 --> 00:15:09,240
can sort of put these nodes
where they want, and I'm

403
00:15:09,240 --> 00:15:10,940
defining that internal
structure.

404
00:15:10,940 --> 00:15:13,550
So content tag is your
insertion point.

405
00:15:13,550 --> 00:15:16,910
And basically you use CSS
selectors to select out nodes

406
00:15:16,910 --> 00:15:19,390
from the host and be funneled
into the Shadow DOM.

407
00:15:19,390 --> 00:15:24,040
So this first example here is
I'm selecting out all the H2s

408
00:15:24,040 --> 00:15:28,050
in my host node, and so that's
why you see the my subtitle in

409
00:15:28,050 --> 00:15:29,420
the live demo at bottom.

410
00:15:29,420 --> 00:15:32,150
That's why that's rendered
first, rather than this title

411
00:15:32,150 --> 00:15:34,620
that I've defined in
the original host.

412
00:15:34,620 --> 00:15:37,080
The second one selects out all
elements that have the class

413
00:15:37,080 --> 00:15:41,610
title, so that's why you're
seeing my title, the H1 follow

414
00:15:41,610 --> 00:15:43,620
that my subtitle when this
thing's actually rendered in

415
00:15:43,620 --> 00:15:45,270
the browser.

416
00:15:45,270 --> 00:15:48,010
I have some other markup inside
of my Shadow DOM, and

417
00:15:48,010 --> 00:15:50,140
the last one, right, just says,
hey, select everything

418
00:15:50,140 --> 00:15:51,595
else that wasn't selected
out previously

419
00:15:51,595 --> 00:15:52,760
in insertion points.

420
00:15:52,760 --> 00:15:55,420
And so everything else in here
that I haven't selected out

421
00:15:55,420 --> 00:15:58,210
previously, which is why an
amazing description comes

422
00:15:58,210 --> 00:16:00,460
along for the ride
at the end there.

423
00:16:00,460 --> 00:16:01,380
Insertion points are crazy.

424
00:16:01,380 --> 00:16:04,100
It kind of boggled my mind when
I first started learning

425
00:16:04,100 --> 00:16:04,440
about them.

426
00:16:04,440 --> 00:16:07,220
So I actually created a tool
to help myself and to help

427
00:16:07,220 --> 00:16:09,700
everybody that wants to
learn about this.

428
00:16:09,700 --> 00:16:11,650
This is a pretty cool
visualizer tool.

429
00:16:11,650 --> 00:16:13,710
Everything in blue is
your host node.

430
00:16:13,710 --> 00:16:15,190
These are nodes that are coming
from that host that

431
00:16:15,190 --> 00:16:17,210
you're attaching
Shadow DOM to.

432
00:16:17,210 --> 00:16:20,060
Yellow is Shadow DOM content,
so these are nodes and

433
00:16:20,060 --> 00:16:21,473
elements defining Shadow DOM.

434
00:16:21,473 --> 00:16:24,090
So you can see what I do
is I have this sort

435
00:16:24,090 --> 00:16:25,870
of visualizer here.

436
00:16:25,870 --> 00:16:28,320
You've got your host node, and
immediately, what the rendered

437
00:16:28,320 --> 00:16:30,790
compose tree looks like is the
Shadow DOM is winning, right?

438
00:16:30,790 --> 00:16:33,530
So the first thing it's
rendering is the Shadow Dom,

439
00:16:33,530 --> 00:16:35,850
and as I hover over these, you
can see where they're coming

440
00:16:35,850 --> 00:16:39,080
from in the different
sections.

441
00:16:39,080 --> 00:16:41,670
In this header, for instance,
I have an insertion point.

442
00:16:41,670 --> 00:16:44,990
It's selecting out those H2s.

443
00:16:44,990 --> 00:16:46,460
One thing nice about
this is that I can

444
00:16:46,460 --> 00:16:47,320
edit this on the fly.

445
00:16:47,320 --> 00:16:50,270
If I try to change this
insertion point to select out

446
00:16:50,270 --> 00:16:53,400
H1s, it essentially becomes a
no op in that case, right?

447
00:16:53,400 --> 00:16:55,110
There's nothing that it's
selecting out, because I don't

448
00:16:55,110 --> 00:16:58,460
have any H1s in my host that
are moving over to

449
00:16:58,460 --> 00:17:00,860
the Shadow DOM world.

450
00:17:00,860 --> 00:17:02,900
And I can also do the
same thing up here.

451
00:17:02,900 --> 00:17:06,890
So if I add a bunch more H2s,
it doesn't matter where they

452
00:17:06,890 --> 00:17:07,960
are, right?

453
00:17:07,960 --> 00:17:09,740
That insertion point is
still going to select.

454
00:17:09,740 --> 00:17:11,599
That one that's selecting the
H2s is still going to select

455
00:17:11,599 --> 00:17:13,900
those out and funnel those
into the correct location

456
00:17:13,900 --> 00:17:17,089
internal to my widget
Shadow DOM.

457
00:17:17,089 --> 00:17:17,560
Very cool.

458
00:17:17,560 --> 00:17:20,060
Very powerful, when you think
about complex widgets, and

459
00:17:20,060 --> 00:17:22,280
we'll see some examples
later on.

460
00:17:22,280 --> 00:17:24,652
Shadow DOM available in Chrome,
and a couple of the

461
00:17:24,652 --> 00:17:25,160
mobile browsers.

462
00:17:25,160 --> 00:17:27,329
But I just want to point out
there's a great session later

463
00:17:27,329 --> 00:17:29,870
on actually right
in this room.

464
00:17:29,870 --> 00:17:31,200
There's polyfills for
all the stuff.

465
00:17:31,200 --> 00:17:33,080
So you can actually play with
this stuff today, which is

466
00:17:33,080 --> 00:17:33,720
really exciting.

467
00:17:33,720 --> 00:17:36,530
Shadow DOM is super complex, but
having this encapsulated

468
00:17:36,530 --> 00:17:39,620
world is very, very powerful.

469
00:17:39,620 --> 00:17:40,630
Templates.

470
00:17:40,630 --> 00:17:41,040
Shadow DOM.

471
00:17:41,040 --> 00:17:43,550
Let's talk about custom
elements.

472
00:17:43,550 --> 00:17:44,800
Anybody feel like this yet?

473
00:17:44,800 --> 00:17:47,310

474
00:17:47,310 --> 00:17:50,420
I feel like this every day.

475
00:17:50,420 --> 00:17:52,056
Custom elements.

476
00:17:52,056 --> 00:17:56,090
Custom elements is sort of where
all this comes together.

477
00:17:56,090 --> 00:17:59,080
It gives you with the element
tag the ability to define new

478
00:17:59,080 --> 00:18:00,460
HTML elements.

479
00:18:00,460 --> 00:18:04,220
So basically, if I want to
create the x-foo tag, I create

480
00:18:04,220 --> 00:18:07,610
this element definition with a
name property, and the name is

481
00:18:07,610 --> 00:18:09,500
the custom element name
that I'm creating.

482
00:18:09,500 --> 00:18:11,840
And so the only caveat here as
you see on the little hover

483
00:18:11,840 --> 00:18:14,580
here is that the name has
to have a hyphen in it.

484
00:18:14,580 --> 00:18:17,060
So it's got to have
this dash in it.

485
00:18:17,060 --> 00:18:20,150
Similar to regular DOM
elements-- the audio tag is a

486
00:18:20,150 --> 00:18:20,620
great example.

487
00:18:20,620 --> 00:18:23,680
I can create an audio tag using
the new operator in

488
00:18:23,680 --> 00:18:25,070
JavaScript.

489
00:18:25,070 --> 00:18:28,380
I can define a constructor on my
element as well, so people

490
00:18:28,380 --> 00:18:31,670
can then use that constructor
or use the new operator to

491
00:18:31,670 --> 00:18:34,110
construct my element
using new x-foo.

492
00:18:34,110 --> 00:18:34,730
So that's really cool.

493
00:18:34,730 --> 00:18:36,090
There's nothing different
here.

494
00:18:36,090 --> 00:18:38,030
We're just defining a new
element, and you should be

495
00:18:38,030 --> 00:18:42,410
able to do all the things that
you can normally do.

496
00:18:42,410 --> 00:18:44,845
So until I actually have this
definition, the browser sees

497
00:18:44,845 --> 00:18:47,750
this, it registers this element,
it knows about it.

498
00:18:47,750 --> 00:18:49,340
x-foo, if I try to use
that, it's just

499
00:18:49,340 --> 00:18:50,460
to be the HTML element.

500
00:18:50,460 --> 00:18:52,890
It's not going to be
anything special.

501
00:18:52,890 --> 00:18:53,970
But what you can do--

502
00:18:53,970 --> 00:18:57,420
there's a new CSS pseudo class,
the unresolved pseudo

503
00:18:57,420 --> 00:18:59,930
class, that you can use to
prevent things like flash of

504
00:18:59,930 --> 00:19:01,320
unstyled content.

505
00:19:01,320 --> 00:19:03,870
So if I want to, before the
browser knows about-- so I

506
00:19:03,870 --> 00:19:06,780
have a bunch x-foos on my page,
and I'm importing those

507
00:19:06,780 --> 00:19:10,680
later, maybe, I can choose to
style any unresolved element--

508
00:19:10,680 --> 00:19:12,870
I can set it to opacity
is 0, so it's kind of

509
00:19:12,870 --> 00:19:13,600
hidden from the user.

510
00:19:13,600 --> 00:19:17,320
And then when the browser knows
about it, the x-foo tag

511
00:19:17,320 --> 00:19:19,940
exists, transition
that opacity in.

512
00:19:19,940 --> 00:19:24,620
So that's kind of a cool pro
tip user experience there.

513
00:19:24,620 --> 00:19:27,310
You get life cycle callbacks
for everything.

514
00:19:27,310 --> 00:19:28,890
So there's a ready callback
that's called.

515
00:19:28,890 --> 00:19:30,570
There's an inserted callback
that's called,

516
00:19:30,570 --> 00:19:32,030
and a remove callback.

517
00:19:32,030 --> 00:19:34,330
And the use case here is maybe
you have a really complex

518
00:19:34,330 --> 00:19:37,070
component that uses something
like index DB, right?

519
00:19:37,070 --> 00:19:38,970
And you have a lot of cleanup
that you need to do before

520
00:19:38,970 --> 00:19:42,590
somebody rips and removes that
DOM node from their page.

521
00:19:42,590 --> 00:19:45,160
And so you want to have
things clean up.

522
00:19:45,160 --> 00:19:47,100
So in your remove callback, you
would make those calls.

523
00:19:47,100 --> 00:19:50,050
And so there's sort of a life
cycle of events and callbacks

524
00:19:50,050 --> 00:19:50,640
for everything.

525
00:19:50,640 --> 00:19:52,150
You really have insight
into what's going

526
00:19:52,150 --> 00:19:54,320
on with your element.

527
00:19:54,320 --> 00:19:56,170
Here's an example of creating
a definition.

528
00:19:56,170 --> 00:19:59,480
Just a pretty simple, standard,
cookie cutter

529
00:19:59,480 --> 00:20:00,650
element definition.

530
00:20:00,650 --> 00:20:03,200
So I can put markup in here,
I can put script, I have a

531
00:20:03,200 --> 00:20:05,180
section tag here.

532
00:20:05,180 --> 00:20:08,020
In my registration flow, in my
restoration process for this

533
00:20:08,020 --> 00:20:09,880
element, here is that
ready callback.

534
00:20:09,880 --> 00:20:14,060
So when this element has been
registered in a browser, all

535
00:20:14,060 --> 00:20:17,690
I'm doing is just setting its
inner text content to this

536
00:20:17,690 --> 00:20:19,850
section's text content.

537
00:20:19,850 --> 00:20:22,400
So it's pretty silly, but if I
right click on this guy, this

538
00:20:22,400 --> 00:20:26,340
demo at the bottom here, and you
see this, just to prove to

539
00:20:26,340 --> 00:20:33,380
you, hopefully you see
the x-foo down there.

540
00:20:33,380 --> 00:20:36,720
And all it is, is just set
to that inner text.

541
00:20:36,720 --> 00:20:39,630
It's a pretty silly custom
element, but it's just to show

542
00:20:39,630 --> 00:20:41,000
you how simple it is.

543
00:20:41,000 --> 00:20:45,300
And similarly to native elements
in the web platform,

544
00:20:45,300 --> 00:20:47,040
you can create a
JavaScript API.

545
00:20:47,040 --> 00:20:49,510
You can create an imperative
API on your element.

546
00:20:49,510 --> 00:20:53,250
So in this case, if somebody
called x-foo--

547
00:20:53,250 --> 00:20:56,420
the x-foo tag, they had that
element that's created in

548
00:20:56,420 --> 00:20:58,010
JavaScript and called
dash.foo, they

549
00:20:58,010 --> 00:20:58,880
would get an alert.

550
00:20:58,880 --> 00:21:02,540
So I can define a declarative
element, but also an

551
00:21:02,540 --> 00:21:05,660
imperative API for it.

552
00:21:05,660 --> 00:21:08,290
So how do we use this thing once
we define this awesome

553
00:21:08,290 --> 00:21:11,100
thing that's going to
change the world?

554
00:21:11,100 --> 00:21:12,610
And the answer is, it's no

555
00:21:12,610 --> 00:21:14,360
different than normal elements.

556
00:21:14,360 --> 00:21:15,520
So I can declare it.

557
00:21:15,520 --> 00:21:18,390
I can use x-foo once that
element definition is seen by

558
00:21:18,390 --> 00:21:20,250
the browser.

559
00:21:20,250 --> 00:21:21,580
I can create it in DOM, right?

560
00:21:21,580 --> 00:21:23,110
I can create using

561
00:21:23,110 --> 00:21:25,570
documentCreateElement with my x-foo.

562
00:21:25,570 --> 00:21:27,210
That's the tag I'm creating.

563
00:21:27,210 --> 00:21:29,530
And this example just shows you,
you can set up a click

564
00:21:29,530 --> 00:21:30,190
listener, right?

565
00:21:30,190 --> 00:21:33,430
And then when somebody clicks on
your element, you just call

566
00:21:33,430 --> 00:21:36,380
that method you've defined
in your definition.

567
00:21:36,380 --> 00:21:39,730
So we'll call that foo method
when the user clicks it.

568
00:21:39,730 --> 00:21:42,760
The last way, if we have that
constructor attribute defined

569
00:21:42,760 --> 00:21:46,400
on our element definition,
people can use and create our

570
00:21:46,400 --> 00:21:47,760
elements with the
new operator.

571
00:21:47,760 --> 00:21:53,090
So three standard ways you use
an element in HTML-- no

572
00:21:53,090 --> 00:21:57,090
different than the custom
element world.

573
00:21:57,090 --> 00:21:59,450
If you want, you can go
completely in JavaScript.

574
00:21:59,450 --> 00:22:02,270
If you want to register an
element, create it in

575
00:22:02,270 --> 00:22:05,850
JavaScript, you can do that
using document.register.

576
00:22:05,850 --> 00:22:09,030
So in this example, same element
as I had before-- so

577
00:22:09,030 --> 00:22:10,030
just a quick glance, right?

578
00:22:10,030 --> 00:22:14,550
The section tag, the ready
callback, the foo method.

579
00:22:14,550 --> 00:22:16,060
Same thing just in the
JavaScript version.

580
00:22:16,060 --> 00:22:19,490
So I can use object.create, and
I'm saying, OK, create an

581
00:22:19,490 --> 00:22:20,240
element for me.

582
00:22:20,240 --> 00:22:23,000
We're going to be inheriting
from the HTML prototype.

583
00:22:23,000 --> 00:22:27,140
So basically just a
standard element.

584
00:22:27,140 --> 00:22:28,900
I'll set up that ready callback
in JavaScript on the

585
00:22:28,900 --> 00:22:29,950
prototype chain.

586
00:22:29,950 --> 00:22:32,190
And again, the ready callback,
in this case, all it does is

587
00:22:32,190 --> 00:22:35,540
set the inner text
to I'm an x-foo.

588
00:22:35,540 --> 00:22:38,140
Example of creating the
imperative API.

589
00:22:38,140 --> 00:22:41,370
So I'll add that foo function
to my prototype chain, which

590
00:22:41,370 --> 00:22:42,780
just alerts itself.

591
00:22:42,780 --> 00:22:44,650
And the last thing here-- to
actually get this thing

592
00:22:44,650 --> 00:22:48,580
registered in the browser, call
document.register, vendor

593
00:22:48,580 --> 00:22:51,520
prefixed, with the first
argument is your tag name that

594
00:22:51,520 --> 00:22:53,980
you want to register, and the
second is an object describing

595
00:22:53,980 --> 00:22:55,260
that prototype you
just set up.

596
00:22:55,260 --> 00:22:58,820
And so once you do that, this
thing returns a constructor

597
00:22:58,820 --> 00:23:00,850
that you can then use as you
would normally expect.

598
00:23:00,850 --> 00:23:05,160
New x-foo, document.create,
x-foo tag.

599
00:23:05,160 --> 00:23:06,410
Totally standard stuff.

600
00:23:06,410 --> 00:23:11,970

601
00:23:11,970 --> 00:23:13,060
How about extending
existing elements?

602
00:23:13,060 --> 00:23:17,170
You saw in the button is
mega-button demo, right, I

603
00:23:17,170 --> 00:23:18,500
didn't like the way a
button acted, so I

604
00:23:18,500 --> 00:23:20,040
wanted to extend it.

605
00:23:20,040 --> 00:23:21,930
And so the way you do that in
your element definition is

606
00:23:21,930 --> 00:23:23,340
with one property here.

607
00:23:23,340 --> 00:23:24,590
Just extends="button".

608
00:23:24,590 --> 00:23:27,340
So I create a definition for
mega-button, and I say

609
00:23:27,340 --> 00:23:28,780
extends="button".

610
00:23:28,780 --> 00:23:30,030
That's all you're doing.

611
00:23:30,030 --> 00:23:33,260

612
00:23:33,260 --> 00:23:34,900
If you want, there's the
JavaScript version.

613
00:23:34,900 --> 00:23:37,070
Same example, but in the
JavaScript world.

614
00:23:37,070 --> 00:23:40,450
So this time, I'll use
object.create, and instead of

615
00:23:40,450 --> 00:23:45,260
inheriting from HTML element,
I'm inheriting from a

616
00:23:45,260 --> 00:23:46,475
specialized version of that.

617
00:23:46,475 --> 00:23:50,330
So I'm inheriting from HTML
button elements prototype.

618
00:23:50,330 --> 00:23:52,900
And then you register it using
document.register, give it the

619
00:23:52,900 --> 00:23:55,080
tag name, and that prototype
you've set up.

620
00:23:55,080 --> 00:23:57,090
These are called type extension
custom elements, so

621
00:23:57,090 --> 00:23:59,520
the button is a syntax.

622
00:23:59,520 --> 00:24:02,030
And there's actually a new
overloaded version of create

623
00:24:02,030 --> 00:24:04,060
element--
document.createElement--

624
00:24:04,060 --> 00:24:06,630
and the first argument you give
it is the thing you want

625
00:24:06,630 --> 00:24:07,980
to create, and so the button.

626
00:24:07,980 --> 00:24:11,300
And the second argument is
the is portion of that.

627
00:24:11,300 --> 00:24:14,250
So the button is mega-button,
and what you get back, that

628
00:24:14,250 --> 00:24:17,040
would be the markup that's
created for that.

629
00:24:17,040 --> 00:24:18,500
So that's a type extension
custom element.

630
00:24:18,500 --> 00:24:21,520
So creating new ones, extending
existing ones.

631
00:24:21,520 --> 00:24:23,390
What about template
and Shadow DOM?

632
00:24:23,390 --> 00:24:24,540
I talked about that
stuff earlier.

633
00:24:24,540 --> 00:24:27,380
It seems really cool.

634
00:24:27,380 --> 00:24:28,770
It's hard to understand.

635
00:24:28,770 --> 00:24:30,750
Where does all fit into
this picture?

636
00:24:30,750 --> 00:24:34,460
And that is really that custom
elements and Shadow

637
00:24:34,460 --> 00:24:36,720
DOM really are BFFs.

638
00:24:36,720 --> 00:24:38,620
And so here's an example of
using that stuff I talked

639
00:24:38,620 --> 00:24:39,420
about before.

640
00:24:39,420 --> 00:24:41,955
If I want to encapsulate my
markup and hide it in Shadow

641
00:24:41,955 --> 00:24:44,440
DOM so people can't traverse
into it, I

642
00:24:44,440 --> 00:24:45,525
basically set up a template.

643
00:24:45,525 --> 00:24:48,340
So I'm using HTML templates
inside of my custom element

644
00:24:48,340 --> 00:24:49,700
definition.

645
00:24:49,700 --> 00:24:53,280
You can see that I'm using the
@host at-rule to style my

646
00:24:53,280 --> 00:24:54,550
element in a certain way.

647
00:24:54,550 --> 00:24:57,590
So in this case, I'm saying hey,
please be display block

648
00:24:57,590 --> 00:25:00,290
at the bottom by default,
and also have

649
00:25:00,290 --> 00:25:01,270
your background yellow.

650
00:25:01,270 --> 00:25:05,500
So I'm styling my x-foo-shadow
tag to be

651
00:25:05,500 --> 00:25:07,350
these default styles.

652
00:25:07,350 --> 00:25:09,460
I have some markup in here.

653
00:25:09,460 --> 00:25:12,820
And in this case, since I have
Shadow DOM, in my registration

654
00:25:12,820 --> 00:25:16,590
process, in my ready callback
when the page has seen this

655
00:25:16,590 --> 00:25:18,970
element definition, I
create Shadow DOM.

656
00:25:18,970 --> 00:25:20,150
So I don't just set
inner text.

657
00:25:20,150 --> 00:25:22,840
I have to create this Shadow
DOM from this template.

658
00:25:22,840 --> 00:25:25,920
This refers to the actual
element itself.

659
00:25:25,920 --> 00:25:28,490
So that's my host node.

660
00:25:28,490 --> 00:25:30,840
I'm creating Shadow DOM and
attaching it to my x-foo

661
00:25:30,840 --> 00:25:32,260
shadow tag.

662
00:25:32,260 --> 00:25:34,480
And I append the template
contents.

663
00:25:34,480 --> 00:25:37,470
So I'll clone the content,
right, just as you saw from

664
00:25:37,470 --> 00:25:38,620
earlier in the slides.

665
00:25:38,620 --> 00:25:41,310
I'll clone that, and that's
going to be my Shadow DOM is

666
00:25:41,310 --> 00:25:43,380
the clone of this template.

667
00:25:43,380 --> 00:25:45,370
So the live demo at the bottom
here, instead of having

668
00:25:45,370 --> 00:25:48,790
something that I can view from
the outside world and traverse

669
00:25:48,790 --> 00:25:51,330
into, it's now encapsulated.

670
00:25:51,330 --> 00:25:53,830
It's not only style
encapsulation, but markup

671
00:25:53,830 --> 00:25:54,680
encapsulation.

672
00:25:54,680 --> 00:25:58,600
So my x-foo down here, if I try
to traverse into it, you

673
00:25:58,600 --> 00:26:00,810
see that document fragment
now that's been attached.

674
00:26:00,810 --> 00:26:01,550
That's my Shadow DOM.

675
00:26:01,550 --> 00:26:04,490
That's the hidden markup, and
inside of that is the stuff

676
00:26:04,490 --> 00:26:05,950
that I filled it with.

677
00:26:05,950 --> 00:26:08,380
So again, the only reason I
can do this is because dev

678
00:26:08,380 --> 00:26:10,100
tools has that show Shadow
DOM flag on.

679
00:26:10,100 --> 00:26:13,660
Normally, a person viewing
source would only see this

680
00:26:13,660 --> 00:26:14,980
x-foo shadow tag.

681
00:26:14,980 --> 00:26:16,180
So it's really, really
awesome.

682
00:26:16,180 --> 00:26:18,580
That's Shadow DOM, and that's
how you use templates in

683
00:26:18,580 --> 00:26:21,940
Shadow DOM inside of
a custom element.

684
00:26:21,940 --> 00:26:23,030
But what about insertion
points?

685
00:26:23,030 --> 00:26:25,000
So I kind of glossed
over that.

686
00:26:25,000 --> 00:26:26,540
I showed you the tool.

687
00:26:26,540 --> 00:26:28,510
This is where things get really,
really powerful.

688
00:26:28,510 --> 00:26:31,800
I can define a my-tabs
element, right?

689
00:26:31,800 --> 00:26:33,880
So this is going to be
like a tabs widget.

690
00:26:33,880 --> 00:26:36,650
Inside of that, I'll
create a template.

691
00:26:36,650 --> 00:26:39,300
Inert markup until I use it.

692
00:26:39,300 --> 00:26:41,840
And I'll create a couple
of insertion points for

693
00:26:41,840 --> 00:26:43,440
people to adhere to.

694
00:26:43,440 --> 00:26:44,750
So this is my internal
structure.

695
00:26:44,750 --> 00:26:47,425
I'm saying, please, markup, go
here, go here, go here, and

696
00:26:47,425 --> 00:26:50,250
then I can style this inside
of my custom element

697
00:26:50,250 --> 00:26:52,480
definition any way I want.

698
00:26:52,480 --> 00:26:56,820
So as a user of this tag, when
somebody uses my-tabs, they

699
00:26:56,820 --> 00:26:58,510
would use it like this
at the bottom, right?

700
00:26:58,510 --> 00:26:59,880
They would declare
the my-tabs.

701
00:26:59,880 --> 00:27:02,990
Inside of it, they could put
H2s, they could put section

702
00:27:02,990 --> 00:27:08,640
tags describing the tab, the
title, and the content for it.

703
00:27:08,640 --> 00:27:11,960
And so internal to my custom
element in my Shadow DOM, I

704
00:27:11,960 --> 00:27:12,900
make it look like this, right?

705
00:27:12,900 --> 00:27:15,250
With style encapsulation
with my Shadow DOM.

706
00:27:15,250 --> 00:27:18,060
With insertion points, I can
tell the H2s to go into these

707
00:27:18,060 --> 00:27:20,120
certain areas.

708
00:27:20,120 --> 00:27:22,340
So these become super, super
powerful when you combine it

709
00:27:22,340 --> 00:27:24,870
with all these extra goodies.

710
00:27:24,870 --> 00:27:27,940
Firefox nightly has
document.register, Chrome has

711
00:27:27,940 --> 00:27:29,540
document.register, and that's
why these are partially

712
00:27:29,540 --> 00:27:30,200
highlighted.

713
00:27:30,200 --> 00:27:34,330
The actual definition part is
not in any browser yet, but

714
00:27:34,330 --> 00:27:35,290
document.register is.

715
00:27:35,290 --> 00:27:37,200
You can play with it today.

716
00:27:37,200 --> 00:27:39,670
So templates, Shadow DOM,
custom elements.

717
00:27:39,670 --> 00:27:44,710
The last piece of this equation
is HTML imports.

718
00:27:44,710 --> 00:27:48,150
HTML imports allow us to import
an entire HTML document

719
00:27:48,150 --> 00:27:50,170
inside of our application.

720
00:27:50,170 --> 00:27:53,140
All we have to do is declare a
link rel-- so there's a new

721
00:27:53,140 --> 00:27:54,610
rel import type.

722
00:27:54,610 --> 00:27:58,670
So link rel="import", and then
you reference an HTML file

723
00:27:58,670 --> 00:27:59,130
anywhere on the web, right?

724
00:27:59,130 --> 00:28:02,110
It can be on a CDN, it can
be local to your app.

725
00:28:02,110 --> 00:28:05,200
Maybe this HTML file has a bunch
of element definitions

726
00:28:05,200 --> 00:28:06,120
inside of it.

727
00:28:06,120 --> 00:28:08,780
So once I do that, that's where
I get on my definitions

728
00:28:08,780 --> 00:28:11,150
from, and x-foo is
defined in it.

729
00:28:11,150 --> 00:28:14,190
Then I can use that
tag on my page.

730
00:28:14,190 --> 00:28:16,230
So this becomes really powerful,
because then you can

731
00:28:16,230 --> 00:28:19,000
start to reuse other people's
components, or you can reuse

732
00:28:19,000 --> 00:28:21,310
components you've written
in the past.

733
00:28:21,310 --> 00:28:25,390
So inside of awesome-menu.html,
I can link

734
00:28:25,390 --> 00:28:27,780
in an x-toolbar tag somebody's
created.

735
00:28:27,780 --> 00:28:31,160
I can link in a menu item
somebody's created.

736
00:28:31,160 --> 00:28:33,345
And when I'm creating this
awesome menu, this new tag

737
00:28:33,345 --> 00:28:37,040
that I'm defining in HTML,
I can use that work.

738
00:28:37,040 --> 00:28:39,650
So whether it's mine, somebody
else's, totally cool.

739
00:28:39,650 --> 00:28:42,350
And so this is an example of a
custom element using other

740
00:28:42,350 --> 00:28:43,710
custom elements.

741
00:28:43,710 --> 00:28:44,900
Kind of boggles your mind.

742
00:28:44,900 --> 00:28:47,560
But it's super, super handy, and
really, really powerful.

743
00:28:47,560 --> 00:28:49,740
At the bottom, this is what
somebody would use.

744
00:28:49,740 --> 00:28:51,370
My awesome menu.

745
00:28:51,370 --> 00:28:54,380
They would just instantiate the
tag, and they would link

746
00:28:54,380 --> 00:28:56,570
rel import that.

747
00:28:56,570 --> 00:28:57,820
Very, very cool.

748
00:28:57,820 --> 00:28:59,830

749
00:28:59,830 --> 00:29:02,400
This one is not supported
anywhere yet.

750
00:29:02,400 --> 00:29:05,380
But it's polyfilled, so you
can check out the session

751
00:29:05,380 --> 00:29:07,950
after this to learn
more about it.

752
00:29:07,950 --> 00:29:08,620
So templates, right?

753
00:29:08,620 --> 00:29:12,040
Inert chunks of markup
to be reused later.

754
00:29:12,040 --> 00:29:15,290
Shadow DOM for encapsulatable
styles in DOM.

755
00:29:15,290 --> 00:29:16,720
Custom elements--

756
00:29:16,720 --> 00:29:19,180
that will give us the actual
definitions of how we create a

757
00:29:19,180 --> 00:29:21,190
new element in HTML.

758
00:29:21,190 --> 00:29:23,980
And HTML imports allow us to
then import, whether it's a

759
00:29:23,980 --> 00:29:27,070
document, whether it's element
definitions, any HTML into our

760
00:29:27,070 --> 00:29:29,470
own document.

761
00:29:29,470 --> 00:29:34,120
So hopefully you guys sort of
see the zen moment here, which

762
00:29:34,120 --> 00:29:34,660
is pretty cool.

763
00:29:34,660 --> 00:29:35,850
It's very powerful.

764
00:29:35,850 --> 00:29:38,380
It's thinking about building
apps in a declarative HTML

765
00:29:38,380 --> 00:29:40,550
way, which is different
than we're currently

766
00:29:40,550 --> 00:29:42,530
thinking about it.

767
00:29:42,530 --> 00:29:45,570
A couple of inspiring demos,
just for kicks.

768
00:29:45,570 --> 00:29:48,670
So we can create a meme gen
tag, which is pretty cool.

769
00:29:48,670 --> 00:29:53,370

770
00:29:53,370 --> 00:29:56,180
So this is a coworker, Seth
Ladd, and he's on

771
00:29:56,180 --> 00:29:57,340
a beach right now.

772
00:29:57,340 --> 00:29:59,340
And I have content
editable here.

773
00:29:59,340 --> 00:30:01,530
Sup Google IO.

774
00:30:01,530 --> 00:30:03,980
Web rocks!

775
00:30:03,980 --> 00:30:07,570
And so I've set a click listener
for an on change

776
00:30:07,570 --> 00:30:10,450
event on this input, so this is
internal to my widget and

777
00:30:10,450 --> 00:30:11,320
my component.

778
00:30:11,320 --> 00:30:13,990
I can change its background, so
he can be now on the Golden

779
00:30:13,990 --> 00:30:15,735
Gate Bridge in San Francisco.

780
00:30:15,735 --> 00:30:18,610
Can throw him over an NYC
if he needs to be.

781
00:30:18,610 --> 00:30:20,770
So again, and it's just
a tag, right?

782
00:30:20,770 --> 00:30:22,720
So this is what somebody would
declare on their page.

783
00:30:22,720 --> 00:30:24,710
They would give it a source,
I've defined it an attribute

784
00:30:24,710 --> 00:30:28,360
on my element, just as
with normal HTML.

785
00:30:28,360 --> 00:30:31,700
And then inside of it, they
have H1s and H2s for those

786
00:30:31,700 --> 00:30:33,790
headers, and so those are
insertion points, then, being

787
00:30:33,790 --> 00:30:37,470
funneled in to my
custom element.

788
00:30:37,470 --> 00:30:38,850
But it's also about thinking
about apps, right?

789
00:30:38,850 --> 00:30:42,590
So you can kind of encapsulate
and encompass whole

790
00:30:42,590 --> 00:30:44,040
functionality into a tag now.

791
00:30:44,040 --> 00:30:46,910
So I can create a photo booth
tag, and its sole purpose is

792
00:30:46,910 --> 00:30:54,450
to basically just wrap the get
user media APIs to do a photo

793
00:30:54,450 --> 00:30:55,960
booth effect in the browser.

794
00:30:55,960 --> 00:30:58,950

795
00:30:58,950 --> 00:31:00,440
We're going to get this
to work, you guys.

796
00:31:00,440 --> 00:31:06,970

797
00:31:06,970 --> 00:31:09,180
OK, we're not going
to get it to work.

798
00:31:09,180 --> 00:31:14,670
But you can imagine my face
going through this, and

799
00:31:14,670 --> 00:31:16,700
there's CSS filters and stuff.

800
00:31:16,700 --> 00:31:17,585
But very cool.

801
00:31:17,585 --> 00:31:19,870
So using other parts of the web
platform, like new parts,

802
00:31:19,870 --> 00:31:22,420
like web RTC, wrap it
in a tag, right?

803
00:31:22,420 --> 00:31:26,185
So now I have basically an app
within an app, and all

804
00:31:26,185 --> 00:31:29,570
somebody has to do is link,
import this into your app, and

805
00:31:29,570 --> 00:31:31,980
you've got that functionality
for free.

806
00:31:31,980 --> 00:31:32,880
So can you try this today?

807
00:31:32,880 --> 00:31:35,510
The answer is totally you
can try this today.

808
00:31:35,510 --> 00:31:38,770
Apart from that last demo,
everything worked as expected.

809
00:31:38,770 --> 00:31:40,370
You can enable a couple feature

810
00:31:40,370 --> 00:31:41,550
flags in Chrome Canary.

811
00:31:41,550 --> 00:31:43,520
I definitely recommend
Chrome Canary.

812
00:31:43,520 --> 00:31:46,007
It's got the experimental web
features flag that you can

813
00:31:46,007 --> 00:31:48,430
enable, experimental JavaScript
features flag.

814
00:31:48,430 --> 00:31:50,340
If you're trying Shadow DOM,
trying to understand that

815
00:31:50,340 --> 00:31:54,100
crazy complex, please show
Shadow DOM in the dev tools,

816
00:31:54,100 --> 00:31:54,810
enable that.

817
00:31:54,810 --> 00:31:56,560
Super, super handy.

818
00:31:56,560 --> 00:31:59,620
If you want to follow at least
Chrome and Blink's

819
00:31:59,620 --> 00:32:03,290
implementation of the web
component stuff, there's this

820
00:32:03,290 --> 00:32:05,140
hot list that you can link to.

821
00:32:05,140 --> 00:32:06,880
I'll have a link to the
slides at the end, so

822
00:32:06,880 --> 00:32:08,170
don't take it down.

823
00:32:08,170 --> 00:32:10,670
But sort of in flight,
low level stuff.

824
00:32:10,670 --> 00:32:13,370
If you want to know about where
this stuff is in flight,

825
00:32:13,370 --> 00:32:15,080
check out the session
right after this.

826
00:32:15,080 --> 00:32:16,730
It's about all these
polyfill libraries

827
00:32:16,730 --> 00:32:17,320
that I've showed you.

828
00:32:17,320 --> 00:32:18,370
All the live demos.

829
00:32:18,370 --> 00:32:20,900
That's what the stuff
is using.

830
00:32:20,900 --> 00:32:22,120
So plug for that.

831
00:32:22,120 --> 00:32:23,890
You don't even have to
move in this room.

832
00:32:23,890 --> 00:32:26,620
This session's going to be up
at webcomponentsshift.com.

833
00:32:26,620 --> 00:32:29,620
Again, I'm going to put in on
GitHub, so there's my GitHub

834
00:32:29,620 --> 00:32:30,470
link down there.

835
00:32:30,470 --> 00:32:31,650
I really appreciate
you guys' time.

836
00:32:31,650 --> 00:32:33,820
Thanks for tuning in
on the live stream.

837
00:32:33,820 --> 00:32:35,070
Thank you.

838
00:32:35,070 --> 00:32:38,997

