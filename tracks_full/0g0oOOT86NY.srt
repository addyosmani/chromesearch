1
00:00:02,100 --> 00:00:06,660
>>Alex Komoroske: Hi. Welcome. Thanks for
coming back after lunch. We'll get started.

2
00:00:06,660 --> 00:00:09,350
I'm Alex Komoroske.
>>Matthew McNulty: And I'm Matt McNulty.

3
00:00:09,350 --> 00:00:13,000
>>Alex Komoroske: And we both work on Chrome
on the Open Web Platform team.

4
00:00:13,000 --> 00:00:16,850
Now, before we get really started I just want
to reiterate that this is an intermediate

5
00:00:16,850 --> 00:00:21,110
level talk, so if you saw Eric's talk just
before this, before lunch, you're probably

6
00:00:21,110 --> 00:00:24,440
all set. If not, there are going to be a lot
of points where you're just scratching your

7
00:00:24,440 --> 00:00:29,400
head, and what you want to do is review some
of the other specs and tutorials on some of

8
00:00:29,400 --> 00:00:32,640
these emerging web standards afterwards.
>>Matthew McNulty: And all children should

9
00:00:32,640 --> 00:00:34,640
leave the room as well.
[ Laughter ]

10
00:00:34,640 --> 00:00:39,129
>>Alex Komoroske: So if you saw Eric's talk,
you're probably thinking to yourself, you

11
00:00:39,129 --> 00:00:44,449
know, "Wow, web components sounds really cool.
Specifications are being finalized. Browsers

12
00:00:44,449 --> 00:00:51,019
are starting to implement them." But...
>>Matthew McNulty: But if you're a web developer,

13
00:00:51,019 --> 00:00:54,530
you're thinking, "I probably can't use these
things. Call me in a few years when I actually

14
00:00:54,530 --> 00:00:56,469
can and when this is actually relevant to
me."

15
00:00:56,469 --> 00:01:00,739
>>Alex Komoroske: So the good news for you
is actually that this stuff works in all modern

16
00:01:00,739 --> 00:01:06,170
browsers today.
>>Matthew McNulty: So here I have a version

17
00:01:06,170 --> 00:01:10,020
of TODOMDC.
>>Alex Komoroske: And if you don't know what

18
00:01:10,020 --> 00:01:14,789
TODOMDC is, it's just a reference application.
It's something that people use to write this

19
00:01:14,789 --> 00:01:18,579
application again in their framework to compare
it and see how it feels compared to other

20
00:01:18,579 --> 00:01:23,030
frameworks.
>>Matthew McNulty: But the interesting thing

21
00:01:23,030 --> 00:01:28,530
about this one, if I inspect elements, is
it uses web components.

22
00:01:28,530 --> 00:01:35,530
So you see the entire thing is wrapped up
in a TD dash app tag. And if I go into settings,

23
00:01:36,630 --> 00:01:43,630
I can click show Shadow DOM, leave, reinspect,
and you'll see now I can actually open that

24
00:01:48,189 --> 00:01:52,299
node and the grayed-out document fragment
is actually a sign that you're in Shadow DOM

25
00:01:52,299 --> 00:01:57,950
now. So this entire little world inside this
tag is encapsulated from the outside world.

26
00:01:57,950 --> 00:02:00,890
There's a hard border at the edge.
>>Alex Komoroske: Okay. But so that's easy

27
00:02:00,890 --> 00:02:02,319
because that's Chrome, so what about something
harder?

28
00:02:02,319 --> 00:02:06,569
>>Matthew McNulty: All right. In this VM which
I've paused, because that seems to be the

29
00:02:06,569 --> 00:02:08,609
best way to get Windows to stay up for this
period of time --

30
00:02:08,609 --> 00:02:11,940
[ Laughter ]
>>Matthew McNulty: -- for purposes of this

31
00:02:11,940 --> 00:02:17,740
presentation I've got it here in IE as well
in Windows 8.

32
00:02:17,740 --> 00:02:23,400
>>Alex Komoroske: So it's the same code using,
again, these concepts of Shadow DOM web components

33
00:02:23,400 --> 00:02:26,940
that's working in IE.
So how did we do this? How did we make this

34
00:02:26,940 --> 00:02:31,570
happen? Well, the answer is that we're impatient.
We're really excited about web components

35
00:02:31,570 --> 00:02:35,840
but we didn't want to wait to use them until
they were in every modern browser.

36
00:02:35,840 --> 00:02:39,500
The other important thing is we work on the
Chrome team where some of the folks who are

37
00:02:39,500 --> 00:02:43,850
actively standardizing the web components
stuff in the standards bodies, and when you're

38
00:02:43,850 --> 00:02:47,870
designing new web standards, it's really important
to experiment with them, especially if they're

39
00:02:47,870 --> 00:02:51,290
very complex.
What you don't want is you work on a specification

40
00:02:51,290 --> 00:02:55,260
for a while, you build consensus, you implement
it, you ship it, and then you use it and you

41
00:02:55,260 --> 00:02:59,320
go, "Oooh, wow, that's really hard to use."
And so you want to experiment with this stuff

42
00:02:59,320 --> 00:03:04,540
and feed that feedback directly back into
the standardization process before it gets

43
00:03:04,540 --> 00:03:09,340
locked in.
So you want to, you know, improve these standards

44
00:03:09,340 --> 00:03:13,520
and not just work around them.
So we started what was kind of a crazy experiment

45
00:03:13,520 --> 00:03:17,500
to see if we could make this stuff work in
modern browsers. We started a project a number

46
00:03:17,500 --> 00:03:22,090
of months ago on Github doing everything fully
in public. We called it Toolkitchen until

47
00:03:22,090 --> 00:03:25,830
a few days ago when we renamed it Polymer.
>>Matthew McNulty: We renamed it a few times,

48
00:03:25,830 --> 00:03:28,030
actually.
>>Alex Komoroske: If you were working on it

49
00:03:28,030 --> 00:03:32,680
closely, there were two renames in short succession.
We've already gotten some really good community

50
00:03:32,680 --> 00:03:37,120
participation from folks who have found out
about it and provided feedback. We're really

51
00:03:37,120 --> 00:03:40,870
happy about that. And we've also been able
to provide feedback back into the specification

52
00:03:40,870 --> 00:03:47,790
process to help identify some areas in the
specs that we thought needed to change.

53
00:03:47,790 --> 00:03:53,650
>>Matthew McNulty: So we're focused on modern
browsers for a couple of reasons. Older browsers,

54
00:03:53,650 --> 00:03:57,880
you just can't polyfill some of this stuff.
And really it's -- you know, it's time for

55
00:03:57,880 --> 00:04:00,870
a break. We want to move forward. And we don't
want anyone who is using this stuff to be

56
00:04:00,870 --> 00:04:04,610
left behind, kind of like the current older
browsers that don't update.

57
00:04:04,610 --> 00:04:09,570
You know, you're headed for trouble if all
do you is stare in the rearview mirror.

58
00:04:09,570 --> 00:04:13,990
So this approach is hard. We didn't know it
would work. We actually didn't really know

59
00:04:13,990 --> 00:04:17,479
it would work for the first six months or
so, whether we could actually get this stuff

60
00:04:17,479 --> 00:04:20,880
working in a way that really emulated the
future platform in a way that we could work

61
00:04:20,880 --> 00:04:25,160
together and form a coherent system. We've
been working with all the different standards

62
00:04:25,160 --> 00:04:28,620
bodies and providing feedback, as Alex said.
Yeah.

63
00:04:28,620 --> 00:04:32,270
>>Alex Komoroske: But the point is actually
that it does work today and it brings you

64
00:04:32,270 --> 00:04:35,380
the future and allows you to build on top
of it today.

65
00:04:35,380 --> 00:04:39,530
So the way I think about this is what's actually
implemented in browsers today is like the

66
00:04:39,530 --> 00:04:43,540
bedrock. It's a solid foundation but it's
kind of uneven because different browsers

67
00:04:43,540 --> 00:04:49,530
have different support for different things.
The answer to this is polyfills. Not a new

68
00:04:49,530 --> 00:04:53,990
concept. A polyfill is a JavaScript library
that basically mocks out a future standard

69
00:04:53,990 --> 00:04:58,320
so that you can use it before it actually
is deployed in all modern browsers.

70
00:04:58,320 --> 00:05:03,310
The goal with polyfills is to have really
high fidelity, so that way, later you don't

71
00:05:03,310 --> 00:05:05,860
even need it.
>>Matthew McNulty: So perfect fidelity is

72
00:05:05,860 --> 00:05:10,070
not always possible in some of these things.
Everyone always goes, "Oh, but what about"

73
00:05:10,070 --> 00:05:15,310
and they're usually right. So things like
styling scoping, encapsulation in any real

74
00:05:15,310 --> 00:05:19,080
significant way, are just not possible in
JavaScript but we've gotten pretty close.

75
00:05:19,080 --> 00:05:22,430
>>Alex Komoroske: So we'll go over these polyfills
very briefly.

76
00:05:22,430 --> 00:05:26,650
These are each -- almost all of these are
emerging standards so we only have a chance

77
00:05:26,650 --> 00:05:30,820
to say about a sentence about each one. If
you are wondering what these are, check out

78
00:05:30,820 --> 00:05:33,790
the specs, check out the tutorials to learn
more about these.

79
00:05:33,790 --> 00:05:40,450
>>Matthew McNulty: So mutation observers allow
for the efficient observations of DOM, so

80
00:05:40,450 --> 00:05:44,180
when new nodes are added or attributes are
changed. This one is actually already shipping

81
00:05:44,180 --> 00:05:47,220
in most modern browsers.
>>Alex Komoroske: So the next one is pointer

82
00:05:47,220 --> 00:05:52,760
events. This is a specification that unifies
the event models for touch and mouse. It allows

83
00:05:52,760 --> 00:05:57,490
you to write the same code and have it run
on mobile devices and desktop devices as well.

84
00:05:57,490 --> 00:06:00,880
In fact, everything we're showing you here
today works both on desktop and on mobile

85
00:06:00,880 --> 00:06:04,889
devices.
>>Matthew McNulty: So Shadow DOM is a pillar

86
00:06:04,889 --> 00:06:09,860
of web components. This brings encapsulation
to the platform for the first time. Which

87
00:06:09,860 --> 00:06:14,110
is really, really, really big and we'll show
that to you a little bit. It's also incredibly

88
00:06:14,110 --> 00:06:18,650
complicated, especially to grasp right away,
but the big -- the big point is it gives you

89
00:06:18,650 --> 00:06:22,240
the ability to encapsulate things within a
tag.

90
00:06:22,240 --> 00:06:24,960
And so if you need to know more about that,
I refer you to Eric's talk that happened just

91
00:06:24,960 --> 00:06:28,840
before this one, or just before lunch.
>>Alex Komoroske: The next one is custom elements.

92
00:06:28,840 --> 00:06:33,610
This is another pillar of web components.
It allows you to define your own tags and

93
00:06:33,610 --> 00:06:38,650
have them operate just like any other tags
in the browser. It allows you to create these

94
00:06:38,650 --> 00:06:43,020
elements and put whatever you want inside
of them, even ones of arbitrary complexity,

95
00:06:43,020 --> 00:06:45,900
and have them treated just like any other
tag that you're familiar with, like the video

96
00:06:45,900 --> 00:06:50,250
tag or Canvas or whatever.
>>Matthew McNulty: HTML imports. This one

97
00:06:50,250 --> 00:06:54,460
was known as a few different things. Link
rel imports, web components itself briefly

98
00:06:54,460 --> 00:06:58,139
for a little bit, but now it's HTML imports.
And the big thing with this one, it allows

99
00:06:58,139 --> 00:07:03,490
you to package CSS, JavaScript, HTML, into
a single module and import it into your app

100
00:07:03,490 --> 00:07:07,600
and it allows reusability across multiple
applications or multiple parts of your application.

101
00:07:07,600 --> 00:07:11,370
>>Alex Komoroske: So this next one is MDV,
which stands for "model driven views." This

102
00:07:11,370 --> 00:07:15,650
is the only one in this list that isn't really
an emerging standard yet although hopefully

103
00:07:15,650 --> 00:07:18,900
one day it will be.
It's something that allows you to do data

104
00:07:18,900 --> 00:07:22,710
binding directly in HTML. And as we've been
playing with all of these, this is one that

105
00:07:22,710 --> 00:07:27,310
really allows us to eliminate a lot of boilerplate
code in practice.

106
00:07:27,310 --> 00:07:33,930
>>Matthew McNulty: So web animations unifies
CSS and SVG animations and exposes the primitives

107
00:07:33,930 --> 00:07:39,300
beneath those and allows you to create really
complex animation sequences separate from

108
00:07:39,300 --> 00:07:43,389
the things you want to animate. It's actually
a really, really cool project. It predates

109
00:07:43,389 --> 00:07:48,580
when we started working on toolkitchen, now
polymer. And actually Mozilla, Google, Adobe,

110
00:07:48,580 --> 00:07:51,300
were all collaborated on that polyfill and
it's included.

111
00:07:51,300 --> 00:07:55,050
>>Alex Komoroske: So together, these form
a stable foundation that allows you to pretend

112
00:07:55,050 --> 00:07:59,669
like you're living in the future and build
there. So the cool thing about polyfills is

113
00:07:59,669 --> 00:08:03,790
that over time as the -- as browser vendors
implement these features, the need for them

114
00:08:03,790 --> 00:08:08,120
goes away, and so ultimately at some point
in the future you wouldn't even need this

115
00:08:08,120 --> 00:08:12,870
layer at all.
>>Matthew McNulty: So and one of the other

116
00:08:12,870 --> 00:08:17,199
great things about this is we designed this
to be a la carte. So you can use each individual

117
00:08:17,199 --> 00:08:22,550
-- each individual polyfill or you can combine
a couple together or you can take the entire

118
00:08:22,550 --> 00:08:28,060
thing, and if you want, actually, to take
the entire platform and minimize a gzip version

119
00:08:28,060 --> 00:08:33,459
of that, it's actually only 31K. So think
about that. That's actually the entire future

120
00:08:33,459 --> 00:08:36,269
of the web platform for about the size of
an icon.

121
00:08:36,269 --> 00:08:38,309
>>Alex Komoroske: Most of the future of the
web platform.

122
00:08:38,309 --> 00:08:42,039
So we've been talking about modern browsers.
Let me define that real quick. This is our

123
00:08:42,039 --> 00:08:48,089
compatibility chart for our polyfills. It
includes Chrome, Firefox, IE, Safari, also

124
00:08:48,089 --> 00:08:52,040
their mobile variants.
We call these the evergreen browsers. These

125
00:08:52,040 --> 00:08:57,639
are browsers that are modern. They support,
many of them, the new standards. They also

126
00:08:57,639 --> 00:09:02,800
importantly keep their users updated by default.
So users don't have to do anything unusual

127
00:09:02,800 --> 00:09:06,550
just to stay on the newest one. So the users
aren't going to live in the past for long.

128
00:09:06,550 --> 00:09:09,389
When there's a new version, they'll just come
along to the new version, which is really

129
00:09:09,389 --> 00:09:13,180
important.
Okay. So web components provides -- this foundation

130
00:09:13,180 --> 00:09:17,259
layer provides a lot like a utility belt that
allows you to build apps but it's not everything

131
00:09:17,259 --> 00:09:21,360
you need. You need some higher-level stack
pieces to fit them together and really make

132
00:09:21,360 --> 00:09:24,050
them work together.
>>Matthew McNulty: We realized we needed to

133
00:09:24,050 --> 00:09:31,050
build a toolkit. So this toolkit, which we
call polymer, it weaves together all of the

134
00:09:31,189 --> 00:09:35,240
lower level pieces of the platform into a
whole cloth for building applications. It's

135
00:09:35,240 --> 00:09:37,680
also where we express our opinion on top of
that.

136
00:09:37,680 --> 00:09:41,970
>>Alex Komoroske: So this layer, unlike the
layer below it which will disappear over time,

137
00:09:41,970 --> 00:09:45,410
this layer will continue to exist because
it's not part of any spec. It's our opinion

138
00:09:45,410 --> 00:09:49,749
on how to use these things productively together.
Although hopefully maybe if these kinds of

139
00:09:49,749 --> 00:09:53,790
patterns become popular and other libraries
use them too, maybe this is something that

140
00:09:53,790 --> 00:09:59,680
could be specified in a web standard in the
future, maybe.

141
00:09:59,680 --> 00:10:04,709
>>Matthew McNulty: So we started out with
some core principles to build a new kind of

142
00:10:04,709 --> 00:10:09,139
toolkit, right? One with the future in mind.
So this is -- you know, we're leaving behind

143
00:10:09,139 --> 00:10:12,480
the past. We've got these new toys to play
with. What can we do if we actually had all

144
00:10:12,480 --> 00:10:17,240
of these things and does it actually work?
>>Alex Komoroske: So these principles are

145
00:10:17,240 --> 00:10:21,269
use the platform, eliminate boilerplate, and
everything is an element.

146
00:10:21,269 --> 00:10:26,519
>>Matthew McNulty: So use the platform. So
this is a big change, at least for me and

147
00:10:26,519 --> 00:10:30,179
others who have built JavaScript frameworks
before. You know, for the most part, the web

148
00:10:30,179 --> 00:10:35,319
has been not particularly great -- a great
spot to build Webapps. The platform, like

149
00:10:35,319 --> 00:10:38,860
Alex said -- right? -- it's rocky, it's uneven
on the bottom of the.

150
00:10:38,860 --> 00:10:43,189
And, you know, as a result, a lot of really,
really talented JavaScript developers have

151
00:10:43,189 --> 00:10:47,339
spent their time building frameworks and building
these entire worlds and separate render trees

152
00:10:47,339 --> 00:10:52,529
and doing really kind of crazy amazing things
like using iFrames to force rendering behavior

153
00:10:52,529 --> 00:10:58,439
in the browser, you know, just to get around
problems -- problems on the platform.

154
00:10:58,439 --> 00:11:04,679
So, you know, we were tasked very specifically,
you know, no tricks. So if you hit a problem

155
00:11:04,679 --> 00:11:09,189
and, you know, something doesn't work well,
you know, we're on the Chrome team so we're

156
00:11:09,189 --> 00:11:12,429
actually allowed to go to the guy around the
corner in the next cube and say, "Hey, can

157
00:11:12,429 --> 00:11:14,179
you fix this?"
>>Alex Komoroske: "Let's file a bug. Let's

158
00:11:14,179 --> 00:11:16,040
get that fixed."
>>Matthew McNulty: A bug, yeah. So we wanted

159
00:11:16,040 --> 00:11:20,100
to use the platform, not just the existing
platform but this new platform. We have all

160
00:11:20,100 --> 00:11:23,100
these new toys that we're being given. We
wanted to see what we could do with them.

161
00:11:23,100 --> 00:11:28,360
>>Alex Komoroske: The next one is to eliminate
boilerplate. So on this team we're very, very

162
00:11:28,360 --> 00:11:32,429
adamant about that, that you should only write
the code that's unique to your app and nothing

163
00:11:32,429 --> 00:11:35,939
more. You shouldn't have to be recreating
these things every single time you're writing

164
00:11:35,939 --> 00:11:38,929
an app.
>>Matthew McNulty: And everything is an element.

165
00:11:38,929 --> 00:11:42,119
This one is really, really important but I'm
going to hammer it home about a hundred more

166
00:11:42,119 --> 00:11:45,939
times so you can not pay attention to this
one.

167
00:11:45,939 --> 00:11:49,929
So the idea is every single thing is a module,
right? And you use an element. And you build

168
00:11:49,929 --> 00:11:54,769
applications out of bigger and bigger elements
made -- made of more and more elements, up

169
00:11:54,769 --> 00:11:59,100
to and including an actual app.
By doing this, you've got all these reasonable

170
00:11:59,100 --> 00:12:04,929
little portions. You keep the developer's
context really local. You reduce bugs. And

171
00:12:04,929 --> 00:12:09,610
it makes it so that, you know, from the perspective
of a developer at any given time, an application

172
00:12:09,610 --> 00:12:16,610
can be arbitrarily -- sorry, arbitrarily simple
and complex at the same time.

173
00:12:16,829 --> 00:12:23,829
So we wanted a system that weaves together
the platform to enable component-based apps.

174
00:12:25,739 --> 00:12:29,970
So everything is an element and every -- and
all elements have Shadow DOM encapsulating

175
00:12:29,970 --> 00:12:33,809
them.
Polymer makes building elements easier, and

176
00:12:33,809 --> 00:12:37,309
from the outside -- you know, from the inside,
you're building your own in polymer. From

177
00:12:37,309 --> 00:12:39,850
the outside, it's just an element. It looks
like every other DOM element.

178
00:12:39,850 --> 00:12:43,149
>>Alex Komoroske: So just like every other
DOM element, the way you pass in configuration

179
00:12:43,149 --> 00:12:47,629
is via attributes and the way you pass things
out of it is via element, so from the outside

180
00:12:47,629 --> 00:12:52,290
perspective, it's just an element.
>>Matthew McNulty: So this is an example of

181
00:12:52,290 --> 00:12:57,809
polymer JS element. This one is a polymer
panels element, so all custom elements need

182
00:12:57,809 --> 00:13:02,179
to have a dash in the name. That's the only
requirement. It used to be an X dash. But

183
00:13:02,179 --> 00:13:07,499
this allows for different vendors to provide
their own prefix to things, and namespace

184
00:13:07,499 --> 00:13:11,689
to things, and it's important to note this
is not XML namespacing. There's, you know,

185
00:13:11,689 --> 00:13:16,499
no collision detection or things like that.
People just have to be on good behavior.

186
00:13:16,499 --> 00:13:21,230
So in this case, it's a polymer panels app
that would provide like say a series of sliding

187
00:13:21,230 --> 00:13:27,649
panels or a carousel or something like that.
So one of the first big features that we add

188
00:13:27,649 --> 00:13:32,589
is declarative mapping of custom and DOM events
to methods within the element. So in this

189
00:13:32,589 --> 00:13:37,869
case when a select event is fired, the panel
select handler element with that method name

190
00:13:37,869 --> 00:13:43,600
-- this is not code that's executed -- will
be rerun on the actual element.

191
00:13:43,600 --> 00:13:47,529
>>Alex Komoroske: So again, this makes it
easy to behave just like any other element

192
00:13:47,529 --> 00:13:50,850
and pass things out via events.
>>Matthew McNulty: Yeah. And one of the nice

193
00:13:50,850 --> 00:13:54,139
things we like about this is rather than like
what's currently in vogue with add event listener

194
00:13:54,139 --> 00:14:00,839
and for security reasons, we've reestablished
a way of doing it in declarative. Kind of

195
00:14:00,839 --> 00:14:04,459
the whole thing we're doing here -- you know,
every single thing we do, we can also do imperatively

196
00:14:04,459 --> 00:14:09,569
but we like the idea of the, you know, declarative
renaissance.

197
00:14:09,569 --> 00:14:13,360
So the next thing is custom attributes. So
you've got custom elements, you need custom

198
00:14:13,360 --> 00:14:17,629
attributes. This is the API that your element
exposes to the world.

199
00:14:17,629 --> 00:14:22,739
And then one of the big things we add is data
binding and this is powered by MDV. This radically

200
00:14:22,739 --> 00:14:26,749
reduces code complexity. We'll -- we're going
to demo this in a little bit so we'll get

201
00:14:26,749 --> 00:14:30,239
into it more.
And there's a whole bunch more, but this is

202
00:14:30,239 --> 00:14:34,470
the big picture, and if you combine all of
this with all the new platform bits, you end

203
00:14:34,470 --> 00:14:37,509
up with something pretty awesome.
>>Alex Komoroske: So as we're using this,

204
00:14:37,509 --> 00:14:41,569
this already made it much easier to build
apps but we weren't satisfied because we were

205
00:14:41,569 --> 00:14:45,670
realizing that we were rebuilding the same
kind of UI widgets again and again. And, you

206
00:14:45,670 --> 00:14:48,910
know, every framework that wants to make an
easy-to-build app, they should help you build

207
00:14:48,910 --> 00:14:53,350
UIs as well. We really need to build a set
of really great widgets, and so we've just

208
00:14:53,350 --> 00:14:59,329
begun that a few weeks ago.
So I want to -- this is a -- this is the -- sort

209
00:14:59,329 --> 00:15:01,799
of completing this diagram.
I want to take a moment to reflect really

210
00:15:01,799 --> 00:15:07,049
quickly on our approach.
So a lot of other frameworks are sort of forced

211
00:15:07,049 --> 00:15:12,279
to do everything in script. They have to do
very, very, very clever engineering to replace

212
00:15:12,279 --> 00:15:15,619
the pot from below them because it doesn't
do the things they need. So they end up building

213
00:15:15,619 --> 00:15:19,850
their own parallel universes that don't inter-operate
very well because they've created their own

214
00:15:19,850 --> 00:15:23,569
worlds.
What we were trying to do is fix the platform

215
00:15:23,569 --> 00:15:27,769
and actually provide feedback back to the
platform, use the emerging standards.

216
00:15:27,769 --> 00:15:31,920
And we -- actually, one thing that's cool
about web components is that your interoperability

217
00:15:31,920 --> 00:15:35,869
layer is just the DOM because an element is
an element, you know how to work it. And that

218
00:15:35,869 --> 00:15:40,459
means that for the first time actually it's
possible for UI elements to be interoperable.

219
00:15:40,459 --> 00:15:43,639
So you'll see in this diagram -- it's actually
very, very hard to see here -- there's other

220
00:15:43,639 --> 00:15:49,089
boxes to the right of this, because other
UI elements could be built on top of some

221
00:15:49,089 --> 00:15:52,679
of these layers or the foundation and inter-operate
with them. And we'll show you a little bit

222
00:15:52,679 --> 00:15:56,679
more about that later.
They're -- also in polymer, we've taken a

223
00:15:56,679 --> 00:15:59,279
layered approach to everything.
So if you want to use our UI elements, great,

224
00:15:59,279 --> 00:16:04,579
you get the whole stack. If you just want
to use a single polyfill by itself, cool,

225
00:16:04,579 --> 00:16:06,730
just take that one.
Or anything in between.

226
00:16:06,730 --> 00:16:10,299
So you can sort of figure out exactly how
much of this stuff you want to use.

227
00:16:10,299 --> 00:16:13,959
So we've been talking a whole lot about this.
Let's -- but rather than continue to just

228
00:16:13,959 --> 00:16:17,249
talk about it, let's show you how all this
stuff works.

229
00:16:17,249 --> 00:16:24,249
>>Matthew McNulty: All right. So here we have
a code editor. This is actually just the ace

230
00:16:25,089 --> 00:16:31,359
code editor that we threw in a browser with
some other fancy stuff, and this is an element

231
00:16:31,359 --> 00:16:34,019
definition.
So if you saw this from Eric's talk, it should

232
00:16:34,019 --> 00:16:36,629
be somewhat familiar. This one is, you know,
ever so slightly different because it's a

233
00:16:36,629 --> 00:16:40,859
polymer element. But the basics are still
there. So you've got an element tag. In this

234
00:16:40,859 --> 00:16:44,480
case, the name attribute says it's my dash
element. That means that's the tag we're going

235
00:16:44,480 --> 00:16:48,519
to create. So whenever this element definition
is around, the tag that says "my element"

236
00:16:48,519 --> 00:16:52,439
will include all of this stuff.
The template tag is the DOM that you want

237
00:16:52,439 --> 00:16:55,179
to stamp out when this -- when this tag is
used.

238
00:16:55,179 --> 00:16:58,399
There's actually a whole bunch of really cool
things you can do with template and iterate

239
00:16:58,399 --> 00:17:03,160
and all these other things. I'd encourage
you to go look that up after this.

240
00:17:03,160 --> 00:17:08,260
And then there's the script tag which provides
the prototype for the element and various

241
00:17:08,260 --> 00:17:11,959
behaviors, if you want to add. So in this
case we'll just start out really simple and

242
00:17:11,959 --> 00:17:18,159
I'll add a div, "hello world."
>>Alex Komoroske: So if you can't see it -- I

243
00:17:18,159 --> 00:17:22,939
know this is a big room. Back there, if you
can't see it, we can zoom it a little bit

244
00:17:22,939 --> 00:17:29,939
maybe, but check it out. All this stuff is
in the repo afterwards. We can provide the

245
00:17:31,000 --> 00:17:38,000
you the link. Sorry about that.
>>Matthew McNulty: There you go.

246
00:17:39,740 --> 00:17:39,990
So now for previews. Look at that. "Hello
world."

247
00:17:39,740 --> 00:17:42,059
>>Alex Komoroske: That is amazing. Absolutely
mind blowing.

248
00:17:42,059 --> 00:17:46,049
[ Laughter ]
>>Matthew McNulty: But if I look inside it,

249
00:17:46,049 --> 00:17:49,230
you can see here's our element definition
that we created and right next to it is an

250
00:17:49,230 --> 00:17:53,960
actual instance of my element. And inside
that is Shadow DOM, so everything is encapsulated.

251
00:17:53,960 --> 00:17:56,200
And inside that, you can see our div.
>>Alex Komoroske: So if you're scratching

252
00:17:56,200 --> 00:18:00,110
your head, this is the point where we remind
you this is an intermediate level talk and

253
00:18:00,110 --> 00:18:04,309
if this confuses you, you should check out
-- learn more about Shadow DOM.

254
00:18:04,309 --> 00:18:08,549
So in fact, to see this stuff, Shadow DOM
inspector, you actually have to check an option

255
00:18:08,549 --> 00:18:12,120
to see it. It's not available by default because
it's encapsulation.

256
00:18:12,120 --> 00:18:16,899
>>Matthew McNulty: All right. So one of the
cool things is you don't actually have to

257
00:18:16,899 --> 00:18:21,399
use just normal DOM elements in here. You
can have custom elements that include other

258
00:18:21,399 --> 00:18:25,179
custom elements.
So in this case, I'm going to switch it to

259
00:18:25,179 --> 00:18:31,039
one of our custom elements, G ratings. And
this element is cool for a few reasons. It's

260
00:18:31,039 --> 00:18:35,340
very easy to type, so I can't mistype it here.
It doesn't need any properties or attributes

261
00:18:35,340 --> 00:18:37,720
by default.
And what it gives you is a bunch of stars

262
00:18:37,720 --> 00:18:42,929
you can click on. It's like a star rating
thing. Preview it, and look at that. We've

263
00:18:42,929 --> 00:18:46,309
got stars.
>>Alex Komoroske: So these are just custom

264
00:18:46,309 --> 00:18:49,630
elements, so if you're looking at this in
the DOM as another library, it's just an element.

265
00:18:49,630 --> 00:18:51,850
You know how to work it. Attributes in, events
out.

266
00:18:51,850 --> 00:18:55,880
>>Matthew McNulty: Yeah. There it is still
in my element, and then here you can start

267
00:18:55,880 --> 00:18:59,450
to see Shadow DOM within Shadow DOM and all
of the markup within.

268
00:18:59,450 --> 00:19:03,539
All right. So this is pretty cool but you're
like, "Oh, you've got your own little tool."

269
00:19:03,539 --> 00:19:05,779
>>Alex Komoroske: "Your own little universe
that you've built."

270
00:19:05,779 --> 00:19:07,590
>>Matthew McNulty: "You're probably, you know,
cheating somehow."

271
00:19:07,590 --> 00:19:14,590
So we can take the source for that document
we're creating, bring it over to JS bin, and

272
00:19:16,059 --> 00:19:18,110
it's the same thing.
>>Alex Komoroske: It looks like a little bit

273
00:19:18,110 --> 00:19:21,639
of boilerplate here. There is only a couple
of pieces that make are actually crucial to

274
00:19:21,639 --> 00:19:26,809
make this work. So the point is it is very
easy to use this within other contexts.

275
00:19:26,809 --> 00:19:29,980
So we believe you.
By the way, this is all HTML. But let's go

276
00:19:29,980 --> 00:19:32,799
a little bit faster so we don't bore them.
>>Matthew McNulty: So it would be boring to

277
00:19:32,799 --> 00:19:37,340
sit here and watch me write HTML. So we did
something to make it a little bit faster and

278
00:19:37,340 --> 00:19:41,350
more interesting.
We built an element builder. So this is just

279
00:19:41,350 --> 00:19:45,950
the product of the last few weeks. We know
we are not really planning on shipping a tool

280
00:19:45,950 --> 00:19:50,720
any time soon. It allows you to build elements
and bind them together into new elements and

281
00:19:50,720 --> 00:19:54,380
really explore it. It is a nice little showcase
for what we have built so far and the technology

282
00:19:54,380 --> 00:19:55,559
underneath.
>>Alex Komoroske: So I am going to reiterate

283
00:19:55,559 --> 00:20:00,269
that. This is just a demo tool. It is not
an ID. You don't need to use this to use polymer.

284
00:20:00,269 --> 00:20:03,149
It is just for playing around with the stuff
and getting a feel for it.

285
00:20:03,149 --> 00:20:05,049
>>Matthew McNulty: So we can rate Alex so
far.

286
00:20:05,049 --> 00:20:08,679
>>Alex Komoroske: Oh, thank you.
>>Matthew McNulty: We can change it.

287
00:20:08,679 --> 00:20:11,539
>>Alex Komoroske: Not so nice. Thank you.
>>Matthew McNulty: You can see I'm changing

288
00:20:11,539 --> 00:20:16,429
things in here, the number of stars selected,
the values are changing over here in the property

289
00:20:16,429 --> 00:20:20,960
inspector. This tool should be -- this kind
of tool is pretty familiar for a lot of people.

290
00:20:20,960 --> 00:20:24,659
You have got a palette down the left-hand
side. You have got a tool bar across the top

291
00:20:24,659 --> 00:20:26,350
and then a property inspector down the right-hand
side.

292
00:20:26,350 --> 00:20:28,090
>>Alex Komoroske: Can you flip to the code
real quick?

293
00:20:28,090 --> 00:20:35,090
>>Matthew McNulty: So it is not doing anything.
It actually just changes the attribute in

294
00:20:35,100 --> 00:20:36,460
the tag.
>>Alex Komoroske: Basically all this tool

295
00:20:36,460 --> 00:20:40,519
is doing is just a convenience for piping
in those attributes to save you typing yourself.

296
00:20:40,519 --> 00:20:46,250
It is not doing anything magic.
>>Matthew McNulty: All right. So that's the

297
00:20:46,250 --> 00:20:50,730
tool to begin with.
Let's do something more interesting with MDV.

298
00:20:50,730 --> 00:20:57,320
So if I pull out a few other widgets, let's
do some tabs and a menu and a caption. This

299
00:20:57,320 --> 00:21:00,990
won't make any sense, but it will show something
really kind of interesting.

300
00:21:00,990 --> 00:21:07,159
So I can tap around on these things. Tap around
on them independently. If I come over to the

301
00:21:07,159 --> 00:21:11,269
code, you can see that when I inserted that,
I actually just inserted a bunch of custom

302
00:21:11,269 --> 00:21:17,230
tags and even some normal native DOM tags.
So the tabs takes a bunch of spans. The menu

303
00:21:17,230 --> 00:21:22,480
takes a bunch of menu items. And then the
caption is actually just a div.

304
00:21:22,480 --> 00:21:29,480
So one of the really cool features of this
toolkit is MDV. MDV allows you to bind elements

305
00:21:29,610 --> 00:21:34,360
together and attributes together without any
actual code.

306
00:21:34,360 --> 00:21:41,259
So at first I'm actually going to add a variable
to the prototype of the element here.

307
00:21:41,259 --> 00:21:43,769
>>Alex Komoroske: A property you would be
able to use just like any other JavaScript

308
00:21:43,769 --> 00:21:46,470
object.
>>Matthew McNulty: I can add however many

309
00:21:46,470 --> 00:21:53,470
I want. And then if I come up to any attribute
within the element, in this case "selected,"

310
00:21:55,990 --> 00:21:59,769
I can use this double mustache syntax which
is MDV and say --

311
00:21:59,769 --> 00:22:05,980
>>Matthew McNulty: So with this G menu, the
way you specify which one is selected again

312
00:22:05,980 --> 00:22:09,710
is with an attribute just like any other element.
>>Matthew McNulty: So now the tabs and the

313
00:22:09,710 --> 00:22:14,110
menu in this case both have a selected attribute.
That is not at all required. It is because

314
00:22:14,110 --> 00:22:17,600
they both have the concept of what's selected
in the selected index.

315
00:22:17,600 --> 00:22:20,100
I come back to the code now, except for that
one.

316
00:22:20,100 --> 00:22:23,299
(Chuckles.)
There we go. Just had to clear the CSS.

317
00:22:23,299 --> 00:22:30,299
You can see them connected together. And you
can actually do this right in the tool as

318
00:22:32,370 --> 00:22:39,370
well. So instead of just a caption, I can
click this little linked and put in the same

319
00:22:39,519 --> 00:22:46,519
thing. And now they're all tied together.
Now, I can take this entire thing and say

320
00:22:48,350 --> 00:22:55,350
"publish," clear the canvas, and now the whole
thing is itself a custom element that I can

321
00:22:55,559 --> 00:23:01,460
drag off the palette and it still goes together.
And not only that, you can see the myselected

322
00:23:01,460 --> 00:23:05,370
property that I added to the prototype and
even the foo one, even though it doesn't actually

323
00:23:05,370 --> 00:23:10,409
do anything.
All right. So we built a custom element and

324
00:23:10,409 --> 00:23:12,940
all without doing any JavaScript actually.
>>Alex Komoroske: It is actually kind of cool,

325
00:23:12,940 --> 00:23:16,080
right? We tie these things together. If you
look in the code view for this one as well,

326
00:23:16,080 --> 00:23:21,019
you will see that this is just now a my element.
The stuff inside is sort of hidden away. You

327
00:23:21,019 --> 00:23:25,350
pass the myselected that we defined in the
prototype just there as an attribute. It wires

328
00:23:25,350 --> 00:23:28,570
all this stuff up together for you so you
don't have to write any script to get this

329
00:23:28,570 --> 00:23:32,480
kind of behavior. It is pretty cool.
>>Matthew McNulty: One of the other really

330
00:23:32,480 --> 00:23:35,789
cool things is you can make your own custom
elements. And one of the other uses for that

331
00:23:35,789 --> 00:23:40,539
is you can wrap up existing functionality
on the Web and put it in a single tag. And

332
00:23:40,539 --> 00:23:45,149
it is encapsulated from the rest of your page,
so you don't have any conflicts or system-level

333
00:23:45,149 --> 00:23:49,620
dependencies that you're creating.
In which case, we'll show you one -- really

334
00:23:49,620 --> 00:23:56,379
crazy one from our friends at Mozilla actually.
They built a one megabyte PDF Viewer entirely

335
00:23:56,379 --> 00:23:58,799
in JavaScript.
>>Alex Komoroske: Which is crazy but awesome.

336
00:23:58,799 --> 00:24:03,340
>>Matthew McNulty: We have the complete works
of Chaucer in here. If you go to the code,

337
00:24:03,340 --> 00:24:06,909
you can see it is actually just a single tag.
>>Alex Komoroske: This is kind of crazy, right?

338
00:24:06,909 --> 00:24:09,879
Like, you are used to including all these
scripts and having these weird dependencies

339
00:24:09,879 --> 00:24:13,730
and stuff. You just write a few characters,
one include, write a few characters, and you

340
00:24:13,730 --> 00:24:17,779
have a PDF Viewer directly in your page. It
really changes how you think about architecting

341
00:24:17,779 --> 00:24:19,970
your applications.
>>Matthew McNulty: We have got other ones

342
00:24:19,970 --> 00:24:23,639
in here that we just threw again in the last
few weeks. We've got charts and things like

343
00:24:23,639 --> 00:24:24,549
that.
>>Alex Komoroske: These are just open source

344
00:24:24,549 --> 00:24:27,659
libraries other people have built.
>>Matthew McNulty: Again, they are just all

345
00:24:27,659 --> 00:24:30,960
wrapped into a single tag. It gives you this
almost module pattern that you can use to

346
00:24:30,960 --> 00:24:35,950
combine things from different vendors.
One the other neat things you can to do is

347
00:24:35,950 --> 00:24:40,830
use Web animations, which we talked about
earlier. I can actually bring out a few slightly

348
00:24:40,830 --> 00:24:47,830
fancier widgets.
Let's do a clock. So just for the demo, like,

349
00:24:52,779 --> 00:24:55,809
you know, tags don't actually have to have
UI, right. Like, a script tag doesn't have

350
00:24:55,809 --> 00:25:01,559
anything visual about it. But just for this
demo, we came over -- actually we'll do flip

351
00:25:01,559 --> 00:25:06,429
-- and made it so these things have a UI so
we can click on them in the canvas and do

352
00:25:06,429 --> 00:25:10,139
interesting things.
In this case, it is a flip animation. And

353
00:25:10,139 --> 00:25:15,980
we can say, you know, let's flip the clock.
Let's do it for a second. Now, if I come back

354
00:25:15,980 --> 00:25:20,179
here and click on it. Clock flips.
>>Alex Komoroske: So behind the scenes, this

355
00:25:20,179 --> 00:25:23,629
is just using Web animations. Again, another
emerging standard.

356
00:25:23,629 --> 00:25:29,409
But the cool thing about thinking about animations
configured via these non-visible elements

357
00:25:29,409 --> 00:25:33,470
is that you can separate the animation that
you're defining from the element itself and

358
00:25:33,470 --> 00:25:37,659
just sort of point at the other one.
The elements don't have to be visual. That's

359
00:25:37,659 --> 00:25:39,679
one of the cool things when everything is
an element.

360
00:25:39,679 --> 00:25:43,340
>>Matthew McNulty: Yeah, so -- and one of
the other really cool things that Web animations

361
00:25:43,340 --> 00:25:49,409
gives you is the ability to do really long,
really complex, intricate animations and separate

362
00:25:49,409 --> 00:25:52,669
from what their target is, right? And you
can just define this and drag it out however

363
00:25:52,669 --> 00:25:57,220
you want. You reuse it and all of that.
So, in this case, we have a whole group. So

364
00:25:57,220 --> 00:26:04,220
you can say let's bounce the clock this time.
Let's flip the weather because it is not that

365
00:26:04,629 --> 00:26:11,120
nice out. And let's change up the market because
I have run out of puns.

366
00:26:11,120 --> 00:26:15,820
Now if I do it, you can see they do one after
the other. Or I can actually make it happen

367
00:26:15,820 --> 00:26:20,559
in parallel.
So just a little taste of what you can do

368
00:26:20,559 --> 00:26:25,940
with Web animations.
Another thing we're doing is experimenting

369
00:26:25,940 --> 00:26:31,720
with responsive design and building it directly
into the widgets. I can come over here. This

370
00:26:31,720 --> 00:26:37,149
is another version of the Sandbox, not full
screen, so I can actually change the window

371
00:26:37,149 --> 00:26:41,059
size. If I come in here and I start shrinking
this down, you can see it has got a toolbar

372
00:26:41,059 --> 00:26:45,159
across the top of the drop-down menu. And
if I shrink it small enough, hey, it drops

373
00:26:45,159 --> 00:26:50,120
down to the bottom and splits because it says,
Hey, it is phone or tablet size now and automatically

374
00:26:50,120 --> 00:26:55,679
flips to be a little menu that pops up that's
more of a phone size, full-screen, full-bleed

375
00:26:55,679 --> 00:26:59,179
kind of treatment.
So this is not just theoretical, but we really

376
00:26:59,179 --> 00:27:03,200
just got it started -- just getting started
with this kind of element.

377
00:27:03,200 --> 00:27:08,769
And, in fact, everything you see here works
on mobile, especially because we're using

378
00:27:08,769 --> 00:27:12,730
pointer events. So we're not going to put
this on the camera or anything. But you can

379
00:27:12,730 --> 00:27:19,399
actually on my iPad, if I can hold it straight
-- drag stuff out on the palette from my iPad

380
00:27:19,399 --> 00:27:21,980
and it just works.
>>Alex Komoroske: All this stuff is really

381
00:27:21,980 --> 00:27:25,279
early. We just started playing around with
this. We are approaching this entire project

382
00:27:25,279 --> 00:27:29,360
with a very mobile-first perspective.
The ideal we're working towards is that as

383
00:27:29,360 --> 00:27:33,070
a developer, you write your code once, you
define, okay, this is a menu or what have

384
00:27:33,070 --> 00:27:38,129
you and then it automatically adjusts across
mobile or desktop or tablet to do the right

385
00:27:38,129 --> 00:27:42,499
thing for you.
>>Matthew McNulty: All right. So we've shown

386
00:27:42,499 --> 00:27:45,279
that you can drag a bunch of elements out
to make other elements. You can bind them

387
00:27:45,279 --> 00:27:48,769
together arbitrarily. You can use third-party
code.

388
00:27:48,769 --> 00:27:54,179
Let's actually try to put all of this together
into something fun. So we have a YouTube widget.

389
00:27:54,179 --> 00:27:57,909
We call this the "I'm feeling lucky" YouTube
widget because all it does is take the very

390
00:27:57,909 --> 00:28:04,909
first query and play it. See the little Chrome
commercial.

391
00:28:07,690 --> 00:28:11,159
I also call it the "I'm feeling risky" demo
widget.

392
00:28:11,159 --> 00:28:14,169
>>Alex Komoroske: That's a wholesome commercial,
though, so we're okay.

393
00:28:14,169 --> 00:28:18,139
>>Matthew McNulty: This is a cat video I was
using earlier in which I discovered last night

394
00:28:18,139 --> 00:28:22,970
the people in the background were cursing.
I never had the sound on. So that one went

395
00:28:22,970 --> 00:28:28,909
out the window. Let's give this one a border.
>>Alex Komoroske: It is just a normal element

396
00:28:28,909 --> 00:28:31,090
so you can do whatever you want.
>>Matthew McNulty: Yeah, just a normal element.

397
00:28:31,090 --> 00:28:38,090
And we can actually use the speech input in
here. And we combine the YouTube query instead

398
00:28:42,159 --> 00:28:49,159
of using this plain Chrome commercial query
to the input's value.

399
00:28:50,789 --> 00:28:57,789
Now if I come here and the sound system and
demo gods are in alignment, I can go "cats."

400
00:29:03,649 --> 00:29:07,620
And we've got all the cats.
[ Applause ]

401
00:29:07,620 --> 00:29:14,620
>>Alex Komoroske: Again, if you check out
this code, there is -- great, now we have

402
00:29:16,320 --> 00:29:17,640
distracting cats on the screen. Thank you,
Matt.

403
00:29:17,640 --> 00:29:19,289
[ Laughter ]
>>Alex Komoroske: If you check out that code,

404
00:29:19,289 --> 00:29:24,070
it is just using that MDV syntax to plug those
things together. The magic isn't from the

405
00:29:24,070 --> 00:29:28,909
Sandbox app. The magic is from the platform
and that layer -- that sugar layer that we

406
00:29:28,909 --> 00:29:32,879
call polymer.
>>Matthew McNulty: We can do multiple cats

407
00:29:32,879 --> 00:29:39,840
across the screen and really annoy Alex.
>>Alex Komoroske: So all this stuff is great.

408
00:29:39,840 --> 00:29:43,210
But you have seen this kind of thing before.
Other frameworks have done similar kinds of

409
00:29:43,210 --> 00:29:46,230
things.
What is cool about this Web components approach

410
00:29:46,230 --> 00:29:51,299
where you have actual encapsulation between
them is it allows for the first time the potential

411
00:29:51,299 --> 00:29:56,389
for components from of different sets to intermingle
seamlessly.

412
00:29:56,389 --> 00:29:59,850
So in this world, interoperability layer is
the DOM. And everyone knows how to use the

413
00:29:59,850 --> 00:30:05,299
DOM, how to pass an attribute to receive events
out. Again, the polyfill -- the polymer library

414
00:30:05,299 --> 00:30:08,029
as well is layered, so you can take just the
parts you want.

415
00:30:08,029 --> 00:30:11,090
>>Matthew McNulty: So one of the cool things
we have been doing lately is our friends at

416
00:30:11,090 --> 00:30:15,879
Mozilla have been building X tags in their
X tags library which is similar in concept

417
00:30:15,879 --> 00:30:20,419
to the polymer widgets on top of the same
foundation layer that we showed you before.

418
00:30:20,419 --> 00:30:23,769
>>Alex Komoroske: They are experimenting with
using one of our polyfills in their system

419
00:30:23,769 --> 00:30:25,039
as well.
>>Matthew McNulty: Yeah. So it took us no

420
00:30:25,039 --> 00:30:28,749
time at all to put them in the palette, and
I can actually drag out some of their widgets

421
00:30:28,749 --> 00:30:30,559
here.
>>Alex Komoroske: So let me just emphasize

422
00:30:30,559 --> 00:30:33,950
this. These are widgets that come from a separate,
a different framework that are also built

423
00:30:33,950 --> 00:30:39,269
on top of Web components. So we can just seamlessly
use them in the same environment, in the same

424
00:30:39,269 --> 00:30:41,899
app. This is kind of mind blowing, right?
This is very new.

425
00:30:41,899 --> 00:30:45,490
>>Matthew McNulty: And one of the really cool
things is because this is just Web components

426
00:30:45,490 --> 00:30:49,379
and these are just elements and you can bind
them together just like any other DOM elements,

427
00:30:49,379 --> 00:30:56,379
we can take our toggle button and we combine
its value to the X tag switch. Check property.

428
00:31:01,710 --> 00:31:06,450
And now it will actually play together.
>>Alex Komoroske: So that's two separate libraries

429
00:31:06,450 --> 00:31:11,100
playing together seamlessly. So we think that
this interoperability potential for Web components

430
00:31:11,100 --> 00:31:15,210
is a really big deal.
If you think about everything as an element,

431
00:31:15,210 --> 00:31:19,619
you can have small building blocks, package
them up into larger building blocks. Before

432
00:31:19,619 --> 00:31:23,399
you know it, you have entire reusable applications
all in one tag.

433
00:31:23,399 --> 00:31:27,529
>>Matthew McNulty: So up to and including
this entire Sandbox application, which was

434
00:31:27,529 --> 00:31:34,049
built using polymer. And as a result, we put
it in the palette.

435
00:31:34,049 --> 00:31:38,710
[ Laughter ]
And we can pull it out.

436
00:31:38,710 --> 00:31:43,369
[ Applause ]
>>Alex Komoroske: That's cool, but we must

437
00:31:43,369 --> 00:31:44,730
go deeper.
>>Matthew McNulty: All right. Everyone get

438
00:31:44,730 --> 00:31:48,570
your totems ready. We have had an inception
reference.

439
00:31:48,570 --> 00:31:55,570
>>Alex Komoroske: That's pretty cool. This,
in the past, would have required very careful

440
00:31:58,149 --> 00:32:01,129
planning, following all the rules, all this
kind of stuff.

441
00:32:01,129 --> 00:32:05,679
With Web components and polymer, you just
get this kind of encapsulation for free. It

442
00:32:05,679 --> 00:32:10,299
actually -- so we've started building this
app just a few weeks ago actually as the foundation

443
00:32:10,299 --> 00:32:14,759
layers got pretty solid. We were amazed how
quickly we could build it because when you

444
00:32:14,759 --> 00:32:19,149
are using these concepts to build elements
and then larger elements out of them, you

445
00:32:19,149 --> 00:32:22,940
are so much more productive. It is like a
whole new world. It is really cool.

446
00:32:22,940 --> 00:32:28,879
>>Matthew McNulty: So that's polymer and Sandbox
as it exists right now. If you are adventurous

447
00:32:28,879 --> 00:32:32,809
and unafraid of living on the bleeding edge
-- and I would like to emphasize "bleeding

448
00:32:32,809 --> 00:32:37,570
edge" -- this is a particular version of Canary
that is working right now.

449
00:32:37,570 --> 00:32:41,119
We encourage you to check it out. It is all
on Github. It is all open right now.

450
00:32:41,119 --> 00:32:44,840
>>Alex Komoroske: We started this as an experiment
at the beginning to see what we could do.

451
00:32:44,840 --> 00:32:48,440
But the deeper we've gone, the more and more
excited we've gotten, the more that we feel

452
00:32:48,440 --> 00:32:52,309
like this is sort on the cusp of something
big with Web components.

453
00:32:52,309 --> 00:32:56,639
We really believe that with Web components,
developers will be in order of magnitude more

454
00:32:56,639 --> 00:33:02,409
productive building more and better apps.
So we pulled together a video that we think

455
00:33:02,409 --> 00:33:09,409
-- that we hope will get you as excited about
this future we are going towards as we are.

456
00:33:13,210 --> 00:33:20,210
[ Video playing. ]
[ Music ]

457
00:33:35,080 --> 00:33:42,080
>>Alex Komoroske: So that's what we've got.
You can find all this stuff at our Web site,

458
00:33:53,350 --> 00:33:58,279
polymer-project.org. Learn more, provide feedback,
please, please, please. Ask us questions.

459
00:33:58,279 --> 00:34:02,340
Provide comments. File bugs. We'd love to
get your participation. Thanks.

460
00:34:02,340 --> 00:34:09,340
[ Applause ]
Now we got time for questions. So...

461
00:34:09,669 --> 00:34:15,310
>>> I'm curious, I'm looking at what you have
here. And I'm thinking back to MooTools and

462
00:34:15,310 --> 00:34:20,230
Jquery and how we got query selector all standardized
out of that. And I'm wondering when you look

463
00:34:20,230 --> 00:34:24,500
at something like Angular that has a lot of
similar concepts, how this interplays. If

464
00:34:24,500 --> 00:34:30,150
you see Angular in the future as being another
sugar layer on top of something like polymer?

465
00:34:30,150 --> 00:34:34,390
Or if it Web components replaces Angular?
>>Alex Komoroske: So we aren't from the Angular

466
00:34:34,390 --> 00:34:38,330
team. There might be a few folks from that
team in the audience. They are aware of this

467
00:34:38,330 --> 00:34:42,010
stuff. They have been playing around with
Web components, providing feedback back to

468
00:34:42,010 --> 00:34:45,340
the standardization process as well.
Again, one of the approaches with polymer

469
00:34:45,340 --> 00:34:49,060
that's really important is the layered approach.
That means that other frameworks could take

470
00:34:49,060 --> 00:34:53,590
just one polyfill or all of them or what have
you. So I imagine that, you know, maybe that's

471
00:34:53,590 --> 00:34:56,780
something that other frameworks might want
to experiment with, is building on top of

472
00:34:56,780 --> 00:35:01,920
those layers, if they want. I mean...
>>> Do you see the Web components specifications

473
00:35:01,920 --> 00:35:06,730
replacing the need for a lot of the -- the
Embers and the Angulars and things that are

474
00:35:06,730 --> 00:35:07,820
popular now?
>>Alex Komoroske: I think that's the wrong

475
00:35:07,820 --> 00:35:12,480
way of thinking about it. I think that the
Web components provides a lot of the utility

476
00:35:12,480 --> 00:35:16,620
belt. There is always that need for sort of
that opinion to weave all that stuff together.

477
00:35:16,620 --> 00:35:20,700
And I think that frameworks will always have
a place in this world because you are going

478
00:35:20,700 --> 00:35:22,870
to need it to help you build your apps.
>>> Okay.

479
00:35:22,870 --> 00:35:25,100
>>Alex Komoroske: It brings you far but not
all the way.

480
00:35:25,100 --> 00:35:28,280
>>Matthew McNulty: I mean, It is extremely
likely that they will have to use less code

481
00:35:28,280 --> 00:35:32,440
to do what they're doing, which is great for
them, great for everyone else. But yeah.

482
00:35:32,440 --> 00:35:36,720
>>Alex Komoroske: I guess we got one in the
back there.

483
00:35:36,720 --> 00:35:40,260
>>> Actually, I was going to ask about Angular,
too, but I think it got answered.

484
00:35:40,260 --> 00:35:44,300
So my other question would be, then, is this
something that you can -- I mean, obviously

485
00:35:44,300 --> 00:35:48,820
you're using Canary, you're using a very advanced
build. Is this something that you expect we'll

486
00:35:48,820 --> 00:35:53,700
need to use only when we can tightly control
the environment in which it is running?

487
00:35:53,700 --> 00:35:56,380
I came in a little late. So backwards compatibility
is my question.

488
00:35:56,380 --> 00:36:00,720
>>Alex Komoroske: Just to reiterate actually,
the whole approach we're taking is building

489
00:36:00,720 --> 00:36:05,720
a layer of polyfills that sort of mocks out
the future. Matt's using Canary so we can

490
00:36:05,720 --> 00:36:10,380
show you real Shadow DOM being used. But this
stuff should work across all modern browsers,

491
00:36:10,380 --> 00:36:16,260
IE, Safari, Firefox, Chrome.
And over time as they implement these standards,

492
00:36:16,260 --> 00:36:18,700
that sort of foundation layer will get thinner
and thinner.

493
00:36:18,700 --> 00:36:22,610
>>> So when you say "modern browsers," I assume
there will be a level that we will need to

494
00:36:22,610 --> 00:36:25,620
test for and then --
>>Alex Komoroske: That's correct. One of the

495
00:36:25,620 --> 00:36:28,760
goals here is to really live like we are in
the future. And if you are staring in the

496
00:36:28,760 --> 00:36:33,680
rearview mirror you aren't headed for trouble.
We want to make sure we can actually assimilate

497
00:36:33,680 --> 00:36:40,680
the future in a high fidelity way.
>>> When you pulled up the X code bits from

498
00:36:41,860 --> 00:36:44,900
the Mozilla team, you said --
>>Alex Komoroske: X tags.

499
00:36:44,900 --> 00:36:46,020
>>> Sorry?
>>Alex Komoroske: X tags.

500
00:36:46,020 --> 00:36:49,850
>>> X tags. You said it was significant because
you are pulling that in from a third-party,

501
00:36:49,850 --> 00:36:55,070
you know, another vendor. Where's the actual
technical significance there if they're kind

502
00:36:55,070 --> 00:37:02,070
of just doing the same thing? I didn't see,
like, a threshold between polymer and X tags.

503
00:37:03,370 --> 00:37:07,370
>>Matthew McNulty: So, generally, if you wanted
two libraries to play together previously,

504
00:37:07,370 --> 00:37:13,250
they had to either be built very specifically
to do that and not introduced system-level

505
00:37:13,250 --> 00:37:18,790
dependencies or they would collide and you
would just have to get lucky, right?

506
00:37:18,790 --> 00:37:22,700
The idea is with these things being encapsulated
is that you don't have those system-level

507
00:37:22,700 --> 00:37:27,390
dependencies and really the world inside of
that element, which is what's using Mozilla's

508
00:37:27,390 --> 00:37:30,230
code, is completely separate from the world
outside of that element.

509
00:37:30,230 --> 00:37:33,860
So you can mix and match these together things
a lot easier without having to dealing with

510
00:37:33,860 --> 00:37:36,150
those collisions.
>>Alex Komoroske: Before Web components, you

511
00:37:36,150 --> 00:37:41,130
had to make everything in script. So you had
conventions for what it means to be a component.

512
00:37:41,130 --> 00:37:43,860
Everyone's conventions have to align for them
to be interoperable.

513
00:37:43,860 --> 00:37:48,580
With Web components, people can align their
conventions on Web components, the standards,

514
00:37:48,580 --> 00:37:50,860
and then that makes them interoperable much
more easily.

515
00:37:50,860 --> 00:37:55,700
>>> So did you have another library you pulled
in to use those X tags? And they just co-exist

516
00:37:55,700 --> 00:37:59,520
then because they are creating DOM elements
that are all happy together.

517
00:37:59,520 --> 00:38:01,760
>>Alex Komoroske: Theoretically, you could
just have it as an include. You can include

518
00:38:01,760 --> 00:38:05,480
a component -- in the future, you can include
a component from polymer's UI library. You

519
00:38:05,480 --> 00:38:10,180
can include a component from X tags. You could
intermingle the two or a third-party -- or

520
00:38:10,180 --> 00:38:13,920
a framework that's yet to be created.
>>Matthew McNulty: It is all in that HTML

521
00:38:13,920 --> 00:38:17,010
import.
>>> So you lie an aspect that's above polymer

522
00:38:17,010 --> 00:38:22,490
and everything else that was significant in
that respect to X tag versus your components?

523
00:38:22,490 --> 00:38:26,960
>>Alex Komoroske: Yep.
>>> Gotcha. Thank you.

524
00:38:26,960 --> 00:38:33,960
>>> So I would confirm a simple question.
This polymer also works with Chrome Packaged

525
00:38:34,040 --> 00:38:35,560
Apps?
>>Matthew McNulty: Mm-hmm.

526
00:38:35,560 --> 00:38:42,560
>>Alex Komoroske: Does it work right now?
>>Matthew McNulty: Right now it does not work.

527
00:38:43,550 --> 00:38:46,530
The way we did the polyfill violates the SP.
>>> I see.

528
00:38:46,530 --> 00:38:50,160
>>Matthew McNulty: So Chrome apps is very
specific about that.

529
00:38:50,160 --> 00:38:53,650
>>> Yeah, yeah, yeah.
>>Matthew McNulty: But in the very near future,

530
00:38:53,650 --> 00:38:57,220
once the HTML Imports feature, which is the
thing that's loading things from across domains,

531
00:38:57,220 --> 00:39:00,460
is done natively, which is pretty soon, then
it will work.

532
00:39:00,460 --> 00:39:04,200
>>Alex Komoroske: HTML imports is be -- just
started being implemented in Chrome.

533
00:39:04,200 --> 00:39:06,240
>>> (inaudible).
(Speaker off microphone.)

534
00:39:06,240 --> 00:39:10,630
>>Alex Komoroske: So you can still use -- as
(saying name) was pointing out, you can use

535
00:39:10,630 --> 00:39:15,450
document.register even if you can't use some
of these other pieces like HTML imports.

536
00:39:15,450 --> 00:39:19,349
>>> Thanks.
>>Alex Komoroske: We got one in the back.

537
00:39:19,349 --> 00:39:26,349
>>> Yeah. You were talking about modern browsers.
I was wondering if you could elaborate on

538
00:39:27,560 --> 00:39:32,620
mobile support.
>>Matthew McNulty: So mobile, it is mobile

539
00:39:32,620 --> 00:39:35,420
Safari and Chrome, Chrome for Android.
>>> And Android browser?

540
00:39:35,420 --> 00:39:40,080
>>Alex Komoroske: Chrome for Android.
>>Matthew McNulty: Chrome for Android at the

541
00:39:40,080 --> 00:39:43,090
moment is the only one we're testing out.
>>> Okay, thanks.

542
00:39:43,090 --> 00:39:45,670
>>Alex Komoroske: Again, it is very early
days.

543
00:39:45,670 --> 00:39:52,670
>>> Several years ago there was actually a
similar technique that was to achieve the

544
00:39:56,420 --> 00:40:02,910
similar level of encapsulation, which is XML
plus XSLT.

545
00:40:02,910 --> 00:40:09,910
The essential of that is -- the picture of
that is essentially you will create a heavy

546
00:40:10,910 --> 00:40:17,910
element-focused, say, Web interface instead
of having to take care of all the underlayers.

547
00:40:20,270 --> 00:40:25,430
What would you compare that to Web components?
>>Alex Komoroske: I think there's been a number

548
00:40:25,430 --> 00:40:29,760
of things that are similar to Web components
in the past. None of them have really stuck

549
00:40:29,760 --> 00:40:34,180
around for various reasons. There is the things
like XBL, which is still used actually in

550
00:40:34,180 --> 00:40:39,650
parts of Gecko. You've got things like the
HTC stuff for Microsoft. You have got a bunch

551
00:40:39,650 --> 00:40:46,440
of other things that aims to solve all similar
kinds of problems. Web components is now like

552
00:40:46,440 --> 00:40:50,820
an emerging set of specs that is --
>>Matthew McNulty: So the difference here

553
00:40:50,820 --> 00:40:54,140
is that you're using the same technologies
you already use on the Web today.

554
00:40:54,140 --> 00:40:56,070
>>Alex Komoroske: Yes.
>>Matthew McNulty: You are using HTML, CSS

555
00:40:56,070 --> 00:41:00,590
and JavaScript. There is actually nothing
new here, whereas XSLT, I did a whole framework

556
00:41:00,590 --> 00:41:06,750
in XSLT years ago. And that was -- to debug
that was one of the more insane things I have

557
00:41:06,750 --> 00:41:09,390
ever done in my life.
>>> Great, thank you.

558
00:41:09,390 --> 00:41:12,620
>>Alex Komoroske: We're actually out of time,
I believe. If you have more questions, you

559
00:41:12,620 --> 00:41:16,070
can come find us up here after the talk. Thanks.
[ Applause ]

