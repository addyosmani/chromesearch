1
00:00:00,000 --> 00:00:00,470

2
00:00:00,470 --> 00:00:01,887
PAMELA FOX: Hello.

3
00:00:01,887 --> 00:00:03,290
AUDIENCE: Hello.

4
00:00:03,290 --> 00:00:04,410
PAMELA FOX: How are you?

5
00:00:04,410 --> 00:00:06,370
AUDIENCE: [INAUDIBLE].

6
00:00:06,370 --> 00:00:07,256
PAMELA FOX: OK.

7
00:00:07,256 --> 00:00:07,682
How are you?

8
00:00:07,682 --> 00:00:08,109
AUDIENCE: Good.

9
00:00:08,109 --> 00:00:08,374
PAMELA FOX: All right.

10
00:00:08,374 --> 00:00:08,640
OK.

11
00:00:08,640 --> 00:00:10,220
Good.

12
00:00:10,220 --> 00:00:11,820
I know this is like the time
of the afternoon where

13
00:00:11,820 --> 00:00:12,640
typically you sleep.

14
00:00:12,640 --> 00:00:14,100
And they did just turn
off the lights.

15
00:00:14,100 --> 00:00:17,115
But I will try and be as loud
and obnoxious as possible in

16
00:00:17,115 --> 00:00:18,690
order to keep you awake.

17
00:00:18,690 --> 00:00:20,600
So my name is Pamela fox.

18
00:00:20,600 --> 00:00:22,480
I'm a product engineer
at Coursera.

19
00:00:22,480 --> 00:00:24,210
And today I want to
talk about feature

20
00:00:24,210 --> 00:00:26,650
detection in the real world.

21
00:00:26,650 --> 00:00:28,690
So this shit's gonna get real.

22
00:00:28,690 --> 00:00:29,410
All right.

23
00:00:29,410 --> 00:00:32,020
So you guys are in
a Chrome track.

24
00:00:32,020 --> 00:00:34,750
And presumably you guys are all
on the Chrome track and

25
00:00:34,750 --> 00:00:36,110
doing web development stuff.

26
00:00:36,110 --> 00:00:39,733
And you're probably all pretty
excited about HTML5, right?

27
00:00:39,733 --> 00:00:40,660
Whoo.

28
00:00:40,660 --> 00:00:41,280
AUDIENCE: Whoo.

29
00:00:41,280 --> 00:00:43,300
PAMELA FOX: So HTML5 is awesome,
because it's bringing

30
00:00:43,300 --> 00:00:45,780
us all these things that for
years and years we wanted as

31
00:00:45,780 --> 00:00:46,220
web developers.

32
00:00:46,220 --> 00:00:48,580
And we had to do all
these crazy hacks

33
00:00:48,580 --> 00:00:49,380
in order to do them.

34
00:00:49,380 --> 00:00:51,880
And finally, the browsers are
just making it really

35
00:00:51,880 --> 00:00:53,150
easy for us, right?

36
00:00:53,150 --> 00:00:56,120
I remember once spending two
months implementing rounded

37
00:00:56,120 --> 00:00:58,880
corners on this little gadget
back when I was working at

38
00:00:58,880 --> 00:01:02,280
Google, and finally getting it
to work in IE6, and then

39
00:01:02,280 --> 00:01:05,630
taking it to UX Review with
Marissa finding out that

40
00:01:05,630 --> 00:01:09,070
apparently we didn't do rounded
corners at Google.

41
00:01:09,070 --> 00:01:10,520
So stuff like that, right?

42
00:01:10,520 --> 00:01:13,010
These days it would take me
one line of code to put a

43
00:01:13,010 --> 00:01:15,060
border radius on there and
then get it rejected.

44
00:01:15,060 --> 00:01:17,250
And hey, life would
go on, right?

45
00:01:17,250 --> 00:01:20,140
So HTML5 is great, because we
get all these new features.

46
00:01:20,140 --> 00:01:21,920
But we're getting them
incrementally, right?

47
00:01:21,920 --> 00:01:23,390
So we have them in
some browsers.

48
00:01:23,390 --> 00:01:24,640
We don't have them in
other browsers.

49
00:01:24,640 --> 00:01:26,680
We have kind of parts of the
features in some and they

50
00:01:26,680 --> 00:01:28,270
don't quite work.

51
00:01:28,270 --> 00:01:31,210
So that means we actually have
to worry about whether a

52
00:01:31,210 --> 00:01:34,450
particular feature is actually
supported, because most of us

53
00:01:34,450 --> 00:01:36,460
probably have to actually
develop things

54
00:01:36,460 --> 00:01:39,080
for multiple browsers.

55
00:01:39,080 --> 00:01:41,430
If we could, we'd probably just
tell all of our users,

56
00:01:41,430 --> 00:01:44,260
hey, just use Chrome.

57
00:01:44,260 --> 00:01:45,330
I've tried that.

58
00:01:45,330 --> 00:01:47,380
It kind of works.

59
00:01:47,380 --> 00:01:49,190
So what do we do?

60
00:01:49,190 --> 00:01:50,870
We think to ourself
like, all right, I

61
00:01:50,870 --> 00:01:52,520
want to use this feature.

62
00:01:52,520 --> 00:01:54,210
But first I need to see
if it's supported.

63
00:01:54,210 --> 00:01:55,970
How should I do that?

64
00:01:55,970 --> 00:01:59,400
The obvious thing to do is to
ask the browser, like, hey, I

65
00:01:59,400 --> 00:02:00,250
want to use this feature.

66
00:02:00,250 --> 00:02:01,520
Do you use that?

67
00:02:01,520 --> 00:02:03,590
And we do that via this
technique that we

68
00:02:03,590 --> 00:02:04,850
call feature detection.

69
00:02:04,850 --> 00:02:06,320
And we have various
ways of actually

70
00:02:06,320 --> 00:02:08,400
doing feature detection.

71
00:02:08,400 --> 00:02:09,770
So here are some examples.

72
00:02:09,770 --> 00:02:12,380
If we want to know if a
browser supports some

73
00:02:12,380 --> 00:02:15,750
JavaScript API, we might
ask, OK, does

74
00:02:15,750 --> 00:02:19,000
window.webkitAudioContext
exist?

75
00:02:19,000 --> 00:02:22,210
If it does exist, than this
browser supports that

76
00:02:22,210 --> 00:02:23,900
particular JavaScript API.

77
00:02:23,900 --> 00:02:26,480
If we're trying to see if a
particular HTML element works,

78
00:02:26,480 --> 00:02:29,460
we can try creating the HTML
element and seeing if it gets

79
00:02:29,460 --> 00:02:31,880
particular attributes
automatically applied to it by

80
00:02:31,880 --> 00:02:33,340
the browser.

81
00:02:33,340 --> 00:02:38,240
If we want to know some CSS
works, we can just create an

82
00:02:38,240 --> 00:02:43,050
element and see if that style
property is actually a key on

83
00:02:43,050 --> 00:02:44,480
that element.

84
00:02:44,480 --> 00:02:47,800
And most of us probably use
Modernizr, which is a library

85
00:02:47,800 --> 00:02:50,720
that does these detections for
you behind the scenes.

86
00:02:50,720 --> 00:02:52,000
And then you just
ask Modernizr,

87
00:02:52,000 --> 00:02:54,500
hey, does this work?

88
00:02:54,500 --> 00:02:56,150
So that's feature detection.

89
00:02:56,150 --> 00:02:59,390
And it sounds like it's
actually really great.

90
00:02:59,390 --> 00:03:01,530
All we have to do is say, we
want to use this feature, just

91
00:03:01,530 --> 00:03:03,610
tell the browser, hey,
tell us if it works.

92
00:03:03,610 --> 00:03:06,120

93
00:03:06,120 --> 00:03:08,260
So it's really, really awesome
when it works.

94
00:03:08,260 --> 00:03:09,910
It's a great idea.

95
00:03:09,910 --> 00:03:13,400
However, it doesn't
always work.

96
00:03:13,400 --> 00:03:15,430
Sometimes it's impossible
to detect a feature.

97
00:03:15,430 --> 00:03:19,650
Sometimes you get false
negatives, positive falsities,

98
00:03:19,650 --> 00:03:21,980
whatever you want to call
them, all those things.

99
00:03:21,980 --> 00:03:23,670
And you need a different plan.

100
00:03:23,670 --> 00:03:26,440
And a lot of times what
you do instead is

101
00:03:26,440 --> 00:03:28,730
use user agent detection.

102
00:03:28,730 --> 00:03:32,280
And this is where we just look
at the navigator.userAgent.

103
00:03:32,280 --> 00:03:35,400
And we try to understand
what device and what

104
00:03:35,400 --> 00:03:38,170
browser a user is using.

105
00:03:38,170 --> 00:03:39,590
So a very basic check here.

106
00:03:39,590 --> 00:03:42,300
If I want to know if they're on
an iPad or iPhone, I'm just

107
00:03:42,300 --> 00:03:45,250
looking for iPhone or iPod
in that user agent,

108
00:03:45,250 --> 00:03:46,560
doing a regex here.

109
00:03:46,560 --> 00:03:49,860
This is where we have
a lot of regex's.

110
00:03:49,860 --> 00:03:53,760
I hate regex's, so I will never
make these up myself.

111
00:03:53,760 --> 00:03:55,000
But they get worse.

112
00:03:55,000 --> 00:03:58,010
So if I want to check for mobile
browsers, maybe the top

113
00:03:58,010 --> 00:04:01,502
mobile browsers, here's a check
that gets a bit more of

114
00:04:01,502 --> 00:04:05,150
a crazier regex that's going
to get me maybe the top 10

115
00:04:05,150 --> 00:04:08,250
mobile browsers.

116
00:04:08,250 --> 00:04:09,810
But it's not that simple.

117
00:04:09,810 --> 00:04:12,380
There's a lot more browsers out
there and devices in the

118
00:04:12,380 --> 00:04:13,840
world, especially as you
go international.

119
00:04:13,840 --> 00:04:16,470
I know a lot of you are
from outside America.

120
00:04:16,470 --> 00:04:18,990
And I'm sure you have Android
devices that I've never even

121
00:04:18,990 --> 00:04:20,040
heard of, right?

122
00:04:20,040 --> 00:04:22,320
So if you really wanted to
check for every mobile

123
00:04:22,320 --> 00:04:25,230
browser, you get something
like this.

124
00:04:25,230 --> 00:04:28,870
I think this from
mobilebrowserdetect.com.

125
00:04:28,870 --> 00:04:31,760
And as you can see, there's
a lot of mobile

126
00:04:31,760 --> 00:04:33,190
browsers in the world.

127
00:04:33,190 --> 00:04:34,900
Do you actually need to
check for all of them?

128
00:04:34,900 --> 00:04:35,540
I don't know.

129
00:04:35,540 --> 00:04:38,010
I don't know you're doing.

130
00:04:38,010 --> 00:04:41,430
But this is an example of
how intense user agent

131
00:04:41,430 --> 00:04:42,490
sniffing can be.

132
00:04:42,490 --> 00:04:45,520
And we usually don't want to do
user agent sniffing for a

133
00:04:45,520 --> 00:04:46,440
couple reasons.

134
00:04:46,440 --> 00:04:48,710
First of all, we have
to write regex's.

135
00:04:48,710 --> 00:04:52,930
And I don't know about you,
but I don't like regex.

136
00:04:52,930 --> 00:04:54,880
The thing is, it's very
easy to get it wrong.

137
00:04:54,880 --> 00:04:56,330
It's generally easy to
get regex's wrong.

138
00:04:56,330 --> 00:04:59,220
But it's also really easy to get
user agents wrong, because

139
00:04:59,220 --> 00:05:01,950
user agents, they're kind of
these crazy strings that

140
00:05:01,950 --> 00:05:02,920
browsers come up with.

141
00:05:02,920 --> 00:05:05,510
And browsers are always trying
to fool developers into

142
00:05:05,510 --> 00:05:07,850
thinking that they're not
what they used to be.

143
00:05:07,850 --> 00:05:11,920
So I think the new IE10 has
gotten rid of something in its

144
00:05:11,920 --> 00:05:14,340
user agent string that people
normally sniff for to find out

145
00:05:14,340 --> 00:05:16,650
that it's IE, because IE10, they
don't want you thinking

146
00:05:16,650 --> 00:05:19,770
it's IE anymore, because
it's cool now.

147
00:05:19,770 --> 00:05:20,260
And then--

148
00:05:20,260 --> 00:05:21,550
AUDIENCE: [LAUGHTER]

149
00:05:21,550 --> 00:05:23,040
PAMELA FOX: Oh, you guys
didn't get that memo.

150
00:05:23,040 --> 00:05:23,630
OK.

151
00:05:23,630 --> 00:05:26,370
And then some browsers, like
if you're viewing IE with

152
00:05:26,370 --> 00:05:29,790
Chrome Frame, it'll tell you
Chrome in the user agent.

153
00:05:29,790 --> 00:05:32,330
But then Chrome Frame might
not actually be

154
00:05:32,330 --> 00:05:33,130
running on the page.

155
00:05:33,130 --> 00:05:34,760
So that's kind of confusing.

156
00:05:34,760 --> 00:05:36,800
And then of course every user
agent string in the world has

157
00:05:36,800 --> 00:05:40,100
Mozilla, because that was
the original dupe.

158
00:05:40,100 --> 00:05:42,270
So user agent detection
can be really tricky.

159
00:05:42,270 --> 00:05:44,130
And it also means that when
you're detecting the user

160
00:05:44,130 --> 00:05:47,220
agent, if that user agent
eventually does come to

161
00:05:47,220 --> 00:05:50,120
support a feature, you've
prematurely blocked it.

162
00:05:50,120 --> 00:05:53,970
If you say like, hey, Safari
doesn't support this feature,

163
00:05:53,970 --> 00:05:57,650
we're not going to use this
feature in Safari, and then

164
00:05:57,650 --> 00:06:00,850
Safari tomorrow comes out with
a release that supports that

165
00:06:00,850 --> 00:06:03,120
feature, you've probably moved
on to other things.

166
00:06:03,120 --> 00:06:04,920
The chance that you're actually
going to update that

167
00:06:04,920 --> 00:06:08,400
bit of code that blocks Safari
users is really small.

168
00:06:08,400 --> 00:06:10,690
So we don't like user agent
detection because it's often

169
00:06:10,690 --> 00:06:12,960
not future-thinking.

170
00:06:12,960 --> 00:06:15,910
It can really easily leave us in
a state where parts of our

171
00:06:15,910 --> 00:06:19,370
site aren't working as well when
they actually could be,

172
00:06:19,370 --> 00:06:21,600
because these browsers
do move fast.

173
00:06:21,600 --> 00:06:25,260
But it is a tool that
we can use.

174
00:06:25,260 --> 00:06:26,450
So here's the thing.

175
00:06:26,450 --> 00:06:28,760
We have these two tools, feature
detection and user

176
00:06:28,760 --> 00:06:29,990
agent sniffing.

177
00:06:29,990 --> 00:06:32,500
And a lot of people will tell
you, hey, you've got to use

178
00:06:32,500 --> 00:06:33,080
feature detection.

179
00:06:33,080 --> 00:06:34,410
You've got to use feature
detection.

180
00:06:34,410 --> 00:06:35,820
That's the only way.

181
00:06:35,820 --> 00:06:38,690
And I definitely do try to.

182
00:06:38,690 --> 00:06:42,000
But I've run into all these
cases where it hasn't quite

183
00:06:42,000 --> 00:06:44,910
worked and I've had to use
other techniques instead.

184
00:06:44,910 --> 00:06:47,700
So I wanted to share those with
you so that hopefully

185
00:06:47,700 --> 00:06:51,030
when you guys are working on
using these fancy new features

186
00:06:51,030 --> 00:06:54,000
yourself, you'll know what to
look out for and you'll know

187
00:06:54,000 --> 00:06:57,020
how to react yourself so that
you can spend less time

188
00:06:57,020 --> 00:06:59,440
figuring out how to detect
things and just move on to

189
00:06:59,440 --> 00:07:01,570
actually making stuff happen,
which is what

190
00:07:01,570 --> 00:07:03,840
we all want to do.

191
00:07:03,840 --> 00:07:06,820
So let's talk about
a few cases.

192
00:07:06,820 --> 00:07:12,210
LocalStorage is this cool,
lightweight storage API.

193
00:07:12,210 --> 00:07:14,670
It's actually supported in a
quite a few browsers now.

194
00:07:14,670 --> 00:07:17,250
It's from the W3 Web
Storage spec.

195
00:07:17,250 --> 00:07:21,270
And it's a very simple key
value store that you can

196
00:07:21,270 --> 00:07:25,555
access from JavaScript and use
to store in cache data from

197
00:07:25,555 --> 00:07:27,510
your application.

198
00:07:27,510 --> 00:07:30,390
And I thought it was
really cool.

199
00:07:30,390 --> 00:07:34,560
So I wrote a library on top of
LocalStorage called lscache,

200
00:07:34,560 --> 00:07:36,970
which was inspired by memcache,
which is a tool we

201
00:07:36,970 --> 00:07:39,640
use on the server and would
allow me to store stuff in

202
00:07:39,640 --> 00:07:42,225
LocalStorage with a particular
expiration and then they would

203
00:07:42,225 --> 00:07:43,820
get automatically kicked out.

204
00:07:43,820 --> 00:07:47,670
So in this library, I thought it
would be responsible of me

205
00:07:47,670 --> 00:07:50,730
to actually check to see if
LocalStorage worked in the

206
00:07:50,730 --> 00:07:54,500
browser before I attempted
to store anything in it.

207
00:07:54,500 --> 00:07:56,980
So I needed to figure out how
to do this detection.

208
00:07:56,980 --> 00:08:00,830
So I started off with the most
basic thing I could do, which

209
00:08:00,830 --> 00:08:06,760
is, OK, LocalStorage on
window and not null?

210
00:08:06,760 --> 00:08:11,120
Therefore, this browser supports
the LocalStorage API.

211
00:08:11,120 --> 00:08:14,910
That was my very naive
first attempt.

212
00:08:14,910 --> 00:08:17,910
But what happened is that you
could have LocalStorage

213
00:08:17,910 --> 00:08:19,240
supported by a browser.

214
00:08:19,240 --> 00:08:22,570
It didn't mean you could
actually use it, because it

215
00:08:22,570 --> 00:08:25,230
could be that the browser was
currently in incognito mode

216
00:08:25,230 --> 00:08:27,080
and doesn't let you store
LocalStorage.

217
00:08:27,080 --> 00:08:31,160
It could be that the
LocalStorage was over quota.

218
00:08:31,160 --> 00:08:33,679
It could be just for whatever
reason-- there was one version

219
00:08:33,679 --> 00:08:35,780
of iPad where they just
turned it off.

220
00:08:35,780 --> 00:08:38,210
So the only way you can actually
check to see if

221
00:08:38,210 --> 00:08:40,650
LocalStorage works is to
try and use it the way

222
00:08:40,650 --> 00:08:41,679
you want to use it.

223
00:08:41,679 --> 00:08:44,530
So my LocalStorage check then
turned into this, which is,

224
00:08:44,530 --> 00:08:49,360
OK, let's try to set an item
in the cache and remove the

225
00:08:49,360 --> 00:08:50,450
item from the cache.

226
00:08:50,450 --> 00:08:52,780
And if we're able to do that
and we don't get any

227
00:08:52,780 --> 00:08:57,230
exceptions during that time,
then OK, LocalStorage works.

228
00:08:57,230 --> 00:08:59,540
So the only way I could actually
check this was to use

229
00:08:59,540 --> 00:09:03,830
it exactly the way I wanted
to be able to use it.

230
00:09:03,830 --> 00:09:05,630
So I went to that check.

231
00:09:05,630 --> 00:09:10,060
Now, even that caused
me some problems.

232
00:09:10,060 --> 00:09:12,180
So I was using this in
a mobile web app.

233
00:09:12,180 --> 00:09:14,730
It was a PhoneGap hybrid app.

234
00:09:14,730 --> 00:09:18,560
And I noticed that my web app
was taken a long time to load.

235
00:09:18,560 --> 00:09:20,570
And I was trying to get
this load time down.

236
00:09:20,570 --> 00:09:21,840
So I profiled it.

237
00:09:21,840 --> 00:09:25,130
I put little new Date
in between all the

238
00:09:25,130 --> 00:09:25,835
things that it did.

239
00:09:25,835 --> 00:09:28,790
And I tried to figure out, why
is it taking so much time just

240
00:09:28,790 --> 00:09:30,740
to get to this main screen?

241
00:09:30,740 --> 00:09:33,240
And I found it was actually
taking something like 300

242
00:09:33,240 --> 00:09:36,270
milliseconds on Android in
order to get through this

243
00:09:36,270 --> 00:09:40,340
LocalStorage detection check,
because in my code I had

244
00:09:40,340 --> 00:09:42,370
script source equals
lscache.js.

245
00:09:42,370 --> 00:09:43,610
It would execute that code.

246
00:09:43,610 --> 00:09:45,540
And that code would
immediately do the

247
00:09:45,540 --> 00:09:47,110
LocalStorage detection check.

248
00:09:47,110 --> 00:09:49,730
So what I realized was I needed
to stop doing that

249
00:09:49,730 --> 00:09:54,750
detection check on page load,
and defer it, only do it later

250
00:09:54,750 --> 00:09:56,330
when I actually needed it.

251
00:09:56,330 --> 00:09:58,640
So what I did is I made a little
cached variable to

252
00:09:58,640 --> 00:10:01,740
remember where LocalStorage
works, because we don't want

253
00:10:01,740 --> 00:10:02,630
to do this check all the time.

254
00:10:02,630 --> 00:10:04,170
We just want to do it once.

255
00:10:04,170 --> 00:10:06,300
So basically what happens,
every time you try to use

256
00:10:06,300 --> 00:10:10,120
lscache, it will check to
see, have we figured

257
00:10:10,120 --> 00:10:11,050
out yet that it works?

258
00:10:11,050 --> 00:10:11,250
OK.

259
00:10:11,250 --> 00:10:13,360
If we haven't, let's
do that check.

260
00:10:13,360 --> 00:10:14,780
Let's remember it.

261
00:10:14,780 --> 00:10:17,670
And then next time when they
use it, we'll remember.

262
00:10:17,670 --> 00:10:23,500
So what I learned here is that
you have to be careful when

263
00:10:23,500 --> 00:10:25,730
you're checking if something
supports an API not just that

264
00:10:25,730 --> 00:10:28,120
it supports it, but it supports
the way you want to

265
00:10:28,120 --> 00:10:31,330
use it, I mean, LocalStorage,
you could actually be in a

266
00:10:31,330 --> 00:10:33,220
mode where you could
read it but you

267
00:10:33,220 --> 00:10:34,450
wouldn't be able to write.

268
00:10:34,450 --> 00:10:36,640
But maybe you only care about
reading, in which case you

269
00:10:36,640 --> 00:10:38,360
should just check for that.

270
00:10:38,360 --> 00:10:41,920
So there's a lot of subtleties
to when we say something is

271
00:10:41,920 --> 00:10:43,940
supported or works.

272
00:10:43,940 --> 00:10:48,370
It's, again, a bit more
complex than that.

273
00:10:48,370 --> 00:10:50,520
You also need to make sure that
you don't let feature

274
00:10:50,520 --> 00:10:52,590
detection slow down your site.

275
00:10:52,590 --> 00:10:55,940
It's always simple to do
everything up, do all your

276
00:10:55,940 --> 00:10:56,760
checks upfront.

277
00:10:56,760 --> 00:10:59,620
And then you know you can
always have it there.

278
00:10:59,620 --> 00:11:02,440
But you don't want to sacrifice
the users loading

279
00:11:02,440 --> 00:11:04,760
performance just
for simplicity.

280
00:11:04,760 --> 00:11:07,490
This is the unfortunate thing
pretty much when it comes to

281
00:11:07,490 --> 00:11:10,540
performance, your code can
start off beautiful.

282
00:11:10,540 --> 00:11:13,410
As soon as you start worrying
about performance, your code's

283
00:11:13,410 --> 00:11:15,760
not going to be beautiful
anymore.

284
00:11:15,760 --> 00:11:17,600
You're going to have to
implement caching.

285
00:11:17,600 --> 00:11:19,720
And it's not going to
look very clean.

286
00:11:19,720 --> 00:11:23,620
But sometimes we have to make
our code look not as beautiful

287
00:11:23,620 --> 00:11:26,340
in order for users to have
a better experience.

288
00:11:26,340 --> 00:11:29,340
So we sacrifice a little bit of
developer happiness for a

289
00:11:29,340 --> 00:11:30,190
little bit of user happiness.

290
00:11:30,190 --> 00:11:33,310
And I know that's really
hard for us to give up.

291
00:11:33,310 --> 00:11:36,680
But it's important.

292
00:11:36,680 --> 00:11:39,150
And along with this, every time
I encountered something

293
00:11:39,150 --> 00:11:43,300
with this feature detection, I
thought to myself, OK, what

294
00:11:43,300 --> 00:11:44,270
would I want out of browsers?

295
00:11:44,270 --> 00:11:47,700
What could browsers give to me
as a developer that would have

296
00:11:47,700 --> 00:11:50,090
made it easier for
me in this case?

297
00:11:50,090 --> 00:11:52,410
So here, it would've been
awesome if I could just ask

298
00:11:52,410 --> 00:11:54,490
the browser like,
hey, browser.

299
00:11:54,490 --> 00:11:56,960
Can I use LocalStorage storage
in a read mode?

300
00:11:56,960 --> 00:11:58,990
Can I use LocalStorage
in a write mode?

301
00:11:58,990 --> 00:11:59,330
OK.

302
00:11:59,330 --> 00:11:59,690
Great.

303
00:11:59,690 --> 00:12:02,800
And then the browser could
figure out the most optimal

304
00:12:02,800 --> 00:12:05,890
way of checking and I wouldn't
be up to me.

305
00:12:05,890 --> 00:12:09,010
So the good thing about
browsers, having browsers give

306
00:12:09,010 --> 00:12:12,770
us these checks, is that they
could do it in a very fast way

307
00:12:12,770 --> 00:12:15,270
and a very efficient way, ways
that I couldn't necessarily do

308
00:12:15,270 --> 00:12:16,980
because I'm not going
behind the scenes

309
00:12:16,980 --> 00:12:18,300
in the browser code.

310
00:12:18,300 --> 00:12:21,480
So I hope that this is something
that browsers do

311
00:12:21,480 --> 00:12:24,030
going forward with things
like the storage APIs.

312
00:12:24,030 --> 00:12:25,810
And I think that IndexedDB
actually does

313
00:12:25,810 --> 00:12:27,410
have stuff like this.

314
00:12:27,410 --> 00:12:29,920
So they learn.

315
00:12:29,920 --> 00:12:31,000
All right.

316
00:12:31,000 --> 00:12:31,910
Whoo.

317
00:12:31,910 --> 00:12:37,140
So then we have this thing
called FormData.

318
00:12:37,140 --> 00:12:40,110
FormData is another
addition to HTML5.

319
00:12:40,110 --> 00:12:44,120
And it's something that lets
you take data from all your

320
00:12:44,120 --> 00:12:46,090
form inputs, serialize
it, send it

321
00:12:46,090 --> 00:12:47,850
in an XML HTTP request.

322
00:12:47,850 --> 00:12:49,120
The idea is that you
don't have to

323
00:12:49,120 --> 00:12:52,650
use jQuery.ajax anymore.

324
00:12:52,650 --> 00:12:54,280
And I thought, oh, this
is really cool.

325
00:12:54,280 --> 00:12:57,740
And I saw all the Google Dev
Rellers were tweeting about

326
00:12:57,740 --> 00:12:58,410
how cool FormData.

327
00:12:58,410 --> 00:13:00,310
And I was like, man.

328
00:13:00,310 --> 00:13:01,700
I want to be cool like them.

329
00:13:01,700 --> 00:13:04,530
I want to use FormData.

330
00:13:04,530 --> 00:13:08,530
So I implemented it for a signup
form on this website I

331
00:13:08,530 --> 00:13:10,770
made last year, so that
when you signed

332
00:13:10,770 --> 00:13:12,430
up, you would actually--

333
00:13:12,430 --> 00:13:14,840
it would go through this code
here, which would say, OK.

334
00:13:14,840 --> 00:13:16,400
If window.FormData--

335
00:13:16,400 --> 00:13:18,200
we're just starting with
this basic check.

336
00:13:18,200 --> 00:13:21,430
If window.FormData, create the
new FormData from the form.

337
00:13:21,430 --> 00:13:23,290
Do a new XHR.

338
00:13:23,290 --> 00:13:25,580
Send that FormData to the XHR.

339
00:13:25,580 --> 00:13:28,960
If not, then we just go down
to our Ajax technique.

340
00:13:28,960 --> 00:13:29,720
So I was like, OK.

341
00:13:29,720 --> 00:13:31,400
This is awesome.

342
00:13:31,400 --> 00:13:32,550
I've been all proper.

343
00:13:32,550 --> 00:13:34,900
And I've implemented the feature
detection check.

344
00:13:34,900 --> 00:13:36,730
And I've done a fallback
technique.

345
00:13:36,730 --> 00:13:39,390
And I tested it and it
works and it's great.

346
00:13:39,390 --> 00:13:40,480
And I put it out there.

347
00:13:40,480 --> 00:13:41,895
And I tweeted about it.

348
00:13:41,895 --> 00:13:43,560
And I felt really good.

349
00:13:43,560 --> 00:13:47,230
But then I got all these reports
from Safari users that

350
00:13:47,230 --> 00:13:49,080
they weren't able to sign up.

351
00:13:49,080 --> 00:13:51,030
I was like, well, this
is not very good.

352
00:13:51,030 --> 00:13:53,960
Sign up is somewhat a crucial
part of an application.

353
00:13:53,960 --> 00:13:56,190
So I was like, what is this?

354
00:13:56,190 --> 00:13:57,340
Why can't they sign
up on Safari?

355
00:13:57,340 --> 00:14:00,880
Because it worked fine on my
Safari, and I realized that

356
00:14:00,880 --> 00:14:03,020
there was this particular
version of Safari--

357
00:14:03,020 --> 00:14:11,090
it was like 5.1.50 or whatever,
only on Macs, maybe

358
00:14:11,090 --> 00:14:13,900
on Windows-- but this particular
version of Safari

359
00:14:13,900 --> 00:14:16,280
where FormData didn't
quite work.

360
00:14:16,280 --> 00:14:17,790
It pretended to work.

361
00:14:17,790 --> 00:14:19,540
But it didn't actually work.

362
00:14:19,540 --> 00:14:21,860
And what would actually happen
is that when you created that

363
00:14:21,860 --> 00:14:24,780
FormData object, it would
create it and

364
00:14:24,780 --> 00:14:25,830
pretend it all worked.

365
00:14:25,830 --> 00:14:29,575
But then there was nothing in
it, which is kind of horrible,

366
00:14:29,575 --> 00:14:32,430
because people would be trying
to sign up and there would be

367
00:14:32,430 --> 00:14:34,280
no data going to my server.

368
00:14:34,280 --> 00:14:37,070
So I couldn't even find out what
email address they put in

369
00:14:37,070 --> 00:14:39,520
in order to tell them like, oh,
hey, I fixed it, because I

370
00:14:39,520 --> 00:14:41,440
was getting an empty string.

371
00:14:41,440 --> 00:14:43,110
So that was pretty bad.

372
00:14:43,110 --> 00:14:45,500
And the other bad thing is
that there was no way to

373
00:14:45,500 --> 00:14:49,190
actually do a detection check
for this, because FormData has

374
00:14:49,190 --> 00:14:50,100
no accessors.

375
00:14:50,100 --> 00:14:53,040
You can't ask FormData to tell
you what's in it, to

376
00:14:53,040 --> 00:14:54,660
say get a key out.

377
00:14:54,660 --> 00:14:56,200
Give me the length of
what's in there.

378
00:14:56,200 --> 00:14:59,050
It's just this blob that
you can't look inside.

379
00:14:59,050 --> 00:15:00,740
And maybe there's
nothing in it.

380
00:15:00,740 --> 00:15:01,750
So I was like, OK.

381
00:15:01,750 --> 00:15:05,150
I'm going to have to just
blacklist Safari, because I

382
00:15:05,150 --> 00:15:08,440
knew it had a problem and
that was my only option.

383
00:15:08,440 --> 00:15:11,780
So I ended up coming up with a
detection, user agent sniffing

384
00:15:11,780 --> 00:15:13,030
for Safari.

385
00:15:13,030 --> 00:15:13,980
And I said, OK.

386
00:15:13,980 --> 00:15:18,730
If window.FormData and we're
not in Safari, then lets go

387
00:15:18,730 --> 00:15:20,460
send it on.

388
00:15:20,460 --> 00:15:23,060
And I could have done the very
specific version of Safari,

389
00:15:23,060 --> 00:15:25,550
but I didn't want to-- you know,
if they introduce the

390
00:15:25,550 --> 00:15:27,430
bug in one version, who's to
say they're not going to

391
00:15:27,430 --> 00:15:28,590
introduce it in another
version?

392
00:15:28,590 --> 00:15:31,060
So I just wanted to
move on with life

393
00:15:31,060 --> 00:15:34,760
and get it over with.

394
00:15:34,760 --> 00:15:38,570
So what I learned here is
that it sounds really--

395
00:15:38,570 --> 00:15:41,220
these new APIs, they seem
really exciting.

396
00:15:41,220 --> 00:15:47,530
And if you go to conferences a
lot, like you guys might, you

397
00:15:47,530 --> 00:15:49,040
hear about these new APIs
and you're like,

398
00:15:49,040 --> 00:15:49,660
oh, that's so cool.

399
00:15:49,660 --> 00:15:51,290
I'm going to go home
and implement it

400
00:15:51,290 --> 00:15:52,680
immediately for my app.

401
00:15:52,680 --> 00:15:54,150
And you get really excited.

402
00:15:54,150 --> 00:15:57,730
But you've got to be careful
about using new APIs, because

403
00:15:57,730 --> 00:15:59,640
the bugs in them are new.

404
00:15:59,640 --> 00:16:02,080
They're not documented.

405
00:16:02,080 --> 00:16:06,120
New bugs will come up in recent
versions of browsers.

406
00:16:06,120 --> 00:16:08,240
And especially if you're doing
something, if it's some

407
00:16:08,240 --> 00:16:11,530
mission-critical part of your
site, like signup, I wouldn't

408
00:16:11,530 --> 00:16:14,100
recommend trying out
a new API there.

409
00:16:14,100 --> 00:16:16,770
If it's a mission-critical part
of your site, then just

410
00:16:16,770 --> 00:16:18,790
go with the old techniques.

411
00:16:18,790 --> 00:16:22,650
They might not be as cool, but
we've had them for years.

412
00:16:22,650 --> 00:16:24,080
And people have tested them.

413
00:16:24,080 --> 00:16:26,200
And people know what all
the bugs are with

414
00:16:26,200 --> 00:16:28,280
file upload in IE7.

415
00:16:28,280 --> 00:16:30,640
And they've figured them
out in libraries.

416
00:16:30,640 --> 00:16:35,510
So I would say try and use those
old APIs and libraries

417
00:16:35,510 --> 00:16:39,220
that people have written,
because they're battle-tested.

418
00:16:39,220 --> 00:16:43,280
And you don't want to be using
something so new and shiny for

419
00:16:43,280 --> 00:16:45,840
something that's so important.

420
00:16:45,840 --> 00:16:51,010
Now, for browsers, we really
need accessors for anything

421
00:16:51,010 --> 00:16:52,450
that has storage in it.

422
00:16:52,450 --> 00:16:54,810
Like with LocalStorage, if there
was no accessor, I would

423
00:16:54,810 --> 00:16:56,970
have had no way of knowing that
it actually successfully

424
00:16:56,970 --> 00:16:58,090
stored something.

425
00:16:58,090 --> 00:16:59,910
So this is something that
they should add to any

426
00:16:59,910 --> 00:17:03,190
sort of API like this.

427
00:17:03,190 --> 00:17:07,339
So now let's talk a bit about
CSS, because this is something

428
00:17:07,339 --> 00:17:09,180
that you can run into as well,
because we have a lot

429
00:17:09,180 --> 00:17:11,560
of fancy CSS now.

430
00:17:11,560 --> 00:17:15,250
We've got shiny animations
and transforms.

431
00:17:15,250 --> 00:17:17,119
So I was working on that mobile

432
00:17:17,119 --> 00:17:18,950
web app, using PhoneGap.

433
00:17:18,950 --> 00:17:20,720
And I had this embedded
WebView.

434
00:17:20,720 --> 00:17:23,420
And I decided to do it as a
mobile web app because I

435
00:17:23,420 --> 00:17:24,640
already knew HTML and CSS.

436
00:17:24,640 --> 00:17:26,670
And I was like, I already
know HTML and CSS.

437
00:17:26,670 --> 00:17:28,144
I'm just going to use
it to make this app.

438
00:17:28,144 --> 00:17:28,790
I'll be great.

439
00:17:28,790 --> 00:17:30,620
I don't have to learn
something new.

440
00:17:30,620 --> 00:17:34,100
And at the time, I
was doing it for

441
00:17:34,100 --> 00:17:35,190
both iPhone and Android.

442
00:17:35,190 --> 00:17:37,780
And only iPhone had a set
of design guidelines.

443
00:17:37,780 --> 00:17:40,440
Android hadn't really come
up with anything yet.

444
00:17:40,440 --> 00:17:42,740
So I just followed the iPhone
design guidelines.

445
00:17:42,740 --> 00:17:46,900
And they were a lot of like
rounded corners and gradients

446
00:17:46,900 --> 00:17:48,790
and they kind of looked
really bubbly.

447
00:17:48,790 --> 00:17:51,700
And luckily, CSS3 made it really
easy to make something

448
00:17:51,700 --> 00:17:54,650
look iPhone-y, because we have
the box shadow and the

449
00:17:54,650 --> 00:17:57,870
gradient and the border radius
and all of that.

450
00:17:57,870 --> 00:17:59,200
So I had my app.

451
00:17:59,200 --> 00:18:00,350
And it was all good.

452
00:18:00,350 --> 00:18:04,410
And I was feeling good, having
it out on the markets there.

453
00:18:04,410 --> 00:18:09,170
But then what happened is I was
using Android at the time

454
00:18:09,170 --> 00:18:12,380
and I would notice from time to
time that the entire screen

455
00:18:12,380 --> 00:18:15,260
would just go completely
white.

456
00:18:15,260 --> 00:18:16,640
And I would be unable--

457
00:18:16,640 --> 00:18:18,080
there would just be nothing
there anymore.

458
00:18:18,080 --> 00:18:22,650
And I would have to restart the
app or somehow go back.

459
00:18:22,650 --> 00:18:24,000
And it was kind of useless.

460
00:18:24,000 --> 00:18:26,320
You can't use an app that's
just a white screen.

461
00:18:26,320 --> 00:18:28,150
It's highly unfunctional.

462
00:18:28,150 --> 00:18:29,390
So I was like, OK.

463
00:18:29,390 --> 00:18:32,250
Clearly something is not working
in this app that I

464
00:18:32,250 --> 00:18:33,520
need to work out.

465
00:18:33,520 --> 00:18:36,680
And I kind of had a suspicion
that maybe Android didn't like

466
00:18:36,680 --> 00:18:38,340
all this fancy CSS.

467
00:18:38,340 --> 00:18:41,640
I'd kind of heard rumors that
Android wasn't so good with

468
00:18:41,640 --> 00:18:43,890
new CSS3 stuff.

469
00:18:43,890 --> 00:18:46,760
So I suspected that it was
having trouble actually

470
00:18:46,760 --> 00:18:48,060
rendering this.

471
00:18:48,060 --> 00:18:52,420
So what I did was I spent an
entire afternoon sitting there

472
00:18:52,420 --> 00:18:55,670
commenting out CSS, redeploying
my APK to my

473
00:18:55,670 --> 00:18:59,860
phone, scrolling and scrolling
and scrolling, waiting to see

474
00:18:59,860 --> 00:19:01,220
if I got a white screen.

475
00:19:01,220 --> 00:19:02,830
That was probably one
of the most boring

476
00:19:02,830 --> 00:19:05,740
afternoons of my life.

477
00:19:05,740 --> 00:19:08,180
And so eventually, I did figure
out that if I commented

478
00:19:08,180 --> 00:19:11,490
out enough of the fancy CSS,
that I wouldn't get white

479
00:19:11,490 --> 00:19:13,000
screens anymore.

480
00:19:13,000 --> 00:19:15,450
And I didn't want to have to
sit there and figure out

481
00:19:15,450 --> 00:19:19,140
exactly how much CSS Android
can handle, because it was

482
00:19:19,140 --> 00:19:20,400
just really boring.

483
00:19:20,400 --> 00:19:21,885
So I decided, well,
you know what?

484
00:19:21,885 --> 00:19:23,720
I'm just going to get
rid of all of it.

485
00:19:23,720 --> 00:19:25,420
I'll take away the border
radius, the

486
00:19:25,420 --> 00:19:27,620
gradients, the box shadows.

487
00:19:27,620 --> 00:19:30,890
And so it ended up looking
really flat.

488
00:19:30,890 --> 00:19:33,280
Then, conveniently, Android
came out with their design

489
00:19:33,280 --> 00:19:36,650
guidelines, which were the
opposite of iPhone's.

490
00:19:36,650 --> 00:19:39,830
And their design guidelines
were flat,

491
00:19:39,830 --> 00:19:43,400
not gradient, square.

492
00:19:43,400 --> 00:19:44,830
Wow, that's perfect.

493
00:19:44,830 --> 00:19:46,420
It's like you knew
that you were

494
00:19:46,420 --> 00:19:48,170
incapable of handling CSS3.

495
00:19:48,170 --> 00:19:50,860

496
00:19:50,860 --> 00:19:52,840
So that worked out really
well, actually.

497
00:19:52,840 --> 00:19:55,480
But the thing is that I still
wanted to have the iPhone look

498
00:19:55,480 --> 00:19:59,490
and feel for iPhone users and
the Android look and feel for

499
00:19:59,490 --> 00:20:00,460
the Android users.

500
00:20:00,460 --> 00:20:04,600
And I was doing this from the
same code base, so I needed to

501
00:20:04,600 --> 00:20:05,930
detect Android.

502
00:20:05,930 --> 00:20:08,750
So you can see here the
transformation from the iPhone

503
00:20:08,750 --> 00:20:10,370
to the Android.

504
00:20:10,370 --> 00:20:14,380
So to detect Android, it's a
little more complex than you

505
00:20:14,380 --> 00:20:15,490
would imagine.

506
00:20:15,490 --> 00:20:17,990
I was doing the standard user
agent check for popular

507
00:20:17,990 --> 00:20:19,090
Android devices.

508
00:20:19,090 --> 00:20:21,630
I was also using the PhoneGap
API that they provide for

509
00:20:21,630 --> 00:20:22,820
checking device.

510
00:20:22,820 --> 00:20:25,610
And I was also checking the URL
parameter, because I test

511
00:20:25,610 --> 00:20:28,150
my mobile web app in the browser
as well, so I wanted

512
00:20:28,150 --> 00:20:30,310
to be able to just fake Android
when I was testing in

513
00:20:30,310 --> 00:20:31,460
the browser.

514
00:20:31,460 --> 00:20:34,070
But finally, when I decided to
Android, I add the Android

515
00:20:34,070 --> 00:20:35,720
class to the body tag.

516
00:20:35,720 --> 00:20:38,230
And then in my CSS, I can
just say, oh, OK.

517
00:20:38,230 --> 00:20:41,190
If we're looking at a modal
class inside the Android body

518
00:20:41,190 --> 00:20:44,640
class, then just reset all
these fancy things.

519
00:20:44,640 --> 00:20:46,630
Box shadow, none.

520
00:20:46,630 --> 00:20:48,660
No border radius.

521
00:20:48,660 --> 00:20:49,530
Get rid of all that.

522
00:20:49,530 --> 00:20:51,590
Reset it all to zero.

523
00:20:51,590 --> 00:20:52,600
And that worked.

524
00:20:52,600 --> 00:20:55,980
So what I learned here is that
just because something is

525
00:20:55,980 --> 00:21:00,190
supported, does not mean
it's supported well.

526
00:21:00,190 --> 00:21:03,060
It's really easy to throw in
support for these things.

527
00:21:03,060 --> 00:21:06,220
It's much harder to make them
work really well and be really

528
00:21:06,220 --> 00:21:10,780
performant, especially
for this CSS3 stuff.

529
00:21:10,780 --> 00:21:13,930
So you really need to check for
that, and especially if

530
00:21:13,930 --> 00:21:15,680
you're using these
features in bulk.

531
00:21:15,680 --> 00:21:18,230
Part of my problem was that
I had kind of an infinite

532
00:21:18,230 --> 00:21:19,660
scrolling interface.

533
00:21:19,660 --> 00:21:22,370
So there was potentially lots
and lots of these features

534
00:21:22,370 --> 00:21:25,270
that were kind of building up
and being used by the browser.

535
00:21:25,270 --> 00:21:29,150
I think if I only had a limited
amount of usage of it,

536
00:21:29,150 --> 00:21:32,100
I probably could have more
easily controlled it and

537
00:21:32,100 --> 00:21:34,130
predicted how it would form.

538
00:21:34,130 --> 00:21:37,510
But since I had more and more of
this CSS3 features building

539
00:21:37,510 --> 00:21:39,760
up, I think that contributed
to Android kind of freaking

540
00:21:39,760 --> 00:21:43,210
out and going, oh,
it's too many.

541
00:21:43,210 --> 00:21:46,630
I'm just guessing that's
what Android does.

542
00:21:46,630 --> 00:21:49,260
So if you have any sort of
interfaces which potentially

543
00:21:49,260 --> 00:21:52,330
get bigger and bigger amounts
of content and don't have a

544
00:21:52,330 --> 00:21:56,870
finite cap, really be careful
about your performance there.

545
00:21:56,870 --> 00:22:00,140
I worked on the Google
Wave team years ago.

546
00:22:00,140 --> 00:22:05,210
And we had that problem
with Waves, Waves

547
00:22:05,210 --> 00:22:06,710
that got way too long.

548
00:22:06,710 --> 00:22:08,910
They just had too much
DOM inside them.

549
00:22:08,910 --> 00:22:11,300
So we really had to look at
that DOM and say, OK, we

550
00:22:11,300 --> 00:22:13,700
probably shouldn't be using
a table to make all of our

551
00:22:13,700 --> 00:22:17,250
buttons, because that really,
really adds up when you get

552
00:22:17,250 --> 00:22:18,710
these really long Waves.

553
00:22:18,710 --> 00:22:22,970
So definitely any place where
you've got this scrolling or

554
00:22:22,970 --> 00:22:25,410
lots of things adding
up, look out for it.

555
00:22:25,410 --> 00:22:29,690
Now for browsers, I just want
browsers to know their limits.

556
00:22:29,690 --> 00:22:32,470
I would much rather that
Android realize that it

557
00:22:32,470 --> 00:22:37,100
couldn't render my fancy CSS and
just not done it, instead

558
00:22:37,100 --> 00:22:39,660
of pretending it could do it
and then rendering a white

559
00:22:39,660 --> 00:22:45,330
screen, because white screens
are really not easy to use.

560
00:22:45,330 --> 00:22:46,540
It's like worse than
blue screens.

561
00:22:46,540 --> 00:22:48,900
At least blue screens you know
it's a blue screen of death.

562
00:22:48,900 --> 00:22:49,700
You're like, oh, OK.

563
00:22:49,700 --> 00:22:49,965
It died.

564
00:22:49,965 --> 00:22:51,500
I'm just going to restart it.

565
00:22:51,500 --> 00:22:53,720
White screens it's like,
eh, I don't know

566
00:22:53,720 --> 00:22:54,420
what's going on here.

567
00:22:54,420 --> 00:22:56,690
It's kind of abstract.

568
00:22:56,690 --> 00:22:59,580
So browsers should just
know their limits.

569
00:22:59,580 --> 00:23:00,580
So should all of us.

570
00:23:00,580 --> 00:23:03,320
OK.

571
00:23:03,320 --> 00:23:06,040
So finally I want to talk about
a signup process that we

572
00:23:06,040 --> 00:23:09,250
have at Coursera that I helped
on a few months ago.

573
00:23:09,250 --> 00:23:11,560
So we introduced this thing
called Signature Track, which

574
00:23:11,560 --> 00:23:15,020
is a way of taking courses while
verifying your identity.

575
00:23:15,020 --> 00:23:17,690
And there are a few technical
components of Signature Track.

576
00:23:17,690 --> 00:23:20,270
And we wanted to make sure that
people knew about these

577
00:23:20,270 --> 00:23:22,710
technical requirements before
they signed up, because I

578
00:23:22,710 --> 00:23:25,130
didn't want users to get
halfway through this

579
00:23:25,130 --> 00:23:27,930
multi-step signup process and
then realize that there was no

580
00:23:27,930 --> 00:23:30,180
way they would've able to
complete it and then they get

581
00:23:30,180 --> 00:23:33,060
all mad, like, Coursera, why
you tease me like that?

582
00:23:33,060 --> 00:23:39,390
So the requirements were that
you needed to have a physical

583
00:23:39,390 --> 00:23:43,210
keyboard, because we do this
keystroke biometrics algorithm

584
00:23:43,210 --> 00:23:45,730
and it doesn't work so well
on soft keyboards.

585
00:23:45,730 --> 00:23:48,400
So we wanted you to have a
real physical keyboard.

586
00:23:48,400 --> 00:23:50,630
You needed to have a webcam,
because we took a picture of

587
00:23:50,630 --> 00:23:53,070
your face every time you took a
quiz and when you signed up

588
00:23:53,070 --> 00:23:55,520
and match it to your ID.

589
00:23:55,520 --> 00:23:58,320
So we couldn't have you do it
if you didn't have a webcam.

590
00:23:58,320 --> 00:24:01,030
And you needed to have
a modern browser.

591
00:24:01,030 --> 00:24:02,990
And also you needed to have
Flash, because we're using

592
00:24:02,990 --> 00:24:04,860
Flash to get the webcam stuff.

593
00:24:04,860 --> 00:24:07,610
I know that you can it
in HTML5, but it

594
00:24:07,610 --> 00:24:09,720
didn't work so well.

595
00:24:09,720 --> 00:24:13,790
So I needed to figure out how to
do checks for all of these.

596
00:24:13,790 --> 00:24:15,650
The first thing was a
physical keyboard.

597
00:24:15,650 --> 00:24:18,330
And that was a little tricky,
because there's no such thing

598
00:24:18,330 --> 00:24:19,820
as asking the browser
if there's a

599
00:24:19,820 --> 00:24:21,790
physical keyboard attached.

600
00:24:21,790 --> 00:24:23,930
So we said, all right, well,
maybe we should just look to

601
00:24:23,930 --> 00:24:25,500
see if it's a touch device.

602
00:24:25,500 --> 00:24:27,800
So we started off with this
check here, like is

603
00:24:27,800 --> 00:24:30,380
ontouchstart in window or
DocumentTouch, then OK, we're

604
00:24:30,380 --> 00:24:31,580
on a touch device.

605
00:24:31,580 --> 00:24:34,520
And we rolled that out, but we
immediately got cases where it

606
00:24:34,520 --> 00:24:36,220
thought you were on a touch
device and you weren't and

607
00:24:36,220 --> 00:24:37,920
vice versa.

608
00:24:37,920 --> 00:24:39,830
And people would actually
have physical keyboards.

609
00:24:39,830 --> 00:24:40,570
And we're like, all right.

610
00:24:40,570 --> 00:24:44,310
We are just going to blacklist
mobile browsers.

611
00:24:44,310 --> 00:24:47,040
So basically, you're only going
to be able to do this on

612
00:24:47,040 --> 00:24:48,190
your desktop browser.

613
00:24:48,190 --> 00:24:50,770
And we'll give you a link to
let us know that if you

614
00:24:50,770 --> 00:24:52,940
actually do have a physical
keyboard, we'll

615
00:24:52,940 --> 00:24:55,100
give you that option.

616
00:24:55,100 --> 00:24:57,490
So we ended up doing that,
because we needed something--

617
00:24:57,490 --> 00:25:00,590
I just needed something that
worked to get this out fast.

618
00:25:00,590 --> 00:25:02,720
But the thing is, we
would tell people.

619
00:25:02,720 --> 00:25:06,400
So every time I would detect
something about a user, I

620
00:25:06,400 --> 00:25:08,990
would let them know like, hey,
this is the reason that we're

621
00:25:08,990 --> 00:25:12,010
not letting you do it, so that
then they could see.

622
00:25:12,010 --> 00:25:15,290
And then they could contact us
and say, oh, hey, you say that

623
00:25:15,290 --> 00:25:17,150
you blocked me because I didn't
have a hard keyboard,

624
00:25:17,150 --> 00:25:18,460
but actually I do.

625
00:25:18,460 --> 00:25:20,910
And then we can decide to
unblock them or we can change

626
00:25:20,910 --> 00:25:22,890
our blocking process.

627
00:25:22,890 --> 00:25:25,880
We actually haven't gotten
emails about that check yet,

628
00:25:25,880 --> 00:25:28,810
so I guess it's kind
of working.

629
00:25:28,810 --> 00:25:31,990
Now I just want to give an aside
on touch events, because

630
00:25:31,990 --> 00:25:34,460
touch events are really, really
interesting things.

631
00:25:34,460 --> 00:25:37,370
And there's been a lot of very
interesting articles lately

632
00:25:37,370 --> 00:25:41,050
about touch events and
whether you should be

633
00:25:41,050 --> 00:25:42,610
detecting them and how.

634
00:25:42,610 --> 00:25:46,480
So if we want to look for touch
events, there's a couple

635
00:25:46,480 --> 00:25:49,270
things we have to do across
different browsers to find out

636
00:25:49,270 --> 00:25:53,180
if that browser is capable
of doing touch events.

637
00:25:53,180 --> 00:25:55,660
But there's a difference between
a browser supporting

638
00:25:55,660 --> 00:25:59,130
touch events and the user
actually using touch events.

639
00:25:59,130 --> 00:26:02,140
So if you're on an Android
tablet, you could still

640
00:26:02,140 --> 00:26:04,380
connect a mouse to
your tablet.

641
00:26:04,380 --> 00:26:06,490
And you can actually potentially
be using a website

642
00:26:06,490 --> 00:26:10,490
and switching between using a
mouse and using your finger on

643
00:26:10,490 --> 00:26:13,300
the same web page.

644
00:26:13,300 --> 00:26:15,630
So that means as a developer
you shouldn't be relying on

645
00:26:15,630 --> 00:26:19,840
just the fact that something's a
touch device as meaning that

646
00:26:19,840 --> 00:26:22,180
you should be just be doing
everything reacting to touch,

647
00:26:22,180 --> 00:26:24,530
because a lot of times the users
can connect these other

648
00:26:24,530 --> 00:26:25,280
devices as well.

649
00:26:25,280 --> 00:26:27,230
And I think this is going to
become more and more common,

650
00:26:27,230 --> 00:26:29,400
that we'll have these devices
that are both.

651
00:26:29,400 --> 00:26:31,740
I mean, we all just got that
Chrome Pixel, right?

652
00:26:31,740 --> 00:26:35,250
And a Chrome Pixel is a
touchscreen and a keyboard and

653
00:26:35,250 --> 00:26:38,060
you have a little mouse
down there.

654
00:26:38,060 --> 00:26:40,040
So this is becoming more and
more the reality, so we have

655
00:26:40,040 --> 00:26:43,810
to be really careful that when
we're looking for touch, that

656
00:26:43,810 --> 00:26:45,910
we consider the fact that
they could still

657
00:26:45,910 --> 00:26:48,710
be using click events.

658
00:26:48,710 --> 00:26:50,720
So the standard way--

659
00:26:50,720 --> 00:26:54,570
or one way that you could
actually not care about this

660
00:26:54,570 --> 00:26:57,470
is that you could listen to a
touch event and if you get a

661
00:26:57,470 --> 00:26:59,790
touch event, you would just
trigger your listener for the

662
00:26:59,790 --> 00:27:00,220
click event.

663
00:27:00,220 --> 00:27:04,370
And basically, they would both
do the same thing, so that way

664
00:27:04,370 --> 00:27:08,010
the user can go between using
touching and using click and

665
00:27:08,010 --> 00:27:10,730
your web page should respond
exactly the same way.

666
00:27:10,730 --> 00:27:13,530
So if you are doing anything
right now or thinking about

667
00:27:13,530 --> 00:27:15,520
doing something where you're
detecting touch events and

668
00:27:15,520 --> 00:27:18,470
doing something different, think
to yourself, how would

669
00:27:18,470 --> 00:27:23,090
this work if the user also
had a mouse attached?

670
00:27:23,090 --> 00:27:25,940
How would it work if they
switched between the mouse and

671
00:27:25,940 --> 00:27:28,060
this touch screen halfway
through the interaction?

672
00:27:28,060 --> 00:27:32,070
That's kind of the trickiest,
but it could happen.

673
00:27:32,070 --> 00:27:33,980
And there are some really
interesting articles about

674
00:27:33,980 --> 00:27:35,330
that there.

675
00:27:35,330 --> 00:27:35,850
OK.

676
00:27:35,850 --> 00:27:37,640
So that's an aside.

677
00:27:37,640 --> 00:27:39,690
We also need to detect
the Flash plug-in.

678
00:27:39,690 --> 00:27:43,200
And I just used the SWFObject
library for this, which is a

679
00:27:43,200 --> 00:27:44,430
nice, well-supported library.

680
00:27:44,430 --> 00:27:46,530
And it'll even tell you the
Flash Player versions, in case

681
00:27:46,530 --> 00:27:48,730
you want to support
particular verses.

682
00:27:48,730 --> 00:27:50,730
And I also wanted to
check for a webcam.

683
00:27:50,730 --> 00:27:54,170
Unfortunately, there is no way
to check for a webcam unless

684
00:27:54,170 --> 00:27:58,520
you actually put up the webcam
prompt and ask the user to

685
00:27:58,520 --> 00:27:59,870
give permission.

686
00:27:59,870 --> 00:28:02,260
And I wanted to check for this
before they even got to the

687
00:28:02,260 --> 00:28:04,150
webcam part of the process.

688
00:28:04,150 --> 00:28:05,160
So I gave up.

689
00:28:05,160 --> 00:28:08,760
And we put up a little modal
that said, hey, remember, you

690
00:28:08,760 --> 00:28:09,870
need a webcam.

691
00:28:09,870 --> 00:28:13,640
And presumably if they saw that
and decided to keep going

692
00:28:13,640 --> 00:28:16,300
even though they didn't have a
webcam, well, that's their

693
00:28:16,300 --> 00:28:17,950
prerogative.

694
00:28:17,950 --> 00:28:19,840
So sometimes you just
can't detect things.

695
00:28:19,840 --> 00:28:24,480
And you have to accept that.

696
00:28:24,480 --> 00:28:29,560
So in this case, I learned that
you can't detect things

697
00:28:29,560 --> 00:28:30,140
all the time.

698
00:28:30,140 --> 00:28:31,640
And you have to do
different things.

699
00:28:31,640 --> 00:28:35,920
And if you do decide to block
users, which can be a bad

700
00:28:35,920 --> 00:28:38,640
thing, but if you do block
them, tell them why you

701
00:28:38,640 --> 00:28:39,560
blocked them.

702
00:28:39,560 --> 00:28:45,080
Give them an option to contact
you and explain what their

703
00:28:45,080 --> 00:28:46,120
particular setup is.

704
00:28:46,120 --> 00:28:49,160
And maybe you'll realize then
that the code you're using

705
00:28:49,160 --> 00:28:51,550
could actually be
much improved.

706
00:28:51,550 --> 00:28:54,040
And for browsers, I would really
like for browsers to

707
00:28:54,040 --> 00:28:57,500
give us a way to detect those
physical devices and plug-ins

708
00:28:57,500 --> 00:28:59,450
so I wouldn't have to go through
all this effort to try

709
00:28:59,450 --> 00:29:00,080
and figure it out.

710
00:29:00,080 --> 00:29:02,700
So something like, is there
a physical keyboard?

711
00:29:02,700 --> 00:29:04,240
Are they using it right now?

712
00:29:04,240 --> 00:29:05,470
Do they have a webcam?

713
00:29:05,470 --> 00:29:06,540
Do they have Flash?

714
00:29:06,540 --> 00:29:10,190
Those would all have made my
life much, much easier.

715
00:29:10,190 --> 00:29:12,710
So to finish up, this
is a reminder of

716
00:29:12,710 --> 00:29:13,670
why this all matters.

717
00:29:13,670 --> 00:29:16,060
This is a visualization of
browser support for a

718
00:29:16,060 --> 00:29:16,970
particular feature.

719
00:29:16,970 --> 00:29:18,980
And there's lots more
visualizations of this, but

720
00:29:18,980 --> 00:29:21,400
the point is that, yeah, we're
going to have unequal

721
00:29:21,400 --> 00:29:24,670
distribution of feature support
for a long time going

722
00:29:24,670 --> 00:29:26,400
forward, basically forever.

723
00:29:26,400 --> 00:29:28,460
People will keep coming
up with new things.

724
00:29:28,460 --> 00:29:30,560
Browsers will keep not
implementing them at the same

725
00:29:30,560 --> 00:29:32,490
rate, keep implementing them
in different ways, with

726
00:29:32,490 --> 00:29:34,160
different performance concerns,
with different

727
00:29:34,160 --> 00:29:35,400
attributes supported.

728
00:29:35,400 --> 00:29:37,960
And we're going to just have
to keep dealing with that.

729
00:29:37,960 --> 00:29:39,560
So this is something that we're
going to have to think

730
00:29:39,560 --> 00:29:43,600
about for years to come.

731
00:29:43,600 --> 00:29:44,830
Now browsers are
aware of this.

732
00:29:44,830 --> 00:29:45,970
And browsers are
trying to help.

733
00:29:45,970 --> 00:29:48,650
So browsers, they did
introduce this CSS

734
00:29:48,650 --> 00:29:51,720
conditionals, level 3 spec,
which actually has this

735
00:29:51,720 --> 00:29:54,690
@support rule for CSS, where
you can say, oh, hey.

736
00:29:54,690 --> 00:29:57,050
Does this browser actually
support this CSS?

737
00:29:57,050 --> 00:29:58,880
And then you could serve
different styles.

738
00:29:58,880 --> 00:30:00,530
And they've got the same
thing in JavaScript,

739
00:30:00,530 --> 00:30:02,200
window.supportsCSS.

740
00:30:02,200 --> 00:30:04,760
And this is actually supported
by three browsers now.

741
00:30:04,760 --> 00:30:06,300
So the cool thing is that
browsers are actually

742
00:30:06,300 --> 00:30:08,140
realizing that, yeah,
this is something

743
00:30:08,140 --> 00:30:09,030
developers care about.

744
00:30:09,030 --> 00:30:10,800
And they're trying to come up
with more ways for us to

745
00:30:10,800 --> 00:30:11,790
figure it out.

746
00:30:11,790 --> 00:30:13,860
But this is still really
cutting-edge.

747
00:30:13,860 --> 00:30:17,280
And most of you, we won't be
able to use this quite yet.

748
00:30:17,280 --> 00:30:20,850
So in the meantime, what should
be your strategy?

749
00:30:20,850 --> 00:30:23,430
First of all, don't assume it's
going to be easy, because

750
00:30:23,430 --> 00:30:24,200
sometimes it's not.

751
00:30:24,200 --> 00:30:25,810
And if you assume it's easy,
you might look for an easy

752
00:30:25,810 --> 00:30:28,380
solution and overlook all
the complexities.

753
00:30:28,380 --> 00:30:30,940
Don't just copy the first answer
off Stack Overflow,

754
00:30:30,940 --> 00:30:32,450
which is something I do a lot.

755
00:30:32,450 --> 00:30:36,940
But I'm trying to
cut back on it.

756
00:30:36,940 --> 00:30:39,480
Do use the tried and
true techniques.

757
00:30:39,480 --> 00:30:41,480
So use popular and well-tested
libraries.

758
00:30:41,480 --> 00:30:43,270
Look at the number of forks,
the number of issues, the

759
00:30:43,270 --> 00:30:44,500
number of contributors.

760
00:30:44,500 --> 00:30:46,620
Look at how recently
the change was.

761
00:30:46,620 --> 00:30:48,260
Browse through the issue tracker
and see what people

762
00:30:48,260 --> 00:30:50,220
say about it.

763
00:30:50,220 --> 00:30:51,580
And if you're not
sure, just ask.

764
00:30:51,580 --> 00:30:53,500
When I was trying to figure
out the Signature Track

765
00:30:53,500 --> 00:30:56,430
process, I just emailed my
buddies on the Chrome

766
00:30:56,430 --> 00:30:57,650
team and said, hey.

767
00:30:57,650 --> 00:31:00,180
Is there anything I'm not
thinking of here?

768
00:31:00,180 --> 00:31:02,290
And we don't all of have buddies
on the Chrome team,

769
00:31:02,290 --> 00:31:05,410
but we do all have Paul Irish's
Twitter account.

770
00:31:05,410 --> 00:31:08,490
So I recommend just tweeting
at him, because he really

771
00:31:08,490 --> 00:31:09,670
likes to answer these things.

772
00:31:09,670 --> 00:31:11,230
And he's got the lowdown.

773
00:31:11,230 --> 00:31:12,850
So don't be afraid to ask.

774
00:31:12,850 --> 00:31:15,570
There's a lot of people out
there that'll answer.

775
00:31:15,570 --> 00:31:17,540
And do try feature
detection first.

776
00:31:17,540 --> 00:31:18,780
So use Modernizr.

777
00:31:18,780 --> 00:31:21,060
And you can see all the
different ways of using it.

778
00:31:21,060 --> 00:31:23,970
Also, if you do need to do user
agent detection, use this

779
00:31:23,970 --> 00:31:26,000
library called ua-parser.

780
00:31:26,000 --> 00:31:28,440
It's maintained by BrowserStack
and contributed

781
00:31:28,440 --> 00:31:30,460
to by Google and Facebook.

782
00:31:30,460 --> 00:31:34,020
So it's got a lot of great,
well-tested regex's in it.

783
00:31:34,020 --> 00:31:36,570
And it's supported in lots
of different languages.

784
00:31:36,570 --> 00:31:38,050
And you can also
mix and match.

785
00:31:38,050 --> 00:31:40,610
You can see if something works
and then maybe blacklist it

786
00:31:40,610 --> 00:31:42,850
for certain browsers that
you know have problems.

787
00:31:42,850 --> 00:31:44,370
Certain browsers and versions,
that's the

788
00:31:44,370 --> 00:31:47,330
best kind of blacklist.

789
00:31:47,330 --> 00:31:50,960
Basically, the conclusion here
is that we don't have that.

790
00:31:50,960 --> 00:31:53,380
Do you guys know what
that is up there?

791
00:31:53,380 --> 00:31:53,680
Yeah.

792
00:31:53,680 --> 00:31:56,170
So that's a sonic screwdriver
from Doctor Who.

793
00:31:56,170 --> 00:31:58,430
And basically, it can
do everything.

794
00:31:58,430 --> 00:32:01,210
We don't have something that
can do everything.

795
00:32:01,210 --> 00:32:04,310
We don't have the perfect
solution in web development.

796
00:32:04,310 --> 00:32:06,020
That's just how it is.

797
00:32:06,020 --> 00:32:09,550
But we do have a lot of
tools in our tool box.

798
00:32:09,550 --> 00:32:11,450
And we can learn how
to use those tools.

799
00:32:11,450 --> 00:32:12,650
And we can combine
them together.

800
00:32:12,650 --> 00:32:15,540
And we can try and use the more
sophisticated ones first.

801
00:32:15,540 --> 00:32:18,660
And we also have each other, so
that we can learn from each

802
00:32:18,660 --> 00:32:20,510
other about how to learn
these tools, so we're

803
00:32:20,510 --> 00:32:21,270
not alone in it.

804
00:32:21,270 --> 00:32:24,110
So when you're figuring this
out, look to each other for

805
00:32:24,110 --> 00:32:27,330
the solutions, document what
you find out, write it up,

806
00:32:27,330 --> 00:32:30,900
open source your code, and then
we'll all learn how to do

807
00:32:30,900 --> 00:32:33,800
all this detection together,
so that we can fully take

808
00:32:33,800 --> 00:32:36,900
advantage of everything the
web has for us today.

809
00:32:36,900 --> 00:32:38,510
Got it?

810
00:32:38,510 --> 00:32:39,394
Done.

811
00:32:39,394 --> 00:32:49,280
[APPLAUSE]

812
00:32:49,280 --> 00:32:50,590
PAMELA FOX: So, questions,
yeah?

813
00:32:50,590 --> 00:32:53,190

814
00:32:53,190 --> 00:32:55,540
Anyone have questions?

815
00:32:55,540 --> 00:32:57,080
Speechless.

816
00:32:57,080 --> 00:32:58,395
Doctor Who episodes, perhaps?

817
00:32:58,395 --> 00:33:04,480

818
00:33:04,480 --> 00:33:06,200
There's a little microphone-y
thing there.

819
00:33:06,200 --> 00:33:10,610

820
00:33:10,610 --> 00:33:11,210
AUDIENCE: OK.

821
00:33:11,210 --> 00:33:14,350
So there seems to be kind
of an underlying

822
00:33:14,350 --> 00:33:15,520
theme to all of this.

823
00:33:15,520 --> 00:33:18,210
And that is, you're doing
all this checking.

824
00:33:18,210 --> 00:33:20,670
It almost feels like you're
trying to implement what you

825
00:33:20,670 --> 00:33:26,340
can when you can, rather than
trying to develop to implement

826
00:33:26,340 --> 00:33:29,510
to cover as many browsers as
possible and then dealing with

827
00:33:29,510 --> 00:33:30,270
exceptions.

828
00:33:30,270 --> 00:33:35,510
Am I just kind of reading into
that the wrong way or--

829
00:33:35,510 --> 00:33:37,260
PAMELA FOX: So you're wondering,
am I trying to use

830
00:33:37,260 --> 00:33:38,670
new things--

831
00:33:38,670 --> 00:33:41,410
am I trying like overly hard
to use new things, versus

832
00:33:41,410 --> 00:33:43,470
using the older things?

833
00:33:43,470 --> 00:33:44,740
AUDIENCE: I wouldn't
say overly hard.

834
00:33:44,740 --> 00:33:47,850
But it seems like not just
you, I see a lot of

835
00:33:47,850 --> 00:33:48,580
developers out there.

836
00:33:48,580 --> 00:33:51,470
I feel like there's this push,
this emphasis to use

837
00:33:51,470 --> 00:33:54,460
everything possibly available,
even if it causes

838
00:33:54,460 --> 00:33:55,910
10 times the work.

839
00:33:55,910 --> 00:33:58,160
PAMELA FOX: Right.

840
00:33:58,160 --> 00:33:58,820
Yeah.

841
00:33:58,820 --> 00:34:00,480
I think that's a good point.

842
00:34:00,480 --> 00:34:02,860
I think that we see the new
stuff and we get really

843
00:34:02,860 --> 00:34:03,670
excited about it.

844
00:34:03,670 --> 00:34:06,770
And it makes us feel good to try
out the new stuff, because

845
00:34:06,770 --> 00:34:10,040
we feel like we're on
the cutting edge.

846
00:34:10,040 --> 00:34:12,330
It's kind of like Not Invented
Here syndrome.

847
00:34:12,330 --> 00:34:14,900
It helps us kind of feel like
inventors if we're using the

848
00:34:14,900 --> 00:34:15,620
new stuff too.

849
00:34:15,620 --> 00:34:17,460
And we're going on this alone.

850
00:34:17,460 --> 00:34:18,280
But it's true.

851
00:34:18,280 --> 00:34:22,830
Nowadays, like at Coursera, most
of time I will just try

852
00:34:22,830 --> 00:34:26,929
and go with the tried and true
techniques now, because now

853
00:34:26,929 --> 00:34:29,060
that I've had this much
experience with trying the new

854
00:34:29,060 --> 00:34:32,639
stuff, I like knowing
that it's there.

855
00:34:32,639 --> 00:34:34,750
But I also know that if I'm
going to try it out, I'm

856
00:34:34,750 --> 00:34:36,560
probably going to be one of the
first people to really try

857
00:34:36,560 --> 00:34:37,670
it out in a big app.

858
00:34:37,670 --> 00:34:39,179
And I'm going to have
to struggle with

859
00:34:39,179 --> 00:34:40,310
figuring that out.

860
00:34:40,310 --> 00:34:42,540
And sometimes I'm up for that
challenge, because it can be

861
00:34:42,540 --> 00:34:43,320
quite interesting.

862
00:34:43,320 --> 00:34:45,530
But sometimes I just
want it to work.

863
00:34:45,530 --> 00:34:45,850
AUDIENCE: OK.

864
00:34:45,850 --> 00:34:48,420
So I hadn't quite formed
the question until now

865
00:34:48,420 --> 00:34:49,730
that you've said that.

866
00:34:49,730 --> 00:34:52,320
In your experience, these things
that are out there, are

867
00:34:52,320 --> 00:34:56,179
they generally stable enough
that it's OK for the better

868
00:34:56,179 --> 00:34:59,740
part of the user base
to try to use them

869
00:34:59,740 --> 00:35:00,570
and deal with them?

870
00:35:00,570 --> 00:35:04,240
Or if you've got to really deal
with the general public,

871
00:35:04,240 --> 00:35:07,800
should you just stick with those
tried and true methods?

872
00:35:07,800 --> 00:35:09,300
PAMELA FOX: It really depends
on what they are.

873
00:35:09,300 --> 00:35:13,520
Some of them have been out there
for longer than others.

874
00:35:13,520 --> 00:35:17,040
I guess I've experienced even
with LocalStorage that

875
00:35:17,040 --> 00:35:19,580
browsers introduce new bugs.

876
00:35:19,580 --> 00:35:21,940
And it's even been around
for a couple of years.

877
00:35:21,940 --> 00:35:23,720
We use HTML5 video
at Coursera.

878
00:35:23,720 --> 00:35:26,350
And we still have a lot
of problems with it.

879
00:35:26,350 --> 00:35:27,920
And it's been out for
a year or so.

880
00:35:27,920 --> 00:35:30,600
So we've started defaulting
users to Flash instead.

881
00:35:30,600 --> 00:35:31,750
AUDIENCE: OK.

882
00:35:31,750 --> 00:35:32,730
That right there says a lot.

883
00:35:32,730 --> 00:35:34,870
PAMELA FOX: So sometimes there
are advantages to stuff.

884
00:35:34,870 --> 00:35:36,830
We're using HTML5 video at
Coursera because we get

885
00:35:36,830 --> 00:35:39,250
playback rate, because we can
do the speed-it-up buttons.

886
00:35:39,250 --> 00:35:42,000
So we're using it there because
we're getting a real

887
00:35:42,000 --> 00:35:43,710
advantage to using it.

888
00:35:43,710 --> 00:35:45,430
So if there is a real advantage
in terms of

889
00:35:45,430 --> 00:35:47,910
performance or productivity--

890
00:35:47,910 --> 00:35:50,820
like border radius, I'm going to
use that and just not care

891
00:35:50,820 --> 00:35:52,910
if it doesn't work in other
browsers, because I get a big

892
00:35:52,910 --> 00:35:56,200
advantage there and not
a big decrease.

893
00:35:56,200 --> 00:35:57,730
So it's a balance.

894
00:35:57,730 --> 00:36:00,000
AUDIENCE: Thank you.

895
00:36:00,000 --> 00:36:03,560
AUDIENCE: Regarding your
fancy CSS woes, did

896
00:36:03,560 --> 00:36:06,560
you file any bugs?

897
00:36:06,560 --> 00:36:09,690
PAMELA FOX: So did I file bugs
on the Android white-out?

898
00:36:09,690 --> 00:36:12,270
AUDIENCE: Was it Chrome, or was
it the Android browser?

899
00:36:12,270 --> 00:36:13,910
PAMELA FOX: This was
Android WebKit.

900
00:36:13,910 --> 00:36:15,700
So the thing is, when you're
doing PhoneGap, you have to

901
00:36:15,700 --> 00:36:18,790
use the embedded webview, which
means using the Android

902
00:36:18,790 --> 00:36:23,480
WebKit, also known as like
the worst webkit ever.

903
00:36:23,480 --> 00:36:26,300
So I mean, there were a lot of
issues with that webkit.

904
00:36:26,300 --> 00:36:30,050
I think I filed some
issues on that.

905
00:36:30,050 --> 00:36:32,480
But I don't know if I filed on
the white-out in particular,

906
00:36:32,480 --> 00:36:34,180
because it's something where
you'd have to give

907
00:36:34,180 --> 00:36:35,120
them the test case.

908
00:36:35,120 --> 00:36:38,180
And it's kind of a-- sometimes
it can be really complex to

909
00:36:38,180 --> 00:36:40,160
come up with the test
cases for people.

910
00:36:40,160 --> 00:36:42,480
And I feel bad reporting bugs
without a really nice test

911
00:36:42,480 --> 00:36:43,030
case for it.

912
00:36:43,030 --> 00:36:44,210
So I probably didn't.

913
00:36:44,210 --> 00:36:44,720
AUDIENCE: I gotcha.

914
00:36:44,720 --> 00:36:45,470
Cool.

915
00:36:45,470 --> 00:36:47,450
We'd like to help fix those.

916
00:36:47,450 --> 00:36:49,030
PAMELA FOX: Nice.

917
00:36:49,030 --> 00:36:50,090
OK.

918
00:36:50,090 --> 00:36:51,340
Anything else?

919
00:36:51,340 --> 00:36:53,340

920
00:36:53,340 --> 00:36:54,040
All right.

921
00:36:54,040 --> 00:36:57,290
How many of you use
Modernizr now?

922
00:36:57,290 --> 00:36:57,870
Cool.

923
00:36:57,870 --> 00:36:59,120
Any of you guys do ua-parser?

924
00:36:59,120 --> 00:37:01,640

925
00:37:01,640 --> 00:37:02,150
We got one.

926
00:37:02,150 --> 00:37:02,460
Yeah.

927
00:37:02,460 --> 00:37:04,931
I actually had never even
heard of it before, so--

928
00:37:04,931 --> 00:37:06,181
AUDIENCE: [INAUDIBLE]?

929
00:37:06,181 --> 00:37:08,160

930
00:37:08,160 --> 00:37:09,330
PAMELA FOX: Why doesn't
Modernizr have an [INAUDIBLE]

931
00:37:09,330 --> 00:37:10,290
Flash?

932
00:37:10,290 --> 00:37:12,680
So there is a whole
issue on it.

933
00:37:12,680 --> 00:37:15,070
So this is what I recommend,
like when you use Modernizr,

934
00:37:15,070 --> 00:37:17,340
you'll find it doesn't have
checks for-- there's lots of

935
00:37:17,340 --> 00:37:18,850
things it doesn't
have checks for.

936
00:37:18,850 --> 00:37:21,240
Many of the things I check for
these days, like playback rate

937
00:37:21,240 --> 00:37:24,510
on the video element, Modernizr
doesn't have that.

938
00:37:24,510 --> 00:37:27,510
But if you look in the issue
tracker, you will often find

939
00:37:27,510 --> 00:37:28,860
discussions about it.

940
00:37:28,860 --> 00:37:32,170
So any time you use a library,
look in the issue tracker.

941
00:37:32,170 --> 00:37:33,790
So I always look in
the issue tracker.

942
00:37:33,790 --> 00:37:36,330
So you've got to look and see
what are the common issues

943
00:37:36,330 --> 00:37:38,320
that people are having, to see,
oh, is that something

944
00:37:38,320 --> 00:37:39,390
that's going to hit me too?

945
00:37:39,390 --> 00:37:41,630
And also look for interesting
discussions,

946
00:37:41,630 --> 00:37:43,050
especially with Modernizr.

947
00:37:43,050 --> 00:37:46,240
And I also look to see just when
people respond to issues,

948
00:37:46,240 --> 00:37:48,905
if they're nice or if they're
mean, because if I'm thinking

949
00:37:48,905 --> 00:37:51,410
about using a library and all
the responses on the issue

950
00:37:51,410 --> 00:37:55,100
tracker are kind of mean,
then I don't use it.

951
00:37:55,100 --> 00:37:57,250
So I definitely check out--

952
00:37:57,250 --> 00:38:00,150
when I'm thinking of using a
library, I check out their

953
00:38:00,150 --> 00:38:04,240
issue tracker and their code
history fairly thoroughly,

954
00:38:04,240 --> 00:38:07,650
because any time you use a
library, it's an investment,

955
00:38:07,650 --> 00:38:09,180
because you will encounter
issues with it.

956
00:38:09,180 --> 00:38:11,140
So they don't have
a Flash support.

957
00:38:11,140 --> 00:38:13,230
But they do have a long
thread about it.

958
00:38:13,230 --> 00:38:16,280
And I followed a few links from
there, but in the end

959
00:38:16,280 --> 00:38:20,190
SWFObject was the best option.

960
00:38:20,190 --> 00:38:21,440
It was the most accurate.

961
00:38:21,440 --> 00:38:24,130

962
00:38:24,130 --> 00:38:24,580
Cool.

963
00:38:24,580 --> 00:38:27,080
All right.

964
00:38:27,080 --> 00:38:28,100
You're free to go.

965
00:38:28,100 --> 00:38:39,998
[APPLAUSE]

