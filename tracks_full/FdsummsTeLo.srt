1
00:00:00,000 --> 00:00:08,041

2
00:00:08,041 --> 00:00:11,190
PAUL IRISH: Welcome to "The
Breakpoint," episode five.

3
00:00:11,190 --> 00:00:14,320
In this episode, we're going
to do a grab bag of Chrome

4
00:00:14,320 --> 00:00:15,680
DevTools features.

5
00:00:15,680 --> 00:00:18,010
Stuff that you probably haven't
seen, some new stuff.

6
00:00:18,010 --> 00:00:20,040
But we're going to cover
all of DevTools.

7
00:00:20,040 --> 00:00:24,870
So we're going to start off
doing some mobile overrides

8
00:00:24,870 --> 00:00:28,420
and emulating mobile
environments while still on

9
00:00:28,420 --> 00:00:29,630
your desktop machine.

10
00:00:29,630 --> 00:00:32,030
We're going to transition and do
some CSS stuff, showing off

11
00:00:32,030 --> 00:00:33,620
the CSS Regions support.

12
00:00:33,620 --> 00:00:36,270
And we're going to get into
JavaScript, show some insight

13
00:00:36,270 --> 00:00:38,490
that we have into internal
properties and bound

14
00:00:38,490 --> 00:00:41,310
functions, even do some native
memory profiling.

15
00:00:41,310 --> 00:00:44,595
So kind of spanning the gamut,
but showing you things that

16
00:00:44,595 --> 00:00:46,510
you probably haven't seen,
some power inside your

17
00:00:46,510 --> 00:00:49,080
DevTools that you'll be
excited to play with.

18
00:00:49,080 --> 00:00:52,340
So to kick this off, Addy
over in London is

19
00:00:52,340 --> 00:00:53,900
going to show you--

20
00:00:53,900 --> 00:00:54,400
what are you showing?

21
00:00:54,400 --> 00:00:55,635
Some mobile stuff?

22
00:00:55,635 --> 00:00:56,950
ADDY OSMANI: I'm going
to be showing some

23
00:00:56,950 --> 00:00:57,880
mobile stuff today.

24
00:00:57,880 --> 00:01:00,560
But before we get started, I
wanted to wish everybody in

25
00:01:00,560 --> 00:01:02,935
DevTools Land a big
happy new year!

26
00:01:02,935 --> 00:01:03,710
PAUL IRISH: Oh.

27
00:01:03,710 --> 00:01:04,649
ADDY OSMANI: Happy
new year pony!

28
00:01:04,649 --> 00:01:05,790
PAUL IRISH: That's very nice.

29
00:01:05,790 --> 00:01:07,950
That's styled console logs?

30
00:01:07,950 --> 00:01:09,660
ADDY OSMANI: Yeah, it's
styled console log.

31
00:01:09,660 --> 00:01:11,350
We showed this a couple
of episodes back.

32
00:01:11,350 --> 00:01:15,330
This is all I've been playing
with during my holidays, and

33
00:01:15,330 --> 00:01:18,500
now I am very, very happy
to be showing it off.

34
00:01:18,500 --> 00:01:19,310
But we're going to
be talking--

35
00:01:19,310 --> 00:01:21,370
PAUL IRISH: Nothing that styled
console logs can't

36
00:01:21,370 --> 00:01:25,125
really augment with some
ponies and happiness.

37
00:01:25,125 --> 00:01:26,420
ADDY OSMANI: Yes.

38
00:01:26,420 --> 00:01:28,570
If you don't have ponies in your
DevTools, you're doing

39
00:01:28,570 --> 00:01:31,480
something wrong.

40
00:01:31,480 --> 00:01:32,390
Right.

41
00:01:32,390 --> 00:01:34,200
So for the first part of this
show, we're going to be

42
00:01:34,200 --> 00:01:35,500
talking about mobile.

43
00:01:35,500 --> 00:01:38,535
Now increasingly, users
everywhere, regardless of what

44
00:01:38,535 --> 00:01:41,240
type of app you're having, are
interested in accessing your

45
00:01:41,240 --> 00:01:43,710
web apps using some sort
of mobile device.

46
00:01:43,710 --> 00:01:45,480
And a lot of the time, you want
to make sure that you're

47
00:01:45,480 --> 00:01:47,910
delivering them the best
experience possible.

48
00:01:47,910 --> 00:01:50,500
Now from a development side of
things, this often means

49
00:01:50,500 --> 00:01:53,400
either having to debug your app
using an emulator of some

50
00:01:53,400 --> 00:01:57,620
sort or, even worse, having to
actually play around with a

51
00:01:57,620 --> 00:01:59,280
device or multiple devices
just to see

52
00:01:59,280 --> 00:02:00,980
how well things work.

53
00:02:00,980 --> 00:02:03,580
So we've actually introduced a
bunch of stuff in the DevTools

54
00:02:03,580 --> 00:02:05,120
to help with this workflow.

55
00:02:05,120 --> 00:02:07,650
And I'm going to show you some
of this stuff today.

56
00:02:07,650 --> 00:02:10,090
Now, the first tip I'm going to
give you before we actually

57
00:02:10,090 --> 00:02:14,320
start playing around with this a
lot is that you can actually

58
00:02:14,320 --> 00:02:16,920
debug or try out how different
layouts look.

59
00:02:16,920 --> 00:02:20,580
So if you're using, say, media
queries, for example, to offer

60
00:02:20,580 --> 00:02:23,990
people different layouts and
adaptive layouts for your

61
00:02:23,990 --> 00:02:28,070
apps, you can actually use
DevTools in doc to write mode.

62
00:02:28,070 --> 00:02:30,590
And you can just use the slider
to actually increase

63
00:02:30,590 --> 00:02:33,906
how much of the page
is visible.

64
00:02:33,906 --> 00:02:38,000
And if you keep on moving the
slider, you can actually see

65
00:02:38,000 --> 00:02:39,710
different versions of your
layout depending on the

66
00:02:39,710 --> 00:02:42,470
different breakpoints you have
set up in your media queries,

67
00:02:42,470 --> 00:02:44,670
which is kind of nice.

68
00:02:44,670 --> 00:02:46,220
But what we're going
to be talking about

69
00:02:46,220 --> 00:02:48,170
next is actually overrides.

70
00:02:48,170 --> 00:02:50,660
So probably in the first episode
of "The Breakpoint" we

71
00:02:50,660 --> 00:02:53,020
mentioned that we've got a ton
of override capabilities

72
00:02:53,020 --> 00:02:56,830
available if you have the
DevTools Experiments enabled.

73
00:02:56,830 --> 00:02:58,220
And we're going to talk
through some of these.

74
00:02:58,220 --> 00:03:01,780
Now let's say, for example, that
you want to see how your

75
00:03:01,780 --> 00:03:05,670
web app might look if
you're on iOS and

76
00:03:05,670 --> 00:03:07,150
perhaps on an iPhone.

77
00:03:07,150 --> 00:03:10,750
Now, if you pop open DevTools
and go to Overrides--

78
00:03:10,750 --> 00:03:12,495
which is in the Settings
cog, so click down in

79
00:03:12,495 --> 00:03:13,640
the Settings cog--

80
00:03:13,640 --> 00:03:17,330
go to Overrides and select
User Agent first of all.

81
00:03:17,330 --> 00:03:18,320
And then select a device.

82
00:03:18,320 --> 00:03:20,260
So we have a ton of device
names available here.

83
00:03:20,260 --> 00:03:24,430
We've got iPads, iPhones,
Android devices and a ton of

84
00:03:24,430 --> 00:03:25,560
other stuff.

85
00:03:25,560 --> 00:03:29,400
Now if I select, for example,
iPhone with iOS 5, what you'll

86
00:03:29,400 --> 00:03:32,140
see has happened is it's
actually gone and re-sized my

87
00:03:32,140 --> 00:03:34,310
view port so that I can
see what this might

88
00:03:34,310 --> 00:03:35,700
look like on an iPhone.

89
00:03:35,700 --> 00:03:38,320
Now I haven't had to pop open
an emulator of any sort.

90
00:03:38,320 --> 00:03:41,800
I can just see directly inside
Chrome what this looks like.

91
00:03:41,800 --> 00:03:43,720
What you'll see below this is
that we've got a section

92
00:03:43,720 --> 00:03:45,980
called Device Metrics, which
will tell you what screen

93
00:03:45,980 --> 00:03:48,950
resolution is displaying for
your app at the moment.

94
00:03:48,950 --> 00:03:51,280
Now you can manually go and
customize these details as

95
00:03:51,280 --> 00:03:52,700
much as you want.

96
00:03:52,700 --> 00:03:55,800
It'll also try emulating the
font scale factor, so it will

97
00:03:55,800 --> 00:03:58,160
show how your fonts might
look in that device too.

98
00:03:58,160 --> 00:04:00,210
But it's very, very easy
to go and switch

99
00:04:00,210 --> 00:04:01,150
between device types.

100
00:04:01,150 --> 00:04:04,920
So if I wanted to switch and go
to a Nexus S, for example,

101
00:04:04,920 --> 00:04:05,850
I can do that.

102
00:04:05,850 --> 00:04:08,030
As you can see, the layout
on my web app has

103
00:04:08,030 --> 00:04:09,470
automatically changed.

104
00:04:09,470 --> 00:04:12,270
And it's just a very easy way of
seeing how your app or site

105
00:04:12,270 --> 00:04:17,070
might look on a different
device, which is kind of neat.

106
00:04:17,070 --> 00:04:20,410
Now, another thing that you're
going to be dealing with a lot

107
00:04:20,410 --> 00:04:23,350
of the time on mobile are things
like touch events.

108
00:04:23,350 --> 00:04:25,850
And touch events
are difficult.

109
00:04:25,850 --> 00:04:28,650
I'm going to throw open
a quick touchdown.

110
00:04:28,650 --> 00:04:31,000
And now this is something
Paul created.

111
00:04:31,000 --> 00:04:32,100
Paul, you created this
a while back.

112
00:04:32,100 --> 00:04:33,960
This is like a little finger
painting demo.

113
00:04:33,960 --> 00:04:38,250
PAUL IRISH: Yeah, it stemmed
because I got this question.

114
00:04:38,250 --> 00:04:42,000
Someone was like, can we do a
multi-touch application with

115
00:04:42,000 --> 00:04:44,060
canvas on the web?

116
00:04:44,060 --> 00:04:46,100
'Cause everyone thought that
you couldn't properly do

117
00:04:46,100 --> 00:04:46,460
multi-touch.

118
00:04:46,460 --> 00:04:47,200
ADDY OSMANI: Yeah.

119
00:04:47,200 --> 00:04:49,720
PAUL IRISH: And so this was a
little demo to show that you

120
00:04:49,720 --> 00:04:54,140
can in fact track multiple touch
points on the web, and

121
00:04:54,140 --> 00:04:54,860
it's not a problem.

122
00:04:54,860 --> 00:04:57,225
So it works.

123
00:04:57,225 --> 00:04:58,540
ADDY OSMANI: That's
pretty neat.

124
00:04:58,540 --> 00:05:02,185
So what I'm doing at the moment
inside this canvas area

125
00:05:02,185 --> 00:05:04,920
is I'm actually trying to
drag my cursor around.

126
00:05:04,920 --> 00:05:06,880
And what you'll see is that
nothing's really happening,

127
00:05:06,880 --> 00:05:09,490
because this demo actually
relies on touch events, which

128
00:05:09,490 --> 00:05:11,700
you'll probably find in a mobile
device but currently

129
00:05:11,700 --> 00:05:13,860
not on the system I'm
using at the moment.

130
00:05:13,860 --> 00:05:17,990
So what I can do in DevTools
is go back to my Overrides.

131
00:05:17,990 --> 00:05:20,570
And near the bottom, you'll see
an option called Emulate

132
00:05:20,570 --> 00:05:21,800
Touch Events.

133
00:05:21,800 --> 00:05:25,490
Now if I check this and I go
and I reload this app--

134
00:05:25,490 --> 00:05:26,900
so it should be reloaded--

135
00:05:26,900 --> 00:05:30,980
I should now be able to go and
draw using touch events.

136
00:05:30,980 --> 00:05:35,250
So whoa!

137
00:05:35,250 --> 00:05:37,440
Wow, this is insane.

138
00:05:37,440 --> 00:05:38,115
I love this.

139
00:05:38,115 --> 00:05:40,600
PAUL IRISH: Nice.

140
00:05:40,600 --> 00:05:41,850
ADDY OSMANI: Aah!

141
00:05:41,850 --> 00:05:44,440

142
00:05:44,440 --> 00:05:44,990
And that's awesome.

143
00:05:44,990 --> 00:05:47,040
Again, it means that you don't
have to go and pop open a

144
00:05:47,040 --> 00:05:50,200
device or an emulator to try
getting this working, which is

145
00:05:50,200 --> 00:05:51,010
pretty cool.

146
00:05:51,010 --> 00:05:54,070
What's also nice is that not
only are you going to get

147
00:05:54,070 --> 00:05:56,560
touch events working when you're
trying out demos or

148
00:05:56,560 --> 00:05:59,370
trying out bits and pieces
of code, but if you use

149
00:05:59,370 --> 00:06:02,540
Modernizr, as so many people do,
you can actually emulate.

150
00:06:02,540 --> 00:06:04,600
So I'm in a different tab, I'm
going to make sure that

151
00:06:04,600 --> 00:06:06,090
Emulate Touch Events
is in here.

152
00:06:06,090 --> 00:06:08,090
What you can see at the moment
is this is using

153
00:06:08,090 --> 00:06:11,120
Modernizr.touch to check if
there's touch event support

154
00:06:11,120 --> 00:06:12,440
available locally.

155
00:06:12,440 --> 00:06:15,480
Now what you'll see in the first
column is On Touchstart

156
00:06:15,480 --> 00:06:16,920
isn't present.

157
00:06:16,920 --> 00:06:19,620
If we were to scroll across,
we'd see that On Touchend is

158
00:06:19,620 --> 00:06:21,000
also not available.

159
00:06:21,000 --> 00:06:22,350
Now we can actually
emulate this.

160
00:06:22,350 --> 00:06:25,920
So if I were to just reload this
page, you should now see

161
00:06:25,920 --> 00:06:28,970
that On Touchstart is available
in window, and On

162
00:06:28,970 --> 00:06:30,530
Touchend is also
available too.

163
00:06:30,530 --> 00:06:33,505
PAUL IRISH: Yeah, and actually
you're running Canary here,

164
00:06:33,505 --> 00:06:33,950
aren't you?

165
00:06:33,950 --> 00:06:34,474
ADDY OSMANI: Yeah, yeah.

166
00:06:34,474 --> 00:06:35,000
I'm running Canary.

167
00:06:35,000 --> 00:06:39,580
PAUL IRISH: Yeah, because it was
like two days ago, one of

168
00:06:39,580 --> 00:06:40,190
the last ones--

169
00:06:40,190 --> 00:06:43,880
I think it's Window.touch
maybe?

170
00:06:43,880 --> 00:06:45,760
That was also added
to the list.

171
00:06:45,760 --> 00:06:51,750
So it is removed as a global
constructor when Touch is not

172
00:06:51,750 --> 00:06:53,575
available to the browser.

173
00:06:53,575 --> 00:06:54,250
ADDY OSMANI: Nice.

174
00:06:54,250 --> 00:06:57,810
PAUL IRISH: So the detector that
Modernizr uses here is On

175
00:06:57,810 --> 00:06:58,255
Touchstart?

176
00:06:58,255 --> 00:06:58,880
ADDY OSMANI: Mm hmm.

177
00:06:58,880 --> 00:07:02,840
PAUL IRISH: Detecting to see
if that event handler

178
00:07:02,840 --> 00:07:05,890
attribute is bound.

179
00:07:05,890 --> 00:07:08,380
But some other people
use other things.

180
00:07:08,380 --> 00:07:13,900
Anyways, the touch story for
future detection in WebKit now

181
00:07:13,900 --> 00:07:14,740
is really nice.

182
00:07:14,740 --> 00:07:17,830
So we'll actually probably be
publishing an article pretty

183
00:07:17,830 --> 00:07:21,430
soon on how to detect touch,
all the different types of

184
00:07:21,430 --> 00:07:24,766
touch event models, and deal
with that pretty soon.

185
00:07:24,766 --> 00:07:27,270
ADDY OSMANI: Sweet.

186
00:07:27,270 --> 00:07:30,970
So we've talked about
touch, we've talked

187
00:07:30,970 --> 00:07:33,560
about device metrics.

188
00:07:33,560 --> 00:07:35,120
The next thing we're going
to be talking about is

189
00:07:35,120 --> 00:07:36,430
orientation.

190
00:07:36,430 --> 00:07:38,840
Now because mobile devices
offer us a few other

191
00:07:38,840 --> 00:07:40,990
capabilities, like being able
to tilt the device in

192
00:07:40,990 --> 00:07:43,450
different directions or
accelerate the device

193
00:07:43,450 --> 00:07:45,830
depending on how you're actually
moving it, that gives

194
00:07:45,830 --> 00:07:48,450
us a whole range of other
capabilities we can build into

195
00:07:48,450 --> 00:07:51,120
our apps so that we can react
on them depending on what

196
00:07:51,120 --> 00:07:52,440
someone's doing.

197
00:07:52,440 --> 00:07:54,820
Now, again, this is usually
something that you'd have to

198
00:07:54,820 --> 00:07:59,600
be using a device to test on
or an emulator to test on.

199
00:07:59,600 --> 00:08:01,800
But again, we've got support
for this stuff inside the

200
00:08:01,800 --> 00:08:04,130
DevTools to make your debugging
workflow a little

201
00:08:04,130 --> 00:08:05,220
bit more easy.

202
00:08:05,220 --> 00:08:08,910
So I've currently got a HTML5
Rocks orientation demo open at

203
00:08:08,910 --> 00:08:09,740
the moment.

204
00:08:09,740 --> 00:08:12,660
And if we look at Overrides
once again, you'll see a

205
00:08:12,660 --> 00:08:15,770
section called Override
Device or Orientation.

206
00:08:15,770 --> 00:08:18,570
Now, what this allows me to
set is a few different

207
00:08:18,570 --> 00:08:22,690
parameters to finding what
direction the devices is in,

208
00:08:22,690 --> 00:08:25,380
what acceleration the device
has got, is it being tilted

209
00:08:25,380 --> 00:08:28,010
from the side, is it being
tilted from the

210
00:08:28,010 --> 00:08:29,810
front and so on.

211
00:08:29,810 --> 00:08:31,110
And I'm just going to show
you how this works.

212
00:08:31,110 --> 00:08:33,559
So let's say that I'm changing,
I guess it's the

213
00:08:33,559 --> 00:08:34,830
vertical acceleration.

214
00:08:34,830 --> 00:08:36,610
Let's say that I
set this to 60.

215
00:08:36,610 --> 00:08:39,120
What you'll see is that this
is gone and it's actually

216
00:08:39,120 --> 00:08:43,270
changed the acceleration that's
being shown on screen

217
00:08:43,270 --> 00:08:45,080
for this particular demo.

218
00:08:45,080 --> 00:08:47,560
And I haven't had to go and open
up a separate device to

219
00:08:47,560 --> 00:08:48,790
try to test it out.

220
00:08:48,790 --> 00:08:51,060
Let's go back to the
Overrides and let's

221
00:08:51,060 --> 00:08:53,270
play around with tilts.

222
00:08:53,270 --> 00:08:55,725
So let's say that I
change that to 50.

223
00:08:55,725 --> 00:08:57,690
What you can see is this is
probably what it would look

224
00:08:57,690 --> 00:09:00,380
like if I was holding
a device this way.

225
00:09:00,380 --> 00:09:02,800
But it just means that you
can go and test out those

226
00:09:02,800 --> 00:09:04,940
different directions and
orientations that you want

227
00:09:04,940 --> 00:09:07,310
someone to be able to do things
with inside your app

228
00:09:07,310 --> 00:09:10,020
just using the DevTools in
Chrome, which is, again, a

229
00:09:10,020 --> 00:09:11,270
nice little time saver.

230
00:09:11,270 --> 00:09:17,180

231
00:09:17,180 --> 00:09:21,350
So another thing I'm going to
show you right before we look

232
00:09:21,350 --> 00:09:24,310
at a few things like CSS
regions, is something that was

233
00:09:24,310 --> 00:09:26,770
added I think just before
Christmas, wasn't it?

234
00:09:26,770 --> 00:09:30,800
Emulating CSS media types.

235
00:09:30,800 --> 00:09:33,130
So emulating CSS media
types is pretty cool.

236
00:09:33,130 --> 00:09:35,490
And I'm going to be using
"Smashing Magazine" as an

237
00:09:35,490 --> 00:09:35,980
example of this.

238
00:09:35,980 --> 00:09:38,040
So we're going to go to
"Smashing Magazine," going to

239
00:09:38,040 --> 00:09:40,310
pop open the DevTools,
going to go

240
00:09:40,310 --> 00:09:43,530
straight back to Overrides.

241
00:09:43,530 --> 00:09:45,430
And at the very bottom, you've
got an option that says

242
00:09:45,430 --> 00:09:47,410
Emulate CSS Media.

243
00:09:47,410 --> 00:09:49,660
Now, the thing that this is
really useful for is actually

244
00:09:49,660 --> 00:09:53,580
seeing what your different
media style sheet

245
00:09:53,580 --> 00:09:55,310
types might look like.

246
00:09:55,310 --> 00:09:56,980
So at the moment, I'm
emulating the

247
00:09:56,980 --> 00:09:59,120
CSS media print type.

248
00:09:59,120 --> 00:10:01,110
And you can see, this is pretty
much what "Smashing

249
00:10:01,110 --> 00:10:02,675
Magazine" would look like
if you were to go

250
00:10:02,675 --> 00:10:03,740
and print it out.

251
00:10:03,740 --> 00:10:06,570
You can see that all of the
links have been normalized to

252
00:10:06,570 --> 00:10:08,540
a more readable type of text.

253
00:10:08,540 --> 00:10:10,880
They've dropped some of the
different styles and colors

254
00:10:10,880 --> 00:10:12,480
and images from their page.

255
00:10:12,480 --> 00:10:15,030
And it just means that you can
see what your different style

256
00:10:15,030 --> 00:10:17,100
sheets for different media types
might look like without

257
00:10:17,100 --> 00:10:20,280
even having to go and debug with
a different page or add

258
00:10:20,280 --> 00:10:23,130
any custom code to switch
those things.

259
00:10:23,130 --> 00:10:25,080
And it's, again, a nice
little time saver.

260
00:10:25,080 --> 00:10:27,710
So I'm not sure what other types
they might have on this

261
00:10:27,710 --> 00:10:29,950
page, so you can also
try out handheld.

262
00:10:29,950 --> 00:10:32,490
So it looks like "Smashing
Magazine" has a media type

263
00:10:32,490 --> 00:10:34,280
enabled for handheld, so
I can see how that

264
00:10:34,280 --> 00:10:35,920
might look as well.

265
00:10:35,920 --> 00:10:38,320
And it's, again, one more thing
that you can use to try

266
00:10:38,320 --> 00:10:39,190
saving you some time.

267
00:10:39,190 --> 00:10:40,390
PAUL IRISH: Yeah.

268
00:10:40,390 --> 00:10:44,910
On this one, I would just go in
the DOM view and find the

269
00:10:44,910 --> 00:10:48,915
style sheet for print, and just
change media equals print

270
00:10:48,915 --> 00:10:51,070
to media equals screen.

271
00:10:51,070 --> 00:10:53,250
And it'll fake it.

272
00:10:53,250 --> 00:11:01,170
But this is proper print
application, which may even

273
00:11:01,170 --> 00:11:05,110
take advantage of some of the
print specific styles like

274
00:11:05,110 --> 00:11:05,720
page break before.

275
00:11:05,720 --> 00:11:06,970
ADDY OSMANI: Yeah.

276
00:11:06,970 --> 00:11:10,100
PAUL IRISH: But anyways, it's
certainly a lot handier to

277
00:11:10,100 --> 00:11:12,145
check your print styles.

278
00:11:12,145 --> 00:11:12,970
ADDY OSMANI: Yeah.

279
00:11:12,970 --> 00:11:14,860
And that's definitely
something that can

280
00:11:14,860 --> 00:11:16,140
save you some time.

281
00:11:16,140 --> 00:11:18,190
Now, the next thing we're going
to be taking a look at

282
00:11:18,190 --> 00:11:19,450
is CSS Regions.

283
00:11:19,450 --> 00:11:21,100
Now while I'm opening up the
DevTools, Paul do you want to

284
00:11:21,100 --> 00:11:23,490
explain what CSS Regions are,
just to remind people?

285
00:11:23,490 --> 00:11:24,005
PAUL IRISH: Sure.

286
00:11:24,005 --> 00:11:28,360
So CSS Regions basically allow
magazine style layout.

287
00:11:28,360 --> 00:11:32,450
And what this means is you can
define your layout of text.

288
00:11:32,450 --> 00:11:35,840
So I have a div here and I have
a big picture right next

289
00:11:35,840 --> 00:11:40,880
to it and then three columns
of text underneath it.

290
00:11:40,880 --> 00:11:43,240
And so you can really have a lot
of control over the exact

291
00:11:43,240 --> 00:11:46,860
layout of your boxes
of images and text.

292
00:11:46,860 --> 00:11:50,180
Now, currently, CSS multi-column
allows you to

293
00:11:50,180 --> 00:11:51,230
split up text into columns.

294
00:11:51,230 --> 00:11:56,190
But it doesn't allow things like
dealing with this kind of

295
00:11:56,190 --> 00:11:57,250
magazine style layout.

296
00:11:57,250 --> 00:11:59,940
It's more just the simplistic
I want things in columns.

297
00:11:59,940 --> 00:12:03,480
So Regions lets you define these
boxes just using divs.

298
00:12:03,480 --> 00:12:08,070
And then you basically say, I
have a big div full of text.

299
00:12:08,070 --> 00:12:12,200
Please have this text run
through these boxes around the

300
00:12:12,200 --> 00:12:15,040
side of the image.

301
00:12:15,040 --> 00:12:19,990
And it just flows through and
deals with the breaking into

302
00:12:19,990 --> 00:12:22,510
words as things fit.

303
00:12:22,510 --> 00:12:27,780
So it allows you to have very
good control on the size,

304
00:12:27,780 --> 00:12:31,680
layout, et cetera, using any
sort of CSS that you want, and

305
00:12:31,680 --> 00:12:34,808
then you can just flow
text through it.

306
00:12:34,808 --> 00:12:35,425
ADDY OSMANI: Cool.

307
00:12:35,425 --> 00:12:36,940
So the demo that we've
got open at the

308
00:12:36,940 --> 00:12:38,720
moment is one from Adobe.

309
00:12:38,720 --> 00:12:41,130
The title of this is "Adaptive
layout with Media Queries and

310
00:12:41,130 --> 00:12:42,240
CSS Regions".

311
00:12:42,240 --> 00:12:45,310
And basically what happens is
once I actually re-size this

312
00:12:45,310 --> 00:12:49,580
page, what you'll see is that
the text content is going to

313
00:12:49,580 --> 00:12:52,780
start flowing between
different columns.

314
00:12:52,780 --> 00:12:55,380
And this is using a combination
of Media Queries

315
00:12:55,380 --> 00:12:58,190
and CSS Regions to happen.

316
00:12:58,190 --> 00:13:00,990
Now, inside the DevTools, if you
want to get the ability to

317
00:13:00,990 --> 00:13:03,660
actually inspect the different
regions inside your CSS

318
00:13:03,660 --> 00:13:06,900
Regions page, is you can go to
Experiments, and there's an

319
00:13:06,900 --> 00:13:09,410
option here that says
CSS Regions Support.

320
00:13:09,410 --> 00:13:13,510
So you enable that, go and
you refresh your page.

321
00:13:13,510 --> 00:13:15,680
Now, let's say that I want to
select something in here.

322
00:13:15,680 --> 00:13:16,810
It can really be anything.

323
00:13:16,810 --> 00:13:18,620
Let's inspect an element here.

324
00:13:18,620 --> 00:13:19,830
We've got a paragraph.

325
00:13:19,830 --> 00:13:24,380
Now, when I right-click on the
DOM element that I've selected

326
00:13:24,380 --> 00:13:27,890
and I go to a new place called
CSS Named Flows, what will

327
00:13:27,890 --> 00:13:31,150
happen is a new panel is going
to open up at the very bottom

328
00:13:31,150 --> 00:13:33,000
that's going to basically
describe all of the different

329
00:13:33,000 --> 00:13:35,430
regions that describe
this layout.

330
00:13:35,430 --> 00:13:37,880
So what you can see is we've got
a region chain describing

331
00:13:37,880 --> 00:13:39,450
region one and region two.

332
00:13:39,450 --> 00:13:41,770
There are two specific regions
inside this page.

333
00:13:41,770 --> 00:13:44,670
It'll also display the content
for specific regions if you

334
00:13:44,670 --> 00:13:46,500
want to dive down into that.

335
00:13:46,500 --> 00:13:48,890
And what's really nice is you
can actually go and select a

336
00:13:48,890 --> 00:13:51,910
region and it will reveal the
elements in the Elements pane

337
00:13:51,910 --> 00:13:52,910
that make up this region.

338
00:13:52,910 --> 00:13:55,780
So I can go and I can dive down
into these and further

339
00:13:55,780 --> 00:13:57,820
style them if I want,
and just debug them,

340
00:13:57,820 --> 00:13:59,556
which is quite nice.

341
00:13:59,556 --> 00:14:02,090
PAUL IRISH: Yeah, I like that.

342
00:14:02,090 --> 00:14:05,560
And so we should point out that
this cool patch, this

343
00:14:05,560 --> 00:14:08,580
feature was added to
the DevTools by

344
00:14:08,580 --> 00:14:11,300
Adobe contributed this.

345
00:14:11,300 --> 00:14:15,112
Addy, do you want to show how
to enable this feature?

346
00:14:15,112 --> 00:14:16,270
ADDY OSMANI: Yes, of course.

347
00:14:16,270 --> 00:14:21,010
So once again, you have to be
inside the Settings cog.

348
00:14:21,010 --> 00:14:25,290
Go down to Experiments, and
enable it using the CSS Region

349
00:14:25,290 --> 00:14:27,710
Support option inside
Experiments.

350
00:14:27,710 --> 00:14:29,860
And then all you have to do is
just refresh your page, and

351
00:14:29,860 --> 00:14:33,080
you should be able to start
inspecting CSS Region based

352
00:14:33,080 --> 00:14:35,860
content and just going and
seeing the CSS named flows

353
00:14:35,860 --> 00:14:37,110
inside of there.

354
00:14:37,110 --> 00:14:39,980

355
00:14:39,980 --> 00:14:40,595
Cool, so--

356
00:14:40,595 --> 00:14:42,550
PAUL IRISH: Am I going to
show some stuff now?

357
00:14:42,550 --> 00:14:44,180
ADDY OSMANI: I think
you're going to be

358
00:14:44,180 --> 00:14:46,420
showing some stuff.

359
00:14:46,420 --> 00:14:49,060
I was going to show the
selector highlighting.

360
00:14:49,060 --> 00:14:50,115
Do you want to show that?

361
00:14:50,115 --> 00:14:51,475
PAUL IRISH: Sure,
I'll do that.

362
00:14:51,475 --> 00:14:52,296
ADDY OSMANI: All right.

363
00:14:52,296 --> 00:14:53,170
PAUL IRISH: All right.

364
00:14:53,170 --> 00:14:54,230
So we'll come over to me.

365
00:14:54,230 --> 00:14:59,450
And the first thing that we're
going to take a look at is the

366
00:14:59,450 --> 00:15:02,170
newish selector highlight.

367
00:15:02,170 --> 00:15:03,250
So here's an example here.

368
00:15:03,250 --> 00:15:07,720
I've just selected this Run
button up inside jsFiddle.

369
00:15:07,720 --> 00:15:09,770
And on the right-hand side,
we have my styles.

370
00:15:09,770 --> 00:15:13,380
And this happens a lot where you
create a big style chain

371
00:15:13,380 --> 00:15:15,780
of selectors and then you're
applying some things to it.

372
00:15:15,780 --> 00:15:18,630
And so in this case, we're
just applying some common

373
00:15:18,630 --> 00:15:21,330
things to all buttons.

374
00:15:21,330 --> 00:15:23,310
But sometimes it's a little
hard to see exactly which

375
00:15:23,310 --> 00:15:25,000
selector that you
authored matches

376
00:15:25,000 --> 00:15:26,510
this particular element.

377
00:15:26,510 --> 00:15:31,480
So now it's just a little bit
more clear that this element

378
00:15:31,480 --> 00:15:34,660
in black is the actual
one in this case

379
00:15:34,660 --> 00:15:36,480
that the DOM matches.

380
00:15:36,480 --> 00:15:37,310
So it should be helpful.

381
00:15:37,310 --> 00:15:39,990
I think Oliver J. Ash,
a developer in the

382
00:15:39,990 --> 00:15:42,810
UK, requested this.

383
00:15:42,810 --> 00:15:45,040
And then I was like,
file a ticket!

384
00:15:45,040 --> 00:15:49,150
And then he did, and within
a day it was in the Tool.

385
00:15:49,150 --> 00:15:52,950
So it was a fantastic feature
request, and I think it's much

386
00:15:52,950 --> 00:15:54,340
better now that we have
that in there.

387
00:15:54,340 --> 00:15:55,230
ADDY OSMANI: That's amazing.

388
00:15:55,230 --> 00:15:57,650
It's also a good reminder for
people that want to get new

389
00:15:57,650 --> 00:15:59,290
features lined in in
DevTools to just go

390
00:15:59,290 --> 00:16:00,510
to crbug.com, right?

391
00:16:00,510 --> 00:16:02,650
PAUL IRISH: crbug.com/new.

392
00:16:02,650 --> 00:16:07,710
File it, ping Addy or me and
we'll take a look and try and

393
00:16:07,710 --> 00:16:09,250
make it happen.

394
00:16:09,250 --> 00:16:13,030
All right, so now that we've
seen the mobile side of

395
00:16:13,030 --> 00:16:14,430
things, the CSS side of
things, we're going to

396
00:16:14,430 --> 00:16:17,780
transition into a little
bit of JavaScript.

397
00:16:17,780 --> 00:16:22,550
So I'm over here in jsFiddle,
and the JavaScript that I have

398
00:16:22,550 --> 00:16:27,600
up on the screen right now is
basically a way to look at how

399
00:16:27,600 --> 00:16:28,680
closures operate.

400
00:16:28,680 --> 00:16:32,720
So we have an external function
called A. Inside of

401
00:16:32,720 --> 00:16:37,570
that, we have a little array,
which takes the arguments

402
00:16:37,570 --> 00:16:42,080
passed into A. And then what A
eventually ends up returning

403
00:16:42,080 --> 00:16:43,680
is another function,
which we're

404
00:16:43,680 --> 00:16:45,900
internally calling B here.

405
00:16:45,900 --> 00:16:50,580
And all that's going to return
is the index of this trapped

406
00:16:50,580 --> 00:16:53,500
array that was passed in.

407
00:16:53,500 --> 00:16:59,640
So we will construct a
new function here by

408
00:16:59,640 --> 00:17:01,220
passing in Here I Am.

409
00:17:01,220 --> 00:17:05,140
This will return a function
into our B. And then if we

410
00:17:05,140 --> 00:17:09,380
call B passing an index value,
we should see that.

411
00:17:09,380 --> 00:17:18,530
So if we run this, we log to
the console the I from the

412
00:17:18,530 --> 00:17:21,710
middle, because we're
logging out the one.

413
00:17:21,710 --> 00:17:23,269
That makes sense.

414
00:17:23,269 --> 00:17:25,859
But a lot of times, your
applications are a bit more

415
00:17:25,859 --> 00:17:28,260
complicated than this, but
you're still dealing with this

416
00:17:28,260 --> 00:17:29,830
kind of concept.

417
00:17:29,830 --> 00:17:32,470
So we have some new features
inside the debugger that allow

418
00:17:32,470 --> 00:17:34,200
you to see this a bit better.

419
00:17:34,200 --> 00:17:39,760
So if I just hit Run so I can
trap this again, I'm trapping

420
00:17:39,760 --> 00:17:43,060
with the debugger
keyword here.

421
00:17:43,060 --> 00:17:45,460
And I'm going to add a new
watch expression up here,

422
00:17:45,460 --> 00:17:50,370
which is B. And a new thing that
you're going to be seeing

423
00:17:50,370 --> 00:17:54,150
here is this new function
scope expando.

424
00:17:54,150 --> 00:17:57,420
So you open that up, and you
can see the closure that is

425
00:17:57,420 --> 00:18:02,870
inside of your B variable.

426
00:18:02,870 --> 00:18:04,630
So this is the little
function.

427
00:18:04,630 --> 00:18:09,250
And then inside there, you can
see that the array was trapped

428
00:18:09,250 --> 00:18:10,860
and you can inspect it.

429
00:18:10,860 --> 00:18:13,710
So here you're able to
investigate the scope within

430
00:18:13,710 --> 00:18:19,010
that function and see what is
captured within that closure,

431
00:18:19,010 --> 00:18:21,890
which in a lot of cases is
really, really useful.

432
00:18:21,890 --> 00:18:28,940
And we're able to explore that
from the object itself, rather

433
00:18:28,940 --> 00:18:31,760
than looking only at what's
inside, say, the scope

434
00:18:31,760 --> 00:18:33,300
variables, which is a different

435
00:18:33,300 --> 00:18:35,460
approach to look at this.

436
00:18:35,460 --> 00:18:36,490
All right.

437
00:18:36,490 --> 00:18:37,620
So that's one new one.

438
00:18:37,620 --> 00:18:39,730
And then another new thing.

439
00:18:39,730 --> 00:18:42,730
So first I'm going to explain
the JavaScript.

440
00:18:42,730 --> 00:18:46,700
We have a little summing
function.

441
00:18:46,700 --> 00:18:50,470
It takes two arguments
and it sums them.

442
00:18:50,470 --> 00:18:51,820
Makes sense.

443
00:18:51,820 --> 00:18:55,050
Then we're going to take that
summing function and we're

444
00:18:55,050 --> 00:18:59,570
going to use function prototype
bind and bind it to

445
00:18:59,570 --> 00:19:03,120
a null scope and an
argument of one.

446
00:19:03,120 --> 00:19:05,160
OK, and we're going to
save that function

447
00:19:05,160 --> 00:19:09,040
into the INC variable.

448
00:19:09,040 --> 00:19:14,240
So now I'm going to
run this again.

449
00:19:14,240 --> 00:19:15,100
Great.

450
00:19:15,100 --> 00:19:18,430
And again, I set up some watch
expressions so we can see a

451
00:19:18,430 --> 00:19:21,630
little bit of what's
going on here.

452
00:19:21,630 --> 00:19:23,270
So there's two things to note.

453
00:19:23,270 --> 00:19:27,400
One is that inside sum we
immediately see what the

454
00:19:27,400 --> 00:19:32,090
function value of sum is,
which is pretty useful.

455
00:19:32,090 --> 00:19:34,140
I should point out that you can
always right-click here

456
00:19:34,140 --> 00:19:36,170
and jump to the function
definition,

457
00:19:36,170 --> 00:19:37,920
which is right here.

458
00:19:37,920 --> 00:19:41,630
But I'm broken, so it's
a little funny.

459
00:19:41,630 --> 00:19:46,650
But then our bound function,
which we use right here, we

460
00:19:46,650 --> 00:19:49,320
can't actually see what
the source of it is.

461
00:19:49,320 --> 00:19:53,370
It is a native function because
we used function

462
00:19:53,370 --> 00:19:56,650
prototype bind, so we can't
actually see what's going on.

463
00:19:56,650 --> 00:20:01,280
But if we open up the function,
we have these new

464
00:20:01,280 --> 00:20:04,390
properties down here so we
see the target function.

465
00:20:04,390 --> 00:20:07,760
So this is the function that
was bound using function

466
00:20:07,760 --> 00:20:08,780
prototype bind.

467
00:20:08,780 --> 00:20:12,070
We can investigate that just
the exact same way.

468
00:20:12,070 --> 00:20:17,020
And we can also see what this
argument, what was passed in

469
00:20:17,020 --> 00:20:20,450
as the first argument to
function bind, which was null,

470
00:20:20,450 --> 00:20:23,410
which we passed up right here,
and any arguments.

471
00:20:23,410 --> 00:20:26,310
So our arguments array just has
a single argument, which

472
00:20:26,310 --> 00:20:28,470
is one, which we passed
right here.

473
00:20:28,470 --> 00:20:32,010
So here at run time, we're able
to see a lot more insight

474
00:20:32,010 --> 00:20:38,455
around functions that were bound
with any new scopes and

475
00:20:38,455 --> 00:20:41,310
new arguments, which gives
a lot more insight

476
00:20:41,310 --> 00:20:42,340
into how this works.

477
00:20:42,340 --> 00:20:43,152
ADDY OSMANI: That's awesome.

478
00:20:43,152 --> 00:20:44,430
PAUL IRISH: All right, cool.

479
00:20:44,430 --> 00:20:47,370

480
00:20:47,370 --> 00:20:49,390
Next, we're going to come over
to the Google homepage,

481
00:20:49,390 --> 00:20:52,330
because I'm going to show
native memory profiling.

482
00:20:52,330 --> 00:20:55,970
So just pop open the DevTools.

483
00:20:55,970 --> 00:20:59,980
And over on the Profiles page,
what I'm about to show is

484
00:20:59,980 --> 00:21:03,790
another experiment, which you
can just enable over here in

485
00:21:03,790 --> 00:21:04,480
the Experiments.

486
00:21:04,480 --> 00:21:10,100
I keep them all enabled pretty
much always, but I don't know

487
00:21:10,100 --> 00:21:10,970
if I recommend that.

488
00:21:10,970 --> 00:21:14,200
There's a big red warning at the
top of this, so that's up

489
00:21:14,200 --> 00:21:15,510
for you to decide.

490
00:21:15,510 --> 00:21:18,110
But if you have them
all enabled, you're

491
00:21:18,110 --> 00:21:19,240
going to see this guy.

492
00:21:19,240 --> 00:21:24,230
So this is a live updating chart
of their memory usage.

493
00:21:24,230 --> 00:21:27,390
And you're also going to get
this native memory snapshot.

494
00:21:27,390 --> 00:21:28,770
So I'm going to take one of
these, because it gives a

495
00:21:28,770 --> 00:21:30,460
little bit more insight.

496
00:21:30,460 --> 00:21:33,100
So I take it, I view
it over here.

497
00:21:33,100 --> 00:21:35,480
And here we can get a little
bit more insight into the

498
00:21:35,480 --> 00:21:38,780
actual memory consumption
of the page.

499
00:21:38,780 --> 00:21:44,700
So 32% of it is captured by the
JavaScript heap itself.

500
00:21:44,700 --> 00:21:48,760
And we can investigate more
about that over in the actual

501
00:21:48,760 --> 00:21:50,010
heap profile.

502
00:21:50,010 --> 00:21:53,370

503
00:21:53,370 --> 00:21:55,280
Looks like the inspector--

504
00:21:55,280 --> 00:21:56,130
the DevTools--

505
00:21:56,130 --> 00:21:58,990
are using 9.2% of the memory,
and we can see

506
00:21:58,990 --> 00:22:01,020
how that lays out.

507
00:22:01,020 --> 00:22:06,140
The page structures and the in
memory CSS DOM stuff that

508
00:22:06,140 --> 00:22:09,530
WebKit and WebCore is using,
and everything else.

509
00:22:09,530 --> 00:22:13,545
So this is really useful if you
are also working with the

510
00:22:13,545 --> 00:22:15,900
heap profiler and trying to
identify where your memory's

511
00:22:15,900 --> 00:22:17,420
being consumed.

512
00:22:17,420 --> 00:22:19,060
This is currently still
an experiment.

513
00:22:19,060 --> 00:22:21,340
It's getting more commits
every day.

514
00:22:21,340 --> 00:22:24,210
So things might break, but this
is a good little preview

515
00:22:24,210 --> 00:22:27,410
at this new feature.

516
00:22:27,410 --> 00:22:30,010
Next, we have another
new feature in

517
00:22:30,010 --> 00:22:31,280
the JavaScript profiler.

518
00:22:31,280 --> 00:22:35,070
And this is the ability to see
the difference between idle

519
00:22:35,070 --> 00:22:38,670
time and time that is
spent elsewhere.

520
00:22:38,670 --> 00:22:42,530
So previously, if you ran a
JavaScript profile, you might

521
00:22:42,530 --> 00:22:47,040
notice that a lot of the time
in your CPU profile was

522
00:22:47,040 --> 00:22:49,970
consumed by "program".

523
00:22:49,970 --> 00:22:54,970
And I would try and identify why
my JavaScript was so slow,

524
00:22:54,970 --> 00:22:57,870
but at the same time, v8's
really fast and most of the

525
00:22:57,870 --> 00:22:59,140
time is spent elsewhere.

526
00:22:59,140 --> 00:23:02,580
So this mysterious program
block would consume maybe

527
00:23:02,580 --> 00:23:05,730
about 95% of my time.

528
00:23:05,730 --> 00:23:06,870
I didn't really know
what was going on.

529
00:23:06,870 --> 00:23:11,050
So here we have a little bit
more of a better idea.

530
00:23:11,050 --> 00:23:17,490
So this demo here is this kind
of cool, it's like Parallax.

531
00:23:17,490 --> 00:23:21,000
I think there's a [INAUDIBLE].

532
00:23:21,000 --> 00:23:25,860
But I really like this kind
of effect, this 3D layers

533
00:23:25,860 --> 00:23:28,540
emerging effect.

534
00:23:28,540 --> 00:23:30,900
On the video, I think you might
be able to see this,

535
00:23:30,900 --> 00:23:32,850
it's kind of chunky,
these transitions.

536
00:23:32,850 --> 00:23:35,710
And so I saw this yesterday and
I was trying to figure out

537
00:23:35,710 --> 00:23:37,000
why it was so chunky.

538
00:23:37,000 --> 00:23:40,100
I go over to Timeline,
I start recording.

539
00:23:40,100 --> 00:23:46,450
And I'm recording and these
frames are huge.

540
00:23:46,450 --> 00:23:48,490
These frames are absolutely
massive.

541
00:23:48,490 --> 00:23:52,380
But at the same time, we're
busting way above our 30 FPS,

542
00:23:52,380 --> 00:23:57,260
but they're not really filled
with anything too useful.

543
00:23:57,260 --> 00:24:00,880
So then I was like, maybe
it's in the CPU profile?

544
00:24:00,880 --> 00:24:02,380
So I'm going to collect
a new CPU

545
00:24:02,380 --> 00:24:06,326
profile and move it around.

546
00:24:06,326 --> 00:24:09,870
Get a little bit of action
there, come back.

547
00:24:09,870 --> 00:24:13,190
And here's the most useful part
that we have, which is

548
00:24:13,190 --> 00:24:16,410
any sort of idle time, which is
just captured by CPU's not

549
00:24:16,410 --> 00:24:21,430
busy at all, is clearly
called out as idle.

550
00:24:21,430 --> 00:24:24,380
Before, we didn't have this
inside Chrome, so it's great

551
00:24:24,380 --> 00:24:26,620
to have that very explicit.

552
00:24:26,620 --> 00:24:30,860
Program, when you see this now,
this basically means the

553
00:24:30,860 --> 00:24:34,860
browser was busy, the CPU was
busy doing other things.

554
00:24:34,860 --> 00:24:41,450
Busy doing things in other tabs
or something that we just

555
00:24:41,450 --> 00:24:42,110
don't know about.

556
00:24:42,110 --> 00:24:44,610
We know it was busy, and so we
can say it might have slowed

557
00:24:44,610 --> 00:24:46,940
down other things.

558
00:24:46,940 --> 00:24:50,300
You shouldn't expect to see
Program now at around 90.

559
00:24:50,300 --> 00:24:52,990
If it does, it means your page
might be slowing down, but

560
00:24:52,990 --> 00:24:55,860
it's not this page's fault.

561
00:24:55,860 --> 00:24:59,770
And then of course, any other
JavaScript on the page you can

562
00:24:59,770 --> 00:25:00,870
investigate.

563
00:25:00,870 --> 00:25:03,720
So anyways, small thing.

564
00:25:03,720 --> 00:25:07,400
It gives a lot better insight
into what's actually going on.

565
00:25:07,400 --> 00:25:08,980
All right, WebSockets.

566
00:25:08,980 --> 00:25:10,920
Addy, if you can join me over
here on this little demo?

567
00:25:10,920 --> 00:25:12,171
ADDY OSMANI: Yes, I will.

568
00:25:12,171 --> 00:25:15,880
PAUL IRISH: All right, so
before, we've been able to see

569
00:25:15,880 --> 00:25:18,600
that there are WebSockets and
they are connected in the

570
00:25:18,600 --> 00:25:19,240
Network panel.

571
00:25:19,240 --> 00:25:24,780
We can just select WebSockets
and see that there is a socket

572
00:25:24,780 --> 00:25:27,160
connection.

573
00:25:27,160 --> 00:25:29,430
And now we can also see what
that actual data is.

574
00:25:29,430 --> 00:25:31,476
So I can say--

575
00:25:31,476 --> 00:25:33,260
you said, "Hai." Hi Addy!

576
00:25:33,260 --> 00:25:36,920

577
00:25:36,920 --> 00:25:38,420
All right, send me
one more message?

578
00:25:38,420 --> 00:25:42,610

579
00:25:42,610 --> 00:25:43,540
Nice.

580
00:25:43,540 --> 00:25:44,190
All right, cool.

581
00:25:44,190 --> 00:25:48,230
So inside this little Frames
view, we're able to see what

582
00:25:48,230 --> 00:25:52,840
the actual data that's sent
over the WebSocket is.

583
00:25:52,840 --> 00:25:57,720
I should point out that right
now when you want to get this

584
00:25:57,720 --> 00:26:01,960
updating, you have to click
again on the element on the

585
00:26:01,960 --> 00:26:05,090
left-hand side for the
frames to update.

586
00:26:05,090 --> 00:26:07,212
We will be fixing this soon.

587
00:26:07,212 --> 00:26:09,660
You just have to deal with
it for now just to

588
00:26:09,660 --> 00:26:10,680
get the live view.

589
00:26:10,680 --> 00:26:13,260
But you can investigate exactly
what data is going

590
00:26:13,260 --> 00:26:15,185
over the WebSocket, which can
help a lot when you're

591
00:26:15,185 --> 00:26:17,700
debugging the situation.

592
00:26:17,700 --> 00:26:21,720
While we're on the topic of
network, a cool thing that you

593
00:26:21,720 --> 00:26:25,500
can identify now that most
people don't recognize is you

594
00:26:25,500 --> 00:26:28,740
can find out what kicked
off a network request.

595
00:26:28,740 --> 00:26:32,270
So I'm on Amazon right now.

596
00:26:32,270 --> 00:26:35,220
I'm going to bring up Network
and I'm going

597
00:26:35,220 --> 00:26:36,720
to refresh the page.

598
00:26:36,720 --> 00:26:39,410

599
00:26:39,410 --> 00:26:42,190
All right, so Amazon--

600
00:26:42,190 --> 00:26:43,700
only 1.7 megs.

601
00:26:43,700 --> 00:26:45,310
Man, they are professionals.

602
00:26:45,310 --> 00:26:48,030
All right, so looks good.

603
00:26:48,030 --> 00:26:49,120
There's a lot going on here.

604
00:26:49,120 --> 00:26:53,840
We can see a timeline and we can
re-sort this by how long

605
00:26:53,840 --> 00:26:58,190
things took, or just view
the normal waterfall.

606
00:26:58,190 --> 00:27:01,590
But in the middle is this
Initiator column.

607
00:27:01,590 --> 00:27:06,390
And we can identify why
the browser is making

608
00:27:06,390 --> 00:27:08,490
this request at all.

609
00:27:08,490 --> 00:27:12,740
So let's say this
one right here--

610
00:27:12,740 --> 00:27:13,990
the CSS--

611
00:27:13,990 --> 00:27:15,850

612
00:27:15,850 --> 00:27:18,660
is being requested because
of the parser,

613
00:27:18,660 --> 00:27:19,900
which is the HTML parser.

614
00:27:19,900 --> 00:27:23,470
And we can click through and
identify exactly where the

615
00:27:23,470 --> 00:27:27,830
request came from,
so this link tag.

616
00:27:27,830 --> 00:27:29,390
So this helps a lot of times.

617
00:27:29,390 --> 00:27:33,360
Sometimes you'll just see this
request go on a network or

618
00:27:33,360 --> 00:27:35,540
come through a proxy, and you'll
be like, why is this

619
00:27:35,540 --> 00:27:36,800
file ever being requested?

620
00:27:36,800 --> 00:27:37,780
You can find out why.

621
00:27:37,780 --> 00:27:39,300
So that one's coming
from the HTML.

622
00:27:39,300 --> 00:27:40,360
That one's pretty easy.

623
00:27:40,360 --> 00:27:45,160
But a better example might be
this one's coming from script.

624
00:27:45,160 --> 00:27:49,200
This is a little navigation
image.

625
00:27:49,200 --> 00:27:50,450
Looks like a sprite.

626
00:27:50,450 --> 00:27:52,780
And it's actually being
requested by a script from

627
00:27:52,780 --> 00:27:56,100
inside of jQuery, so we can
see the full call stack--

628
00:27:56,100 --> 00:28:00,180
this call stack was added
last week, in fact--

629
00:28:00,180 --> 00:28:04,050
and then find out what's
going on inside here.

630
00:28:04,050 --> 00:28:09,740
So anyways, that gives a good
amount of insight into why

631
00:28:09,740 --> 00:28:10,920
these requests are going on.

632
00:28:10,920 --> 00:28:13,985
So if you have a stray request
that you want to track down,

633
00:28:13,985 --> 00:28:15,346
it's a lot easier these days.

634
00:28:15,346 --> 00:28:19,120

635
00:28:19,120 --> 00:28:21,560
I think the last two things I'm
going to show are part of

636
00:28:21,560 --> 00:28:22,820
the console.

637
00:28:22,820 --> 00:28:27,240
So one of the issues that we had
a little bit ago was that

638
00:28:27,240 --> 00:28:31,040
our console logs inside the
Chrome DevTools, they logged

639
00:28:31,040 --> 00:28:34,920
very fast, but actually when
there was a complex object

640
00:28:34,920 --> 00:28:39,530
coming in, it would reveal the
exact value of that object

641
00:28:39,530 --> 00:28:43,460
only when you expanded
the little arrow.

642
00:28:43,460 --> 00:28:50,460
So I'm going to show an example
here where I take an

643
00:28:50,460 --> 00:28:56,510
array, I kind of decrement the
values inside the array, and I

644
00:28:56,510 --> 00:28:59,580
log out the array each
time I do that.

645
00:28:59,580 --> 00:29:07,150
So right now, we actually get
a little preview now.

646
00:29:07,150 --> 00:29:09,590
Before, this would just say
"object" and it would have

647
00:29:09,590 --> 00:29:12,430
that arrow and you
look into it.

648
00:29:12,430 --> 00:29:13,480
Now you'll get a preview.

649
00:29:13,480 --> 00:29:18,160
So this preview is generated
at run time.

650
00:29:18,160 --> 00:29:19,830
But if you open it,
it'll actually

651
00:29:19,830 --> 00:29:22,150
be the current values.

652
00:29:22,150 --> 00:29:24,870
So that's why this might look a
little bit confusing to you.

653
00:29:24,870 --> 00:29:29,840
You might see negative 1, 1, and
2 in the preview, and then

654
00:29:29,840 --> 00:29:32,910
negative 1's down here
in the live view.

655
00:29:32,910 --> 00:29:36,950
So that's just the way to keep
in mind of how this works now.

656
00:29:36,950 --> 00:29:41,460
So it gets snapshotted and
logged out in preview, but

657
00:29:41,460 --> 00:29:46,610
when you expand it, it
is the current value.

658
00:29:46,610 --> 00:29:50,650
So I'm happy now that we have
this preview and it's a lot

659
00:29:50,650 --> 00:29:54,260
more functional than just the
term "object", I think.

660
00:29:54,260 --> 00:29:59,922
All right, the last one inside
the console is $_.

661
00:29:59,922 --> 00:30:04,100
I believe this comes
from Pearl.

662
00:30:04,100 --> 00:30:08,700
The underscore refers to the
last computed value.

663
00:30:08,700 --> 00:30:14,070
So back on the Google homepage,
I have this element

664
00:30:14,070 --> 00:30:16,280
selected in the search box.

665
00:30:16,280 --> 00:30:18,980
And I want to find out
the width of it.

666
00:30:18,980 --> 00:30:21,690

667
00:30:21,690 --> 00:30:27,870
Cool, so hey there.

668
00:30:27,870 --> 00:30:28,640
$0?

669
00:30:28,640 --> 00:30:30,900
Come on!

670
00:30:30,900 --> 00:30:31,380
Nice!

671
00:30:31,380 --> 00:30:34,080
All right.

672
00:30:34,080 --> 00:30:36,790
So $0.offsetWidth.

673
00:30:36,790 --> 00:30:41,630
So the width of this
box is 606.

674
00:30:41,630 --> 00:30:46,120
What I'm going to do is add
200 to that, so 806.

675
00:30:46,120 --> 00:30:49,660
And now I'd just like to make
that the new width.

676
00:30:49,660 --> 00:30:57,545
So I'm just going to say, set
the new style of the box to be

677
00:30:57,545 --> 00:30:58,660
that computed value.

678
00:30:58,660 --> 00:31:01,290
Let me bump this font size
up a little bit.

679
00:31:01,290 --> 00:31:05,540
That computed value plus
the term pixels.

680
00:31:05,540 --> 00:31:07,150
And now we grew it
out our text box.

681
00:31:07,150 --> 00:31:07,900
ADDY OSMANI: Nice.

682
00:31:07,900 --> 00:31:09,770
PAUL IRISH: So we're just
referencing whatever was the

683
00:31:09,770 --> 00:31:11,930
last computed value.

684
00:31:11,930 --> 00:31:15,030
I'm going to change this
back down to minus 500

685
00:31:15,030 --> 00:31:16,440
from what it is now.

686
00:31:16,440 --> 00:31:20,430
So we're going to have a
computed value of 308.

687
00:31:20,430 --> 00:31:24,080
And then just use that
and jump down.

688
00:31:24,080 --> 00:31:27,810
So this is really handy if
you're doing anything complex,

689
00:31:27,810 --> 00:31:29,990
doing any math or doing anything
else in the console

690
00:31:29,990 --> 00:31:32,410
and just want to reference the
last thing that was there.

691
00:31:32,410 --> 00:31:34,460
It could be an object.

692
00:31:34,460 --> 00:31:43,690
Let's say I'm selecting $0 for
this form, and I could

693
00:31:43,690 --> 00:31:47,970
reference the style
object of the

694
00:31:47,970 --> 00:31:49,790
element that I just logged.

695
00:31:49,790 --> 00:31:52,290
It's up to you.

696
00:31:52,290 --> 00:31:56,840
And I think, actually, we'll
have this as part of a new set

697
00:31:56,840 --> 00:31:59,180
of docs for the Chrome
DevTools, as

698
00:31:59,180 --> 00:32:00,065
this is a new feature.

699
00:32:00,065 --> 00:32:03,110
This will be included in the
docs that we are putting out

700
00:32:03,110 --> 00:32:03,996
pretty soon, Addy?

701
00:32:03,996 --> 00:32:05,214
ADDY OSMANI: Yes, pretty soon.

702
00:32:05,214 --> 00:32:06,110
Hopefully in the next
couple of weeks.

703
00:32:06,110 --> 00:32:07,210
PAUL IRISH: Not bad.

704
00:32:07,210 --> 00:32:09,540
So you're going to be able to
check out the full range of

705
00:32:09,540 --> 00:32:13,190
what's available inside the
Chrome DevTools console and a

706
00:32:13,190 --> 00:32:15,600
bunch of other stuff for the
new refresh documentation

707
00:32:15,600 --> 00:32:18,590
experience that I think
you'll like.

708
00:32:18,590 --> 00:32:19,330
All right.

709
00:32:19,330 --> 00:32:21,010
Addy, are we done on this?

710
00:32:21,010 --> 00:32:21,970
Did we cover--

711
00:32:21,970 --> 00:32:24,420
ADDY OSMANI: I think
we're done.

712
00:32:24,420 --> 00:32:27,280
Right before we go, I just
wanted to give a shout out to

713
00:32:27,280 --> 00:32:29,840
two Chrome DevTools extensions
that have

714
00:32:29,840 --> 00:32:31,470
recently gotten updates.

715
00:32:31,470 --> 00:32:34,000
I'm going to flip over to my
screen really quickly.

716
00:32:34,000 --> 00:32:36,680

717
00:32:36,680 --> 00:32:40,735
So the first one is RailsPanel,
which I saw over

718
00:32:40,735 --> 00:32:41,970
on Plus a few days ago.

719
00:32:41,970 --> 00:32:45,240
But basically, RailsPanel is a
Chrome DevTools extension that

720
00:32:45,240 --> 00:32:48,140
gives you lots of insights into
things like rendering

721
00:32:48,140 --> 00:32:50,950
times, requests, and a
lot of information

722
00:32:50,950 --> 00:32:52,380
specific to Rails apps.

723
00:32:52,380 --> 00:32:54,610
So Rails developers will
love using DevTools

724
00:32:54,610 --> 00:32:55,920
for their front ends.

725
00:32:55,920 --> 00:32:57,910
This is just a really great
extension for getting more

726
00:32:57,910 --> 00:33:00,640
information about what's going
on in your application.

727
00:33:00,640 --> 00:33:03,460
Another one that's gotten some
nice updates recently is

728
00:33:03,460 --> 00:33:05,530
AngularJS Batarang.

729
00:33:05,530 --> 00:33:08,320
We've briefly showed it while I
was flipping through on one

730
00:33:08,320 --> 00:33:09,180
of our other episodes.

731
00:33:09,180 --> 00:33:12,990
But basically, Batarang gives
you insights into your models

732
00:33:12,990 --> 00:33:16,130
and directives, and it helps you
profile your angular wraps

733
00:33:16,130 --> 00:33:19,330
so you can help improve the
performance of your apps

734
00:33:19,330 --> 00:33:20,710
pretty well there.

735
00:33:20,710 --> 00:33:23,182
And yeah, that's it.

736
00:33:23,182 --> 00:33:24,610
PAUL IRISH: Looking good.

737
00:33:24,610 --> 00:33:26,263
All right, we'll see
you guys next time.

738
00:33:26,263 --> 00:33:27,390
ADDY OSMANI: See
you next time.

739
00:33:27,390 --> 00:33:28,640
PAUL IRISH: Cheers.

740
00:33:28,640 --> 00:33:38,790

741
00:33:38,790 --> 00:33:42,167
[MUSIC PLAYING]

