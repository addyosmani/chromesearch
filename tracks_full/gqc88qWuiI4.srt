1
00:00:00,000 --> 00:00:01,750

2
00:00:01,750 --> 00:00:02,440
CHELSEA DERRICK: Hi, everyone.

3
00:00:02,440 --> 00:00:05,500
Welcome to True Grit, Debugging
CSS and Render

4
00:00:05,500 --> 00:00:06,510
Performance.

5
00:00:06,510 --> 00:00:09,590
My name is Chelsea Derrick and
I'm a Software Engineer at

6
00:00:09,590 --> 00:00:13,320
Google on the Gmail Team.

7
00:00:13,320 --> 00:00:14,600
I'm going to kick
us off with an

8
00:00:14,600 --> 00:00:16,740
incredibly provocative statement.

9
00:00:16,740 --> 00:00:18,880
Fast is better than flow.

10
00:00:18,880 --> 00:00:22,520
This is actually a part of
Google's 10 Things, which is

11
00:00:22,520 --> 00:00:24,560
our corporate philosophy.

12
00:00:24,560 --> 00:00:27,170
And it's Number Three on that
list, and we put it there

13
00:00:27,170 --> 00:00:30,050
explicitly because we don't
get speed for free.

14
00:00:30,050 --> 00:00:33,200
We have to spend a lot of blood,
sweat, and tears to get

15
00:00:33,200 --> 00:00:35,070
our apps to go quickly.

16
00:00:35,070 --> 00:00:37,670
And when we're talking about
web applications in

17
00:00:37,670 --> 00:00:41,930
particular, there's just a
lot of room to optimize.

18
00:00:41,930 --> 00:00:44,610
We start out trying to minimize
the number of

19
00:00:44,610 --> 00:00:48,070
redirects, get the user to the
landing page immediately, make

20
00:00:48,070 --> 00:00:50,600
sure that when they log in,
it's a quick and easy

21
00:00:50,600 --> 00:00:52,180
experience.

22
00:00:52,180 --> 00:00:52,800
Then--

23
00:00:52,800 --> 00:00:55,610
this is near and dear to my
heart on the Gmail team--

24
00:00:55,610 --> 00:00:58,330
any sort of data look we have
to do on the back end, get

25
00:00:58,330 --> 00:01:02,790
emails, get docs, get posts,
anything like that.

26
00:01:02,790 --> 00:01:03,800
Network delay.

27
00:01:03,800 --> 00:01:06,500
I've often suggested that Google
take some of that money

28
00:01:06,500 --> 00:01:08,880
out of the bank and just move
all of our users a little

29
00:01:08,880 --> 00:01:11,220
closer to the data center.

30
00:01:11,220 --> 00:01:14,190
Not generally something that we
can do, however, we can try

31
00:01:14,190 --> 00:01:16,910
to reduce the number of bytes
we send across the wire.

32
00:01:16,910 --> 00:01:19,130
That'll speed up our
page a little bit.

33
00:01:19,130 --> 00:01:21,100
And then as we're getting
closer and closer to the

34
00:01:21,100 --> 00:01:24,000
client, we start worrying about
things like JavaScript

35
00:01:24,000 --> 00:01:27,320
execution, and finally,
rendering.

36
00:01:27,320 --> 00:01:30,270
This is what we're here
to talk about today.

37
00:01:30,270 --> 00:01:34,070
And in particular, especially
given that I work on a product

38
00:01:34,070 --> 00:01:37,170
where sometimes, it takes five,
ten seconds for an email

39
00:01:37,170 --> 00:01:40,790
to load, it can be very tempting
to spend all of our

40
00:01:40,790 --> 00:01:44,130
time worrying about
back end latency.

41
00:01:44,130 --> 00:01:47,960
However, that just isn't
quite good enough.

42
00:01:47,960 --> 00:01:50,230
So even though we're
talking about much

43
00:01:50,230 --> 00:01:52,040
smaller periods of time--

44
00:01:52,040 --> 00:01:55,540
often milliseconds when we're
talking about rendering--

45
00:01:55,540 --> 00:01:58,410
we can't look at that as just
a drop in the bucket.

46
00:01:58,410 --> 00:02:00,750
That time is really, really
important to our users.

47
00:02:00,750 --> 00:02:03,570

48
00:02:03,570 --> 00:02:07,480
So in particular, I've got a
quick little demo here for you

49
00:02:07,480 --> 00:02:09,970
guys to show exactly
how important it is

50
00:02:09,970 --> 00:02:12,750
to have fast rendering.

51
00:02:12,750 --> 00:02:16,070
So I've got the slow version
of this turned on.

52
00:02:16,070 --> 00:02:18,870
Unfortunately, apps don't
come with these links.

53
00:02:18,870 --> 00:02:20,580
But you can see that
my scrolling here

54
00:02:20,580 --> 00:02:22,750
is incredibly choppy.

55
00:02:22,750 --> 00:02:26,160
I put an empty for loop in here
to demonstrate my point,

56
00:02:26,160 --> 00:02:28,370
but there are few things on
this earth that are more

57
00:02:28,370 --> 00:02:31,690
irritating than choppy
scrolling, right?

58
00:02:31,690 --> 00:02:34,240
If we were to compare that, for
example, to a nice, smooth

59
00:02:34,240 --> 00:02:37,270
scrolling, the user's going to
get a much better experience.

60
00:02:37,270 --> 00:02:39,640
So again, we're only talking
about a delay of a few

61
00:02:39,640 --> 00:02:42,250
milliseconds sometimes, but
it really does have a very

62
00:02:42,250 --> 00:02:46,640
profound impact on our
user's experiences.

63
00:02:46,640 --> 00:02:50,820
So part of that is going to be
freeing up the UI thread.

64
00:02:50,820 --> 00:02:53,820
Browser UIs you run in a single
thread, so we have to

65
00:02:53,820 --> 00:02:56,460
share that between rendering
and JavaScript.

66
00:02:56,460 --> 00:03:00,150
But just making sure we've got
really efficient, performant

67
00:03:00,150 --> 00:03:02,210
JavaScript is not enough.

68
00:03:02,210 --> 00:03:04,720
So I'm going to take us a level
past that, assume that

69
00:03:04,720 --> 00:03:06,710
we've already made that
optimization.

70
00:03:06,710 --> 00:03:08,480
What can we do to make
our pages quick?

71
00:03:08,480 --> 00:03:12,680

72
00:03:12,680 --> 00:03:17,960
So traditionally, the way that
I've done this in the past, I

73
00:03:17,960 --> 00:03:20,630
will start commenting out
sections of JavaScript and see

74
00:03:20,630 --> 00:03:22,910
which one I add back
in makes it faster.

75
00:03:22,910 --> 00:03:25,850
This is irritating, even more
irritating when you have to do

76
00:03:25,850 --> 00:03:27,280
this with your CSS.

77
00:03:27,280 --> 00:03:29,300
Is it the box shadow that's
slowing me down?

78
00:03:29,300 --> 00:03:31,610
Is it the rounded corners?

79
00:03:31,610 --> 00:03:33,960
This is not the best way
to approach things.

80
00:03:33,960 --> 00:03:36,180
It can get pretty irritating.

81
00:03:36,180 --> 00:03:38,500
Fortunately, there are a number
of tools available,

82
00:03:38,500 --> 00:03:41,150
particularly in Chrome today.

83
00:03:41,150 --> 00:03:43,670
So I'm going to talk a little
bit about some Chrome Dev

84
00:03:43,670 --> 00:03:45,300
Tools today.

85
00:03:45,300 --> 00:03:47,960
In particular, there are various
profilers available

86
00:03:47,960 --> 00:03:50,190
for JavaScript and for CSS.

87
00:03:50,190 --> 00:03:52,490
And the one that I'm really
going to focus on today is the

88
00:03:52,490 --> 00:03:53,780
Chrome Timeline.

89
00:03:53,780 --> 00:03:57,760
This is a quick little
screenshot, and we can

90
00:03:57,760 --> 00:04:01,280
basically tell the browser to
start recording what we do,

91
00:04:01,280 --> 00:04:03,200
and it will give us information
about where its

92
00:04:03,200 --> 00:04:05,330
time is being spent.

93
00:04:05,330 --> 00:04:07,800
And in particular, we're going
to worry about the things that

94
00:04:07,800 --> 00:04:11,090
are associated with
rendering today.

95
00:04:11,090 --> 00:04:13,390
So there are going to be a few
different annotations we'll

96
00:04:13,390 --> 00:04:15,410
see in the Timeline that
indicate a problem with our

97
00:04:15,410 --> 00:04:17,230
rendering pipeline.

98
00:04:17,230 --> 00:04:20,649
The first one will be
Style Recalculation.

99
00:04:20,649 --> 00:04:24,050
We'll talk a bit about what each
of these mean shortly.

100
00:04:24,050 --> 00:04:26,540
Layout, I'm sure we're all
familiar with that one.

101
00:04:26,540 --> 00:04:28,120
Avoid Layouts.

102
00:04:28,120 --> 00:04:30,760
And lastly, Painting.

103
00:04:30,760 --> 00:04:33,290
So I do want to show really
quickly what this would look

104
00:04:33,290 --> 00:04:36,210
like, and I'll zoom in a bit so
that hopefully those of you

105
00:04:36,210 --> 00:04:38,830
in the back can see.

106
00:04:38,830 --> 00:04:41,210
Here we've got the Chrome
Timeline, and I'm just going

107
00:04:41,210 --> 00:04:43,990
to go ahead and record
what happens when

108
00:04:43,990 --> 00:04:45,030
I click this button.

109
00:04:45,030 --> 00:04:46,990
It's going to add a little bit
of margin on there, so we'll

110
00:04:46,990 --> 00:04:49,140
see all of these things occur.

111
00:04:49,140 --> 00:04:51,860
So I'm going to go ahead and hit
Record, and then I'll head

112
00:04:51,860 --> 00:04:55,620
up here, click on the button,
and then stop recording.

113
00:04:55,620 --> 00:04:58,020
So Chrome has given us
a few little frames

114
00:04:58,020 --> 00:04:59,870
that we can look at.

115
00:04:59,870 --> 00:05:01,290
Let's see here.

116
00:05:01,290 --> 00:05:03,480
And in particular, we see
all of these steps.

117
00:05:03,480 --> 00:05:07,800
We see a style recalculation
occurring.

118
00:05:07,800 --> 00:05:08,840
And if I zoom back a little bit

119
00:05:08,840 --> 00:05:11,270
further, we'll see a layout--

120
00:05:11,270 --> 00:05:12,680
apologies--

121
00:05:12,680 --> 00:05:14,540
a layout right here.

122
00:05:14,540 --> 00:05:16,480
We notice that the whole
screen turns blue.

123
00:05:16,480 --> 00:05:18,860
This is the browser telling us
Layouts are the worst thing

124
00:05:18,860 --> 00:05:20,230
that has ever happened.

125
00:05:20,230 --> 00:05:22,600
And then there's a series of
paints, and actually if I

126
00:05:22,600 --> 00:05:25,920
hover over those, Chrome is
going to show me exactly how

127
00:05:25,920 --> 00:05:28,880
big of a rectangle
got painted.

128
00:05:28,880 --> 00:05:31,350
These are just the hovers on
the button, but when I

129
00:05:31,350 --> 00:05:34,190
actually added the margin, it
affected everything below it

130
00:05:34,190 --> 00:05:36,590
on the page as well because
margin is part of the box

131
00:05:36,590 --> 00:05:40,360
model, so it pushed
other things down.

132
00:05:40,360 --> 00:05:44,740
So that's just a quick look at
the tool itself, which is

133
00:05:44,740 --> 00:05:49,080
really helpful, but even more
useful is knowing exactly what

134
00:05:49,080 --> 00:05:51,870
causes periods of time
to be spent in

135
00:05:51,870 --> 00:05:53,630
those different phases.

136
00:05:53,630 --> 00:05:57,580
So what I'd like to spend the
majority of this talk doing is

137
00:05:57,580 --> 00:06:00,710
explaining a little bit about
the rendering cycle.

138
00:06:00,710 --> 00:06:03,600
So we have information about
the Timeline, but we don't

139
00:06:03,600 --> 00:06:06,080
really have any information
about what caused particular

140
00:06:06,080 --> 00:06:08,100
chunks of time to go missing.

141
00:06:08,100 --> 00:06:10,670
And so by understanding a
little bit about how the

142
00:06:10,670 --> 00:06:13,880
rendering cycle is implemented
in browsers, we can have a

143
00:06:13,880 --> 00:06:16,760
more clear understanding of
maybe what caused a layout or

144
00:06:16,760 --> 00:06:18,100
what caused a paint to occur.

145
00:06:18,100 --> 00:06:22,720

146
00:06:22,720 --> 00:06:26,370
So first of all, any edit that
we make to the document is

147
00:06:26,370 --> 00:06:30,210
going to cause the rendering
cycle to be entered, and here

148
00:06:30,210 --> 00:06:32,650
are the steps that we're going
to be working with--

149
00:06:32,650 --> 00:06:36,680
updating the DOM itself,
calculating CSS property

150
00:06:36,680 --> 00:06:41,320
values, building the rendering
tree, and then using that to

151
00:06:41,320 --> 00:06:43,960
perform layout calculations.

152
00:06:43,960 --> 00:06:46,400
And then there are two more
steps at the end, which are

153
00:06:46,400 --> 00:06:48,640
paint and compositing.

154
00:06:48,640 --> 00:06:50,960
So let's look at each one of
these in a bit more detail.

155
00:06:50,960 --> 00:06:54,760

156
00:06:54,760 --> 00:06:59,110
So first of all, the DOM is
basically an API that provides

157
00:06:59,110 --> 00:07:01,180
access to HTML documents.

158
00:07:01,180 --> 00:07:03,600
The browser parses this and
provides us with a tree of

159
00:07:03,600 --> 00:07:05,485
objects that we can manipulate
with JavaScript.

160
00:07:05,485 --> 00:07:08,410

161
00:07:08,410 --> 00:07:10,640
Now, this is the first
step for a reason.

162
00:07:10,640 --> 00:07:13,280
Everything else in the whole
rendering cycle depends on

163
00:07:13,280 --> 00:07:14,990
this being accurate.

164
00:07:14,990 --> 00:07:18,560
So when we, for example, add a
child or change a class name,

165
00:07:18,560 --> 00:07:20,680
the first thing that has to
happen is we have to actually

166
00:07:20,680 --> 00:07:23,320
edit the DOM.

167
00:07:23,320 --> 00:07:26,670
This may be familiar to you if
you have used the Dev Tools

168
00:07:26,670 --> 00:07:28,160
Element Inspector.

169
00:07:28,160 --> 00:07:30,290
We'll see a tree representation
of our

170
00:07:30,290 --> 00:07:34,440
document, and that's actually
going to be

171
00:07:34,440 --> 00:07:37,610
reflecting the DOM itself.

172
00:07:37,610 --> 00:07:40,190
And here's a little snippet of
JavaScript with some examples

173
00:07:40,190 --> 00:07:43,410
of things we might do to
cause the browser to

174
00:07:43,410 --> 00:07:45,100
have to edit the DOM.

175
00:07:45,100 --> 00:07:49,100
We might set the inner text or
inner HTML, we might add or

176
00:07:49,100 --> 00:07:51,740
remove children, or we might
even just change the

177
00:07:51,740 --> 00:07:53,270
attributes on an element.

178
00:07:53,270 --> 00:07:55,700
Any of these things are going to
cause the browser to enter

179
00:07:55,700 --> 00:07:58,080
the rendering cycle and
go to step number one.

180
00:07:58,080 --> 00:08:00,590

181
00:08:00,590 --> 00:08:03,010
The next thing that the browser
does, once it's got an

182
00:08:03,010 --> 00:08:06,850
accurate snap of the DOM, is
it's going to calculate CSS

183
00:08:06,850 --> 00:08:09,580
property values.

184
00:08:09,580 --> 00:08:12,350
So that means for every single
element on the page, the

185
00:08:12,350 --> 00:08:15,750
browser has to have a value for
every single CSS property.

186
00:08:15,750 --> 00:08:18,340
Depending on what kind of
element you're looking at,

187
00:08:18,340 --> 00:08:21,570
this is often upwards of 200
different properties.

188
00:08:21,570 --> 00:08:24,130
So we can kind of get a glimpse
of all the work that

189
00:08:24,130 --> 00:08:25,470
the browser is doing.

190
00:08:25,470 --> 00:08:28,520
In the Chrome Inspector, if we
take a look at this Computed

191
00:08:28,520 --> 00:08:31,620
Style Zippy, we can see that
there are just a ton of

192
00:08:31,620 --> 00:08:33,720
properties here.

193
00:08:33,720 --> 00:08:37,260
Fortunately, browsers today are
fast, but it's still an

194
00:08:37,260 --> 00:08:39,580
amount of work that has to be
done before we can actually

195
00:08:39,580 --> 00:08:41,669
make updates.

196
00:08:41,669 --> 00:08:44,920
So here's an example of just a
menu toggle button that we

197
00:08:44,920 --> 00:08:47,840
might have in our HTML and
then some CSS that

198
00:08:47,840 --> 00:08:48,570
goes along with it.

199
00:08:48,570 --> 00:08:50,400
We've got Hover Selector.

200
00:08:50,400 --> 00:08:52,800
We might behave a little bit
differently when the menu is

201
00:08:52,800 --> 00:08:54,410
open versus closed.

202
00:08:54,410 --> 00:08:58,410
Same thing if we've disabled
the Menu button.

203
00:08:58,410 --> 00:09:00,320
And going on a little bit
further, we see some

204
00:09:00,320 --> 00:09:04,060
JavaScript that's going to cause
style recalculations.

205
00:09:04,060 --> 00:09:07,710
So if we set that Disabled
Attribute to be true, the

206
00:09:07,710 --> 00:09:09,760
browser is actually going to
have to start recalculating

207
00:09:09,760 --> 00:09:13,570
styles again because
we can put HTML

208
00:09:13,570 --> 00:09:15,253
attributes in our CSS selectors.

209
00:09:15,253 --> 00:09:17,850

210
00:09:17,850 --> 00:09:20,865
And here, I've highlighted the
key things that will cause

211
00:09:20,865 --> 00:09:22,730
style recalculation.

212
00:09:22,730 --> 00:09:28,660
Things like pseudo classes, such
as Hover or Active, can

213
00:09:28,660 --> 00:09:31,880
actually also cause a
style recalculation.

214
00:09:31,880 --> 00:09:34,570
The browser had to go, through
find new matches for all of

215
00:09:34,570 --> 00:09:38,520
our properties, and potentially
change the value

216
00:09:38,520 --> 00:09:40,060
for various CSS properties.

217
00:09:40,060 --> 00:09:43,570

218
00:09:43,570 --> 00:09:46,490
Once we've got all of our CSS in
place, we're going to start

219
00:09:46,490 --> 00:09:48,820
getting into the
layout portion.

220
00:09:48,820 --> 00:09:51,980
And the first step of that
is building a new tree.

221
00:09:51,980 --> 00:09:55,380
We already have the DOM,
however, the rendering tree is

222
00:09:55,380 --> 00:09:57,660
sort of an internal data
structure that the browser

223
00:09:57,660 --> 00:10:01,100
uses to perform layout tasks.

224
00:10:01,100 --> 00:10:03,400
It might be shaped differently
than the DOM and it might

225
00:10:03,400 --> 00:10:06,030
contain different things.

226
00:10:06,030 --> 00:10:08,320
So here are some examples.

227
00:10:08,320 --> 00:10:12,070
In the DOM, we're always going
to have elements and nodes.

228
00:10:12,070 --> 00:10:14,780
These are the entries that we
see in the DOM, and that's

229
00:10:14,780 --> 00:10:17,710
contrasted with the rendering
tree where we see boxes.

230
00:10:17,710 --> 00:10:20,750
Those are things that are
actually painted on the page.

231
00:10:20,750 --> 00:10:22,770
And in terms of the shape of
the rendering tree, we

232
00:10:22,770 --> 00:10:24,700
actually have a different
parenting strategy.

233
00:10:24,700 --> 00:10:27,510
It's not necessarily the case
that a DOM parent is going to

234
00:10:27,510 --> 00:10:30,840
be the parent in the
rendering tree.

235
00:10:30,840 --> 00:10:32,390
So first, let's talk
a little bit about

236
00:10:32,390 --> 00:10:33,930
elements versus boxes.

237
00:10:33,930 --> 00:10:36,200
They're related, but they're
not the same.

238
00:10:36,200 --> 00:10:39,620
So a box is going to be any
entity that gets rendered on

239
00:10:39,620 --> 00:10:42,690
the page, whereas an element is
just going to be an entry

240
00:10:42,690 --> 00:10:44,180
in the DOM.

241
00:10:44,180 --> 00:10:48,740
So here's some examples of
elements that might never be

242
00:10:48,740 --> 00:10:50,040
rendered on the page.

243
00:10:50,040 --> 00:10:51,950
Things that are displayed
None will not be in

244
00:10:51,950 --> 00:10:53,210
the rendering tree.

245
00:10:53,210 --> 00:10:55,830
Style tags, script tags,
the head tag--

246
00:10:55,830 --> 00:10:59,090
any of those things are elements
but not boxes.

247
00:10:59,090 --> 00:11:02,170
Similarly, there are lots of
generated boxes that we do not

248
00:11:02,170 --> 00:11:04,260
have access to in the DOM.

249
00:11:04,260 --> 00:11:08,000
Examples include any pseudo
elements that we've added to

250
00:11:08,000 --> 00:11:10,270
our CSS, line boxes.

251
00:11:10,270 --> 00:11:13,440
If we've got a large paragraph
of text with many lines, the

252
00:11:13,440 --> 00:11:16,410
browser is laying those
out in boxes.

253
00:11:16,410 --> 00:11:20,200
And any other generate a box,
like an anonymous box.

254
00:11:20,200 --> 00:11:22,460
These are all going to
be painted but not

255
00:11:22,460 --> 00:11:24,420
present in the DOM.

256
00:11:24,420 --> 00:11:27,220
And then there's a good deal
of overlap in the middle--

257
00:11:27,220 --> 00:11:29,560
Divs, Anchors, things
that are painted

258
00:11:29,560 --> 00:11:30,810
that are also elements.

259
00:11:30,810 --> 00:11:33,610

260
00:11:33,610 --> 00:11:36,060
So in addition to the fact that
we might have different

261
00:11:36,060 --> 00:11:38,430
content inside of these
trees, they can also

262
00:11:38,430 --> 00:11:39,570
have a different shape.

263
00:11:39,570 --> 00:11:43,170
So a parent in the DOM tree is
always going to be the parent

264
00:11:43,170 --> 00:11:44,560
in the HTML.

265
00:11:44,560 --> 00:11:47,010
However, the parent in the
rendering tree is always going

266
00:11:47,010 --> 00:11:50,340
to be a boxes containing
block.

267
00:11:50,340 --> 00:11:53,840
And if you ever decide that
you just need some fun on

268
00:11:53,840 --> 00:11:56,770
Friday night and you read the
CSS spec, you'll see lots of

269
00:11:56,770 --> 00:11:59,720
references to the containing
block when you are reading the

270
00:11:59,720 --> 00:12:01,980
layout module.

271
00:12:01,980 --> 00:12:04,860
And in general, we actually do
see a lot of correlation

272
00:12:04,860 --> 00:12:07,940
between the DOM tree and the
rendering tree, but there are

273
00:12:07,940 --> 00:12:09,860
some notable exceptions.

274
00:12:09,860 --> 00:12:13,640
Absolutely positioned boxes
are the most obvious one.

275
00:12:13,640 --> 00:12:16,570
So whenever we're looking for a
rendering tree parent for an

276
00:12:16,570 --> 00:12:19,470
absolute box, the browser's
actually walking up the DOM

277
00:12:19,470 --> 00:12:21,870
looking for a positioned
ancestor.

278
00:12:21,870 --> 00:12:24,900
So this is going to be some
other parent in the tree--

279
00:12:24,900 --> 00:12:26,490
or an ancestor, rather--

280
00:12:26,490 --> 00:12:29,470
that has a position property
other than static.

281
00:12:29,470 --> 00:12:32,020
This will be the parent
in the rendering tree.

282
00:12:32,020 --> 00:12:35,270
So I've got a bit of an example
on the next page.

283
00:12:35,270 --> 00:12:39,360
So there's a bit of HTML here,
and I'm going to show you the

284
00:12:39,360 --> 00:12:43,370
differences between the DOM tree
and the rendering tree.

285
00:12:43,370 --> 00:12:47,660
So as we're parsing along with
our HTML, we notice we've got

286
00:12:47,660 --> 00:12:49,150
this section element.

287
00:12:49,150 --> 00:12:50,480
It has a Div child.

288
00:12:50,480 --> 00:12:53,400

289
00:12:53,400 --> 00:12:56,400
That Div child itself
has got a text node.

290
00:12:56,400 --> 00:12:58,940
It's got this Nav element,
which has a text

291
00:12:58,940 --> 00:13:01,280
node itself, et cetera.

292
00:13:01,280 --> 00:13:05,330
We can keep on parsing
all the way down.

293
00:13:05,330 --> 00:13:07,240
This is the structure
we expect.

294
00:13:07,240 --> 00:13:09,340
We put in valid HTML, we
got a tree back that

295
00:13:09,340 --> 00:13:10,950
looked exactly the same.

296
00:13:10,950 --> 00:13:16,160
Now if we were to go back and
build the rendering tree from

297
00:13:16,160 --> 00:13:18,466
the same piece of HTML,
it's going to look

298
00:13:18,466 --> 00:13:19,880
a little bit different.

299
00:13:19,880 --> 00:13:21,370
So our root element
is the same.

300
00:13:21,370 --> 00:13:24,960
It's just going to
be a block box.

301
00:13:24,960 --> 00:13:27,340
And we are definitely going
to have that Div as its

302
00:13:27,340 --> 00:13:28,690
descendant.

303
00:13:28,690 --> 00:13:31,320
However, something a little bit
different starts to happen

304
00:13:31,320 --> 00:13:35,470
when we reach that absolutely
positioned Nav element.

305
00:13:35,470 --> 00:13:38,740
This is actually going to become
a sibling of that Div

306
00:13:38,740 --> 00:13:41,500
because this section is
positioned relative, so that

307
00:13:41,500 --> 00:13:45,850
Nav is going to be parented
under that section element.

308
00:13:45,850 --> 00:13:49,640
We also notice that we start
getting some anonymous boxes

309
00:13:49,640 --> 00:13:51,500
that the browser generates
for us.

310
00:13:51,500 --> 00:13:54,460
This is because any given box
in the tree wants to have

311
00:13:54,460 --> 00:13:55,680
homogeneous children.

312
00:13:55,680 --> 00:13:59,180
So soon as a particular box has
a block child, it wants

313
00:13:59,180 --> 00:14:00,530
all block children.

314
00:14:00,530 --> 00:14:02,710
As soon as it has an
inline child, it

315
00:14:02,710 --> 00:14:05,050
wants all inline children.

316
00:14:05,050 --> 00:14:07,590
So the browser is going to do
whatever it has to to meet

317
00:14:07,590 --> 00:14:08,940
that constraint.

318
00:14:08,940 --> 00:14:12,330
And when we finish, there's a
tree that is certainly shaped

319
00:14:12,330 --> 00:14:15,030
differently but is in a really
good position to perform

320
00:14:15,030 --> 00:14:17,430
layout tasks.

321
00:14:17,430 --> 00:14:21,460
So this is all setting us up to
do a layout pass later on.

322
00:14:21,460 --> 00:14:23,590
We've already decided what
everyone's containing block

323
00:14:23,590 --> 00:14:26,530
is, so we know its containing
width, all

324
00:14:26,530 --> 00:14:27,780
those kinds of things.

325
00:14:27,780 --> 00:14:30,830

326
00:14:30,830 --> 00:14:33,110
Let's talk a little bit about
the properties that are going

327
00:14:33,110 --> 00:14:36,250
to affect the rendering tree.

328
00:14:36,250 --> 00:14:38,480
The first one is going to
be the display property.

329
00:14:38,480 --> 00:14:41,240
Is this a block or
an inline box?

330
00:14:41,240 --> 00:14:43,770
Is it Display None, in which
case it's not even in the

331
00:14:43,770 --> 00:14:45,600
rendering tree at all?

332
00:14:45,600 --> 00:14:47,420
Is it a float?

333
00:14:47,420 --> 00:14:50,570
Is it position fixed, position
absolute, position relative,

334
00:14:50,570 --> 00:14:52,500
or position static?

335
00:14:52,500 --> 00:14:54,770
Any edits that we make to these
properties are going to

336
00:14:54,770 --> 00:14:56,920
cause the browser to have to
make some kind of change to

337
00:14:56,920 --> 00:14:58,170
the rendering tree.

338
00:14:58,170 --> 00:15:01,210

339
00:15:01,210 --> 00:15:03,860
There also some affects on
layers, which we'll talk about

340
00:15:03,860 --> 00:15:05,550
a bit later on.

341
00:15:05,550 --> 00:15:08,490
But in general, the rendering
tree, again, has set us up to

342
00:15:08,490 --> 00:15:11,450
do a layout pass.

343
00:15:11,450 --> 00:15:14,510
And when we talk about layout,
all we really mean is that we

344
00:15:14,510 --> 00:15:18,380
have to determine the position
and dimensions of every box.

345
00:15:18,380 --> 00:15:21,270
How tall is it, how wide is it,
and where is its top left

346
00:15:21,270 --> 00:15:22,830
corner, in most cases.

347
00:15:22,830 --> 00:15:25,370

348
00:15:25,370 --> 00:15:27,750
So the kinds of properties we're
talking about here is

349
00:15:27,750 --> 00:15:30,640
going to be anything to do
with the box model, so

350
00:15:30,640 --> 00:15:38,410
content, padding, border,
margin, and any coordinates.

351
00:15:38,410 --> 00:15:42,230
So if we've got an absolutely
positioned box, for example,

352
00:15:42,230 --> 00:15:45,230
the top, right, bottom,
and left properties.

353
00:15:45,230 --> 00:15:47,900
So you'll notice that there is
sometimes a different set of

354
00:15:47,900 --> 00:15:50,090
properties for these
two different parts

355
00:15:50,090 --> 00:15:51,340
of the layout phase.

356
00:15:51,340 --> 00:15:55,440

357
00:15:55,440 --> 00:15:57,350
Now at this point, the browser
has determined where

358
00:15:57,350 --> 00:16:00,220
everything needs to go but
hasn't actually shown these

359
00:16:00,220 --> 00:16:02,290
changes to the user.

360
00:16:02,290 --> 00:16:06,030
So the next thing that
to happen is paint.

361
00:16:06,030 --> 00:16:10,910
And a few things happen opaquely
to us as developers,

362
00:16:10,910 --> 00:16:13,720
but in the end, the browser
has a couple of tasks.

363
00:16:13,720 --> 00:16:16,970
One, it has to determine, what
color does every pixel on the

364
00:16:16,970 --> 00:16:18,850
page need to be painted?

365
00:16:18,850 --> 00:16:21,060
It needs to actually create
a bitmap that has that

366
00:16:21,060 --> 00:16:24,550
information, and then it needs
to send that to the GPU so

367
00:16:24,550 --> 00:16:28,320
that it can actually be
presented to the user.

368
00:16:28,320 --> 00:16:31,900
Now, a given pixel can only
have one particular color.

369
00:16:31,900 --> 00:16:35,320
So as you might expect, we can
incur some extra costs here if

370
00:16:35,320 --> 00:16:37,850
we have any transparency.

371
00:16:37,850 --> 00:16:39,490
We can't stop at
the top layer.

372
00:16:39,490 --> 00:16:41,740
We have to keep looking
underneath it to calculate

373
00:16:41,740 --> 00:16:44,410
exactly what color to
paint this pixel.

374
00:16:44,410 --> 00:16:47,270
You can get especially slow if
we're talking about anything

375
00:16:47,270 --> 00:16:50,180
that has text because text is
anti-aliased and there are

376
00:16:50,180 --> 00:16:52,575
lots of little transparent
pixels around every letter.

377
00:16:52,575 --> 00:16:56,990

378
00:16:56,990 --> 00:16:59,250
So one other thing to note
is the browser doesn't

379
00:16:59,250 --> 00:17:01,060
necessarily have
one big bitmap.

380
00:17:01,060 --> 00:17:04,630
When we were looking at the
timeline earlier on, you saw

381
00:17:04,630 --> 00:17:07,089
small rectangles that were being
updated rather than the

382
00:17:07,089 --> 00:17:08,520
whole thing at once.

383
00:17:08,520 --> 00:17:11,740
And so there are a number of
strategies the browser uses to

384
00:17:11,740 --> 00:17:16,410
pick small damaged rectangles,
and one of those is it can

385
00:17:16,410 --> 00:17:17,890
have several different layers.

386
00:17:17,890 --> 00:17:19,560
So we can actually tell
the browser how to

387
00:17:19,560 --> 00:17:21,349
slice the page up.

388
00:17:21,349 --> 00:17:24,040
I know that all these things
are likely to stay together

389
00:17:24,040 --> 00:17:28,810
relative to each other, so keep
all these in one layer.

390
00:17:28,810 --> 00:17:32,930
And then it would be the GPU's
job to put all of those

391
00:17:32,930 --> 00:17:35,770
together in the next step.

392
00:17:35,770 --> 00:17:38,540
I do want to point out that
although browser vendors tend

393
00:17:38,540 --> 00:17:41,770
to be going towards this layer
strategy, it's not specified

394
00:17:41,770 --> 00:17:43,350
behavior anywhere.

395
00:17:43,350 --> 00:17:46,740
So it is an implementation
detail, one that we certainly

396
00:17:46,740 --> 00:17:48,700
want to take advantage of when
we're trying to get a really

397
00:17:48,700 --> 00:17:52,610
fast experience, but also one
that we can't say will still

398
00:17:52,610 --> 00:17:54,200
be there in a couple of years.

399
00:17:54,200 --> 00:17:57,720
Hopefully, we won't have to
worry about it anymore.

400
00:17:57,720 --> 00:17:59,670
So we've got a bunch of bitmaps
that's been handed

401
00:17:59,670 --> 00:18:04,500
over to us, and we need to
composite them together.

402
00:18:04,500 --> 00:18:08,110
So all these layer bitmaps are
handed over to the GPU.

403
00:18:08,110 --> 00:18:10,550
The GPU sticks them all together
and then draws those

404
00:18:10,550 --> 00:18:11,910
things on the screen.

405
00:18:11,910 --> 00:18:15,770
Now, anywhere we see some sort
of hand-off from the CPU to

406
00:18:15,770 --> 00:18:20,080
the GPU to the actual render,
those are all going to incur

407
00:18:20,080 --> 00:18:23,140
some sort of cost because we're
transferring this object

408
00:18:23,140 --> 00:18:26,770
around in memory, so that's
something to keep in mind.

409
00:18:26,770 --> 00:18:30,410
But something else to note is
that the GPU, it turns out, is

410
00:18:30,410 --> 00:18:32,650
very fast at drawing things.

411
00:18:32,650 --> 00:18:34,020
This make sense.

412
00:18:34,020 --> 00:18:36,640
The first G is for graphics.

413
00:18:36,640 --> 00:18:39,580
So it's much better for us
to spend as much time in

414
00:18:39,580 --> 00:18:41,880
compositing rather
than painting

415
00:18:41,880 --> 00:18:43,130
if we have the choice.

416
00:18:43,130 --> 00:18:45,680

417
00:18:45,680 --> 00:18:49,540
So properties that the
compositor is really good at

418
00:18:49,540 --> 00:18:51,275
are going to be opacity.

419
00:18:51,275 --> 00:18:54,040

420
00:18:54,040 --> 00:18:56,370
If we're just doing some sort
of transition or something

421
00:18:56,370 --> 00:18:59,460
that just changes opacity, the
GPU can do this all on its

422
00:18:59,460 --> 00:19:02,160
own, and same thing
with transforms.

423
00:19:02,160 --> 00:19:04,880
So that's going to be anything
like a rotation, a skew, a

424
00:19:04,880 --> 00:19:07,740
translation, any of those things
that move a particular

425
00:19:07,740 --> 00:19:10,010
element around the screen.

426
00:19:10,010 --> 00:19:12,610
Transform is very--

427
00:19:12,610 --> 00:19:14,090
well, I think it's
very interesting.

428
00:19:14,090 --> 00:19:15,790
You may or may not.

429
00:19:15,790 --> 00:19:18,340
We can move things around the
page without actually

430
00:19:18,340 --> 00:19:20,100
affecting layout.

431
00:19:20,100 --> 00:19:22,740
So typically, when we move
things around the page, we're

432
00:19:22,740 --> 00:19:25,810
using the position relative
and we change the left

433
00:19:25,810 --> 00:19:29,280
property, or we'll add some
margin, something like that,

434
00:19:29,280 --> 00:19:31,910
but all those are taking us
back to the layout step.

435
00:19:31,910 --> 00:19:35,850
However, if we're relying just
on transformation to do that,

436
00:19:35,850 --> 00:19:37,630
this element is totally
out of the flow.

437
00:19:37,630 --> 00:19:39,750
The layout engine, the rendering
tree still thinks

438
00:19:39,750 --> 00:19:42,790
it's in the original location,
so it's not dirtying up

439
00:19:42,790 --> 00:19:45,760
anything else anywhere
on the page.

440
00:19:45,760 --> 00:19:48,360
Now, this also has the side
effect that it's not pushing

441
00:19:48,360 --> 00:19:50,530
anything out of its way, so
maybe you have to move other

442
00:19:50,530 --> 00:19:52,000
things as well.

443
00:19:52,000 --> 00:19:54,990
But to get certain kinds of
effects, this can be a very

444
00:19:54,990 --> 00:19:57,660
handy thing to know.

445
00:19:57,660 --> 00:19:59,930
So if we look back over the
rendering cycle that we've

446
00:19:59,930 --> 00:20:02,300
just discussed, we can see
that there is definitely

447
00:20:02,300 --> 00:20:05,140
alignment with the things
the Timeline tells us.

448
00:20:05,140 --> 00:20:09,605
So in terms of updating the
DOM and doing our style

449
00:20:09,605 --> 00:20:12,390
recalc, those are all going
to fall under the Style

450
00:20:12,390 --> 00:20:14,590
Recalculation that we saw.

451
00:20:14,590 --> 00:20:16,860
And then we've got all
of this layout work.

452
00:20:16,860 --> 00:20:20,400
We have to make any updates to
the rendering tree, and then

453
00:20:20,400 --> 00:20:22,410
actually calculate the layout.

454
00:20:22,410 --> 00:20:25,820
And then at the very end, we've
got a painting step and

455
00:20:25,820 --> 00:20:29,380
then compositing layers, which
I did not show you yet, but I

456
00:20:29,380 --> 00:20:31,390
will in just a moment.

457
00:20:31,390 --> 00:20:35,590
So at this point, we're armed
with enough knowledge to maybe

458
00:20:35,590 --> 00:20:39,280
look at the Timeline and reverse
engineer, OK, a layout

459
00:20:39,280 --> 00:20:40,370
occurred here.

460
00:20:40,370 --> 00:20:41,820
I don't want one.

461
00:20:41,820 --> 00:20:43,880
What other strategy could
I have used for

462
00:20:43,880 --> 00:20:45,580
that particular effect?

463
00:20:45,580 --> 00:20:49,070
And we can try to remove
layouts, eliminate style

464
00:20:49,070 --> 00:20:50,950
recalculations, that
sort of thing.

465
00:20:50,950 --> 00:20:54,040

466
00:20:54,040 --> 00:20:57,070
So I apologize because I'm going
to be hiding behind my

467
00:20:57,070 --> 00:21:00,820
computer a bit, but I have a
short demo app that I'm going

468
00:21:00,820 --> 00:21:05,300
to show various snaps of
the Timeline from.

469
00:21:05,300 --> 00:21:09,760
So first of all, the effect that
we're going for here is

470
00:21:09,760 --> 00:21:13,810
going to be this little guy
sliding in and out, and that's

471
00:21:13,810 --> 00:21:15,550
just a hover change.

472
00:21:15,550 --> 00:21:17,670
So when I hover in, it
slides in and out.

473
00:21:17,670 --> 00:21:19,790
And I'm going to show you what
the Timeline looks like for

474
00:21:19,790 --> 00:21:23,540
various different ways we can
implement the same effect.

475
00:21:23,540 --> 00:21:25,910
This first one is implemented
with margin.

476
00:21:25,910 --> 00:21:28,310
We can see that we positioned
this element offscreen with a

477
00:21:28,310 --> 00:21:30,100
margin left, and then
we bring it back in

478
00:21:30,100 --> 00:21:31,350
whenever a hover occurs.

479
00:21:31,350 --> 00:21:33,690

480
00:21:33,690 --> 00:21:37,100
So if we go ahead and fire up
our Timeline and we take a

481
00:21:37,100 --> 00:21:41,720
recording, we'll see lots of
exciting things happening.

482
00:21:41,720 --> 00:21:44,390
And I'm going to go ahead and
zoom in here and just analyze

483
00:21:44,390 --> 00:21:46,430
what the browser's had to do.

484
00:21:46,430 --> 00:21:48,390
So we see that there are
a number of style

485
00:21:48,390 --> 00:21:49,260
recalculations.

486
00:21:49,260 --> 00:21:52,420
It is unfortunate that there
are several instead of just

487
00:21:52,420 --> 00:21:56,670
one, but that happens
sometimes.

488
00:21:56,670 --> 00:21:59,150
Chrome in particular is getting
better and better at

489
00:21:59,150 --> 00:22:03,720
combining these things, but we
see that we've got a bunch of

490
00:22:03,720 --> 00:22:07,170
style recalcs, and then we
have a layout here, which

491
00:22:07,170 --> 00:22:08,030
makes sense.

492
00:22:08,030 --> 00:22:10,100
Margin is a layout-related
property.

493
00:22:10,100 --> 00:22:12,990
So even though it didn't push
anything else out of the way,

494
00:22:12,990 --> 00:22:18,180
the rendering tree and the
dimensions of this element

495
00:22:18,180 --> 00:22:19,830
actually had to be updated.

496
00:22:19,830 --> 00:22:22,440
As we scroll down, we continue
to see that there are a series

497
00:22:22,440 --> 00:22:25,990
of recalculate style and layout,
one after the other.

498
00:22:25,990 --> 00:22:29,130
So the way that I have
implemented this is with a CSS

499
00:22:29,130 --> 00:22:32,630
transition, and so the browser
is basically, on my behalf,

500
00:22:32,630 --> 00:22:35,570
going through and saying, well,
the margin left was

501
00:22:35,570 --> 00:22:36,610
negative 215.

502
00:22:36,610 --> 00:22:40,130
Now it's negative 214,
and on, and so forth.

503
00:22:40,130 --> 00:22:42,940
So we'll continue to see a
number of style recalculations

504
00:22:42,940 --> 00:22:46,670
as we go, and we'll also start
to see some paints.

505
00:22:46,670 --> 00:22:48,640
Now I scrolled a bit so my
rectangles will be in the

506
00:22:48,640 --> 00:22:51,780
wrong place, but we can see
that there are little

507
00:22:51,780 --> 00:22:55,630
rectangles that start peeking
in, demonstrating where a flag

508
00:22:55,630 --> 00:22:57,070
comes in and out.

509
00:22:57,070 --> 00:23:01,230
Now, as a hat tip and also a bit
of a frustration for me,

510
00:23:01,230 --> 00:23:04,170
when I started working on this
talk a month ago, those

511
00:23:04,170 --> 00:23:07,160
rectangles were huge and I got a
really big win when I showed

512
00:23:07,160 --> 00:23:09,330
you the next version.

513
00:23:09,330 --> 00:23:13,340
It got faster, and so the impact
is less severe, but we

514
00:23:13,340 --> 00:23:15,640
can still see as we go through
that the browser's having to

515
00:23:15,640 --> 00:23:19,210
do a number of steps before
it can do a single paint.

516
00:23:19,210 --> 00:23:21,570
Sometimes a paint doesn't
even fit in.

517
00:23:21,570 --> 00:23:24,450
We'll get a recalc, a layout,
and then another recalc

518
00:23:24,450 --> 00:23:26,320
without even getting a paint.

519
00:23:26,320 --> 00:23:28,790
So this sort of thing is going
to cause a lower frame rate

520
00:23:28,790 --> 00:23:31,390
for the user.

521
00:23:31,390 --> 00:23:36,290
So we scroll all the way to the
end, and at some point,

522
00:23:36,290 --> 00:23:41,380
everything finished and it
painted the entire little logo

523
00:23:41,380 --> 00:23:43,070
all the way on screen.

524
00:23:43,070 --> 00:23:44,830
And it's not too bad.

525
00:23:44,830 --> 00:23:47,510
This happens to be an incredibly
lightweight page.

526
00:23:47,510 --> 00:23:50,220
If we had a lot more elements
on the page, though, we'd

527
00:23:50,220 --> 00:23:52,140
start getting some jerkiness
that the user

528
00:23:52,140 --> 00:23:53,770
can actually see.

529
00:23:53,770 --> 00:23:57,650
And so we've got a number of
steps that we want to go

530
00:23:57,650 --> 00:24:01,160
through, and we get the biggest
wins at the beginning

531
00:24:01,160 --> 00:24:02,470
of the rendering cycle.

532
00:24:02,470 --> 00:24:05,000
So in particular, can we
eliminate recalcs and can we

533
00:24:05,000 --> 00:24:06,790
eliminate layouts?

534
00:24:06,790 --> 00:24:08,010
So those are the things
that we're going to

535
00:24:08,010 --> 00:24:09,580
try to focus on.

536
00:24:09,580 --> 00:24:13,750
So prior to CSS3, I would have
said to myself, you know,

537
00:24:13,750 --> 00:24:18,530
margin can cause other things on
the page to move around, so

538
00:24:18,530 --> 00:24:21,230
maybe I'll try to absolutely
position this flag and slide

539
00:24:21,230 --> 00:24:23,920
it in and out, because then, I'm
guaranteed it's not going

540
00:24:23,920 --> 00:24:25,780
to affect all those siblings
that are in the flow.

541
00:24:25,780 --> 00:24:29,020

542
00:24:29,020 --> 00:24:31,580
So I'll go ahead and click
Position, and my

543
00:24:31,580 --> 00:24:32,590
CSS is going to change.

544
00:24:32,590 --> 00:24:34,540
This is going to be absolutely
positioned, and I'm going to

545
00:24:34,540 --> 00:24:36,900
use the left property instead
to do the animation.

546
00:24:36,900 --> 00:24:39,550

547
00:24:39,550 --> 00:24:42,470
And I'll weasel it on screen
a little bit, take a new

548
00:24:42,470 --> 00:24:49,510
recording, and zoom in and see
if things got any better.

549
00:24:49,510 --> 00:24:52,770
So I still see a number of
recalculations, and I still

550
00:24:52,770 --> 00:24:53,920
see layouts.

551
00:24:53,920 --> 00:24:57,530
Now, these layouts are going to
be a bit quicker than the

552
00:24:57,530 --> 00:25:00,460
layouts we saw with margin,
but they're still there

553
00:25:00,460 --> 00:25:05,810
because when we looked at the
layout slide, left is still a

554
00:25:05,810 --> 00:25:09,850
property that has to do some
sort of layout calculation.

555
00:25:09,850 --> 00:25:11,960
Now, it's cheaper because it
doesn't affect anything else

556
00:25:11,960 --> 00:25:14,720
on the page, but it's still
going to cost us.

557
00:25:14,720 --> 00:25:17,760
So as we're going down, we still
see that we've got these

558
00:25:17,760 --> 00:25:20,090
recalculations and layouts
interspersed

559
00:25:20,090 --> 00:25:22,170
with all of our painting.

560
00:25:22,170 --> 00:25:24,700
And this is just not going to be
good enough, mostly because

561
00:25:24,700 --> 00:25:27,410
we can do better.

562
00:25:27,410 --> 00:25:30,390
So that wasn't as big a win as
maybe we would have hoped.

563
00:25:30,390 --> 00:25:34,850
However, if we think back to
what I said about layers, it

564
00:25:34,850 --> 00:25:38,160
might occur to us to try a
transformation instead.

565
00:25:38,160 --> 00:25:39,990
Transforms have no
effect on layout.

566
00:25:39,990 --> 00:25:44,570
It's a paint only concept, so
we might give that a try.

567
00:25:44,570 --> 00:25:46,860
So let's take a look at
the CSS we do here.

568
00:25:46,860 --> 00:25:49,710
We're going to use
a transformation.

569
00:25:49,710 --> 00:25:51,860
We're going to translate
x instead of

570
00:25:51,860 --> 00:25:53,460
moving our left property.

571
00:25:53,460 --> 00:25:55,640
So leave the element in the
flow, but go ahead and

572
00:25:55,640 --> 00:25:58,780
reposition it using
a transform.

573
00:25:58,780 --> 00:26:00,780
So I'll go ahead and take
a recording here.

574
00:26:00,780 --> 00:26:04,350

575
00:26:04,350 --> 00:26:06,710
I can tell already there's a lot
more green in here, which

576
00:26:06,710 --> 00:26:09,960
is exactly what I'm
looking for.

577
00:26:09,960 --> 00:26:11,475
So I still see a number of

578
00:26:11,475 --> 00:26:13,180
recalculations at the beginning.

579
00:26:13,180 --> 00:26:16,900
Remember, hovering can cause our
CSS selectors to change.

580
00:26:16,900 --> 00:26:21,120
That's what actually kicked off
my transition, in fact.

581
00:26:21,120 --> 00:26:25,420
But when I continue looking, I
see that there are a large

582
00:26:25,420 --> 00:26:28,350
number of paints at the
beginning, but then as I go

583
00:26:28,350 --> 00:26:33,460
through, I'm getting just a
bunch of composited layers.

584
00:26:33,460 --> 00:26:37,860
So these are incredibly cheap
and easy for the GPU to do,

585
00:26:37,860 --> 00:26:40,690
and so we're going to see a
much smoother transform,

586
00:26:40,690 --> 00:26:44,230
especially if, like I said, we
had a very heavyweight DOM

587
00:26:44,230 --> 00:26:48,205
page that was hard for
the browser to paint.

588
00:26:48,205 --> 00:26:51,900
However, still at the end, we've
got this large paint

589
00:26:51,900 --> 00:26:54,830
right at the end, and at the
beginning, there are a series

590
00:26:54,830 --> 00:26:57,160
of pains as well.

591
00:26:57,160 --> 00:26:59,470
These sort of perplexed me when
I first tried this out

592
00:26:59,470 --> 00:27:01,450
and I was thinking to myself,
there's nothing up there.

593
00:27:01,450 --> 00:27:02,370
What's happening?

594
00:27:02,370 --> 00:27:04,870
But what the browser is actually
doing is it's saying,

595
00:27:04,870 --> 00:27:08,780
well, you added a layer here
but in order to slide that

596
00:27:08,780 --> 00:27:10,850
around, I had to put everything
else on the page in

597
00:27:10,850 --> 00:27:14,620
a layer as well so that the
GPU can composite them.

598
00:27:14,620 --> 00:27:19,330
So this is that little
CSS tag that I have.

599
00:27:19,330 --> 00:27:22,100
This is the links that
are on there.

600
00:27:22,100 --> 00:27:24,130
This is the flag itself.

601
00:27:24,130 --> 00:27:26,880
And then we had to do one big
paint to the whole page to

602
00:27:26,880 --> 00:27:29,090
actually render those layers.

603
00:27:29,090 --> 00:27:31,960
So for the duration of the
animation, we actually get

604
00:27:31,960 --> 00:27:35,400
fairly smooth effects, but at
the beginning and at the end

605
00:27:35,400 --> 00:27:38,280
we have to do a very
large paint.

606
00:27:38,280 --> 00:27:41,610
And since painting is less
efficient than compositing, we

607
00:27:41,610 --> 00:27:42,980
want to try to get the smallest

608
00:27:42,980 --> 00:27:45,800
rectangles that we can.

609
00:27:45,800 --> 00:27:49,730
So you may have heard that
Transform 3D is supposed to

610
00:27:49,730 --> 00:27:52,540
accelerate things, whatever
that means.

611
00:27:52,540 --> 00:27:56,640
So whenever I'm working on my
own, I just sort of take that

612
00:27:56,640 --> 00:27:58,480
as a given and I say, all
right, let's try that.

613
00:27:58,480 --> 00:28:00,510
See if it makes it faster.

614
00:28:00,510 --> 00:28:02,390
So let's go ahead and
take a recording.

615
00:28:02,390 --> 00:28:05,600
You'll see at this point I've
use Translate 3D instead.

616
00:28:05,600 --> 00:28:07,690
I haven't actually done anything
with the y- or the

617
00:28:07,690 --> 00:28:11,010
z-axis, but I'm going to give
it a shot and just see if it

618
00:28:11,010 --> 00:28:12,780
makes a change.

619
00:28:12,780 --> 00:28:18,200
Guess and check, the web
developer's best friend.

620
00:28:18,200 --> 00:28:21,680
So I'll go ahead and zoom in on
here, and I still see that

621
00:28:21,680 --> 00:28:23,470
I've got a large number
of paints that

622
00:28:23,470 --> 00:28:25,510
occur at the beginning.

623
00:28:25,510 --> 00:28:29,140
So I'm thinking to myself that
this is not good enough.

624
00:28:29,140 --> 00:28:32,500
What I want to do is I want to
avoid these initial paints, so

625
00:28:32,500 --> 00:28:35,940
I need to actually take the
things that are present here

626
00:28:35,940 --> 00:28:38,610
and I need to put them in
layers the whole time.

627
00:28:38,610 --> 00:28:40,600
The problem here is that
something is getting popped

628
00:28:40,600 --> 00:28:43,380
out into a layer, it's causing
all this extra

629
00:28:43,380 --> 00:28:44,760
work to have to happen.

630
00:28:44,760 --> 00:28:48,140
So instead, if in the resting
state I put them in layers all

631
00:28:48,140 --> 00:28:50,310
along, I can avoid this.

632
00:28:50,310 --> 00:28:53,810
So I'm going to go and do this
on the fly, hoping not to make

633
00:28:53,810 --> 00:28:57,180
typos in front of all of you.

634
00:28:57,180 --> 00:29:00,630
But I'm going to go ahead and
say that everything will be in

635
00:29:00,630 --> 00:29:05,330
a Translate 3D in its
resting state.

636
00:29:05,330 --> 00:29:10,950
I already have one for the
resting state of the bar, but

637
00:29:10,950 --> 00:29:14,600
I don't have anything for this
list that I've got right here,

638
00:29:14,600 --> 00:29:24,330
so I might try a Transform 3D
and say, don't go anywhere.

639
00:29:24,330 --> 00:29:26,340
Just sit there.

640
00:29:26,340 --> 00:29:28,480
And then I might do the same
thing with this code block

641
00:29:28,480 --> 00:29:29,730
right here.

642
00:29:29,730 --> 00:29:37,250

643
00:29:37,250 --> 00:29:41,760
So my hypothesis is things are
in layers right now, so as

644
00:29:41,760 --> 00:29:43,970
soon as I made that change, we
had to paint each of those

645
00:29:43,970 --> 00:29:46,260
individually to pop them
out into layers.

646
00:29:46,260 --> 00:29:49,450
But now, it shouldn't cause a
hitch at the beginning or the

647
00:29:49,450 --> 00:29:50,410
end of my animation.

648
00:29:50,410 --> 00:29:51,280
They're already in layers.

649
00:29:51,280 --> 00:29:53,340
We don't have to do that work.

650
00:29:53,340 --> 00:29:59,320
So let's give that a shot,
see how accurate it is.

651
00:29:59,320 --> 00:30:00,580
I do see one here.

652
00:30:00,580 --> 00:30:03,020
I apparently missed somebody
somewhere on the page.

653
00:30:03,020 --> 00:30:05,820
But my giant paints that
I had before--

654
00:30:05,820 --> 00:30:07,950
apologies--

655
00:30:07,950 --> 00:30:09,610
no paints, right?

656
00:30:09,610 --> 00:30:12,680
So I completely eliminated
paint as

657
00:30:12,680 --> 00:30:14,460
associated with this layer.

658
00:30:14,460 --> 00:30:16,710
Now obviously, when I introduce
the layer, that

659
00:30:16,710 --> 00:30:19,340
caused a paint, but now I've
taken it out of the places

660
00:30:19,340 --> 00:30:21,370
where I care about smoothness,
which is the

661
00:30:21,370 --> 00:30:22,620
duration of my animation.

662
00:30:22,620 --> 00:30:28,160

663
00:30:28,160 --> 00:30:33,480
So that was the demo, so let's
head back and get a high level

664
00:30:33,480 --> 00:30:34,790
view of the kinds of
things that we want

665
00:30:34,790 --> 00:30:36,440
to try to do here.

666
00:30:36,440 --> 00:30:39,820
So the first and foremost is
we have to get rid of any

667
00:30:39,820 --> 00:30:42,240
JavaScript interruptions
that we have.

668
00:30:42,240 --> 00:30:45,100
If an animation or scrolling is
occurring, we want to make

669
00:30:45,100 --> 00:30:47,240
sure that we're not getting
random JavaScript callbacks,

670
00:30:47,240 --> 00:30:49,540
we're not doing expensive
JavaScript in the middle of

671
00:30:49,540 --> 00:30:50,790
our animation.

672
00:30:50,790 --> 00:30:52,670
Sometimes, maybe you're
implementing something like a

673
00:30:52,670 --> 00:30:55,790
sticky header, you can't avoid
it, but you want to keep it as

674
00:30:55,790 --> 00:30:58,860
lightweight as possible because
any time that we're

675
00:30:58,860 --> 00:31:01,420
spending on our JavaScript
is taking

676
00:31:01,420 --> 00:31:03,780
away time from painting.

677
00:31:03,780 --> 00:31:05,800
So that's the first one.

678
00:31:05,800 --> 00:31:07,300
The next one is we want
to get rid of as

679
00:31:07,300 --> 00:31:10,250
many layouts as possible.

680
00:31:10,250 --> 00:31:13,490
Now, we can't always avoid
a layout occurring.

681
00:31:13,490 --> 00:31:18,020
In fact, not only writing to the
DOM causes a layout, but

682
00:31:18,020 --> 00:31:20,830
sometimes reading from the DOM
causes a layout as well.

683
00:31:20,830 --> 00:31:24,000
So the browser will try to batch
up a series of writes to

684
00:31:24,000 --> 00:31:26,440
the DOM, and if we've
interleaved a bunch of reads

685
00:31:26,440 --> 00:31:29,210
in there, it has to validate the
whole thing before it can

686
00:31:29,210 --> 00:31:30,950
give you an accurate answer.

687
00:31:30,950 --> 00:31:33,240
So for example, if you are
measuring the width of

688
00:31:33,240 --> 00:31:35,630
something and then you write
to the height of something

689
00:31:35,630 --> 00:31:37,990
else and then you get the
offset top of something,

690
00:31:37,990 --> 00:31:40,510
that's going to cause a lot more
layouts instead of the

691
00:31:40,510 --> 00:31:42,410
browser being able to
batch them all up.

692
00:31:42,410 --> 00:31:45,170
So even if we can't fully
eliminate them, we want to get

693
00:31:45,170 --> 00:31:48,230
as few layouts as possible.

694
00:31:48,230 --> 00:31:50,930
And then moving on from there,
we went to minimize our paint

695
00:31:50,930 --> 00:31:52,650
rectangles.

696
00:31:52,650 --> 00:31:55,486
We can't always avoid having
these rectangles, but we want

697
00:31:55,486 --> 00:31:57,170
to get them as small
as possible.

698
00:31:57,170 --> 00:32:00,890
So small in number, small
in size on our paints.

699
00:32:00,890 --> 00:32:03,260
And then if we can, we want to
try to eliminate painting

700
00:32:03,260 --> 00:32:05,150
altogether.

701
00:32:05,150 --> 00:32:08,770
Now again, this whole layer
concept is not anywhere in any

702
00:32:08,770 --> 00:32:10,890
sort of standardized
specification.

703
00:32:10,890 --> 00:32:13,130
It's just one of those things
that we have to do if we want

704
00:32:13,130 --> 00:32:16,490
a great experience for
our users these days.

705
00:32:16,490 --> 00:32:19,350
I will say that a question I
often get is, well, why don't

706
00:32:19,350 --> 00:32:21,230
we just put everything into a
layer and then we don't have

707
00:32:21,230 --> 00:32:22,910
to worry about it?

708
00:32:22,910 --> 00:32:26,660
It does take up some amount of
vRAM, and if you put every

709
00:32:26,660 --> 00:32:29,850
element in the page on a layer,
at that point, there's

710
00:32:29,850 --> 00:32:32,710
so much memory being taken up
and so much work to combine

711
00:32:32,710 --> 00:32:36,510
them all together that you get
very diminishing returns,

712
00:32:36,510 --> 00:32:39,770
especially on a very low power
device like a phone.

713
00:32:39,770 --> 00:32:42,080
And so we have to be a little
bit thoughtful.

714
00:32:42,080 --> 00:32:44,770
We have to choose our layers,
carve up our page in a way

715
00:32:44,770 --> 00:32:47,900
that will actually support
whatever particular effect

716
00:32:47,900 --> 00:32:49,900
we're trying to get.

717
00:32:49,900 --> 00:32:52,600
So these are our takeaways
from this session.

718
00:32:52,600 --> 00:32:56,120
And if we're trying to improve
our rendering time, we want to

719
00:32:56,120 --> 00:32:57,710
start at the top and
go to the bottom.

720
00:32:57,710 --> 00:33:00,040
We'll get the biggest win by
getting rid of our JavaScript

721
00:33:00,040 --> 00:33:03,230
and so on down the page.

722
00:33:03,230 --> 00:33:06,290
There are some links on here,
and I will also have a link to

723
00:33:06,290 --> 00:33:08,280
this slide show, but
there are a ton of

724
00:33:08,280 --> 00:33:10,540
great resources available.

725
00:33:10,540 --> 00:33:13,070
The Chrome Team has been
wonderful about posting things

726
00:33:13,070 --> 00:33:16,960
to the HTML5 Rocks website,
so I definitely highly

727
00:33:16,960 --> 00:33:18,300
recommend that one.

728
00:33:18,300 --> 00:33:20,610
And there are some links on here
that I've found useful.

729
00:33:20,610 --> 00:33:22,740
The last one explains all kinds
of things about the

730
00:33:22,740 --> 00:33:26,320
threading architecture for the
Chrome renderer, so settle in

731
00:33:26,320 --> 00:33:29,731
on that one, but it's definitely
a great read.

732
00:33:29,731 --> 00:33:32,150
And with that, we're going to
go ahead and take questions.

733
00:33:32,150 --> 00:33:35,110
This link is to the slideshow,
so if you'd like to revisit

734
00:33:35,110 --> 00:33:38,510
and click on those links, this
is where you can go.

735
00:33:38,510 --> 00:33:39,080
Thank you.

736
00:33:39,080 --> 00:33:47,110
[APPLAUSE]

737
00:33:47,110 --> 00:33:48,440
CHELSEA DERRICK: And if there
are any questions, there are a

738
00:33:48,440 --> 00:33:49,210
couple microphones.

739
00:33:49,210 --> 00:33:50,460
There's one here
in the middle.

740
00:33:50,460 --> 00:33:57,460

741
00:33:57,460 --> 00:33:59,760
AUDIENCE: Hi.

742
00:33:59,760 --> 00:34:03,510
Not sure if this is the most
appropriate forum for this

743
00:34:03,510 --> 00:34:06,270
question, but I've always
wondered why every value of

744
00:34:06,270 --> 00:34:12,969
position triggers a layout when
most of them don't really

745
00:34:12,969 --> 00:34:13,880
affect layout that much.

746
00:34:13,880 --> 00:34:16,449
Like position absolute elements
don't affect layout

747
00:34:16,449 --> 00:34:19,199
at all, they're taken
out of the flow.

748
00:34:19,199 --> 00:34:23,850
Position relative elements,
they seem to behave quite

749
00:34:23,850 --> 00:34:26,429
similarly to an element that
has been translated using

750
00:34:26,429 --> 00:34:26,804
transforms.

751
00:34:26,804 --> 00:34:30,170
And of course, fixed elements
are in their own world.

752
00:34:30,170 --> 00:34:32,560
So why do these trigger
a layout?

753
00:34:32,560 --> 00:34:32,810
CHELSEA DERRICK: Yes.

754
00:34:32,810 --> 00:34:35,239
That's a great question, and
definitely one of the places

755
00:34:35,239 --> 00:34:38,320
that browsers have
a long way to go.

756
00:34:38,320 --> 00:34:40,270
We shouldn't have to
think about this.

757
00:34:40,270 --> 00:34:42,730
If I don't have any children and
I'm just a square on the

758
00:34:42,730 --> 00:34:44,860
page and you move my left edge,
it shouldn't affect

759
00:34:44,860 --> 00:34:45,620
anything else.

760
00:34:45,620 --> 00:34:47,690
Why are you wasting the time?

761
00:34:47,690 --> 00:34:52,080
It's sort of a result of the
fact that left can sometimes

762
00:34:52,080 --> 00:34:55,590
have an effect, and it's better
to waste a little time

763
00:34:55,590 --> 00:34:58,820
and make sure you're 100%
accurate rather than to try to

764
00:34:58,820 --> 00:35:00,830
prematurely optimize.

765
00:35:00,830 --> 00:35:02,370
Now, I say the web
is pretty old.

766
00:35:02,370 --> 00:35:03,980
It's not premature anymore.

767
00:35:03,980 --> 00:35:06,250
It's definitely an area for
active development, but it's

768
00:35:06,250 --> 00:35:08,120
hard to do it correctly.

769
00:35:08,120 --> 00:35:11,420
So those are sort of tagged as
layout-related properties, and

770
00:35:11,420 --> 00:35:14,160
so the layouts that they trigger
are shorter than other

771
00:35:14,160 --> 00:35:16,584
layouts, but they
still happen,

772
00:35:16,584 --> 00:35:16,981
AUDIENCE: Got it.

773
00:35:16,981 --> 00:35:17,380
Thank you.

774
00:35:17,380 --> 00:35:19,570
CHELSEA DERRICK: Sure.

775
00:35:19,570 --> 00:35:20,470
AUDIENCE: Hi.

776
00:35:20,470 --> 00:35:26,460
I'm wondering, how does SVG play
a role, if you know, in

777
00:35:26,460 --> 00:35:27,240
all this stuff?

778
00:35:27,240 --> 00:35:28,530
CHELSEA DERRICK: Yeah, that's
a great question.

779
00:35:28,530 --> 00:35:31,960
I myself don't have a ton
of experience with SVG.

780
00:35:31,960 --> 00:35:34,580
Right now, SVG, Canvas,
HTML, these are all

781
00:35:34,580 --> 00:35:36,610
very divorced concepts.

782
00:35:36,610 --> 00:35:40,300
They don't share a common layer
underneath anything.

783
00:35:40,300 --> 00:35:42,980
There's a lot of work being
done right now.

784
00:35:42,980 --> 00:35:46,970
Actually, there's a Chrome team
in Google who's working

785
00:35:46,970 --> 00:35:50,240
on a spec for animations that
will have a common layer

786
00:35:50,240 --> 00:35:51,840
underneath all of these
things, but

787
00:35:51,840 --> 00:35:52,880
we're not there yet.

788
00:35:52,880 --> 00:35:54,630
So they're all completely
separate code

789
00:35:54,630 --> 00:35:55,990
branches at the moment.

790
00:35:55,990 --> 00:35:58,460
So things that are going to
work on HTML and CSS don't

791
00:35:58,460 --> 00:36:02,450
necessarily work on
SVG or Canvas.

792
00:36:02,450 --> 00:36:04,185
AUDIENCE: Thanks.

793
00:36:04,185 --> 00:36:05,230
CHELSEA DERRICK: All right.

794
00:36:05,230 --> 00:36:08,470
We'll see if anyone happened to
be live streaming and asked

795
00:36:08,470 --> 00:36:09,230
me questions.

796
00:36:09,230 --> 00:36:11,010
Sweet.

797
00:36:11,010 --> 00:36:12,910
I was kind of worried
that it was going to

798
00:36:12,910 --> 00:36:17,080
be unmoderated content.

799
00:36:17,080 --> 00:36:19,460
Are there any other questions?

800
00:36:19,460 --> 00:36:19,800
All right.

801
00:36:19,800 --> 00:36:21,120
Thank you so much
for attending.

802
00:36:21,120 --> 00:36:25,532
[APPLAUSE]

