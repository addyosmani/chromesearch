1
00:00:00,000 --> 00:00:02,120

2
00:00:02,120 --> 00:00:03,120
XAVIER BARRADE: We are
here to talk to you

3
00:00:03,120 --> 00:00:06,160
about JAM with Chrome.

4
00:00:06,160 --> 00:00:08,930
So when we started the project,
we wanted to make

5
00:00:08,930 --> 00:00:11,460
something that would allow
people to come together around

6
00:00:11,460 --> 00:00:13,240
the Chrome browser.

7
00:00:13,240 --> 00:00:16,300
But, of course, most people
don't treat the Chrome browser

8
00:00:16,300 --> 00:00:19,910
as a thing and they're
interested in things like

9
00:00:19,910 --> 00:00:22,990
food, sport, and in
this case, music.

10
00:00:22,990 --> 00:00:25,830
And we wondered if it would be
possible to let people go on

11
00:00:25,830 --> 00:00:28,470
the website, invite their
friends, and play music in

12
00:00:28,470 --> 00:00:31,260
real time instantly, so
kind of be a rockstar.

13
00:00:31,260 --> 00:00:34,010

14
00:00:34,010 --> 00:00:36,680
So as you can see, there is a
URL on top of the slides, so

15
00:00:36,680 --> 00:00:39,160
you can have a play with the
website while we talk, but

16
00:00:39,160 --> 00:00:41,280
please keep a bit of your
attention for us.

17
00:00:41,280 --> 00:00:43,990
And in a few minutes, we will
make sure to demo, and at the

18
00:00:43,990 --> 00:00:47,830
end of the talk we will
jam with you.

19
00:00:47,830 --> 00:00:49,870
So when we started the project,
things looked quite

20
00:00:49,870 --> 00:00:56,230
simple, but as we progressed,
it got more exciting, but it

21
00:00:56,230 --> 00:00:57,380
also got bigger.

22
00:00:57,380 --> 00:01:00,160
So just so you know, there's
19 different instruments in

23
00:01:00,160 --> 00:01:01,660
JAM, and we have
[? to sample ?]

24
00:01:01,660 --> 00:01:05,700
more than 1,000 songs
from instruments.

25
00:01:05,700 --> 00:01:08,520
And as you can imagine, the
project had its fair share of

26
00:01:08,520 --> 00:01:11,580
complexity and challenges.

27
00:01:11,580 --> 00:01:14,126
So we're going to start to demo
the website so you know

28
00:01:14,126 --> 00:01:16,050
what we're talking about, and
then we will talk about the

29
00:01:16,050 --> 00:01:18,650
main challenges we faced
when we built it.

30
00:01:18,650 --> 00:01:24,080

31
00:01:24,080 --> 00:01:25,810
So this is JAM with Chrome.

32
00:01:25,810 --> 00:01:27,060
I enter the website.

33
00:01:27,060 --> 00:01:30,610

34
00:01:30,610 --> 00:01:34,840
[MUSIC PLAYING]

35
00:01:34,840 --> 00:01:36,260
XAVIER BARRADE: So as
I enter [INAUDIBLE]

36
00:01:36,260 --> 00:01:37,170
19 different instruments.

37
00:01:37,170 --> 00:01:40,055
You have drums, you have
drum machines.

38
00:01:40,055 --> 00:01:46,750

39
00:01:46,750 --> 00:01:48,000
Different kind of keyboards.

40
00:01:48,000 --> 00:01:55,070

41
00:01:55,070 --> 00:01:56,320
Bass guitars.

42
00:01:56,320 --> 00:02:01,990

43
00:02:01,990 --> 00:02:03,240
And of course, electric
guitars.

44
00:02:03,240 --> 00:02:06,670

45
00:02:06,670 --> 00:02:07,920
I'm going to start
with the drums.

46
00:02:07,920 --> 00:02:17,320

47
00:02:17,320 --> 00:02:21,310
So a JAM room was just created
right now, and now I'm in it.

48
00:02:21,310 --> 00:02:23,117
And as you can see,
the drum is here.

49
00:02:23,117 --> 00:02:24,580
I can make noise.

50
00:02:24,580 --> 00:02:27,600
I can stop and play music
really quickly.

51
00:02:27,600 --> 00:02:35,180

52
00:02:35,180 --> 00:02:38,600
So, of course, it wouldn't be
a jam if I'm alone, so I'm

53
00:02:38,600 --> 00:02:40,200
going to invite a friend.

54
00:02:40,200 --> 00:02:43,740
So I'm going to invite Oskar.

55
00:02:43,740 --> 00:02:47,430
So there's a shortcut that
you can send by instant

56
00:02:47,430 --> 00:02:48,765
messaging to anyone.

57
00:02:48,765 --> 00:02:53,380

58
00:02:53,380 --> 00:02:56,560
So Oskar just entered the
shortcut on his computer, and

59
00:02:56,560 --> 00:02:59,870
as we see, we can already see
that he's going to come.

60
00:02:59,870 --> 00:03:03,272

61
00:03:03,272 --> 00:03:08,480
OSKAR ERIKSSON: So I'm going to
play some guitar, because

62
00:03:08,480 --> 00:03:09,611
I'm cooler than you.

63
00:03:09,611 --> 00:03:10,560
XAVIER BARRADE: I like drums.

64
00:03:10,560 --> 00:03:11,600
So Oskar is here.

65
00:03:11,600 --> 00:03:13,820
I'm the drummer, he's the
guitarist, and we're going to

66
00:03:13,820 --> 00:03:16,747
give you a little demo.

67
00:03:16,747 --> 00:03:48,126
[ROCK AND ROLL MUSIC PLAYING]

68
00:03:48,126 --> 00:03:48,800
XAVIER BARRADE: Thank you.

69
00:03:48,800 --> 00:03:50,860
So because there's 19 different
instruments, you

70
00:03:50,860 --> 00:03:53,690
cannot only play rock and roll,
but you can play lots of

71
00:03:53,690 --> 00:03:54,650
different kinds of music.

72
00:03:54,650 --> 00:03:58,936
So for example, let's play
some tasty techno music.

73
00:03:58,936 --> 00:04:01,185
So I'm taking a keyboard.

74
00:04:01,185 --> 00:04:03,150
Oskar is going to get
a drum machine.

75
00:04:03,150 --> 00:04:05,750

76
00:04:05,750 --> 00:04:06,671
Here we go.

77
00:04:06,671 --> 00:04:32,720
[TECHNO MUSIC PLAYING]

78
00:04:32,720 --> 00:04:34,530
XAVIER BARRADE: So this is
basically what JAM is.

79
00:04:34,530 --> 00:04:36,840
So this was the easy mode where
you play with patterns,

80
00:04:36,840 --> 00:04:38,140
and there's also play mode--

81
00:04:38,140 --> 00:04:41,020
Pro Mode where you can
play note by note.

82
00:04:41,020 --> 00:04:43,730
So as you can imagine, we had
lots of challenging building

83
00:04:43,730 --> 00:04:44,560
this project.

84
00:04:44,560 --> 00:04:47,340
So today, we're going to talk
about the two main we faced.

85
00:04:47,340 --> 00:04:50,590
So first, let's go to Backstage,
which is auto

86
00:04:50,590 --> 00:04:52,960
creator of virtual JAM room.

87
00:04:52,960 --> 00:04:53,920
[INAUDIBLE]

88
00:04:53,920 --> 00:04:57,810
it is possible and you allow
people to join it.

89
00:04:57,810 --> 00:05:00,430
And then there's the music,
which is, how do you create a

90
00:05:00,430 --> 00:05:03,280
music tool with 19 different
instruments.

91
00:05:03,280 --> 00:05:05,680
All the instrument a
full set of tones.

92
00:05:05,680 --> 00:05:11,210
They have different effects
just using web technology.

93
00:05:11,210 --> 00:05:13,280
So first, we serve
the application.

94
00:05:13,280 --> 00:05:17,040
So as you can see here, the
client is going to request

95
00:05:17,040 --> 00:05:20,770
files from app engine, so he's
going to get to the CSS or

96
00:05:20,770 --> 00:05:23,040
HTML and the Javascript.

97
00:05:23,040 --> 00:05:27,080
And notice the device which are
called from the HTML are

98
00:05:27,080 --> 00:05:29,540
served from cloud storage.

99
00:05:29,540 --> 00:05:32,500
And then each client creates or
joins a jam session, which

100
00:05:32,500 --> 00:05:36,280
is hosted on a Websocket
server.

101
00:05:36,280 --> 00:05:40,420
And this Websocket server in
different data centers across

102
00:05:40,420 --> 00:05:41,670
the world to optimize
the latency.

103
00:05:41,670 --> 00:05:44,920

104
00:05:44,920 --> 00:05:47,680
The App Engine needs to know
what all these Websocket

105
00:05:47,680 --> 00:05:51,090
servers are up to, so what
happens is, every five seconds

106
00:05:51,090 --> 00:05:53,610
every Websocket server is going
to set an outbeat to App

107
00:05:53,610 --> 00:05:57,560
Engine, and this outbeat
contains the IP address, the

108
00:05:57,560 --> 00:06:00,490
zone, the CP load, the
number of game and

109
00:06:00,490 --> 00:06:03,450
the number of clients.

110
00:06:03,450 --> 00:06:06,580
And then, the client is going to
request this listed server

111
00:06:06,580 --> 00:06:07,600
to App Engine.

112
00:06:07,600 --> 00:06:10,820
So App Engine gives them the
free lowest latency server

113
00:06:10,820 --> 00:06:13,180
from each zone.

114
00:06:13,180 --> 00:06:15,980
Then the client is going to
ping the servers, so he's

115
00:06:15,980 --> 00:06:18,690
going to ping them five times
each and he's going to select

116
00:06:18,690 --> 00:06:21,600
the one with the best
performance, so which is the

117
00:06:21,600 --> 00:06:25,420
lowest ping and the least
amount of packets lost.

118
00:06:25,420 --> 00:06:28,530
And when the client selected a
server, informed App Engine of

119
00:06:28,530 --> 00:06:31,570
the selection, the jam
session is created.

120
00:06:31,570 --> 00:06:34,875
And the client gets a shortcut
URL which he an share to

121
00:06:34,875 --> 00:06:37,260
invite people to his session.

122
00:06:37,260 --> 00:06:39,210
And now, I'm going to let Oskar
talk to you about other

123
00:06:39,210 --> 00:06:40,460
client things.

124
00:06:40,460 --> 00:06:42,980

125
00:06:42,980 --> 00:06:46,750
OSKAR ERIKSSON: So as any decent
musician will tell you,

126
00:06:46,750 --> 00:06:49,550
one of the most important things
when playing together

127
00:06:49,550 --> 00:06:53,320
is to play in sync for the
music not to stink.

128
00:06:53,320 --> 00:06:57,550
So this is one of the biggest
challenges we had in JAM.

129
00:06:57,550 --> 00:07:00,820
How do we enable people at
totally different locations

130
00:07:00,820 --> 00:07:03,390
across the globe to play
together and hear the same

131
00:07:03,390 --> 00:07:04,640
thing at the same time?

132
00:07:04,640 --> 00:07:07,900

133
00:07:07,900 --> 00:07:10,915
Excuse me.

134
00:07:10,915 --> 00:07:13,740
And an audio system will always
have a certain amount

135
00:07:13,740 --> 00:07:18,690
of latency, and that is the time
from when you press a key

136
00:07:18,690 --> 00:07:20,730
until you actually
hear the notes.

137
00:07:20,730 --> 00:07:24,170
And we really especially have
a lot of latency when the

138
00:07:24,170 --> 00:07:26,020
audio system is distributed
across

139
00:07:26,020 --> 00:07:28,970
continents like in chat.

140
00:07:28,970 --> 00:07:32,950
So we did some experimentation
and we came up with some

141
00:07:32,950 --> 00:07:37,970
numbers, and we say that in the
Pro Mode, we can have up

142
00:07:37,970 --> 00:07:41,960
to 100 milliseconds of latency,
and in the easy mode,

143
00:07:41,960 --> 00:07:45,560
you can accept upwards of 600
milliseconds of latency before

144
00:07:45,560 --> 00:07:48,640
you start feeling like you're
losing control.

145
00:07:48,640 --> 00:07:51,240
And these are actually rather
high numbers when talking

146
00:07:51,240 --> 00:07:54,200
about audio, but the
mind adapts and

147
00:07:54,200 --> 00:07:56,760
compensates rather quickly.

148
00:07:56,760 --> 00:07:59,250
And also, these numbers aren't
impossible to achieve with

149
00:07:59,250 --> 00:08:00,250
Websockets.

150
00:08:00,250 --> 00:08:02,960
So what we had to do was just to
make sure that the clients

151
00:08:02,960 --> 00:08:05,580
are in perfect sync once
they start playing.

152
00:08:05,580 --> 00:08:08,950
So how did we do that?

153
00:08:08,950 --> 00:08:12,570
The first thing you need to
know is, no, we don't swim

154
00:08:12,570 --> 00:08:14,770
actual order files across
the network.

155
00:08:14,770 --> 00:08:16,630
We send events that
trigger play back

156
00:08:16,630 --> 00:08:18,810
on the local clients.

157
00:08:18,810 --> 00:08:21,420
And most of these events needs
to be handled at the exact

158
00:08:21,420 --> 00:08:23,660
same time at all times
for the players to

159
00:08:23,660 --> 00:08:25,110
hear the same thing.

160
00:08:25,110 --> 00:08:27,370
And for this to happen,
we need to have

161
00:08:27,370 --> 00:08:28,620
a common time reference.

162
00:08:28,620 --> 00:08:31,720

163
00:08:31,720 --> 00:08:34,320
So to establish this common time
reference, we developed

164
00:08:34,320 --> 00:08:37,669
the sync algorithm that we run
each time a player leaves or

165
00:08:37,669 --> 00:08:40,039
joins the jam session.

166
00:08:40,039 --> 00:08:42,809
And each client has a local
time, but we need a common

167
00:08:42,809 --> 00:08:46,040
time that these local times
can be related to.

168
00:08:46,040 --> 00:08:49,720
So when we say play at this
time, everyone knows which

169
00:08:49,720 --> 00:08:51,820
time we mean.

170
00:08:51,820 --> 00:08:55,240
And before I move on, thinking
about time can be very

171
00:08:55,240 --> 00:08:57,870
confusing, but this will be
recorded and available

172
00:08:57,870 --> 00:08:58,340
afterwards.

173
00:08:58,340 --> 00:09:02,580
So don't sweat it if and
when you get lost.

174
00:09:02,580 --> 00:09:06,690
So to sync the clients, we start
off by making 10 sets of

175
00:09:06,690 --> 00:09:10,510
pings to the WebSocket
server, like so.

176
00:09:10,510 --> 00:09:13,510
First, the client sends a
message with its own local

177
00:09:13,510 --> 00:09:18,340
time, and the server receives
this and sends back the

178
00:09:18,340 --> 00:09:21,805
received time as well as the
local time on the server.

179
00:09:21,805 --> 00:09:25,240

180
00:09:25,240 --> 00:09:28,330
And for each time we
do this, the client

181
00:09:28,330 --> 00:09:30,470
calculates two values.

182
00:09:30,470 --> 00:09:32,600
The time it took for the message
to go back and forth,

183
00:09:32,600 --> 00:09:35,590
which is the travel time.

184
00:09:35,590 --> 00:09:38,390
And the difference between the
local time and time on the

185
00:09:38,390 --> 00:09:41,680
server, which is the
time offset.

186
00:09:41,680 --> 00:09:44,860
And when we have done this 10
times, we calculate the mean

187
00:09:44,860 --> 00:09:47,980
value for the travel times,
which is this client's

188
00:09:47,980 --> 00:09:52,560
latency, and send that
value to the server.

189
00:09:52,560 --> 00:09:55,330
We then calculate the mean value
for the time offsets,

190
00:09:55,330 --> 00:09:57,100
which is the difference between
the local time and the

191
00:09:57,100 --> 00:09:59,040
server time.

192
00:09:59,040 --> 00:10:01,290
And when all the clients have
done this and sent their

193
00:10:01,290 --> 00:10:05,470
latency to the server, the
server sends out the highest

194
00:10:05,470 --> 00:10:08,740
latency reported for all
the clients to use.

195
00:10:08,740 --> 00:10:11,400
And this means that all clients
should be able to

196
00:10:11,400 --> 00:10:14,450
handle events at the exact same
time since they have the

197
00:10:14,450 --> 00:10:18,550
same latency as the client with
the poorest connection,

198
00:10:18,550 --> 00:10:22,300
and they all know the time of
their own local time in

199
00:10:22,300 --> 00:10:25,260
relation to the server time.

200
00:10:25,260 --> 00:10:28,140
So now that we have a common
time reference, we can start

201
00:10:28,140 --> 00:10:30,920
sending messages
back and forth.

202
00:10:30,920 --> 00:10:35,120
And so let's see how we
calculate these times.

203
00:10:35,120 --> 00:10:39,400
So when an event is to be
broadcasted over the network,

204
00:10:39,400 --> 00:10:43,150
we calculate a local event time,
it should happen now,

205
00:10:43,150 --> 00:10:46,270
and then we add the server
offset to that time, and then

206
00:10:46,270 --> 00:10:49,840
we have the event time expressed
in server time.

207
00:10:49,840 --> 00:10:52,760
And the server doesn't really
care what an event-- what it's

208
00:10:52,760 --> 00:10:54,440
all about, it just broadcasts
it to all

209
00:10:54,440 --> 00:10:56,280
the connected clients.

210
00:10:56,280 --> 00:10:59,410
And then, when it's received
on another client, that

211
00:10:59,410 --> 00:11:02,320
client's server offset is
subtracted and they have the

212
00:11:02,320 --> 00:11:05,500
event time expressed in that
client's local time.

213
00:11:05,500 --> 00:11:09,460
And that's where the
magic happen.

214
00:11:09,460 --> 00:11:12,850
On the client from which the
event originates, the event is

215
00:11:12,850 --> 00:11:16,380
scheduled locally using the same
calculations, but without

216
00:11:16,380 --> 00:11:19,400
sending the event over the
network, which makes sure that

217
00:11:19,400 --> 00:11:22,290
the time will always be
consistent for what the player

218
00:11:22,290 --> 00:11:26,740
does herself, even if
the network acts up.

219
00:11:26,740 --> 00:11:30,520
And if the player is alone in a
jam session, the application

220
00:11:30,520 --> 00:11:33,310
goes into a solo mode where no
events are sent across the

221
00:11:33,310 --> 00:11:37,520
network and the latency is set
as low as possible, which

222
00:11:37,520 --> 00:11:38,890
enables the users to play the

223
00:11:38,890 --> 00:11:40,470
instruments with great precision.

224
00:11:40,470 --> 00:11:43,180

225
00:11:43,180 --> 00:11:45,020
XAVIER BARRADE: So one of the
things that was important for

226
00:11:45,020 --> 00:11:48,950
us when we worked on JAM was
that anybody could come and

227
00:11:48,950 --> 00:11:52,640
play instantly, and we also
wanted a real musician, who

228
00:11:52,640 --> 00:11:56,930
can play real music, to be
able to do it on JAM.

229
00:11:56,930 --> 00:12:01,280
So I'm going to demo easy mode
quickly, and then Oskar is

230
00:12:01,280 --> 00:12:04,550
going to explain to you
how we made it.

231
00:12:04,550 --> 00:12:06,870
So this is easy mode
work with patterns.

232
00:12:06,870 --> 00:12:10,560
Imagine the tracks and each time
you click on a different

233
00:12:10,560 --> 00:12:13,210
part of the drum, it's going
from one track to another.

234
00:12:13,210 --> 00:12:14,460
So for example--

235
00:12:14,460 --> 00:12:29,990

236
00:12:29,990 --> 00:12:31,650
OSKAR ERIKSSON: So what you
just heard is not a

237
00:12:31,650 --> 00:12:34,560
prerecorded piece, it's
a sampler playing the

238
00:12:34,560 --> 00:12:36,540
notes in real time.

239
00:12:36,540 --> 00:12:39,200
And I'll talk about the sampler
in a bit, but first,

240
00:12:39,200 --> 00:12:42,560
let's talk about
these patterns.

241
00:12:42,560 --> 00:12:45,510
So the concept of a pattern
is really simple.

242
00:12:45,510 --> 00:12:48,430
It's just a collection of
events that contain

243
00:12:48,430 --> 00:12:51,040
information about what note
should we play that together

244
00:12:51,040 --> 00:12:53,270
make up a piece of music.

245
00:12:53,270 --> 00:12:57,020
And we used MIDI as the format
for expressing what these

246
00:12:57,020 --> 00:12:59,200
patterns should sound like.

247
00:12:59,200 --> 00:13:01,960
And by parsing these MIDI files,
the application got a

248
00:13:01,960 --> 00:13:04,740
collection of events, the
information about what notes

249
00:13:04,740 --> 00:13:08,700
should be played and when, and
any other meet data needed to

250
00:13:08,700 --> 00:13:11,620
make the sampler play
the notes properly.

251
00:13:11,620 --> 00:13:14,790
So we start by downloading these
MIDI files to the client

252
00:13:14,790 --> 00:13:19,400
and parse them there, and
keeping the patterns as MIDI

253
00:13:19,400 --> 00:13:22,140
gives us an easy workflow since
our music editors can

254
00:13:22,140 --> 00:13:24,900
use the tools that they
are already used to.

255
00:13:24,900 --> 00:13:29,160
And also MIDI is a lightweight
format when compared to

256
00:13:29,160 --> 00:13:32,650
keeping the patterns as
JSON for example.

257
00:13:32,650 --> 00:13:35,200
So when we have parsed these
patterns and we're ready to

258
00:13:35,200 --> 00:13:38,250
start playing, we thought a
pattern engine that loops,

259
00:13:38,250 --> 00:13:41,820
much like a game engine loops,
if that's more familiar to

260
00:13:41,820 --> 00:13:45,270
you, and then the engine looks
ahead into a point in the

261
00:13:45,270 --> 00:13:49,820
future, maybe 30 milliseconds
or so, for events in the

262
00:13:49,820 --> 00:13:52,770
pattern that we're playing that
will happen between now

263
00:13:52,770 --> 00:13:54,680
and that point in the future.

264
00:13:54,680 --> 00:13:57,630
And if there are any such
events, we send those to the

265
00:13:57,630 --> 00:14:00,850
sampler that are playing
the pattern.

266
00:14:00,850 --> 00:14:03,280
Now, we don't send all the
events that come from the

267
00:14:03,280 --> 00:14:06,440
pattern over the network.

268
00:14:06,440 --> 00:14:10,290
We'd rather just send events
that start playback on all the

269
00:14:10,290 --> 00:14:12,900
clients at the same
time instead.

270
00:14:12,900 --> 00:14:15,600
And when a player, for example,
changes the stream on

271
00:14:15,600 --> 00:14:20,100
the guitar, an event for that
interaction is sent to all the

272
00:14:20,100 --> 00:14:23,800
connected clients, and we have
a logic unit that calculates

273
00:14:23,800 --> 00:14:27,020
which pattern we should switch
to based on what sting and

274
00:14:27,020 --> 00:14:28,830
where on that string interaction
happened.

275
00:14:28,830 --> 00:14:31,340

276
00:14:31,340 --> 00:14:34,880
So our pattern engine allows
us to find where we want to

277
00:14:34,880 --> 00:14:39,090
add the new pattern, be it the
next bar, next beat, or as in

278
00:14:39,090 --> 00:14:41,750
JAM, as soon as possible.

279
00:14:41,750 --> 00:14:44,980
And if you think of the pattern
engine as a musician,

280
00:14:44,980 --> 00:14:48,210
and the logic engine as the
conductor, one can imagine the

281
00:14:48,210 --> 00:14:50,690
logic engine replacing the sheet
music for the pattern

282
00:14:50,690 --> 00:14:53,820
engine from the old pattern to
the new one and the pattern

283
00:14:53,820 --> 00:14:56,610
engine is no more
wiser for it.

284
00:14:56,610 --> 00:14:59,030
So when the pattern engine then
looks into the future for

285
00:14:59,030 --> 00:15:02,190
upcoming events, it sees events
from the new pattern,

286
00:15:02,190 --> 00:15:04,440
and we get the seamless
transition

287
00:15:04,440 --> 00:15:05,690
between those patterns.

288
00:15:05,690 --> 00:15:08,050

289
00:15:08,050 --> 00:15:11,490
XAVIER BARRADE: So as I said,
we wanted a good musician to

290
00:15:11,490 --> 00:15:13,540
be able to play what they wanted
so this was a really

291
00:15:13,540 --> 00:15:16,045
challenging part of the tour
because I need to demo the Pro

292
00:15:16,045 --> 00:15:17,740
Mode to you.

293
00:15:17,740 --> 00:15:22,370
So it's basically, like on
almost every music software,

294
00:15:22,370 --> 00:15:25,560
one key I get a one note, so I'm
going to play you a little

295
00:15:25,560 --> 00:15:26,945
non-copyrighted piece
of music.

296
00:15:26,945 --> 00:15:28,195
It may be really bad.

297
00:15:28,195 --> 00:15:39,600

298
00:15:39,600 --> 00:15:41,980
OSKAR ERIKSSON: So as you heard
Pro Mode takes more

299
00:15:41,980 --> 00:15:47,360
skill from the user, but it's
much easier for the developer.

300
00:15:47,360 --> 00:15:51,610
So instead of having a logic
unit and a pattern engine, we

301
00:15:51,610 --> 00:15:54,460
simply create the same kind
of events based on user

302
00:15:54,460 --> 00:15:57,770
interaction with the
UI instead .

303
00:15:57,770 --> 00:16:01,490
And unlike the events that come
from the patterns, these

304
00:16:01,490 --> 00:16:03,710
interaction events are all
sent one by one over the

305
00:16:03,710 --> 00:16:06,800
network, but still scheduled
locally from the client from

306
00:16:06,800 --> 00:16:08,880
which it came.

307
00:16:08,880 --> 00:16:12,090
So let's talk about
the sampler.

308
00:16:12,090 --> 00:16:15,110
A sampler is an instrument
that plays

309
00:16:15,110 --> 00:16:17,220
prerecorded audio files.

310
00:16:17,220 --> 00:16:21,430
And in its most simple form, we
assign one sample per key

311
00:16:21,430 --> 00:16:24,350
on a keyboard.

312
00:16:24,350 --> 00:16:29,000
In JAM, we took this concept one
step further, and used the

313
00:16:29,000 --> 00:16:32,950
playback rates property of the
audio source nodes to pitch

314
00:16:32,950 --> 00:16:36,300
the samples, and this allows
us to use fewer samples to

315
00:16:36,300 --> 00:16:40,320
cover bigger frequency ranges.

316
00:16:40,320 --> 00:16:43,670
And this cuts the number of
samples we have to use by a

317
00:16:43,670 --> 00:16:46,420
lot and also the rate of the
application obviously.

318
00:16:46,420 --> 00:16:49,140

319
00:16:49,140 --> 00:16:51,360
And the events for starting
notes that we've been sending

320
00:16:51,360 --> 00:16:54,290
back and forth over the network
and generated by a

321
00:16:54,290 --> 00:16:57,200
pattern, so user interaction,
all end up at the

322
00:16:57,200 --> 00:16:58,870
sampler in the end.

323
00:16:58,870 --> 00:17:03,130
And these events contain a start
time, a stop time, a

324
00:17:03,130 --> 00:17:06,710
velocity, and what
note to play.

325
00:17:06,710 --> 00:17:09,540
And when we get one of these
events, the sampler checks

326
00:17:09,540 --> 00:17:12,780
which sample relates to this
note that we're going to play.

327
00:17:12,780 --> 00:17:15,890
So in this case, we're looking
for an F note, and we can see

328
00:17:15,890 --> 00:17:19,470
that sample S3 is the
one we should play.

329
00:17:19,470 --> 00:17:22,140
We can then start it with the
proper playback rate setting

330
00:17:22,140 --> 00:17:24,460
at the given start time.

331
00:17:24,460 --> 00:17:28,874
And this method of feeding the
sampler events gives us a neat

332
00:17:28,874 --> 00:17:32,560
separation of code and
instant reusability.

333
00:17:32,560 --> 00:17:36,630
The sampler just smiles and
plays whatever it's told, just

334
00:17:36,630 --> 00:17:37,880
like a drummer.

335
00:17:37,880 --> 00:17:40,140

336
00:17:40,140 --> 00:17:43,270
So, of course, we didn't
stop there in JAM.

337
00:17:43,270 --> 00:17:46,320
Since we get a velocity property
with our events, we

338
00:17:46,320 --> 00:17:50,500
can add another layer of realism
by having multiple

339
00:17:50,500 --> 00:17:53,630
variations of the same sample.

340
00:17:53,630 --> 00:17:56,370
So here we have three different
velocity levels of

341
00:17:56,370 --> 00:17:59,410
samples stacked on each other,
which means that when we

342
00:17:59,410 --> 00:18:02,440
recorded these instruments, we
had to make three samples for

343
00:18:02,440 --> 00:18:06,310
each note at different
velocities.

344
00:18:06,310 --> 00:18:09,370
So if you get a note with a low
velocity, we choose a soft

345
00:18:09,370 --> 00:18:13,610
sample, and a higher velocity,
we choose the harder sample.

346
00:18:13,610 --> 00:18:18,960
And to illustrate, we're going
to play you a piano, and what

347
00:18:18,960 --> 00:18:22,420
you're going to hear is first, a
low velocity note and then a

348
00:18:22,420 --> 00:18:25,620
high velocity note.

349
00:18:25,620 --> 00:18:28,410
As soon as Xavier finds
the right file.

350
00:18:28,410 --> 00:18:39,790

351
00:18:39,790 --> 00:18:40,870
Here we go.

352
00:18:40,870 --> 00:18:42,230
XAVIER BARRADE: The piano
sounds like this.

353
00:18:42,230 --> 00:18:45,520

354
00:18:45,520 --> 00:18:48,810
[PIANO MUSIC PLAYING]

355
00:18:48,810 --> 00:18:49,660
OSKAR ERIKSSON: So let's
play that again.

356
00:18:49,660 --> 00:18:51,773
First, the soft sample
then a hard sample.

357
00:18:51,773 --> 00:18:57,570
[PIANO MUSIC PLAYING]

358
00:18:57,570 --> 00:19:00,720
OSKAR ERIKSSON: So to give you
another example of the level

359
00:19:00,720 --> 00:19:02,830
of detail that went
into the project.

360
00:19:02,830 --> 00:19:05,990
Let's have a look at playing
the guitar in Pro Mode.

361
00:19:05,990 --> 00:19:09,650
So if you first play one note
on one string, and then play

362
00:19:09,650 --> 00:19:12,070
another note on the same string
while still keeping the

363
00:19:12,070 --> 00:19:16,050
first key pressed down, you get
another variation of the

364
00:19:16,050 --> 00:19:19,810
sample called a puller note if
there are any guitarists here,

365
00:19:19,810 --> 00:19:21,743
and it sounds like this.

366
00:19:21,743 --> 00:19:25,054
[GUITAR NOTES PLAYING]

367
00:19:25,054 --> 00:19:27,490
OSKAR ERIKSSON: So what you
first heard are two notes

368
00:19:27,490 --> 00:19:30,830
played normally, and then, on
the second round, it's one

369
00:19:30,830 --> 00:19:33,210
note played normally and
then a puller note.

370
00:19:33,210 --> 00:19:37,800
[GUITAR NOTES PLAYING]

371
00:19:37,800 --> 00:19:40,370
OSKAR ERIKSSON: And these are
the kind of nuances that are

372
00:19:40,370 --> 00:19:43,150
really important to create
realistic instruments, but

373
00:19:43,150 --> 00:19:46,430
it's also the kind of details
that eats up all of your

374
00:19:46,430 --> 00:19:48,240
developing time if you're
not careful.

375
00:19:48,240 --> 00:19:49,780
Take it from me.

376
00:19:49,780 --> 00:19:53,280
And so on top of this, each
instrument has two sets of

377
00:19:53,280 --> 00:19:58,010
effects that are generated with
Web Audio in real time, .

378
00:19:58,010 --> 00:20:00,660
And Xavier is going to give
you a demo of that.

379
00:20:00,660 --> 00:20:03,020
XAVIER BARRADE: Yeah, so the
effect is one of the coolest

380
00:20:03,020 --> 00:20:05,680
parts in JAM, especially if you
consider that it was done

381
00:20:05,680 --> 00:20:07,420
entirely using Web Audio.

382
00:20:07,420 --> 00:20:11,090
So to demonstrate, I'm going to
pick the best instrument of

383
00:20:11,090 --> 00:20:12,515
the website, which is
the metallic guitar.

384
00:20:12,515 --> 00:20:16,820

385
00:20:16,820 --> 00:20:20,980
So if you play a metal guitar
without any effect, it doesn't

386
00:20:20,980 --> 00:20:22,960
sound very rock and roll.

387
00:20:22,960 --> 00:20:29,150
[GUITAR PLAYING]

388
00:20:29,150 --> 00:20:31,600
XAVIER BARRADE: But you can
see that I use a slight

389
00:20:31,600 --> 00:20:35,516
[INAUDIBLE] of distortion
up to the max, and now.

390
00:20:35,516 --> 00:20:44,390
[GUITAR PLAYING]

391
00:20:44,390 --> 00:20:46,700
XAVIER BARRADE: And if I want a
pretty good spacey feeling,

392
00:20:46,700 --> 00:20:48,640
I can just put the flanger up.

393
00:20:48,640 --> 00:20:52,020

394
00:20:52,020 --> 00:21:02,840
[GUITAR PLAYING]

395
00:21:02,840 --> 00:21:07,010
OSKAR ERIKSSON: So first, let's
talk a bit basic about

396
00:21:07,010 --> 00:21:08,250
what it is.

397
00:21:08,250 --> 00:21:11,980
So to explain Web Audio for
someone who's never used it, I

398
00:21:11,980 --> 00:21:15,290
think that the concept of an
assembly line often brings the

399
00:21:15,290 --> 00:21:16,490
bird into nest.

400
00:21:16,490 --> 00:21:19,380
So you have an assembly line
with agents that produce and

401
00:21:19,380 --> 00:21:23,280
refine a product, and
in Web Audio, these

402
00:21:23,280 --> 00:21:25,450
agents are called nodes.

403
00:21:25,450 --> 00:21:28,440
And there are nodes for
generating the raw material,

404
00:21:28,440 --> 00:21:32,640
or audio that is, and nodes
for modifying the audio.

405
00:21:32,640 --> 00:21:39,950

406
00:21:39,950 --> 00:21:47,900
And this is just like
the keynote.

407
00:21:47,900 --> 00:21:49,200
Sorry.

408
00:21:49,200 --> 00:21:53,730
And so there are quite a
manageable number of these

409
00:21:53,730 --> 00:21:57,520
nodes natively in Web Audio,
but for more advanced audio

410
00:21:57,520 --> 00:22:01,290
applications, you might want
to create your own.

411
00:22:01,290 --> 00:22:04,450
And to enable us to do this in
JAM, we created this model

412
00:22:04,450 --> 00:22:08,350
that we used, which allows us to
use our custom nodes, much

413
00:22:08,350 --> 00:22:09,600
like the native nodes.

414
00:22:09,600 --> 00:22:15,340

415
00:22:15,340 --> 00:22:18,610
So we have an input and an
output property, and we have a

416
00:22:18,610 --> 00:22:20,200
connect and disconnect method.

417
00:22:20,200 --> 00:22:22,360
And that's it.

418
00:22:22,360 --> 00:22:26,480
So to use it, we do exactly the
same as we do with normal

419
00:22:26,480 --> 00:22:29,620
nodes , with the exception that
we need to connect to the

420
00:22:29,620 --> 00:22:35,110
custom nodes input properly
instead of the node itself.

421
00:22:35,110 --> 00:22:38,000
And the conception model
is really easy and

422
00:22:38,000 --> 00:22:41,540
it looks like this.

423
00:22:41,540 --> 00:22:44,780
So here we have a gain node
and another gain node, and

424
00:22:44,780 --> 00:22:47,870
then the custom node
in the middle.

425
00:22:47,870 --> 00:22:52,070
So using this model, we can
create our samplers or maybe,

426
00:22:52,070 --> 00:22:53,340
our own audio effects.

427
00:22:53,340 --> 00:22:57,810
So let's create a
delay effect.

428
00:22:57,810 --> 00:23:00,670
So the structure is really
similar to the basic model.

429
00:23:00,670 --> 00:23:04,790
We have just added a delay
node, and a wet level and

430
00:23:04,790 --> 00:23:07,050
feedback at gain nodes.

431
00:23:07,050 --> 00:23:11,620
So the delay node delays the
signal and sends it to the wet

432
00:23:11,620 --> 00:23:15,380
level gain node and the
feedback gain node.

433
00:23:15,380 --> 00:23:18,990
And the feedback sends back a
diminished version of the

434
00:23:18,990 --> 00:23:23,040
signal to the delay node, which
then delays it again,

435
00:23:23,040 --> 00:23:25,260
and we have a feedback loop.

436
00:23:25,260 --> 00:23:28,925
And the wet level node lets us
change how much of the delayed

437
00:23:28,925 --> 00:23:31,270
signal we want to send
to the output and mix

438
00:23:31,270 --> 00:23:34,140
with the clean signal.

439
00:23:34,140 --> 00:23:37,640
And the codes that implement
this, looks like this, and I

440
00:23:37,640 --> 00:23:39,690
don't expect you to
see what it says.

441
00:23:39,690 --> 00:23:43,940
But let's just say that it's
really condensed considering

442
00:23:43,940 --> 00:23:47,260
all the work that is being
done behind the scenes.

443
00:23:47,260 --> 00:23:50,380
So we simply create the nodes
and then set the values for

444
00:23:50,380 --> 00:23:53,440
the delay and feedback that we
want, and then we make sure

445
00:23:53,440 --> 00:23:55,010
that the routing looks
as it does in the

446
00:23:55,010 --> 00:23:56,690
model and that's it.

447
00:23:56,690 --> 00:23:59,540
No math needed.

448
00:23:59,540 --> 00:24:04,235
And the results sounds
like this.

449
00:24:04,235 --> 00:24:05,600
[GUITAR NOTE]

450
00:24:05,600 --> 00:24:06,780
OSKAR ERIKSSON: That's dry.

451
00:24:06,780 --> 00:24:07,590
[GUITAR NOTE]

452
00:24:07,590 --> 00:24:10,418
OSKAR ERIKSSON: And that's
with the delay.

453
00:24:10,418 --> 00:24:12,680
[GUITAR NOTE]

454
00:24:12,680 --> 00:24:14,350
OSKAR ERIKSSON: And it's a
really big room so I didn't

455
00:24:14,350 --> 00:24:16,570
really have a difference,
but the second

456
00:24:16,570 --> 00:24:19,210
one is a bit delayed.

457
00:24:19,210 --> 00:24:22,220
And this is a lengthy article
that I wrote on the subject

458
00:24:22,220 --> 00:24:25,940
that you can read at
age HTML5Rocks.com.

459
00:24:25,940 --> 00:24:29,620
But if you felt this was way too
much work, we release the

460
00:24:29,620 --> 00:24:33,300
effects that we use in
JAM as tuna JS for

461
00:24:33,300 --> 00:24:35,420
your comfort and pleasure.

462
00:24:35,420 --> 00:24:38,110
So please feel free to
hack away and give

463
00:24:38,110 --> 00:24:39,380
us more pulled requests.

464
00:24:39,380 --> 00:24:41,410
There are still many effects
that need to be made.

465
00:24:41,410 --> 00:24:45,080

466
00:24:45,080 --> 00:24:48,810
And that's what I have to say.

467
00:24:48,810 --> 00:24:50,670
XAVIER BARRADE: So JAM was a
really interesting project to

468
00:24:50,670 --> 00:24:53,430
work on because when we started,
we were excited by

469
00:24:53,430 --> 00:24:57,690
Websockets, by Google Compute,
by Go, by Web Audio.

470
00:24:57,690 --> 00:25:02,230
And we already had people we
managed to take demo and make

471
00:25:02,230 --> 00:25:05,270
it something that lots of people
used and connected

472
00:25:05,270 --> 00:25:09,460
over, and used the web in
a pretty different way.

473
00:25:09,460 --> 00:25:12,170
So to give you an idea, we had
more than 3 million visits

474
00:25:12,170 --> 00:25:17,070
with an average visit duration
of more than 10 minutes, and

475
00:25:17,070 --> 00:25:19,660
we would like to conclude by
showing you a little movie we

476
00:25:19,660 --> 00:25:22,600
did when we launched
the application.

477
00:25:22,600 --> 00:25:25,410
And it features the most
famous musician on the

478
00:25:25,410 --> 00:25:29,578
internet, which is
Keyboard Cat.

479
00:25:29,578 --> 00:26:23,448
[MUSIC PLAYING]

480
00:26:23,448 --> 00:26:28,500

481
00:26:28,500 --> 00:26:29,785
XAVIER BARRADE: Thank you.

482
00:26:29,785 --> 00:26:33,590

483
00:26:33,590 --> 00:26:36,475
So if anybody has any questions,
you can go to the

484
00:26:36,475 --> 00:26:37,725
two microphones on the sides.

485
00:26:37,725 --> 00:26:43,760

486
00:26:43,760 --> 00:26:44,700
AUDIENCE: Hi, guys.

487
00:26:44,700 --> 00:26:45,710
Is this on?

488
00:26:45,710 --> 00:26:46,710
XAVIER BARRADE: Yes.

489
00:26:46,710 --> 00:26:48,510
AUDIENCE: Thank you for that
really, really amazing

490
00:26:48,510 --> 00:26:51,340
application.

491
00:26:51,340 --> 00:26:55,670
The biggest question mark in
my mind are custom nodes in

492
00:26:55,670 --> 00:26:56,770
the Web Audio API.

493
00:26:56,770 --> 00:26:59,880
Now, I've seen it before,
including at last year's

494
00:26:59,880 --> 00:27:04,260
Google I/O, but it seems like
that's a really deep down

495
00:27:04,260 --> 00:27:06,610
magic kind of black box thing.

496
00:27:06,610 --> 00:27:09,820
How do I learn how
to start becoming

497
00:27:09,820 --> 00:27:11,510
proficient with those?

498
00:27:11,510 --> 00:27:14,360
OSKAR ERIKSSON: That's a
really good question.

499
00:27:14,360 --> 00:27:19,160
Well, as you said, it is a
black box and the audio

500
00:27:19,160 --> 00:27:21,500
communities--

501
00:27:21,500 --> 00:27:25,500
it's very technical, but there
is this one site, which I

502
00:27:25,500 --> 00:27:29,360
can't remember from my head that
has a lot of algorithms

503
00:27:29,360 --> 00:27:32,650
and structures ready to use.

504
00:27:32,650 --> 00:27:37,070
And if you follow me
on Google+, I will

505
00:27:37,070 --> 00:27:39,140
post a link for you.

506
00:27:39,140 --> 00:27:42,390
That's a good way to start.

507
00:27:42,390 --> 00:27:45,360
And I can post some books
too, I think.

508
00:27:45,360 --> 00:27:51,820
So that's the best I can
give you right now.

509
00:27:51,820 --> 00:27:53,760
AUDIENCE: Hi, I'm
James Hardik.

510
00:27:53,760 --> 00:27:57,040
I had a question, how long or
how often, I guess, are you

511
00:27:57,040 --> 00:27:59,070
doing the time syncing.

512
00:27:59,070 --> 00:28:00,950
I don't know if you
mentioned that.

513
00:28:00,950 --> 00:28:03,250
But if you do it just at the
beginning and for some reason,

514
00:28:03,250 --> 00:28:06,650
the latency of a person's
internet connection changes,

515
00:28:06,650 --> 00:28:09,480
how often do you do that and
keep that kind of up to date

516
00:28:09,480 --> 00:28:10,780
per client?

517
00:28:10,780 --> 00:28:13,530
OSKAR ERIKSSON: We actually
do two rounds of pings.

518
00:28:13,530 --> 00:28:17,090
First when we join a session,
and that has nothing to do

519
00:28:17,090 --> 00:28:19,780
with the syncing of the clients,
just rather selecting

520
00:28:19,780 --> 00:28:20,930
the servers.

521
00:28:20,930 --> 00:28:24,610
And then we do it again to
actually sync the clients, and

522
00:28:24,610 --> 00:28:27,120
we do this just once.

523
00:28:27,120 --> 00:28:30,100
But every time someone leaves or
joins the jam, and then we

524
00:28:30,100 --> 00:28:31,950
do it for all of the clients.

525
00:28:31,950 --> 00:28:36,330
So we just assume that the
latency will be consistent as

526
00:28:36,330 --> 00:28:39,370
long as the same players are in
the jam, and this actually

527
00:28:39,370 --> 00:28:41,930
works out rather well.

528
00:28:41,930 --> 00:28:46,280
We tested us into
that assumption.

529
00:28:46,280 --> 00:28:47,530
AUDIENCE: Thank you.

530
00:28:47,530 --> 00:28:50,245

531
00:28:50,245 --> 00:28:53,540
OSKAR ERIKSSON: Did I do that?

532
00:28:53,540 --> 00:28:55,120
XAVIER BARRADE: Yeah,
I took a screenshot.

533
00:28:55,120 --> 00:28:58,340
So if there's not any more
questions, we are going to put

534
00:28:58,340 --> 00:29:01,890
a shortcut on the screen and
the three first people who

535
00:29:01,890 --> 00:29:03,410
enter the shortcut
will be able to

536
00:29:03,410 --> 00:29:04,670
jam live on the screen.

537
00:29:04,670 --> 00:29:07,760

538
00:29:07,760 --> 00:29:09,955
If I can.

539
00:29:09,955 --> 00:29:11,710
The [? bell ?] is
not going up.

540
00:29:11,710 --> 00:29:15,990

541
00:29:15,990 --> 00:29:17,540
OSKAR ERIKSSON: So only people
with really good

542
00:29:17,540 --> 00:29:18,590
eyesight can jam.

543
00:29:18,590 --> 00:29:20,801
XAVIER BARRADE: Interesting.

544
00:29:20,801 --> 00:29:22,051
I know.

545
00:29:22,051 --> 00:29:26,360

546
00:29:26,360 --> 00:29:31,160
So this is the screenshot
I just--

547
00:29:31,160 --> 00:29:33,530
Now that I closed the website,
I have to take a new one.

548
00:29:33,530 --> 00:29:34,780
Sorry, guys.

549
00:29:34,780 --> 00:29:39,200

550
00:29:39,200 --> 00:29:41,350
OSKAR ERIKSSON: So
you can still ask

551
00:29:41,350 --> 00:29:42,510
questions if you want.

552
00:29:42,510 --> 00:29:44,903
XAVIER BARRADE: Yeah, if you
have more questions while

553
00:29:44,903 --> 00:29:46,153
[INAUDIBLE].

554
00:29:46,153 --> 00:30:09,630

555
00:30:09,630 --> 00:30:10,950
Ah, someone is joining
over there.

556
00:30:10,950 --> 00:30:14,640

557
00:30:14,640 --> 00:30:16,400
OK, so I'm going to
zoom that in.

558
00:30:16,400 --> 00:30:19,800

559
00:30:19,800 --> 00:30:21,520
It's case sensitive, yes.

560
00:30:21,520 --> 00:30:22,770
Extra challenge.

561
00:30:22,770 --> 00:30:31,120

562
00:30:31,120 --> 00:30:34,910
So it's only going to work
if you have a laptop.

563
00:30:34,910 --> 00:30:38,124
Web Audio is not yet activated
on mobile.

564
00:30:38,124 --> 00:30:40,410
AUDIENCE: [INAUDIBLE].

565
00:30:40,410 --> 00:30:42,600
XAVIER BARRADE: Yeah, but we
haven't optimized the website

566
00:30:42,600 --> 00:30:45,090
for mobile yet, so it's going
to work better on laptop.

567
00:30:45,090 --> 00:30:49,760
OSKAR ERIKSSON: Give it
a try, you never know.

568
00:30:49,760 --> 00:30:51,140
XAVIER BARRADE: Yes.

569
00:30:51,140 --> 00:30:53,930
AUDIENCE: You went through
before how the sampling you

570
00:30:53,930 --> 00:30:55,940
needed to do for each of
these, you said 19

571
00:30:55,940 --> 00:30:58,700
instruments.

572
00:30:58,700 --> 00:31:02,390
What would the process be like
at some point in the future.

573
00:31:02,390 --> 00:31:05,140
Obviously, not a feature you
have right now, but at some

574
00:31:05,140 --> 00:31:09,290
point in the future, where you
might allow somebody to

575
00:31:09,290 --> 00:31:11,960
attempt to get a new instrument
into your system.

576
00:31:11,960 --> 00:31:15,410
What kinds of things would they
need to upload in order

577
00:31:15,410 --> 00:31:18,910
for that to be a possibility?

578
00:31:18,910 --> 00:31:19,490
XAVIER BARRADE: This
is one of--

579
00:31:19,490 --> 00:31:24,650
When we work on this project,
we had lots of things we--

580
00:31:24,650 --> 00:31:27,300
it was an experimental project
so there was lots of things we

581
00:31:27,300 --> 00:31:30,820
could have done or not, and this
is one of the things that

582
00:31:30,820 --> 00:31:32,410
we might investigate.

583
00:31:32,410 --> 00:31:34,900
So if you follow me on Google+,
if you'll search for

584
00:31:34,900 --> 00:31:37,800
Xavier Barrade on Google+, I can
come back to you on this

585
00:31:37,800 --> 00:31:39,480
question later.

586
00:31:39,480 --> 00:31:40,450
Thank you.

587
00:31:40,450 --> 00:31:44,420
AUDIENCE: Second, short--

588
00:31:44,420 --> 00:31:47,540
I was working on a similar
project but not with musical

589
00:31:47,540 --> 00:31:49,410
instruments, actually attempting
to do voice

590
00:31:49,410 --> 00:31:51,770
recording in a group.

591
00:31:51,770 --> 00:31:57,510
And of course, doing that we
can't rely on MIDI, to resolve

592
00:31:57,510 --> 00:31:59,830
the latency issues.

593
00:31:59,830 --> 00:32:03,000
The attempt was to actually do
dramatic recording with people

594
00:32:03,000 --> 00:32:06,050
hearing each other in remote
locations as opposed to

595
00:32:06,050 --> 00:32:07,990
everybody recording individually
not getting to

596
00:32:07,990 --> 00:32:11,770
hear each other when they
were doing their pieces.

597
00:32:11,770 --> 00:32:17,050
Did you try any other ways of
dealing with the latency, even

598
00:32:17,050 --> 00:32:21,070
ones you abandoned that might
help people trying to resolve

599
00:32:21,070 --> 00:32:23,190
the problem in other ways?

600
00:32:23,190 --> 00:32:26,720
OSKAR ERIKSSON: Well, actually,
when singing, it's

601
00:32:26,720 --> 00:32:28,090
even more--

602
00:32:28,090 --> 00:32:35,100
latency is even a bigger issue,
and I don't want to say

603
00:32:35,100 --> 00:32:40,470
it's not possible, but I would
say it's really hard today.

604
00:32:40,470 --> 00:32:44,510
I don't really have any
great ideas for you.

605
00:32:44,510 --> 00:32:48,740
It's a really good problem, and
a really good question.

606
00:32:48,740 --> 00:32:52,658
So let me know if you come
up with anything.

607
00:32:52,658 --> 00:32:56,795
XAVIER BARRADE: OK, so I think
the band is ready.

608
00:32:56,795 --> 00:32:58,615
Let's go.

609
00:32:58,615 --> 00:33:17,300
[MUSIC PLAYING]

610
00:33:17,300 --> 00:33:18,550
XAVIER BARRADE: [INAUDIBLE]

611
00:33:18,550 --> 00:33:20,840

612
00:33:20,840 --> 00:33:21,095
guitar.

613
00:33:21,095 --> 00:34:00,840
[MUSIC PLAYING]

614
00:34:00,840 --> 00:34:02,950
OSKAR ERIKSSON: Yeah, I would
pay to hear that.

615
00:34:02,950 --> 00:34:03,870
That's a good one.

616
00:34:03,870 --> 00:34:04,710
XAVIER BARRADE: That's
pretty good.

617
00:34:04,710 --> 00:34:07,220
So as you see, even in easy
mode, it kind of requires a

618
00:34:07,220 --> 00:34:09,850
bit of skill to come to
a nice piece of music.

619
00:34:09,850 --> 00:34:13,870

620
00:34:13,870 --> 00:34:14,690
So thank you, guys.

621
00:34:14,690 --> 00:34:17,199
I think we're done.

622
00:34:17,199 --> 00:34:17,889
Yes?

623
00:34:17,889 --> 00:34:21,370
AUDIENCE: Question, did you
check out Justin Frankel, the

624
00:34:21,370 --> 00:34:22,510
guy who did Winamp?

625
00:34:22,510 --> 00:34:26,800
He made a collaboration
program where it puts

626
00:34:26,800 --> 00:34:31,960
everybody like a bar ahead so
that you can jam in a groove

627
00:34:31,960 --> 00:34:35,310
instead of repeat like that so
you're actually always playing

628
00:34:35,310 --> 00:34:37,909
in real time with the music, so
is your latency for what's

629
00:34:37,909 --> 00:34:39,320
being recorded.

630
00:34:39,320 --> 00:34:43,860
But what you hear is everybody
else's previous bar or like

631
00:34:43,860 --> 00:34:45,540
four bars so it's
configurable.

632
00:34:45,540 --> 00:34:47,080
So I don't know if
you saw that?

633
00:34:47,080 --> 00:34:48,739
From your expression,
probably not, but

634
00:34:48,739 --> 00:34:51,060
that's also a cool approach.

635
00:34:51,060 --> 00:34:53,400
OSKAR ERIKSSON: That sounds
hard to play a

636
00:34:53,400 --> 00:34:55,330
real song though .

637
00:34:55,330 --> 00:34:57,840
If you have to play
one bar ahead.

638
00:34:57,840 --> 00:34:59,090
AUDIENCE: [INAUDIBLE].

639
00:34:59,090 --> 00:35:01,580

640
00:35:01,580 --> 00:35:04,260
OSKAR ERIKSSON: Cool.

641
00:35:04,260 --> 00:35:05,220
So thank you.

642
00:35:05,220 --> 00:35:06,470
Thank you very much.

643
00:35:06,470 --> 00:35:09,160

